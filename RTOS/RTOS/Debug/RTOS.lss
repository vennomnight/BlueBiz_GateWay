
RTOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000142  00800100  00005646  000056da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005646  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000bdd  00800242  00800242  0000581c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000581c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005878  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ae0  00000000  00000000  000058b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ecd2  00000000  00000000  00006398  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003a5f  00000000  00000000  0001506a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006369  00000000  00000000  00018ac9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001d80  00000000  00000000  0001ee34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003e02  00000000  00000000  00020bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009cb6  00000000  00000000  000249b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000be8  00000000  00000000  0002e66c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	48 c5       	rjmp	.+2704   	; 0xa92 <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 bc 0a 	jmp	0x1578	; 0x1578 <__vector_1>
       8:	63 c5       	rjmp	.+2758   	; 0xad0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c5       	rjmp	.+2754   	; 0xad0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c5       	rjmp	.+2750   	; 0xad0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c5       	rjmp	.+2746   	; 0xad0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c5       	rjmp	.+2742   	; 0xad0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c5       	rjmp	.+2738   	; 0xad0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c5       	rjmp	.+2734   	; 0xad0 <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 c4 0b 	jmp	0x1788	; 0x1788 <__vector_9>
      28:	53 c5       	rjmp	.+2726   	; 0xad0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c5       	rjmp	.+2722   	; 0xad0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 67 1e 	jmp	0x3cce	; 0x3cce <__vector_12>
      34:	4d c5       	rjmp	.+2714   	; 0xad0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c5       	rjmp	.+2710   	; 0xad0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__vector_15>
      40:	47 c5       	rjmp	.+2702   	; 0xad0 <__bad_interrupt>
      42:	00 00       	nop
      44:	45 c5       	rjmp	.+2698   	; 0xad0 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 2b 0a 	jmp	0x1456	; 0x1456 <__vector_18>
      4c:	41 c5       	rjmp	.+2690   	; 0xad0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c5       	rjmp	.+2686   	; 0xad0 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 ec 0a 	jmp	0x15d8	; 0x15d8 <__vector_21>
      58:	3b c5       	rjmp	.+2678   	; 0xad0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	39 c5       	rjmp	.+2674   	; 0xad0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	37 c5       	rjmp	.+2670   	; 0xad0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c5       	rjmp	.+2666   	; 0xad0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c5       	rjmp	.+2662   	; 0xad0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c5       	rjmp	.+2658   	; 0xad0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	0c 94 8c 0a 	jmp	0x1518	; 0x1518 <__vector_28>
      74:	2d c5       	rjmp	.+2650   	; 0xad0 <__bad_interrupt>
      76:	00 00       	nop
      78:	0c 94 5b 0a 	jmp	0x14b6	; 0x14b6 <__vector_30>
      7c:	29 c5       	rjmp	.+2642   	; 0xad0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	27 c5       	rjmp	.+2638   	; 0xad0 <__bad_interrupt>
      82:	00 00       	nop
      84:	25 c5       	rjmp	.+2634   	; 0xad0 <__bad_interrupt>
      86:	00 00       	nop
      88:	23 c5       	rjmp	.+2630   	; 0xad0 <__bad_interrupt>
	...

0000008c <__trampolines_end>:
      8c:	00 00       	nop
      8e:	c8 42       	sbci	r28, 0x28	; 40
      90:	ae c7       	rjmp	.+3932   	; 0xfee <_ZN22DFRobotHighTemperature15readTemperatureEj+0x16e>
      92:	c8 42       	sbci	r28, 0x28	; 40
      94:	5c 8f       	std	Y+28, r21	; 0x1c
      96:	c9 42       	sbci	r28, 0x29	; 41
      98:	0a 57       	subi	r16, 0x7A	; 122
      9a:	ca 42       	sbci	r28, 0x2A	; 42
      9c:	b8 1e       	adc	r11, r24
      9e:	cb 42       	sbci	r28, 0x2B	; 43
      a0:	66 e6       	ldi	r22, 0x66	; 102
      a2:	cb 42       	sbci	r28, 0x2B	; 43
      a4:	14 ae       	std	Z+60, r1	; 0x3c
      a6:	cc 42       	sbci	r28, 0x2C	; 44
      a8:	c3 75       	andi	r28, 0x53	; 83
      aa:	cd 42       	sbci	r28, 0x2D	; 45
      ac:	71 3d       	cpi	r23, 0xD1	; 209
      ae:	ce 42       	sbci	r28, 0x2E	; 46
      b0:	1f 05       	cpc	r17, r15
      b2:	cf 42       	sbci	r28, 0x2F	; 47
      b4:	cd cc       	rjmp	.-1638   	; 0xfffffa50 <__eeprom_end+0xff7efa50>
      b6:	cf 42       	sbci	r28, 0x2F	; 47
      b8:	7b 94       	des	7
      ba:	d0 42       	sbci	r29, 0x20	; 32
      bc:	29 5c       	subi	r18, 0xC9	; 201
      be:	d1 42       	sbci	r29, 0x21	; 33
      c0:	d7 23       	and	r29, r23
      c2:	d2 42       	sbci	r29, 0x22	; 34
      c4:	85 eb       	ldi	r24, 0xB5	; 181
      c6:	d2 42       	sbci	r29, 0x22	; 34
      c8:	33 b3       	in	r19, 0x13	; 19
      ca:	d3 42       	sbci	r29, 0x23	; 35
      cc:	e1 7a       	andi	r30, 0xA1	; 161
      ce:	d4 42       	sbci	r29, 0x24	; 36
      d0:	8f 42       	sbci	r24, 0x2F	; 47
      d2:	d5 42       	sbci	r29, 0x25	; 37
      d4:	3d 0a       	sbc	r3, r29
      d6:	d6 42       	sbci	r29, 0x26	; 38
      d8:	cd cc       	rjmp	.-1638   	; 0xfffffa74 <__eeprom_end+0xff7efa74>
      da:	d6 42       	sbci	r29, 0x26	; 38
      dc:	7b 94       	des	7
      de:	d7 42       	sbci	r29, 0x27	; 39
      e0:	29 5c       	subi	r18, 0xC9	; 201
      e2:	d8 42       	sbci	r29, 0x28	; 40
      e4:	d7 23       	and	r29, r23
      e6:	d9 42       	sbci	r29, 0x29	; 41
      e8:	85 eb       	ldi	r24, 0xB5	; 181
      ea:	d9 42       	sbci	r29, 0x29	; 41
      ec:	33 b3       	in	r19, 0x13	; 19
      ee:	da 42       	sbci	r29, 0x2A	; 42
      f0:	c3 75       	andi	r28, 0x53	; 83
      f2:	db 42       	sbci	r29, 0x2B	; 43
      f4:	71 3d       	cpi	r23, 0xD1	; 209
      f6:	dc 42       	sbci	r29, 0x2C	; 44
      f8:	1f 05       	cpc	r17, r15
      fa:	dd 42       	sbci	r29, 0x2D	; 45
      fc:	cd cc       	rjmp	.-1638   	; 0xfffffa98 <__eeprom_end+0xff7efa98>
      fe:	dd 42       	sbci	r29, 0x2D	; 45
     100:	7b 94       	des	7
     102:	de 42       	sbci	r29, 0x2E	; 46
     104:	0a 57       	subi	r16, 0x7A	; 122
     106:	df 42       	sbci	r29, 0x2F	; 47
     108:	b8 1e       	adc	r11, r24
     10a:	e0 42       	sbci	r30, 0x20	; 32
     10c:	66 e6       	ldi	r22, 0x66	; 102
     10e:	e0 42       	sbci	r30, 0x20	; 32
     110:	f6 a8       	ldd	r15, Z+54	; 0x36
     112:	e1 42       	sbci	r30, 0x21	; 33
     114:	a4 70       	andi	r26, 0x04	; 4
     116:	e2 42       	sbci	r30, 0x22	; 34
     118:	52 38       	cpi	r21, 0x82	; 130
     11a:	e3 42       	sbci	r30, 0x23	; 35
     11c:	00 00       	nop
     11e:	e4 42       	sbci	r30, 0x24	; 36
     120:	8f c2       	rjmp	.+1310   	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
     122:	e4 42       	sbci	r30, 0x24	; 36
     124:	3d 8a       	std	Y+21, r3	; 0x15
     126:	e5 42       	sbci	r30, 0x25	; 37
     128:	cd 4c       	sbci	r28, 0xCD	; 205
     12a:	e6 42       	sbci	r30, 0x26	; 38
     12c:	7b 14       	cp	r7, r11
     12e:	e7 42       	sbci	r30, 0x27	; 39
     130:	29 dc       	rcall	.-1966   	; 0xfffff984 <__eeprom_end+0xff7ef984>
     132:	e7 42       	sbci	r30, 0x27	; 39
     134:	b8 9e       	mul	r11, r24
     136:	e8 42       	sbci	r30, 0x28	; 40
     138:	66 66       	ori	r22, 0x66	; 102
     13a:	e9 42       	sbci	r30, 0x29	; 41
     13c:	f6 28       	or	r15, r6
     13e:	ea 42       	sbci	r30, 0x2A	; 42
     140:	a4 f0       	brlt	.+40     	; 0x16a <__trampolines_end+0xde>
     142:	ea 42       	sbci	r30, 0x2A	; 42
     144:	52 b8       	out	0x02, r5	; 2
     146:	eb 42       	sbci	r30, 0x2B	; 43
     148:	e1 7a       	andi	r30, 0xA1	; 161
     14a:	ec 42       	sbci	r30, 0x2C	; 44
     14c:	8f 42       	sbci	r24, 0x2F	; 47
     14e:	ed 42       	sbci	r30, 0x2D	; 45
     150:	1f 05       	cpc	r17, r15
     152:	ee 42       	sbci	r30, 0x2E	; 46
     154:	cd cc       	rjmp	.-1638   	; 0xfffffaf0 <__eeprom_end+0xff7efaf0>
     156:	ee 42       	sbci	r30, 0x2E	; 46
     158:	5c 8f       	std	Y+28, r21	; 0x1c
     15a:	ef 42       	sbci	r30, 0x2F	; 47
     15c:	0a 57       	subi	r16, 0x7A	; 122
     15e:	f0 42       	sbci	r31, 0x20	; 32
     160:	9a 19       	sub	r25, r10
     162:	f1 42       	sbci	r31, 0x21	; 33
     164:	48 e1       	ldi	r20, 0x18	; 24
     166:	f1 42       	sbci	r31, 0x21	; 33
     168:	d7 a3       	std	Z+39, r29	; 0x27
     16a:	f2 42       	sbci	r31, 0x22	; 34
     16c:	85 6b       	ori	r24, 0xB5	; 181
     16e:	f3 42       	sbci	r31, 0x23	; 35
     170:	14 2e       	mov	r1, r20
     172:	f4 42       	sbci	r31, 0x24	; 36
     174:	a4 f0       	brlt	.+40     	; 0x19e <__trampolines_end+0x112>
     176:	f4 42       	sbci	r31, 0x24	; 36
     178:	52 b8       	out	0x02, r5	; 2
     17a:	f5 42       	sbci	r31, 0x25	; 37
     17c:	e1 7a       	andi	r30, 0xA1	; 161
     17e:	f6 42       	sbci	r31, 0x26	; 38
     180:	8f 42       	sbci	r24, 0x2F	; 47
     182:	f7 42       	sbci	r31, 0x27	; 39
     184:	1f 05       	cpc	r17, r15
     186:	f8 42       	sbci	r31, 0x28	; 40
     188:	ae c7       	rjmp	.+3932   	; 0x10e6 <__vector_15+0x68>
     18a:	f8 42       	sbci	r31, 0x28	; 40
     18c:	5c 8f       	std	Y+28, r21	; 0x1c
     18e:	f9 42       	sbci	r31, 0x29	; 41
     190:	ec 51       	subi	r30, 0x1C	; 28
     192:	fa 42       	sbci	r31, 0x2A	; 42
     194:	7b 14       	cp	r7, r11
     196:	fb 42       	sbci	r31, 0x2B	; 43
     198:	29 dc       	rcall	.-1966   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
     19a:	fb 42       	sbci	r31, 0x2B	; 43
     19c:	b8 9e       	mul	r11, r24
     19e:	fc 42       	sbci	r31, 0x2C	; 44
     1a0:	48 61       	ori	r20, 0x18	; 24
     1a2:	fd 42       	sbci	r31, 0x2D	; 45
     1a4:	f6 28       	or	r15, r6
     1a6:	fe 42       	sbci	r31, 0x2E	; 46
     1a8:	85 eb       	ldi	r24, 0xB5	; 181
     1aa:	fe 42       	sbci	r31, 0x2E	; 46
     1ac:	14 ae       	std	Z+60, r1	; 0x3c
     1ae:	ff 42       	sbci	r31, 0x2F	; 47
     1b0:	52 38       	cpi	r21, 0x82	; 130
     1b2:	00 43       	sbci	r16, 0x30	; 48
     1b4:	29 9c       	mul	r2, r9
     1b6:	00 43       	sbci	r16, 0x30	; 48
     1b8:	71 fd       	sbrc	r23, 1
     1ba:	00 43       	sbci	r16, 0x30	; 48
     1bc:	b8 5e       	subi	r27, 0xE8	; 232
     1be:	01 43       	sbci	r16, 0x31	; 49
     1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <__trampolines_end+0x136>
     1c2:	01 43       	sbci	r16, 0x31	; 49
     1c4:	48 21       	and	r20, r8
     1c6:	02 43       	sbci	r16, 0x32	; 50
     1c8:	1f 85       	ldd	r17, Y+15	; 0x0f
     1ca:	02 43       	sbci	r16, 0x32	; 50
     1cc:	66 e6       	ldi	r22, 0x66	; 102
     1ce:	02 43       	sbci	r16, 0x32	; 50
     1d0:	ae 47       	sbci	r26, 0x7E	; 126
     1d2:	03 43       	sbci	r16, 0x33	; 51
     1d4:	f6 a8       	ldd	r15, Z+54	; 0x36
     1d6:	03 43       	sbci	r16, 0x33	; 51
     1d8:	3d 0a       	sbc	r3, r29
     1da:	04 43       	sbci	r16, 0x34	; 52
     1dc:	85 6b       	ori	r24, 0xB5	; 181
     1de:	04 43       	sbci	r16, 0x34	; 52
     1e0:	cd cc       	rjmp	.-1638   	; 0xfffffb7c <__eeprom_end+0xff7efb7c>
     1e2:	04 43       	sbci	r16, 0x34	; 52
     1e4:	14 2e       	mov	r1, r20
     1e6:	05 43       	sbci	r16, 0x35	; 53
     1e8:	ec 91       	ld	r30, X
     1ea:	05 43       	sbci	r16, 0x35	; 53
     1ec:	33 f3       	brvs	.-52     	; 0x1ba <__trampolines_end+0x12e>
     1ee:	05 43       	sbci	r16, 0x35	; 53
     1f0:	7b 54       	subi	r23, 0x4B	; 75
     1f2:	06 43       	sbci	r16, 0x36	; 54
     1f4:	c3 b5       	in	r28, 0x23	; 35
     1f6:	06 43       	sbci	r16, 0x36	; 54
     1f8:	0a 17       	cp	r16, r26
     1fa:	07 43       	sbci	r16, 0x37	; 55
     1fc:	52 78       	andi	r21, 0x82	; 130
     1fe:	07 43       	sbci	r16, 0x37	; 55
     200:	9a d9       	rcall	.-3276   	; 0xfffff536 <__eeprom_end+0xff7ef536>
     202:	07 43       	sbci	r16, 0x37	; 55
     204:	e1 3a       	cpi	r30, 0xA1	; 161
     206:	08 43       	sbci	r16, 0x38	; 56
     208:	29 9c       	mul	r2, r9
     20a:	08 43       	sbci	r16, 0x38	; 56
     20c:	71 fd       	sbrc	r23, 1
     20e:	08 43       	sbci	r16, 0x38	; 56
     210:	b8 5e       	subi	r27, 0xE8	; 232
     212:	09 43       	sbci	r16, 0x39	; 57
     214:	00 c0       	rjmp	.+0      	; 0x216 <__trampolines_end+0x18a>
     216:	09 43       	sbci	r16, 0x39	; 57
     218:	48 21       	and	r20, r8
     21a:	0a 43       	sbci	r16, 0x3A	; 58
     21c:	8f 82       	std	Y+7, r8	; 0x07
     21e:	0a 43       	sbci	r16, 0x3A	; 58
     220:	48 e1       	ldi	r20, 0x18	; 24
     222:	0a 43       	sbci	r16, 0x3A	; 58
     224:	8f 42       	sbci	r24, 0x2F	; 47
     226:	0b 43       	sbci	r16, 0x3B	; 59
     228:	d7 a3       	std	Z+39, r29	; 0x27
     22a:	0b 43       	sbci	r16, 0x3B	; 59
     22c:	1f 05       	cpc	r17, r15
     22e:	0c 43       	sbci	r16, 0x3C	; 60
     230:	66 66       	ori	r22, 0x66	; 102
     232:	0c 43       	sbci	r16, 0x3C	; 60
     234:	ae c7       	rjmp	.+3932   	; 0x1192 <_ZN13Char_LCD2004A8Data_setEc+0x1e>
     236:	0c 43       	sbci	r16, 0x3C	; 60
     238:	f6 28       	or	r15, r6
     23a:	0d 43       	sbci	r16, 0x3D	; 61
     23c:	3d 8a       	std	Y+21, r3	; 0x15
     23e:	0d 43       	sbci	r16, 0x3D	; 61
     240:	f6 e8       	ldi	r31, 0x86	; 134
     242:	0d 43       	sbci	r16, 0x3D	; 61
     244:	3d 4a       	sbci	r19, 0xAD	; 173
     246:	0e 43       	sbci	r16, 0x3E	; 62
     248:	85 ab       	std	Z+53, r24	; 0x35
     24a:	0e 43       	sbci	r16, 0x3E	; 62
     24c:	cd 0c       	add	r12, r13
     24e:	0f 43       	sbci	r16, 0x3F	; 63
     250:	14 6e       	ori	r17, 0xE4	; 228
     252:	0f 43       	sbci	r16, 0x3F	; 63
     254:	cd cc       	rjmp	.-1638   	; 0xfffffbf0 <__eeprom_end+0xff7efbf0>
     256:	0f 43       	sbci	r16, 0x3F	; 63
     258:	14 2e       	mov	r1, r20
     25a:	10 43       	sbci	r17, 0x30	; 48
     25c:	5c 8f       	std	Y+28, r21	; 0x1c
     25e:	10 43       	sbci	r17, 0x30	; 48
     260:	a4 f0       	brlt	.+40     	; 0x28a <__trampolines_end+0x1fe>
     262:	10 43       	sbci	r17, 0x30	; 48
     264:	5c 4f       	sbci	r21, 0xFC	; 252
     266:	11 43       	sbci	r17, 0x31	; 49
     268:	a4 b0       	in	r10, 0x04	; 4
     26a:	11 43       	sbci	r17, 0x31	; 49
     26c:	ec 11       	cpse	r30, r12
     26e:	12 43       	sbci	r17, 0x32	; 50
     270:	a4 70       	andi	r26, 0x04	; 4
     272:	12 43       	sbci	r17, 0x32	; 50
     274:	ec d1       	rcall	.+984    	; 0x64e <__LOCK_REGION_LENGTH__+0x24e>
     276:	12 43       	sbci	r17, 0x32	; 50
     278:	33 33       	cpi	r19, 0x33	; 51
     27a:	13 43       	sbci	r17, 0x33	; 51
     27c:	ec 91       	ld	r30, X
     27e:	13 43       	sbci	r17, 0x33	; 51
     280:	33 f3       	brvs	.-52     	; 0x24e <__trampolines_end+0x1c2>
     282:	13 43       	sbci	r17, 0x33	; 51
     284:	7b 54       	subi	r23, 0x4B	; 75
     286:	14 43       	sbci	r17, 0x34	; 52
     288:	33 b3       	in	r19, 0x13	; 19
     28a:	14 43       	sbci	r17, 0x34	; 52
     28c:	7b 14       	cp	r7, r11
     28e:	15 43       	sbci	r17, 0x35	; 53
     290:	c3 75       	andi	r28, 0x53	; 83
     292:	15 43       	sbci	r17, 0x35	; 53
     294:	7b d4       	rcall	.+2294   	; 0xb8c <_Z13GetFucc10DataPcP17GetFunctionCode10Pi+0xe>
     296:	15 43       	sbci	r17, 0x35	; 53
     298:	c3 35       	cpi	r28, 0x53	; 83
     29a:	16 43       	sbci	r17, 0x36	; 54
     29c:	7b 94       	des	7
     29e:	16 43       	sbci	r17, 0x36	; 54
     2a0:	c3 f5       	brvc	.+112    	; 0x312 <__trampolines_end+0x286>
     2a2:	16 43       	sbci	r17, 0x36	; 54
     2a4:	7b 54       	subi	r23, 0x4B	; 75
     2a6:	17 43       	sbci	r17, 0x37	; 55
     2a8:	c3 b5       	in	r28, 0x23	; 35
     2aa:	17 43       	sbci	r17, 0x37	; 55
     2ac:	7b 14       	cp	r7, r11
     2ae:	18 43       	sbci	r17, 0x38	; 56
     2b0:	c3 75       	andi	r28, 0x53	; 83
     2b2:	18 43       	sbci	r17, 0x38	; 56
     2b4:	7b d4       	rcall	.+2294   	; 0xbac <_Z13GetFucc10DataPcP17GetFunctionCode10Pi+0x2e>
     2b6:	18 43       	sbci	r17, 0x38	; 56
     2b8:	c3 35       	cpi	r28, 0x53	; 83
     2ba:	19 43       	sbci	r17, 0x39	; 57
     2bc:	7b 94       	des	7
     2be:	19 43       	sbci	r17, 0x39	; 57
     2c0:	c3 f5       	brvc	.+112    	; 0x332 <__trampolines_end+0x2a6>
     2c2:	19 43       	sbci	r17, 0x39	; 57
     2c4:	7b 54       	subi	r23, 0x4B	; 75
     2c6:	1a 43       	sbci	r17, 0x3A	; 58
     2c8:	c3 b5       	in	r28, 0x23	; 35
     2ca:	1a 43       	sbci	r17, 0x3A	; 58
     2cc:	7b 14       	cp	r7, r11
     2ce:	1b 43       	sbci	r17, 0x3B	; 59
     2d0:	c3 75       	andi	r28, 0x53	; 83
     2d2:	1b 43       	sbci	r17, 0x3B	; 59
     2d4:	7b d4       	rcall	.+2294   	; 0xbcc <_Z13GetFucc10DataPcP17GetFunctionCode10Pi+0x4e>
     2d6:	1b 43       	sbci	r17, 0x3B	; 59
     2d8:	33 33       	cpi	r19, 0x33	; 51
     2da:	1c 43       	sbci	r17, 0x3C	; 60
     2dc:	7b 94       	des	7
     2de:	1c 43       	sbci	r17, 0x3C	; 60
     2e0:	33 f3       	brvs	.-52     	; 0x2ae <__trampolines_end+0x222>
     2e2:	1c 43       	sbci	r17, 0x3C	; 60
     2e4:	7b 54       	subi	r23, 0x4B	; 75
     2e6:	1d 43       	sbci	r17, 0x3D	; 61
     2e8:	33 b3       	in	r19, 0x13	; 19
     2ea:	1d 43       	sbci	r17, 0x3D	; 61
     2ec:	ec 11       	cpse	r30, r12
     2ee:	1e 43       	sbci	r17, 0x3E	; 62
     2f0:	33 73       	andi	r19, 0x33	; 51
     2f2:	1e 43       	sbci	r17, 0x3E	; 62
     2f4:	ec d1       	rcall	.+984    	; 0x6ce <_ZL8g_adTemp+0x2>
     2f6:	1e 43       	sbci	r17, 0x3E	; 62
     2f8:	a4 30       	cpi	r26, 0x04	; 4
     2fa:	1f 43       	sbci	r17, 0x3F	; 63
     2fc:	5c 8f       	std	Y+28, r21	; 0x1c
     2fe:	1f 43       	sbci	r17, 0x3F	; 63
     300:	a4 f0       	brlt	.+40     	; 0x32a <__trampolines_end+0x29e>
     302:	1f 43       	sbci	r17, 0x3F	; 63
     304:	5c 4f       	sbci	r21, 0xFC	; 252
     306:	20 43       	sbci	r18, 0x30	; 48
     308:	14 ae       	std	Z+60, r1	; 0x3c
     30a:	20 43       	sbci	r18, 0x30	; 48
     30c:	cd 0c       	add	r12, r13
     30e:	21 43       	sbci	r18, 0x31	; 49
     310:	14 6e       	ori	r17, 0xE4	; 228
     312:	21 43       	sbci	r18, 0x31	; 49
     314:	cd cc       	rjmp	.-1638   	; 0xfffffcb0 <__eeprom_end+0xff7efcb0>
     316:	21 43       	sbci	r18, 0x31	; 49
     318:	85 2b       	or	r24, r21
     31a:	22 43       	sbci	r18, 0x32	; 50
     31c:	3d 8a       	std	Y+21, r3	; 0x15
     31e:	22 43       	sbci	r18, 0x32	; 50
     320:	f6 e8       	ldi	r31, 0x86	; 134
     322:	22 43       	sbci	r18, 0x32	; 50
     324:	3d 4a       	sbci	r19, 0xAD	; 173
     326:	23 43       	sbci	r18, 0x33	; 51
     328:	f6 a8       	ldd	r15, Z+54	; 0x36
     32a:	23 43       	sbci	r18, 0x33	; 51
     32c:	ae 07       	cpc	r26, r30
     32e:	24 43       	sbci	r18, 0x34	; 52
     330:	66 66       	ori	r22, 0x66	; 102
     332:	24 43       	sbci	r18, 0x34	; 52
     334:	1f c5       	rjmp	.+2622   	; 0xd74 <_ZN12SerialBuffer10SerialReadEv+0x3e>
     336:	24 43       	sbci	r18, 0x34	; 52
     338:	d7 23       	and	r29, r23
     33a:	25 43       	sbci	r18, 0x35	; 53
     33c:	8f 82       	std	Y+7, r8	; 0x07
     33e:	25 43       	sbci	r18, 0x35	; 53
     340:	d7 e3       	ldi	r29, 0x37	; 55
     342:	25 43       	sbci	r18, 0x35	; 53
     344:	8f 42       	sbci	r24, 0x2F	; 47
     346:	26 43       	sbci	r18, 0x36	; 54
     348:	48 a1       	ldd	r20, Y+32	; 0x20
     34a:	26 43       	sbci	r18, 0x36	; 54
     34c:	00 00       	nop
     34e:	27 43       	sbci	r18, 0x37	; 55
     350:	b8 5e       	subi	r27, 0xE8	; 232
     352:	27 43       	sbci	r18, 0x37	; 55
     354:	71 bd       	out	0x21, r23	; 33
     356:	27 43       	sbci	r18, 0x37	; 55
     358:	29 1c       	adc	r2, r9
     35a:	28 43       	sbci	r18, 0x38	; 56
     35c:	e1 7a       	andi	r30, 0xA1	; 161
     35e:	28 43       	sbci	r18, 0x38	; 56
     360:	9a d9       	rcall	.-3276   	; 0xfffff696 <__eeprom_end+0xff7ef696>
     362:	28 43       	sbci	r18, 0x38	; 56
     364:	52 38       	cpi	r21, 0x82	; 130
     366:	29 43       	sbci	r18, 0x39	; 57
     368:	0a 97       	sbiw	r24, 0x0a	; 10
     36a:	29 43       	sbci	r18, 0x39	; 57
     36c:	c3 f5       	brvc	.+112    	; 0x3de <__trampolines_end+0x352>
     36e:	29 43       	sbci	r18, 0x39	; 57
     370:	7b 54       	subi	r23, 0x4B	; 75
     372:	2a 43       	sbci	r18, 0x3A	; 58
     374:	33 b3       	in	r19, 0x13	; 19
     376:	2a 43       	sbci	r18, 0x3A	; 58
     378:	ec 11       	cpse	r30, r12
     37a:	2b 43       	sbci	r18, 0x3B	; 59
     37c:	14 6e       	ori	r17, 0xE4	; 228
     37e:	2b 43       	sbci	r18, 0x3B	; 59
     380:	cd cc       	rjmp	.-1638   	; 0xfffffd1c <__eeprom_end+0xff7efd1c>
     382:	2b 43       	sbci	r18, 0x3B	; 59
     384:	85 2b       	or	r24, r21
     386:	2c 43       	sbci	r18, 0x3C	; 60
     388:	3d 8a       	std	Y+21, r3	; 0x15
     38a:	2c 43       	sbci	r18, 0x3C	; 60
     38c:	f6 e8       	ldi	r31, 0x86	; 134
     38e:	2c 43       	sbci	r18, 0x3C	; 60
     390:	ae 47       	sbci	r26, 0x7E	; 126
     392:	2d 43       	sbci	r18, 0x3D	; 61
     394:	66 a6       	std	Z+46, r6	; 0x2e
     396:	2d 43       	sbci	r18, 0x3D	; 61
     398:	1f 05       	cpc	r17, r15
     39a:	2e 43       	sbci	r18, 0x3E	; 62
     39c:	48 61       	ori	r20, 0x18	; 24
     39e:	2e 43       	sbci	r18, 0x3E	; 62
     3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <__trampolines_end+0x316>
     3a2:	2e 43       	sbci	r18, 0x3E	; 62
     3a4:	b8 1e       	adc	r11, r24
     3a6:	2f 43       	sbci	r18, 0x3F	; 63
     3a8:	71 7d       	andi	r23, 0xD1	; 209
     3aa:	2f 43       	sbci	r18, 0x3F	; 63
     3ac:	29 dc       	rcall	.-1966   	; 0xfffffc00 <__eeprom_end+0xff7efc00>
     3ae:	2f 43       	sbci	r18, 0x3F	; 63
     3b0:	52 38       	cpi	r21, 0x82	; 130
     3b2:	30 43       	sbci	r19, 0x30	; 48
     3b4:	0a 97       	sbiw	r24, 0x0a	; 10
     3b6:	30 43       	sbci	r19, 0x30	; 48
     3b8:	c3 f5       	brvc	.+112    	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     3ba:	30 43       	sbci	r19, 0x30	; 48
     3bc:	7b 54       	subi	r23, 0x4B	; 75
     3be:	31 43       	sbci	r19, 0x31	; 49
     3c0:	a4 b0       	in	r10, 0x04	; 4
     3c2:	31 43       	sbci	r19, 0x31	; 49
     3c4:	5c 0f       	add	r21, r28
     3c6:	32 43       	sbci	r19, 0x32	; 50
     3c8:	14 6e       	ori	r17, 0xE4	; 228
     3ca:	32 43       	sbci	r19, 0x32	; 50
     3cc:	3d ca       	rjmp	.-2950   	; 0xfffff848 <__eeprom_end+0xff7ef848>
     3ce:	32 43       	sbci	r19, 0x32	; 50
     3d0:	f6 28       	or	r15, r6
     3d2:	33 43       	sbci	r19, 0x33	; 51
     3d4:	ae 87       	std	Y+14, r26	; 0x0e
     3d6:	33 43       	sbci	r19, 0x33	; 51
     3d8:	d7 e3       	ldi	r29, 0x37	; 55
     3da:	33 43       	sbci	r19, 0x33	; 51
     3dc:	8f 42       	sbci	r24, 0x2F	; 47
     3de:	34 43       	sbci	r19, 0x34	; 52
     3e0:	48 a1       	ldd	r20, Y+32	; 0x20
     3e2:	34 43       	sbci	r19, 0x34	; 52
     3e4:	71 fd       	sbrc	r23, 1
     3e6:	34 43       	sbci	r19, 0x34	; 52
     3e8:	29 5c       	subi	r18, 0xC9	; 201
     3ea:	35 43       	sbci	r19, 0x35	; 53
     3ec:	52 b8       	out	0x02, r5	; 2
     3ee:	35 43       	sbci	r19, 0x35	; 53
     3f0:	0a 17       	cp	r16, r26
     3f2:	36 43       	sbci	r19, 0x36	; 54
     3f4:	c3 75       	andi	r28, 0x53	; 83
     3f6:	36 43       	sbci	r19, 0x36	; 54
     3f8:	ec d1       	rcall	.+984    	; 0x7d2 <_ZL8g_adTemp+0x106>
     3fa:	36 43       	sbci	r19, 0x36	; 54
     3fc:	a4 30       	cpi	r26, 0x04	; 4
     3fe:	37 43       	sbci	r19, 0x37	; 55
     400:	cd 8c       	ldd	r12, Y+29	; 0x1d
     402:	37 43       	sbci	r19, 0x37	; 55
     404:	85 eb       	ldi	r24, 0xB5	; 181
     406:	37 43       	sbci	r19, 0x37	; 55
     408:	ae 47       	sbci	r26, 0x7E	; 126
     40a:	38 43       	sbci	r19, 0x38	; 56
     40c:	66 a6       	std	Z+46, r6	; 0x2e
     40e:	38 43       	sbci	r19, 0x38	; 56
     410:	8f 02       	muls	r24, r31
     412:	39 43       	sbci	r19, 0x39	; 57
     414:	48 61       	ori	r20, 0x18	; 24
     416:	39 43       	sbci	r19, 0x39	; 57
     418:	71 bd       	out	0x21, r23	; 33
     41a:	39 43       	sbci	r19, 0x39	; 57
     41c:	29 1c       	adc	r2, r9
     41e:	3a 43       	sbci	r19, 0x3A	; 58
     420:	52 78       	andi	r21, 0x82	; 130
     422:	3a 43       	sbci	r19, 0x3A	; 58
     424:	0a d7       	rcall	.+3604   	; 0x123a <_ZN13Char_LCD2004A10Cursor_SetEcc+0x14>
     426:	3a 43       	sbci	r19, 0x3A	; 58
     428:	33 33       	cpi	r19, 0x33	; 51
     42a:	3b 43       	sbci	r19, 0x3B	; 59
     42c:	5c 8f       	std	Y+28, r21	; 0x1c
     42e:	3b 43       	sbci	r19, 0x3B	; 59
     430:	14 ee       	ldi	r17, 0xE4	; 228
     432:	3b 43       	sbci	r19, 0x3B	; 59
     434:	3d 4a       	sbci	r19, 0xAD	; 173
     436:	3c 43       	sbci	r19, 0x3C	; 60
     438:	f6 a8       	ldd	r15, Z+54	; 0x36
     43a:	3c 43       	sbci	r19, 0x3C	; 60
     43c:	1f 05       	cpc	r17, r15
     43e:	3d 43       	sbci	r19, 0x3D	; 61
     440:	48 61       	ori	r20, 0x18	; 24
     442:	3d 43       	sbci	r19, 0x3D	; 61
     444:	00 c0       	rjmp	.+0      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     446:	3d 43       	sbci	r19, 0x3D	; 61
     448:	29 1c       	adc	r2, r9
     44a:	3e 43       	sbci	r19, 0x3E	; 62
     44c:	52 78       	andi	r21, 0x82	; 130
     44e:	3e 43       	sbci	r19, 0x3E	; 62
     450:	0a d7       	rcall	.+3604   	; 0x1266 <_ZN13Char_LCD2004A16Set_Cursor_PrintEccPKc+0x1c>
     452:	3e 43       	sbci	r19, 0x3E	; 62
     454:	33 33       	cpi	r19, 0x33	; 51
     456:	3f 43       	sbci	r19, 0x3F	; 63
     458:	5c 8f       	std	Y+28, r21	; 0x1c
     45a:	3f 43       	sbci	r19, 0x3F	; 63
     45c:	85 eb       	ldi	r24, 0xB5	; 181
     45e:	3f 43       	sbci	r19, 0x3F	; 63
     460:	3d 4a       	sbci	r19, 0xAD	; 173
     462:	40 43       	sbci	r20, 0x30	; 48
     464:	66 a6       	std	Z+46, r6	; 0x2e
     466:	40 43       	sbci	r20, 0x30	; 48
     468:	8f 02       	muls	r24, r31
     46a:	41 43       	sbci	r20, 0x31	; 49
     46c:	b8 5e       	subi	r27, 0xE8	; 232
     46e:	41 43       	sbci	r20, 0x31	; 49
     470:	71 bd       	out	0x21, r23	; 33
     472:	41 43       	sbci	r20, 0x31	; 49
     474:	9a 19       	sub	r25, r10
     476:	42 43       	sbci	r20, 0x32	; 50
     478:	c3 75       	andi	r28, 0x53	; 83
     47a:	42 43       	sbci	r20, 0x32	; 50
     47c:	ec d1       	rcall	.+984    	; 0x856 <_ZL9g_alfVolt+0x48>
     47e:	42 43       	sbci	r20, 0x32	; 50
     480:	14 2e       	mov	r1, r20
     482:	43 43       	sbci	r20, 0x33	; 51
     484:	cd 8c       	ldd	r12, Y+29	; 0x1d
     486:	43 43       	sbci	r20, 0x33	; 51
     488:	f6 e8       	ldi	r31, 0x86	; 134
     48a:	43 43       	sbci	r20, 0x33	; 51
     48c:	1f 45       	sbci	r17, 0x5F	; 95
     48e:	44 43       	sbci	r20, 0x34	; 52
     490:	48 a1       	ldd	r20, Y+32	; 0x20
     492:	44 43       	sbci	r20, 0x34	; 52
     494:	71 fd       	sbrc	r23, 1
     496:	44 43       	sbci	r20, 0x34	; 52
     498:	9a 59       	subi	r25, 0x9A	; 154
     49a:	45 43       	sbci	r20, 0x35	; 53
     49c:	c3 b5       	in	r28, 0x23	; 35
     49e:	45 43       	sbci	r20, 0x35	; 53
     4a0:	ec 11       	cpse	r30, r12
     4a2:	46 43       	sbci	r20, 0x36	; 54
     4a4:	14 6e       	ori	r17, 0xE4	; 228
     4a6:	46 43       	sbci	r20, 0x36	; 54
     4a8:	3d ca       	rjmp	.-2950   	; 0xfffff924 <__eeprom_end+0xff7ef924>
     4aa:	46 43       	sbci	r20, 0x36	; 54
     4ac:	66 26       	eor	r6, r22
     4ae:	47 43       	sbci	r20, 0x37	; 55
     4b0:	8f 82       	std	Y+7, r8	; 0x07
     4b2:	47 43       	sbci	r20, 0x37	; 55
     4b4:	b8 de       	rcall	.-656    	; 0x226 <__trampolines_end+0x19a>
     4b6:	47 43       	sbci	r20, 0x37	; 55
     4b8:	e1 3a       	cpi	r30, 0xA1	; 161
     4ba:	48 43       	sbci	r20, 0x38	; 56
     4bc:	0a 97       	sbiw	r24, 0x0a	; 10
     4be:	48 43       	sbci	r20, 0x38	; 56
     4c0:	33 f3       	brvs	.-52     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
     4c2:	48 43       	sbci	r20, 0x38	; 56
     4c4:	5c 4f       	sbci	r21, 0xFC	; 252
     4c6:	49 43       	sbci	r20, 0x39	; 57
     4c8:	85 ab       	std	Z+53, r24	; 0x35
     4ca:	49 43       	sbci	r20, 0x39	; 57
     4cc:	ae 07       	cpc	r26, r30
     4ce:	4a 43       	sbci	r20, 0x3A	; 58
     4d0:	d7 63       	ori	r29, 0x37	; 55
     4d2:	4a 43       	sbci	r20, 0x3A	; 58
     4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
     4d6:	4a 43       	sbci	r20, 0x3A	; 58
     4d8:	29 1c       	adc	r2, r9
     4da:	4b 43       	sbci	r20, 0x3B	; 59
     4dc:	52 78       	andi	r21, 0x82	; 130
     4de:	4b 43       	sbci	r20, 0x3B	; 59
     4e0:	7b d4       	rcall	.+2294   	; 0xdd8 <_ZN22DFRobotHighTemperature4compEfi+0x12>
     4e2:	4b 43       	sbci	r20, 0x3B	; 59
     4e4:	a4 30       	cpi	r26, 0x04	; 4
     4e6:	4c 43       	sbci	r20, 0x3C	; 60
     4e8:	cd 8c       	ldd	r12, Y+29	; 0x1d
     4ea:	4c 43       	sbci	r20, 0x3C	; 60
     4ec:	66 e6       	ldi	r22, 0x66	; 102
     4ee:	4c 43       	sbci	r20, 0x3C	; 60
     4f0:	8f 42       	sbci	r24, 0x2F	; 47
     4f2:	4d 43       	sbci	r20, 0x3D	; 61
     4f4:	b8 9e       	mul	r11, r24
     4f6:	4d 43       	sbci	r20, 0x3D	; 61
     4f8:	e1 fa       	bst	r14, 1
     4fa:	4d 43       	sbci	r20, 0x3D	; 61
     4fc:	0a 57       	subi	r16, 0x7A	; 122
     4fe:	4e 43       	sbci	r20, 0x3E	; 62
     500:	33 b3       	in	r19, 0x13	; 19
     502:	4e 43       	sbci	r20, 0x3E	; 62
     504:	cd 0c       	add	r12, r13
     506:	4f 43       	sbci	r20, 0x3F	; 63
     508:	f6 68       	ori	r31, 0x86	; 134
     50a:	4f 43       	sbci	r20, 0x3F	; 63
     50c:	1f c5       	rjmp	.+2622   	; 0xf4c <_ZN22DFRobotHighTemperature15readTemperatureEj+0xcc>
     50e:	4f 43       	sbci	r20, 0x3F	; 63
     510:	48 21       	and	r20, r8
     512:	50 43       	sbci	r21, 0x30	; 48
     514:	e1 7a       	andi	r30, 0xA1	; 161
     516:	50 43       	sbci	r21, 0x30	; 48
     518:	0a d7       	rcall	.+3604   	; 0x132e <_ZN12Count_SensornwEj+0x4>
     51a:	50 43       	sbci	r21, 0x30	; 48
     51c:	33 33       	cpi	r19, 0x33	; 51
     51e:	51 43       	sbci	r21, 0x31	; 49
     520:	5c 8f       	std	Y+28, r21	; 0x1c
     522:	51 43       	sbci	r21, 0x31	; 49
     524:	f6 e8       	ldi	r31, 0x86	; 134
     526:	51 43       	sbci	r21, 0x31	; 49
     528:	1f 45       	sbci	r17, 0x5F	; 95
     52a:	52 43       	sbci	r21, 0x32	; 50
     52c:	48 a1       	ldd	r20, Y+32	; 0x20
     52e:	52 43       	sbci	r21, 0x32	; 50
     530:	e1 fa       	bst	r14, 1
     532:	52 43       	sbci	r21, 0x32	; 50
     534:	0a 57       	subi	r16, 0x7A	; 122
     536:	53 43       	sbci	r21, 0x33	; 51
     538:	33 b3       	in	r19, 0x13	; 19
     53a:	53 43       	sbci	r21, 0x33	; 51
     53c:	cd 0c       	add	r12, r13
     53e:	54 43       	sbci	r21, 0x34	; 52
     540:	f6 68       	ori	r31, 0x86	; 134
     542:	54 43       	sbci	r21, 0x34	; 52
     544:	8f c2       	rjmp	.+1310   	; 0xa64 <_ZL9g_alfVolt+0x256>
     546:	54 43       	sbci	r21, 0x34	; 52
     548:	b8 1e       	adc	r11, r24
     54a:	55 43       	sbci	r21, 0x35	; 53
     54c:	e1 7a       	andi	r30, 0xA1	; 161
     54e:	55 43       	sbci	r21, 0x35	; 53
     550:	7b d4       	rcall	.+2294   	; 0xe48 <_ZN22DFRobotHighTemperature4compEfi+0x82>
     552:	55 43       	sbci	r21, 0x35	; 53
     554:	a4 30       	cpi	r26, 0x04	; 4
     556:	56 43       	sbci	r21, 0x36	; 54
     558:	3d 8a       	std	Y+21, r3	; 0x15
     55a:	56 43       	sbci	r21, 0x36	; 54
     55c:	66 e6       	ldi	r22, 0x66	; 102
     55e:	56 43       	sbci	r21, 0x36	; 54
     560:	00 40       	sbci	r16, 0x00	; 0
     562:	57 43       	sbci	r21, 0x37	; 55
     564:	29 9c       	mul	r2, r9
     566:	57 43       	sbci	r21, 0x37	; 55
     568:	c3 f5       	brvc	.+112    	; 0x5da <__LOCK_REGION_LENGTH__+0x1da>
     56a:	57 43       	sbci	r21, 0x37	; 55
     56c:	ec 51       	subi	r30, 0x1C	; 28
     56e:	58 43       	sbci	r21, 0x38	; 56
     570:	85 ab       	std	Z+53, r24	; 0x35
     572:	58 43       	sbci	r21, 0x38	; 56
     574:	ae 07       	cpc	r26, r30
     576:	59 43       	sbci	r21, 0x39	; 57
     578:	48 61       	ori	r20, 0x18	; 24
     57a:	59 43       	sbci	r21, 0x39	; 57
     57c:	71 bd       	out	0x21, r23	; 33
     57e:	59 43       	sbci	r21, 0x39	; 57
     580:	0a 17       	cp	r16, r26
     582:	5a 43       	sbci	r21, 0x3A	; 58
     584:	a4 70       	andi	r26, 0x04	; 4
     586:	5a 43       	sbci	r21, 0x3A	; 58
     588:	cd cc       	rjmp	.-1638   	; 0xffffff24 <__eeprom_end+0xff7eff24>
     58a:	5a 43       	sbci	r21, 0x3A	; 58
     58c:	66 26       	eor	r6, r22
     58e:	5b 43       	sbci	r21, 0x3B	; 59
     590:	8f 82       	std	Y+7, r8	; 0x07
     592:	5b 43       	sbci	r21, 0x3B	; 59
     594:	29 dc       	rcall	.-1966   	; 0xfffffde8 <__eeprom_end+0xff7efde8>
     596:	5b 43       	sbci	r21, 0x3B	; 59
     598:	c3 35       	cpi	r28, 0x53	; 83
     59a:	5c 43       	sbci	r21, 0x3C	; 60
     59c:	ec 91       	ld	r30, X
     59e:	5c 43       	sbci	r21, 0x3C	; 60
     5a0:	85 eb       	ldi	r24, 0xB5	; 181
     5a2:	5c 43       	sbci	r21, 0x3C	; 60
     5a4:	1f 45       	sbci	r17, 0x5F	; 95
     5a6:	5d 43       	sbci	r21, 0x3D	; 61
     5a8:	48 a1       	ldd	r20, Y+32	; 0x20
     5aa:	5d 43       	sbci	r21, 0x3D	; 61
     5ac:	e1 fa       	bst	r14, 1
     5ae:	5d 43       	sbci	r21, 0x3D	; 61
     5b0:	7b 54       	subi	r23, 0x4B	; 75
     5b2:	5e 43       	sbci	r21, 0x3E	; 62
     5b4:	14 ae       	std	Z+60, r1	; 0x3c
     5b6:	5e 43       	sbci	r21, 0x3E	; 62
     5b8:	3d 0a       	sbc	r3, r29
     5ba:	5f 43       	sbci	r21, 0x3F	; 63
     5bc:	d7 63       	ori	r29, 0x37	; 55
     5be:	5f 43       	sbci	r21, 0x3F	; 63
     5c0:	71 bd       	out	0x21, r23	; 33
     5c2:	5f 43       	sbci	r21, 0x3F	; 63
     5c4:	0a 17       	cp	r16, r26
     5c6:	60 43       	sbci	r22, 0x30	; 48
     5c8:	33 73       	andi	r19, 0x33	; 51
     5ca:	60 43       	sbci	r22, 0x30	; 48
     5cc:	cd cc       	rjmp	.-1638   	; 0xffffff68 <__eeprom_end+0xff7eff68>
     5ce:	60 43       	sbci	r22, 0x30	; 48
     5d0:	66 26       	eor	r6, r22
     5d2:	61 43       	sbci	r22, 0x31	; 49
     5d4:	00 80       	ld	r0, Z
     5d6:	61 43       	sbci	r22, 0x31	; 49
     5d8:	9a d9       	rcall	.-3276   	; 0xfffff90e <__eeprom_end+0xff7ef90e>
     5da:	61 43       	sbci	r22, 0x31	; 49
     5dc:	c3 35       	cpi	r28, 0x53	; 83
     5de:	62 43       	sbci	r22, 0x32	; 50
     5e0:	5c 8f       	std	Y+28, r21	; 0x1c
     5e2:	62 43       	sbci	r22, 0x32	; 50
     5e4:	f6 e8       	ldi	r31, 0x86	; 134
     5e6:	62 43       	sbci	r22, 0x32	; 50
     5e8:	8f 42       	sbci	r24, 0x2F	; 47
     5ea:	63 43       	sbci	r22, 0x33	; 51
     5ec:	29 9c       	mul	r2, r9
     5ee:	63 43       	sbci	r22, 0x33	; 51
     5f0:	c3 f5       	brvc	.+112    	; 0x662 <__LOCK_REGION_LENGTH__+0x262>
     5f2:	63 43       	sbci	r22, 0x33	; 51
     5f4:	5c 4f       	sbci	r21, 0xFC	; 252
     5f6:	64 43       	sbci	r22, 0x34	; 52
     5f8:	f6 a8       	ldd	r15, Z+54	; 0x36
     5fa:	64 43       	sbci	r22, 0x34	; 52
     5fc:	1f 05       	cpc	r17, r15
     5fe:	65 43       	sbci	r22, 0x35	; 53
     600:	b8 5e       	subi	r27, 0xE8	; 232
     602:	65 43       	sbci	r22, 0x35	; 53
     604:	52 b8       	out	0x02, r5	; 2
     606:	65 43       	sbci	r22, 0x35	; 53
     608:	ec 11       	cpse	r30, r12
     60a:	66 43       	sbci	r22, 0x36	; 54
     60c:	85 6b       	ori	r24, 0xB5	; 181
     60e:	66 43       	sbci	r22, 0x36	; 54
     610:	1f c5       	rjmp	.+2622   	; 0x1050 <Alarm_Start+0x6>
     612:	66 43       	sbci	r22, 0x36	; 54
     614:	b8 1e       	adc	r11, r24
     616:	67 43       	sbci	r22, 0x37	; 55
     618:	52 78       	andi	r21, 0x82	; 130
     61a:	67 43       	sbci	r22, 0x37	; 55
     61c:	ec d1       	rcall	.+984    	; 0x9f6 <_ZL9g_alfVolt+0x1e8>
     61e:	67 43       	sbci	r22, 0x37	; 55
     620:	85 2b       	or	r24, r21
     622:	68 43       	sbci	r22, 0x38	; 56
     624:	1f 85       	ldd	r17, Y+15	; 0x0f
     626:	68 43       	sbci	r22, 0x38	; 56
     628:	b8 de       	rcall	.-656    	; 0x39a <__trampolines_end+0x30e>
     62a:	68 43       	sbci	r22, 0x38	; 56
     62c:	c3 35       	cpi	r28, 0x53	; 83
     62e:	69 43       	sbci	r22, 0x39	; 57
     630:	5c 8f       	std	Y+28, r21	; 0x1c
     632:	69 43       	sbci	r22, 0x39	; 57
     634:	f6 e8       	ldi	r31, 0x86	; 134
     636:	69 43       	sbci	r22, 0x39	; 57
     638:	8f 42       	sbci	r24, 0x2F	; 47
     63a:	6a 43       	sbci	r22, 0x3A	; 58
     63c:	29 9c       	mul	r2, r9
     63e:	6a 43       	sbci	r22, 0x3A	; 58
     640:	c3 f5       	brvc	.+112    	; 0x6b2 <__LOCK_REGION_LENGTH__+0x2b2>
     642:	6a 43       	sbci	r22, 0x3A	; 58
     644:	5c 4f       	sbci	r21, 0xFC	; 252
     646:	6b 43       	sbci	r22, 0x3B	; 59
     648:	f6 a8       	ldd	r15, Z+54	; 0x36
     64a:	6b 43       	sbci	r22, 0x3B	; 59
     64c:	00 00       	nop
     64e:	6c 43       	sbci	r22, 0x3C	; 60
     650:	9a 59       	subi	r25, 0x9A	; 154
     652:	6c 43       	sbci	r22, 0x3C	; 60
     654:	33 b3       	in	r19, 0x13	; 19
     656:	6c 43       	sbci	r22, 0x3C	; 60
     658:	cd 0c       	add	r12, r13
     65a:	6d 43       	sbci	r22, 0x3D	; 61
     65c:	66 66       	ori	r22, 0x66	; 102
     65e:	6d 43       	sbci	r22, 0x3D	; 61
     660:	71 bd       	out	0x21, r23	; 33
     662:	6d 43       	sbci	r22, 0x3D	; 61
     664:	0a 17       	cp	r16, r26
     666:	6e 43       	sbci	r22, 0x3E	; 62
     668:	a4 70       	andi	r26, 0x04	; 4
     66a:	6e 43       	sbci	r22, 0x3E	; 62
     66c:	3d ca       	rjmp	.-2950   	; 0xfffffae8 <__eeprom_end+0xff7efae8>
     66e:	6e 43       	sbci	r22, 0x3E	; 62
     670:	48 21       	and	r20, r8
     672:	6f 43       	sbci	r22, 0x3F	; 63
     674:	e1 7a       	andi	r30, 0xA1	; 161
     676:	6f 43       	sbci	r22, 0x3F	; 63
     678:	7b d4       	rcall	.+2294   	; 0xf70 <_ZN22DFRobotHighTemperature15readTemperatureEj+0xf0>
     67a:	6f 43       	sbci	r22, 0x3F	; 63
     67c:	14 2e       	mov	r1, r20
     67e:	70 43       	sbci	r23, 0x30	; 48
     680:	1f 85       	ldd	r17, Y+15	; 0x0f
     682:	70 43       	sbci	r23, 0x30	; 48
     684:	b8 de       	rcall	.-656    	; 0x3f6 <__trampolines_end+0x36a>
     686:	70 43       	sbci	r23, 0x30	; 48
     688:	52 38       	cpi	r21, 0x82	; 130
     68a:	71 43       	sbci	r23, 0x31	; 49
     68c:	5c 8f       	std	Y+28, r21	; 0x1c
     68e:	71 43       	sbci	r23, 0x31	; 49
     690:	f6 e8       	ldi	r31, 0x86	; 134
     692:	71 43       	sbci	r23, 0x31	; 49
     694:	8f 42       	sbci	r24, 0x2F	; 47
     696:	72 43       	sbci	r23, 0x32	; 50
     698:	9a 99       	sbic	0x13, 2	; 19
     69a:	72 43       	sbci	r23, 0x32	; 50
     69c:	33 f3       	brvs	.-52     	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
     69e:	72 43       	sbci	r23, 0x32	; 50
     6a0:	3d 4a       	sbci	r19, 0xAD	; 173
     6a2:	73 43       	sbci	r23, 0x33	; 51
     6a4:	d7 a3       	std	Z+39, r29	; 0x27
     6a6:	73 43       	sbci	r23, 0x33	; 51
     6a8:	71 fd       	sbrc	r23, 1
     6aa:	73 43       	sbci	r23, 0x33	; 51
     6ac:	7b 54       	subi	r23, 0x4B	; 75
     6ae:	74 43       	sbci	r23, 0x34	; 52
     6b0:	14 ae       	std	Z+60, r1	; 0x3c
     6b2:	74 43       	sbci	r23, 0x34	; 52
     6b4:	1f 05       	cpc	r17, r15
     6b6:	75 43       	sbci	r23, 0x35	; 53
     6b8:	b8 5e       	subi	r27, 0xE8	; 232
     6ba:	75 43       	sbci	r23, 0x35	; 53
     6bc:	c3 b5       	in	r28, 0x23	; 35
     6be:	75 43       	sbci	r23, 0x35	; 53
     6c0:	5c 0f       	add	r21, r28
     6c2:	76 43       	sbci	r23, 0x36	; 54
     6c4:	66 66       	ori	r22, 0x66	; 102
     6c6:	76 43       	sbci	r23, 0x36	; 54
     6c8:	00 c0       	rjmp	.+0      	; 0x6ca <__LOCK_REGION_LENGTH__+0x2ca>
     6ca:	76 43       	sbci	r23, 0x36	; 54

000006cc <_ZL8g_adTemp>:
     6cc:	d8 ff d9 ff da ff db ff dc ff dd ff de ff df ff     ................
     6dc:	e0 ff e1 ff e2 ff e3 ff e4 ff e5 ff e6 ff e7 ff     ................
     6ec:	e8 ff e9 ff ea ff eb ff ec ff ed ff ee ff ef ff     ................
     6fc:	f0 ff f1 ff f2 ff f3 ff f4 ff f5 ff f6 ff f7 ff     ................
     70c:	f8 ff f9 ff fa ff fb ff fc ff fd ff fe ff ff ff     ................
     71c:	00 00 01 00 02 00 03 00 04 00 05 00 06 00 07 00     ................
     72c:	08 00 09 00 0a 00 0b 00 0c 00 0d 00 0e 00 0f 00     ................
     73c:	10 00 11 00 12 00 13 00 14 00 15 00 16 00 17 00     ................
     74c:	18 00 19 00 1a 00 1b 00 1c 00 1d 00 1e 00 1f 00     ................
     75c:	20 00 21 00 22 00 23 00 24 00 25 00 26 00 27 00      .!.".#.$.%.&.'.
     76c:	28 00 29 00 2a 00 2b 00 2c 00 2d 00 2e 00 2f 00     (.).*.+.,.-.../.
     77c:	30 00 31 00 32 00 33 00 34 00 35 00 36 00 37 00     0.1.2.3.4.5.6.7.
     78c:	38 00 39 00 3a 00 3b 00 3c 00 3d 00 3e 00 3f 00     8.9.:.;.<.=.>.?.
     79c:	40 00 41 00 42 00 43 00 44 00 45 00 46 00 47 00     @.A.B.C.D.E.F.G.
     7ac:	48 00 49 00 4a 00 4b 00 4c 00 4d 00 4e 00 4f 00     H.I.J.K.L.M.N.O.
     7bc:	50 00 51 00 52 00 53 00 54 00 55 00 56 00 57 00     P.Q.R.S.T.U.V.W.
     7cc:	58 00 59 00 5a 00 5b 00 5c 00 5d 00 5e 00 5f 00     X.Y.Z.[.\.].^._.
     7dc:	60 00 61 00 62 00 63 00 64 00 65 00 66 00 67 00     `.a.b.c.d.e.f.g.
     7ec:	68 00 69 00 6a 00 6b 00 6c 00 6d 00 6e 00 6f 00     h.i.j.k.l.m.n.o.
     7fc:	70 00 71 00 72 00 73 00 74 00 75 00 76 00 77 00     p.q.r.s.t.u.v.w.
     80c:	78 00                                               x.

0000080e <_ZL9g_alfVolt>:
     80e:	a1 84 89 3e cd 92 90 3e 60 ea 97 3e 97 90 9f 3e     ...>...>`..>...>
     81e:	73 85 a7 3e 92 cb af 3e 95 65 b8 3e ca 54 c1 3e     s..>...>.e.>.T.>
     82e:	80 9a ca 3e 09 38 d4 3e 51 31 de 3e 59 86 e8 3e     ...>.8.>Q1.>Y..>
     83e:	c1 39 f3 3e 88 4b fe 3e 7f de 04 3f 08 c9 0a 3f     .9.>.K.>...?...?
     84e:	11 e4 10 3f 90 31 17 3f 85 b1 1d 3f f1 63 24 3f     ...?.1.?...?.c$?
     85e:	7b 49 2b 3f 24 62 32 3f 92 ae 39 3f c7 2e 41 3f     {I+?$b2?..9?..A?
     86e:	19 e2 48 3f 32 c9 50 3f c1 e2 58 3f 16 30 61 3f     ..H?2.P?..X?.0a?
     87e:	3a af 69 3f 2d 60 72 3f ee 42 7b 3f 17 2b 82 3f     :.i?-`r?.B{?.+.?
     88e:	a3 cc 86 3f c6 85 8b 3f da 55 90 3f 36 3c 95 3f     ...?...?.U.?6<.?
     89e:	32 38 9a 3f cf 49 9f 3f 69 6f a4 3f 00 a9 a9 3f     28.?.I.?io.?...?
     8ae:	99 f5 ae 3f e3 53 b4 3f df c3 b9 3f e9 43 bf 3f     ...?.S.?...?.C.?
     8be:	07 d3 c4 3f e3 70 ca 3f da 1b d0 3f 46 d3 d5 3f     ...?.p.?...?F..?
     8ce:	d5 95 db 3f 8d 62 e1 3f 71 38 e7 3f 33 16 ed 3f     ...?.b.?q8.?3..?
     8de:	83 fa f2 3f b8 e4 f8 3f 84 d3 fe 3f cc 62 02 40     ...?...?...?.b.@
     8ee:	fb 5c 05 40 a8 57 08 40 7e 52 0b 40 ad 4c 0e 40     .\.@.W.@~R.@.L.@
     8fe:	b7 45 11 40 1d 3d 14 40 61 32 17 40 dd 24 1a 40     .E.@.=.@a2.@.$.@
     90e:	3c 14 1d 40 00 00 20 40 82 e7 22 40 97 ca 25 40     <..@.. @.."@..%@
     91e:	6d a8 28 40 dc 80 2b 40 8f 53 2e 40 de 1f 31 40     m.(@..+@.S.@..1@
     92e:	9f e5 33 40 7f a4 36 40 ff 5b 39 40 f6 0b 3c 40     ..3@..6@.[9@..<@
     93e:	e5 b3 3e 40 ce 53 41 40 85 eb 43 40 63 7a 46 40     ..>@.SA@..C@czF@
     94e:	93 00 49 40 bf 7d 4b 40 bf f1 4d 40 92 5c 50 40     ..I@.}K@..M@.\P@
     95e:	e4 bd 52 40 8c 15 55 40 b2 63 57 40 2f a8 59 40     ..R@..U@.cW@/.Y@
     96e:	d6 e2 5b 40 a9 13 5e 40 a8 3a 60 40 d1 57 62 40     ..[@..^@.:`@.Wb@
     97e:	fd 6a 64 40 54 74 66 40 00 74 68 40 ad 69 6a 40     .jd@Ttf@.th@.ij@
     98e:	b0 55 6c 40 df 37 6e 40 8c 10 70 40 8f df 71 40     .Ul@.7n@..p@..q@
     99e:	12 a5 73 40 3d 61 75 40 12 14 77 40 ba bd 78 40     ..s@=au@..w@..x@
     9ae:	0b 5e 7a 40 ae f5 7b 40 23 84 7d 40 13 0a 7f 40     .^z@..{@#.}@...@
     9be:	96 43 80 40 f4 fd 80 40 0f b4 81 40 27 66 82 40     .C.@...@...@'f.@
     9ce:	12 14 83 40 0e be 83 40 1b 64 84 40 4f 06 85 40     ...@...@.d.@O..@
     9de:	d3 a4 85 40 7d 3f 86 40 a1 d6 86 40 2b 6a 87 40     ...@}?.@...@+j.@
     9ee:	2f fa 87 40 c2 86 88 40 0e 10 89 40 ff 95 89 40     /..@...@...@...@
     9fe:	d2 18 8a 40 5f 98 8a 40 f9 14 8b 40 75 8e 8b 40     ...@_..@...@u..@
     a0e:	14 05 8c 40 c0 78 8c 40 a3 e9 8c 40 d1 57 8d 40     ...@.x.@...@.W.@
     a1e:	4c c3 8d 40 28 2c 8e 40 64 92 8e 40 2b f6 8e 40     L..@(,.@d..@+..@
     a2e:	93 57 8f 40 85 b6 8f 40 2b 13 90 40 87 6d 90 40     .W.@...@+..@.m.@
     a3e:	ac c5 90 40 b0 1b 91 40 93 6f 91 40 6a c1 91 40     ...@...@.o.@j..@
     a4e:	49 11 92 40 1c 5f 92 40 22 ab 92 40 45 f5 92 40     I..@._.@"..@E..@
     a5e:	86 3d 93 40 0e 84 93 40 f3 c8 93 40 0b 0c 94 40     .=.@...@...@...@
     a6e:	94 4d 94 40 7a 8d 94 40 e6 cb 94 40 c4 08 95 40     .M.@z..@...@...@
     a7e:	28 44 95 40 13 7e 95 40 ae b6 95 40 d0 ed 95 40     (D.@.~.@...@...@
     a8e:	b8 23 96 40                                         .#.@

00000a92 <__ctors_end>:
     a92:	11 24       	eor	r1, r1
     a94:	1f be       	out	0x3f, r1	; 63
     a96:	cf ef       	ldi	r28, 0xFF	; 255
     a98:	d0 e1       	ldi	r29, 0x10	; 16
     a9a:	de bf       	out	0x3e, r29	; 62
     a9c:	cd bf       	out	0x3d, r28	; 61

00000a9e <__do_copy_data>:
     a9e:	12 e0       	ldi	r17, 0x02	; 2
     aa0:	a0 e0       	ldi	r26, 0x00	; 0
     aa2:	b1 e0       	ldi	r27, 0x01	; 1
     aa4:	e6 e4       	ldi	r30, 0x46	; 70
     aa6:	f6 e5       	ldi	r31, 0x56	; 86
     aa8:	00 e0       	ldi	r16, 0x00	; 0
     aaa:	0b bf       	out	0x3b, r16	; 59
     aac:	02 c0       	rjmp	.+4      	; 0xab2 <__do_copy_data+0x14>
     aae:	07 90       	elpm	r0, Z+
     ab0:	0d 92       	st	X+, r0
     ab2:	a2 34       	cpi	r26, 0x42	; 66
     ab4:	b1 07       	cpc	r27, r17
     ab6:	d9 f7       	brne	.-10     	; 0xaae <__do_copy_data+0x10>

00000ab8 <__do_clear_bss>:
     ab8:	2e e0       	ldi	r18, 0x0E	; 14
     aba:	a2 e4       	ldi	r26, 0x42	; 66
     abc:	b2 e0       	ldi	r27, 0x02	; 2
     abe:	01 c0       	rjmp	.+2      	; 0xac2 <.do_clear_bss_start>

00000ac0 <.do_clear_bss_loop>:
     ac0:	1d 92       	st	X+, r1

00000ac2 <.do_clear_bss_start>:
     ac2:	af 31       	cpi	r26, 0x1F	; 31
     ac4:	b2 07       	cpc	r27, r18
     ac6:	e1 f7       	brne	.-8      	; 0xac0 <.do_clear_bss_loop>
     ac8:	0e 94 db 19 	call	0x33b6	; 0x33b6 <main>
     acc:	0c 94 21 2b 	jmp	0x5642	; 0x5642 <_exit>

00000ad0 <__bad_interrupt>:
     ad0:	97 ca       	rjmp	.-2770   	; 0x0 <__vectors>

00000ad2 <_Z5CRC16Phi>:
	function01->ByteCount = 0x02;
	function01->OutPutStatus1 = func1mem[*(buf + 3)];
	function01->OutPutStatus2 = func1mem[(*(buf + 3)) + 1];
	crc16 = CRC16((unsigned char*)function01, BUFSIZE - 2);
	function01->CRC = crc16;
}
     ad2:	fc 01       	movw	r30, r24
     ad4:	68 0f       	add	r22, r24
     ad6:	79 1f       	adc	r23, r25
     ad8:	8f ef       	ldi	r24, 0xFF	; 255
     ada:	9f ef       	ldi	r25, 0xFF	; 255
     adc:	e6 17       	cp	r30, r22
     ade:	f7 07       	cpc	r31, r23
     ae0:	99 f0       	breq	.+38     	; 0xb08 <_Z5CRC16Phi+0x36>
     ae2:	21 91       	ld	r18, Z+
     ae4:	82 27       	eor	r24, r18
     ae6:	28 e0       	ldi	r18, 0x08	; 8
     ae8:	30 e0       	ldi	r19, 0x00	; 0
     aea:	ac 01       	movw	r20, r24
     aec:	41 70       	andi	r20, 0x01	; 1
     aee:	55 27       	eor	r21, r21
     af0:	96 95       	lsr	r25
     af2:	87 95       	ror	r24
     af4:	45 2b       	or	r20, r21
     af6:	21 f0       	breq	.+8      	; 0xb00 <_Z5CRC16Phi+0x2e>
     af8:	41 e0       	ldi	r20, 0x01	; 1
     afa:	84 27       	eor	r24, r20
     afc:	40 ea       	ldi	r20, 0xA0	; 160
     afe:	94 27       	eor	r25, r20
     b00:	21 50       	subi	r18, 0x01	; 1
     b02:	31 09       	sbc	r19, r1
     b04:	91 f7       	brne	.-28     	; 0xaea <_Z5CRC16Phi+0x18>
     b06:	ea cf       	rjmp	.-44     	; 0xadc <_Z5CRC16Phi+0xa>
     b08:	08 95       	ret

00000b0a <_Z13GetFunc04DataPcP17GetFunctionCode04Pi>:
void GetFunc04Data(char* buf,GetFunctionCode04* function04,int* func4mem)
{
     b0a:	cf 93       	push	r28
     b0c:	df 93       	push	r29
     b0e:	dc 01       	movw	r26, r24
     b10:	eb 01       	movw	r28, r22
	unsigned short crc16;
	unsigned int BUFSIZE = sizeof(GetFunctionCode04);
	char address = 0;
	function04->Address = *(buf + 0);
     b12:	8c 91       	ld	r24, X
     b14:	88 83       	st	Y, r24
	function04->FunctionCode = *(buf + 1);
     b16:	11 96       	adiw	r26, 0x01	; 1
     b18:	8c 91       	ld	r24, X
     b1a:	11 97       	sbiw	r26, 0x01	; 1
     b1c:	89 83       	std	Y+1, r24	; 0x01
	address = *(buf + 3);
     b1e:	13 96       	adiw	r26, 0x03	; 3
     b20:	8c 91       	ld	r24, X
	function04->ByteCount = 0x02;
     b22:	92 e0       	ldi	r25, 0x02	; 2
     b24:	9a 83       	std	Y+2, r25	; 0x02
	function04->InputRegHi = (func4mem[address] >> 8);
     b26:	e8 2f       	mov	r30, r24
     b28:	f0 e0       	ldi	r31, 0x00	; 0
     b2a:	ee 0f       	add	r30, r30
     b2c:	ff 1f       	adc	r31, r31
     b2e:	e4 0f       	add	r30, r20
     b30:	f5 1f       	adc	r31, r21
     b32:	81 81       	ldd	r24, Z+1	; 0x01
     b34:	8b 83       	std	Y+3, r24	; 0x03
	function04->InputRegLo = func4mem[address];
     b36:	80 81       	ld	r24, Z
     b38:	8c 83       	std	Y+4, r24	; 0x04
	crc16 = CRC16((unsigned char*)function04, BUFSIZE - 2);
     b3a:	65 e0       	ldi	r22, 0x05	; 5
     b3c:	70 e0       	ldi	r23, 0x00	; 0
     b3e:	ce 01       	movw	r24, r28
     b40:	c8 df       	rcall	.-112    	; 0xad2 <_Z5CRC16Phi>
	function04->CRC = crc16;
     b42:	9e 83       	std	Y+6, r25	; 0x06
     b44:	8d 83       	std	Y+5, r24	; 0x05
}
     b46:	df 91       	pop	r29
     b48:	cf 91       	pop	r28
     b4a:	08 95       	ret

00000b4c <_Z13GetFunc05DataPcP17GetFunctionCode05>:
void GetFunc05Data(char* buf,GetFunctionCode05* function05)
{
     b4c:	cf 93       	push	r28
     b4e:	df 93       	push	r29
     b50:	fc 01       	movw	r30, r24
     b52:	eb 01       	movw	r28, r22
	unsigned short crc16;
	unsigned int BUFSIZE = sizeof(GetFunctionCode05);
	function05->Address = *(buf + 0);
     b54:	80 81       	ld	r24, Z
     b56:	88 83       	st	Y, r24
	function05->FunctionCode = *(buf + 1);
     b58:	81 81       	ldd	r24, Z+1	; 0x01
     b5a:	89 83       	std	Y+1, r24	; 0x01
	function05->OutputAddressHi = *(buf + 2);
     b5c:	82 81       	ldd	r24, Z+2	; 0x02
     b5e:	8a 83       	std	Y+2, r24	; 0x02
	function05->OutputAddressLo = *(buf + 3);
     b60:	83 81       	ldd	r24, Z+3	; 0x03
     b62:	8b 83       	std	Y+3, r24	; 0x03
	function05->OutputValueHi = *(buf + 4);
     b64:	84 81       	ldd	r24, Z+4	; 0x04
     b66:	8c 83       	std	Y+4, r24	; 0x04
	function05->OutputValueLo = *(buf + 5);
     b68:	85 81       	ldd	r24, Z+5	; 0x05
     b6a:	8d 83       	std	Y+5, r24	; 0x05
	crc16 = CRC16((unsigned char*)function05, BUFSIZE - 2);
     b6c:	66 e0       	ldi	r22, 0x06	; 6
     b6e:	70 e0       	ldi	r23, 0x00	; 0
     b70:	ce 01       	movw	r24, r28
     b72:	af df       	rcall	.-162    	; 0xad2 <_Z5CRC16Phi>
	function05->CRC = crc16;//to_little(crc16);
     b74:	9f 83       	std	Y+7, r25	; 0x07
     b76:	8e 83       	std	Y+6, r24	; 0x06
}
     b78:	df 91       	pop	r29
     b7a:	cf 91       	pop	r28
     b7c:	08 95       	ret

00000b7e <_Z13GetFucc10DataPcP17GetFunctionCode10Pi>:
void GetFucc10Data(char* buf,GetFunctionCode10* function10,int* func4mem)
{
     b7e:	cf 93       	push	r28
     b80:	df 93       	push	r29
     b82:	fc 01       	movw	r30, r24
     b84:	eb 01       	movw	r28, r22
	unsigned short crc16;
	unsigned int BUFSIZE = sizeof(GetFunctionCode10);
	function10->address = *(buf + 0);
     b86:	80 81       	ld	r24, Z
     b88:	88 83       	st	Y, r24
	function10->functionCode = *(buf + 1);
     b8a:	81 81       	ldd	r24, Z+1	; 0x01
     b8c:	89 83       	std	Y+1, r24	; 0x01
	function10->startingAddressHi = *(buf + 2);
     b8e:	82 81       	ldd	r24, Z+2	; 0x02
     b90:	8a 83       	std	Y+2, r24	; 0x02
	function10->startingAddressLo = *(buf + 3);
     b92:	83 81       	ldd	r24, Z+3	; 0x03
     b94:	8b 83       	std	Y+3, r24	; 0x03
	function10->quantityOfRegistersHi = *(buf + 4);
     b96:	94 81       	ldd	r25, Z+4	; 0x04
     b98:	9c 83       	std	Y+4, r25	; 0x04
	function10->quantityOfRegistersLo = *(buf + 5);
     b9a:	95 81       	ldd	r25, Z+5	; 0x05
     b9c:	9d 83       	std	Y+5, r25	; 0x05
	function10->byteCount = *(buf + 6);
     b9e:	96 81       	ldd	r25, Z+6	; 0x06
     ba0:	9e 83       	std	Y+6, r25	; 0x06
	function10->registerValueHi = *(buf + 7);
     ba2:	27 81       	ldd	r18, Z+7	; 0x07
     ba4:	2f 83       	std	Y+7, r18	; 0x07
	function10->registerValueLo = *(buf + 8);
     ba6:	90 85       	ldd	r25, Z+8	; 0x08
     ba8:	98 87       	std	Y+8, r25	; 0x08
	func4mem[function10->startingAddressLo] = ((function10->registerValueHi << 8) | (function10->registerValueLo));
     baa:	e8 2f       	mov	r30, r24
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	ee 0f       	add	r30, r30
     bb0:	ff 1f       	adc	r31, r31
     bb2:	e4 0f       	add	r30, r20
     bb4:	f5 1f       	adc	r31, r21
     bb6:	89 2f       	mov	r24, r25
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	92 2b       	or	r25, r18
     bbc:	91 83       	std	Z+1, r25	; 0x01
     bbe:	80 83       	st	Z, r24
	crc16 = CRC16((unsigned char*)function10, BUFSIZE - 2);
     bc0:	69 e0       	ldi	r22, 0x09	; 9
     bc2:	70 e0       	ldi	r23, 0x00	; 0
     bc4:	ce 01       	movw	r24, r28
     bc6:	85 df       	rcall	.-246    	; 0xad2 <_Z5CRC16Phi>
	function10->CRC = crc16;
     bc8:	9a 87       	std	Y+10, r25	; 0x0a
     bca:	89 87       	std	Y+9, r24	; 0x09
}
     bcc:	df 91       	pop	r29
     bce:	cf 91       	pop	r28
     bd0:	08 95       	ret

00000bd2 <_Z18ResponseFucc10DataPcP22ResponseFunctionCode10>:
void ResponseFucc10Data(char* buf,ResponseFunctionCode10 *rfunction10)
{
     bd2:	cf 93       	push	r28
     bd4:	df 93       	push	r29
     bd6:	fc 01       	movw	r30, r24
     bd8:	eb 01       	movw	r28, r22
	unsigned short crc16;
	unsigned int BUFSIZE = sizeof(ResponseFunctionCode10);
	rfunction10->address = *(buf + 0);
     bda:	80 81       	ld	r24, Z
     bdc:	88 83       	st	Y, r24
	rfunction10->functionCode = *(buf + 1);
     bde:	81 81       	ldd	r24, Z+1	; 0x01
     be0:	89 83       	std	Y+1, r24	; 0x01
	rfunction10->startingAddressHi = *(buf + 2);
     be2:	82 81       	ldd	r24, Z+2	; 0x02
     be4:	8a 83       	std	Y+2, r24	; 0x02
	rfunction10->startingAddressLo = *(buf + 3);
     be6:	83 81       	ldd	r24, Z+3	; 0x03
     be8:	8b 83       	std	Y+3, r24	; 0x03
	rfunction10->quantityOfRegistersHi = *(buf + 4);
     bea:	84 81       	ldd	r24, Z+4	; 0x04
     bec:	8c 83       	std	Y+4, r24	; 0x04
	rfunction10->quantityOfRegistersLo = *(buf + 5);
     bee:	85 81       	ldd	r24, Z+5	; 0x05
     bf0:	8d 83       	std	Y+5, r24	; 0x05
	crc16 = CRC16((unsigned char*)rfunction10, BUFSIZE - 2);
     bf2:	66 e0       	ldi	r22, 0x06	; 6
     bf4:	70 e0       	ldi	r23, 0x00	; 0
     bf6:	ce 01       	movw	r24, r28
     bf8:	6c df       	rcall	.-296    	; 0xad2 <_Z5CRC16Phi>
	rfunction10->CRC = crc16;
     bfa:	9f 83       	std	Y+7, r25	; 0x07
     bfc:	8e 83       	std	Y+6, r24	; 0x06
}
     bfe:	df 91       	pop	r29
     c00:	cf 91       	pop	r28
     c02:	08 95       	ret

00000c04 <_Z16GetExceptionCodeP16RspExceptionCodecc>:
void GetExceptionCode(RspExceptionCode* Exception,char adr,char Exception_code)
{
     c04:	cf 93       	push	r28
     c06:	df 93       	push	r29
     c08:	ec 01       	movw	r28, r24
	unsigned short crc16;
	unsigned int BUFSIZE = sizeof(RspExceptionCode);
	Exception->Address = adr;
     c0a:	68 83       	st	Y, r22
	Exception->FunctionCode = 0x81;
     c0c:	81 e8       	ldi	r24, 0x81	; 129
     c0e:	89 83       	std	Y+1, r24	; 0x01
	Exception->ExceptionCode = Exception_code;
     c10:	4a 83       	std	Y+2, r20	; 0x02
	crc16 = CRC16((unsigned char*)Exception, BUFSIZE - 2);
     c12:	63 e0       	ldi	r22, 0x03	; 3
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	ce 01       	movw	r24, r28
     c18:	5c df       	rcall	.-328    	; 0xad2 <_Z5CRC16Phi>
	Exception->CRC = crc16;
     c1a:	9c 83       	std	Y+4, r25	; 0x04
     c1c:	8b 83       	std	Y+3, r24	; 0x03
}
     c1e:	df 91       	pop	r29
     c20:	cf 91       	pop	r28
     c22:	08 95       	ret

00000c24 <_ZN12SerialBufferC1EP11Dev_Manager8Dev_type>:
	Temp = Integer % 10;	
	Temp = HexaString[Temp];
	dev->Write(this->type,Temp);

	
}
     c24:	1f 93       	push	r17
     c26:	cf 93       	push	r28
     c28:	df 93       	push	r29
     c2a:	ec 01       	movw	r28, r24
     c2c:	cb 01       	movw	r24, r22
     c2e:	14 2f       	mov	r17, r20
     c30:	fe 01       	movw	r30, r28
     c32:	ea 57       	subi	r30, 0x7A	; 122
     c34:	ff 4f       	sbci	r31, 0xFF	; 255
     c36:	71 83       	std	Z+1, r23	; 0x01
     c38:	60 83       	st	Z, r22
     c3a:	64 2f       	mov	r22, r20
     c3c:	f6 d3       	rcall	.+2028   	; 0x142a <_ZN11Dev_Manager12Driver_CheckE8Dev_type>
     c3e:	88 23       	and	r24, r24
     c40:	71 f0       	breq	.+28     	; 0xc5e <_ZN12SerialBufferC1EP11Dev_Manager8Dev_type+0x3a>
     c42:	fe 01       	movw	r30, r28
     c44:	eb 57       	subi	r30, 0x7B	; 123
     c46:	ff 4f       	sbci	r31, 0xFF	; 255
     c48:	10 83       	st	Z, r17
     c4a:	31 97       	sbiw	r30, 0x01	; 1
     c4c:	10 82       	st	Z, r1
     c4e:	34 97       	sbiw	r30, 0x04	; 4
     c50:	11 82       	std	Z+1, r1	; 0x01
     c52:	10 82       	st	Z, r1
     c54:	ce 57       	subi	r28, 0x7E	; 126
     c56:	df 4f       	sbci	r29, 0xFF	; 255
     c58:	19 82       	std	Y+1, r1	; 0x01
     c5a:	18 82       	st	Y, r1
     c5c:	04 c0       	rjmp	.+8      	; 0xc66 <_ZN12SerialBufferC1EP11Dev_Manager8Dev_type+0x42>
     c5e:	ca 57       	subi	r28, 0x7A	; 122
     c60:	df 4f       	sbci	r29, 0xFF	; 255
     c62:	19 82       	std	Y+1, r1	; 0x01
     c64:	18 82       	st	Y, r1
     c66:	df 91       	pop	r29
     c68:	cf 91       	pop	r28
     c6a:	1f 91       	pop	r17
     c6c:	08 95       	ret

00000c6e <_ZN12SerialBuffernwEj>:
     c6e:	0c 94 56 1c 	jmp	0x38ac	; 0x38ac <pvPortMalloc>
     c72:	08 95       	ret

00000c74 <_ZN12SerialBuffer11SerialstoreEc>:
     c74:	fc 01       	movw	r30, r24
     c76:	e0 58       	subi	r30, 0x80	; 128
     c78:	ff 4f       	sbci	r31, 0xFF	; 255
     c7a:	20 81       	ld	r18, Z
     c7c:	2f 5f       	subi	r18, 0xFF	; 255
     c7e:	2f 77       	andi	r18, 0x7F	; 127
     c80:	19 f4       	brne	.+6      	; 0xc88 <_ZN12SerialBuffer11SerialstoreEc+0x14>
     c82:	11 82       	std	Z+1, r1	; 0x01
     c84:	10 82       	st	Z, r1
     c86:	21 e0       	ldi	r18, 0x01	; 1
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	fc 01       	movw	r30, r24
     c8c:	ee 57       	subi	r30, 0x7E	; 126
     c8e:	ff 4f       	sbci	r31, 0xFF	; 255
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	24 17       	cp	r18, r20
     c96:	35 07       	cpc	r19, r21
     c98:	89 f0       	breq	.+34     	; 0xcbc <_ZN12SerialBuffer11SerialstoreEc+0x48>
     c9a:	dc 01       	movw	r26, r24
     c9c:	a0 58       	subi	r26, 0x80	; 128
     c9e:	bf 4f       	sbci	r27, 0xFF	; 255
     ca0:	ed 91       	ld	r30, X+
     ca2:	fc 91       	ld	r31, X
     ca4:	11 97       	sbiw	r26, 0x01	; 1
     ca6:	e8 0f       	add	r30, r24
     ca8:	f9 1f       	adc	r31, r25
     caa:	61 83       	std	Z+1, r22	; 0x01
     cac:	2d 93       	st	X+, r18
     cae:	3c 93       	st	X, r19
     cb0:	fc 01       	movw	r30, r24
     cb2:	ec 57       	subi	r30, 0x7C	; 124
     cb4:	ff 4f       	sbci	r31, 0xFF	; 255
     cb6:	80 81       	ld	r24, Z
     cb8:	8f 5f       	subi	r24, 0xFF	; 255
     cba:	80 83       	st	Z, r24
     cbc:	08 95       	ret

00000cbe <_ZN12SerialBuffer11SerialWriteEPKci>:
     cbe:	af 92       	push	r10
     cc0:	bf 92       	push	r11
     cc2:	cf 92       	push	r12
     cc4:	df 92       	push	r13
     cc6:	ef 92       	push	r14
     cc8:	ff 92       	push	r15
     cca:	0f 93       	push	r16
     ccc:	1f 93       	push	r17
     cce:	cf 93       	push	r28
     cd0:	8c 01       	movw	r16, r24
     cd2:	6b 01       	movw	r12, r22
     cd4:	7a 01       	movw	r14, r20
     cd6:	dc 01       	movw	r26, r24
     cd8:	ab 57       	subi	r26, 0x7B	; 123
     cda:	bf 4f       	sbci	r27, 0xFF	; 255
     cdc:	fc 01       	movw	r30, r24
     cde:	ea 57       	subi	r30, 0x7A	; 122
     ce0:	ff 4f       	sbci	r31, 0xFF	; 255
     ce2:	6c 91       	ld	r22, X
     ce4:	80 81       	ld	r24, Z
     ce6:	91 81       	ldd	r25, Z+1	; 0x01
     ce8:	ad d3       	rcall	.+1882   	; 0x1444 <_ZNK11Dev_Manager16getInterfaceAddrE8Dev_type>
     cea:	89 2b       	or	r24, r25
     cec:	d1 f0       	breq	.+52     	; 0xd22 <_ZN12SerialBuffer11SerialWriteEPKci+0x64>
     cee:	1e 14       	cp	r1, r14
     cf0:	1f 04       	cpc	r1, r15
     cf2:	bc f4       	brge	.+46     	; 0xd22 <_ZN12SerialBuffer11SerialWriteEPKci+0x64>
     cf4:	c0 e0       	ldi	r28, 0x00	; 0
     cf6:	58 01       	movw	r10, r16
     cf8:	85 e8       	ldi	r24, 0x85	; 133
     cfa:	a8 0e       	add	r10, r24
     cfc:	b1 1c       	adc	r11, r1
     cfe:	0a 57       	subi	r16, 0x7A	; 122
     d00:	1f 4f       	sbci	r17, 0xFF	; 255
     d02:	f6 01       	movw	r30, r12
     d04:	ec 0f       	add	r30, r28
     d06:	f1 1d       	adc	r31, r1
     d08:	40 81       	ld	r20, Z
     d0a:	f5 01       	movw	r30, r10
     d0c:	60 81       	ld	r22, Z
     d0e:	f8 01       	movw	r30, r16
     d10:	80 81       	ld	r24, Z
     d12:	91 81       	ldd	r25, Z+1	; 0x01
     d14:	43 d3       	rcall	.+1670   	; 0x139c <_ZN11Dev_Manager5WriteE8Dev_typec>
     d16:	cf 5f       	subi	r28, 0xFF	; 255
     d18:	2c 2f       	mov	r18, r28
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	2e 15       	cp	r18, r14
     d1e:	3f 05       	cpc	r19, r15
     d20:	84 f3       	brlt	.-32     	; 0xd02 <_ZN12SerialBuffer11SerialWriteEPKci+0x44>
     d22:	cf 91       	pop	r28
     d24:	1f 91       	pop	r17
     d26:	0f 91       	pop	r16
     d28:	ff 90       	pop	r15
     d2a:	ef 90       	pop	r14
     d2c:	df 90       	pop	r13
     d2e:	cf 90       	pop	r12
     d30:	bf 90       	pop	r11
     d32:	af 90       	pop	r10
     d34:	08 95       	ret

00000d36 <_ZN12SerialBuffer10SerialReadEv>:
char SerialBuffer::SerialRead(void) //데이터 읽기
{
	if (ib.head == ib.tail)
     d36:	fc 01       	movw	r30, r24
     d38:	ee 57       	subi	r30, 0x7E	; 126
     d3a:	ff 4f       	sbci	r31, 0xFF	; 255
     d3c:	20 81       	ld	r18, Z
     d3e:	31 81       	ldd	r19, Z+1	; 0x01
     d40:	32 97       	sbiw	r30, 0x02	; 2
     d42:	40 81       	ld	r20, Z
     d44:	51 81       	ldd	r21, Z+1	; 0x01
     d46:	42 17       	cp	r20, r18
     d48:	53 07       	cpc	r21, r19
     d4a:	e9 f0       	breq	.+58     	; 0xd86 <_ZN12SerialBuffer10SerialReadEv+0x50>
	{
		return -1;
	}
	else
	{
		unsigned char data = ib.internalBuffer[ib.tail + 1];
     d4c:	2f 5f       	subi	r18, 0xFF	; 255
     d4e:	3f 4f       	sbci	r19, 0xFF	; 255
     d50:	fc 01       	movw	r30, r24
     d52:	e2 0f       	add	r30, r18
     d54:	f3 1f       	adc	r31, r19
     d56:	40 81       	ld	r20, Z
		ib.tail = (ib.tail + 1) % RX_BUFFER_SIZE;
     d58:	2f 77       	andi	r18, 0x7F	; 127
     d5a:	33 27       	eor	r19, r19
     d5c:	fc 01       	movw	r30, r24
     d5e:	ee 57       	subi	r30, 0x7E	; 126
     d60:	ff 4f       	sbci	r31, 0xFF	; 255
     d62:	31 83       	std	Z+1, r19	; 0x01
     d64:	20 83       	st	Z, r18
		if (ib.tail == num)
     d66:	32 96       	adiw	r30, 0x02	; 2
     d68:	60 81       	ld	r22, Z
     d6a:	70 e0       	ldi	r23, 0x00	; 0
     d6c:	26 17       	cp	r18, r22
     d6e:	37 07       	cpc	r19, r23
     d70:	61 f4       	brne	.+24     	; 0xd8a <_ZN12SerialBuffer10SerialReadEv+0x54>
		{
			ib.tail = 0;
     d72:	32 97       	sbiw	r30, 0x02	; 2
     d74:	11 82       	std	Z+1, r1	; 0x01
     d76:	10 82       	st	Z, r1
			ib.head = 0;
     d78:	32 97       	sbiw	r30, 0x02	; 2
     d7a:	11 82       	std	Z+1, r1	; 0x01
     d7c:	10 82       	st	Z, r1
			num = 0;
     d7e:	34 96       	adiw	r30, 0x04	; 4
     d80:	10 82       	st	Z, r1
		}
		return data;
     d82:	84 2f       	mov	r24, r20
     d84:	08 95       	ret
}
char SerialBuffer::SerialRead(void) //데이터 읽기
{
	if (ib.head == ib.tail)
	{
		return -1;
     d86:	8f ef       	ldi	r24, 0xFF	; 255
     d88:	08 95       	ret
		{
			ib.tail = 0;
			ib.head = 0;
			num = 0;
		}
		return data;
     d8a:	84 2f       	mov	r24, r20
	}
}
     d8c:	08 95       	ret

00000d8e <_ZN12SerialBuffer15SerialAvailableEv>:
unsigned char SerialBuffer::SerialAvailable(void) // 가용 자원수 확인
{
	return (unsigned char)(RX_BUFFER_SIZE + (ib.head - ib.tail)) % RX_BUFFER_SIZE;
     d8e:	dc 01       	movw	r26, r24
     d90:	a0 58       	subi	r26, 0x80	; 128
     d92:	bf 4f       	sbci	r27, 0xFF	; 255
     d94:	fc 01       	movw	r30, r24
     d96:	ee 57       	subi	r30, 0x7E	; 126
     d98:	ff 4f       	sbci	r31, 0xFF	; 255
     d9a:	8c 91       	ld	r24, X
     d9c:	90 81       	ld	r25, Z
     d9e:	89 1b       	sub	r24, r25
}
     da0:	8f 77       	andi	r24, 0x7F	; 127
     da2:	08 95       	ret

00000da4 <_ZN12SerialBuffer11SerialFlushEv>:

void SerialBuffer::SerialFlush(void)// 버퍼를 비운다.
{
	ib.tail = 0;
     da4:	fc 01       	movw	r30, r24
     da6:	ee 57       	subi	r30, 0x7E	; 126
     da8:	ff 4f       	sbci	r31, 0xFF	; 255
     daa:	11 82       	std	Z+1, r1	; 0x01
     dac:	10 82       	st	Z, r1
	ib.head = 0;
     dae:	32 97       	sbiw	r30, 0x02	; 2
     db0:	11 82       	std	Z+1, r1	; 0x01
     db2:	10 82       	st	Z, r1
	num = 0;
     db4:	34 96       	adiw	r30, 0x04	; 4
     db6:	10 82       	st	Z, r1
     db8:	08 95       	ret

00000dba <_ZN22DFRobotHighTemperatureC1Ef>:
DFRobotHighTemperature::DFRobotHighTemperature(float v)  //Constructor
{
	_voltageRef = v;
}

DFRobotHighTemperature::~DFRobotHighTemperature()		//Destructor
     dba:	fc 01       	movw	r30, r24
     dbc:	40 83       	st	Z, r20
     dbe:	51 83       	std	Z+1, r21	; 0x01
     dc0:	62 83       	std	Z+2, r22	; 0x02
     dc2:	73 83       	std	Z+3, r23	; 0x03
     dc4:	08 95       	ret

00000dc6 <_ZN22DFRobotHighTemperature4compEfi>:
            mid = front + (end - front) / 2;
        }
    return mid;
}
int DFRobotHighTemperature::comp(float pt, int i) //Which number is closer on the two adjacent numbers.
{
     dc6:	4f 92       	push	r4
     dc8:	5f 92       	push	r5
     dca:	6f 92       	push	r6
     dcc:	7f 92       	push	r7
     dce:	8f 92       	push	r8
     dd0:	9f 92       	push	r9
     dd2:	af 92       	push	r10
     dd4:	bf 92       	push	r11
     dd6:	cf 92       	push	r12
     dd8:	df 92       	push	r13
     dda:	ef 92       	push	r14
     ddc:	ff 92       	push	r15
     dde:	0f 93       	push	r16
     de0:	1f 93       	push	r17
     de2:	cf 93       	push	r28
     de4:	df 93       	push	r29
     de6:	cb 01       	movw	r24, r22
     de8:	ba 01       	movw	r22, r20
     dea:	e9 01       	movw	r28, r18
    if ((pt - pgm_read_float(&PT100Tab[i])) > (pgm_read_float(&PT100Tab[i + 1]) - pgm_read_float(&PT100Tab[i])) / 2 )
     dec:	22 0f       	add	r18, r18
     dee:	33 1f       	adc	r19, r19
     df0:	22 0f       	add	r18, r18
     df2:	33 1f       	adc	r19, r19
     df4:	d9 01       	movw	r26, r18
     df6:	a4 57       	subi	r26, 0x74	; 116
     df8:	bf 4f       	sbci	r27, 0xFF	; 255
     dfa:	fd 01       	movw	r30, r26
     dfc:	25 91       	lpm	r18, Z+
     dfe:	35 91       	lpm	r19, Z+
     e00:	45 91       	lpm	r20, Z+
     e02:	54 91       	lpm	r21, Z
     e04:	8e 01       	movw	r16, r28
     e06:	0f 5f       	subi	r16, 0xFF	; 255
     e08:	1f 4f       	sbci	r17, 0xFF	; 255
     e0a:	f8 01       	movw	r30, r16
     e0c:	ee 0f       	add	r30, r30
     e0e:	ff 1f       	adc	r31, r31
     e10:	ee 0f       	add	r30, r30
     e12:	ff 1f       	adc	r31, r31
     e14:	e4 57       	subi	r30, 0x74	; 116
     e16:	ff 4f       	sbci	r31, 0xFF	; 255
     e18:	85 90       	lpm	r8, Z+
     e1a:	95 90       	lpm	r9, Z+
     e1c:	a5 90       	lpm	r10, Z+
     e1e:	b4 90       	lpm	r11, Z
     e20:	fd 01       	movw	r30, r26
     e22:	45 90       	lpm	r4, Z+
     e24:	55 90       	lpm	r5, Z+
     e26:	65 90       	lpm	r6, Z+
     e28:	74 90       	lpm	r7, Z
     e2a:	0e 94 d8 25 	call	0x4bb0	; 0x4bb0 <__subsf3>
     e2e:	6b 01       	movw	r12, r22
     e30:	7c 01       	movw	r14, r24
     e32:	a3 01       	movw	r20, r6
     e34:	92 01       	movw	r18, r4
     e36:	c5 01       	movw	r24, r10
     e38:	b4 01       	movw	r22, r8
     e3a:	0e 94 d8 25 	call	0x4bb0	; 0x4bb0 <__subsf3>
     e3e:	20 e0       	ldi	r18, 0x00	; 0
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	40 e0       	ldi	r20, 0x00	; 0
     e44:	5f e3       	ldi	r21, 0x3F	; 63
     e46:	0e 94 90 27 	call	0x4f20	; 0x4f20 <__mulsf3>
     e4a:	9b 01       	movw	r18, r22
     e4c:	ac 01       	movw	r20, r24
     e4e:	c7 01       	movw	r24, r14
     e50:	b6 01       	movw	r22, r12
     e52:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <__gesf2>
     e56:	18 16       	cp	r1, r24
     e58:	0c f0       	brlt	.+2      	; 0xe5c <_ZN22DFRobotHighTemperature4compEfi+0x96>
        return i + 1;
    else
        return i;
     e5a:	8e 01       	movw	r16, r28
}
     e5c:	c8 01       	movw	r24, r16
     e5e:	df 91       	pop	r29
     e60:	cf 91       	pop	r28
     e62:	1f 91       	pop	r17
     e64:	0f 91       	pop	r16
     e66:	ff 90       	pop	r15
     e68:	ef 90       	pop	r14
     e6a:	df 90       	pop	r13
     e6c:	cf 90       	pop	r12
     e6e:	bf 90       	pop	r11
     e70:	af 90       	pop	r10
     e72:	9f 90       	pop	r9
     e74:	8f 90       	pop	r8
     e76:	7f 90       	pop	r7
     e78:	6f 90       	pop	r6
     e7a:	5f 90       	pop	r5
     e7c:	4f 90       	pop	r4
     e7e:	08 95       	ret

00000e80 <_ZN22DFRobotHighTemperature15readTemperatureEj>:
DFRobotHighTemperature::~DFRobotHighTemperature()		//Destructor
{
	
}
int DFRobotHighTemperature::readTemperature(unsigned int sensorValue)     //Get temperature
{
     e80:	4f 92       	push	r4
     e82:	5f 92       	push	r5
     e84:	6f 92       	push	r6
     e86:	7f 92       	push	r7
     e88:	af 92       	push	r10
     e8a:	bf 92       	push	r11
     e8c:	cf 92       	push	r12
     e8e:	df 92       	push	r13
     e90:	ef 92       	push	r14
     e92:	ff 92       	push	r15
     e94:	0f 93       	push	r16
     e96:	1f 93       	push	r17
     e98:	cf 93       	push	r28
     e9a:	df 93       	push	r29
     e9c:	5c 01       	movw	r10, r24
    float voltage = 0,res = 0;
    voltage = sensorValue * 0.0048828125;//_voltageRef / 1024.0;  //If your microcontroller are a 12 bit ADC, you should be change 1024 to 4096
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	0e 94 da 26 	call	0x4db4	; 0x4db4 <__floatunsisf>
     ea6:	20 e0       	ldi	r18, 0x00	; 0
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	40 ea       	ldi	r20, 0xA0	; 160
     eac:	5b e3       	ldi	r21, 0x3B	; 59
     eae:	0e 94 90 27 	call	0x4f20	; 0x4f20 <__mulsf3>
     eb2:	6b 01       	movw	r12, r22
     eb4:	7c 01       	movw	r14, r24
	//If you have a DS18B20 on hand, you can make a more accurate calibration.
	//change 220.9 to 210.9 or 230.9,and you need change 2.209 to 2.109 or 2.309 at the same time to accurate calibration.
	res =  (1800 * voltage + 220.9 * 18) / (2.209 * 18 - voltage);
     eb6:	20 e0       	ldi	r18, 0x00	; 0
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	41 ee       	ldi	r20, 0xE1	; 225
     ebc:	54 e4       	ldi	r21, 0x44	; 68
     ebe:	0e 94 90 27 	call	0x4f20	; 0x4f20 <__mulsf3>
     ec2:	23 e3       	ldi	r18, 0x33	; 51
     ec4:	33 e8       	ldi	r19, 0x83	; 131
     ec6:	48 e7       	ldi	r20, 0x78	; 120
     ec8:	55 e4       	ldi	r21, 0x45	; 69
     eca:	0e 94 d9 25 	call	0x4bb2	; 0x4bb2 <__addsf3>
     ece:	2b 01       	movw	r4, r22
     ed0:	3c 01       	movw	r6, r24
     ed2:	a7 01       	movw	r20, r14
     ed4:	96 01       	movw	r18, r12
     ed6:	6a e4       	ldi	r22, 0x4A	; 74
     ed8:	7c e0       	ldi	r23, 0x0C	; 12
     eda:	8f e1       	ldi	r24, 0x1F	; 31
     edc:	92 e4       	ldi	r25, 0x42	; 66
     ede:	0e 94 d8 25 	call	0x4bb0	; 0x4bb0 <__subsf3>
     ee2:	9b 01       	movw	r18, r22
     ee4:	ac 01       	movw	r20, r24
     ee6:	c3 01       	movw	r24, r6
     ee8:	b2 01       	movw	r22, r4
     eea:	0e 94 41 26 	call	0x4c82	; 0x4c82 <__divsf3>
     eee:	2b 01       	movw	r4, r22
     ef0:	3c 01       	movw	r6, r24
	//res =  (1800 * voltage + 235.9 * 18) / (2.359 * 18 - voltage);
	//searched by the halving method
    int front = 0, end = 0, mid = 0;
    front = 0;
    end = 399;
    mid = (front + end) / 2;
     ef2:	c7 ec       	ldi	r28, 0xC7	; 199
     ef4:	d0 e0       	ldi	r29, 0x00	; 0
	res =  (1800 * voltage + 220.9 * 18) / (2.209 * 18 - voltage);
	//res =  (1800 * voltage + 235.9 * 18) / (2.359 * 18 - voltage);
	//searched by the halving method
    int front = 0, end = 0, mid = 0;
    front = 0;
    end = 399;
     ef6:	0f 2e       	mov	r0, r31
     ef8:	ff e8       	ldi	r31, 0x8F	; 143
     efa:	cf 2e       	mov	r12, r31
     efc:	dd 24       	eor	r13, r13
     efe:	d3 94       	inc	r13
     f00:	f0 2d       	mov	r31, r0
	//change 220.9 to 210.9 or 230.9,and you need change 2.209 to 2.109 or 2.309 at the same time to accurate calibration.
	res =  (1800 * voltage + 220.9 * 18) / (2.209 * 18 - voltage);
	//res =  (1800 * voltage + 235.9 * 18) / (2.359 * 18 - voltage);
	//searched by the halving method
    int front = 0, end = 0, mid = 0;
    front = 0;
     f02:	e1 2c       	mov	r14, r1
     f04:	f1 2c       	mov	r15, r1
    end = 399;
    mid = (front + end) / 2;
    while (front < end && pgm_read_float(&PT100Tab[mid]) != res)  
     f06:	8e 01       	movw	r16, r28
     f08:	00 0f       	add	r16, r16
     f0a:	11 1f       	adc	r17, r17
     f0c:	00 0f       	add	r16, r16
     f0e:	11 1f       	adc	r17, r17
     f10:	04 57       	subi	r16, 0x74	; 116
     f12:	1f 4f       	sbci	r17, 0xFF	; 255
     f14:	f8 01       	movw	r30, r16
     f16:	25 91       	lpm	r18, Z+
     f18:	35 91       	lpm	r19, Z+
     f1a:	45 91       	lpm	r20, Z+
     f1c:	54 91       	lpm	r21, Z
     f1e:	c3 01       	movw	r24, r6
     f20:	b2 01       	movw	r22, r4
     f22:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <__cmpsf2>
     f26:	81 11       	cpse	r24, r1
     f28:	50 c0       	rjmp	.+160    	; 0xfca <_ZN22DFRobotHighTemperature15readTemperatureEj+0x14a>
     f2a:	5c c0       	rjmp	.+184    	; 0xfe4 <_ZN22DFRobotHighTemperature15readTemperatureEj+0x164>
        {
            if (pgm_read_float(&PT100Tab[mid]) < res)
                if (pgm_read_float(&PT100Tab[mid + 1]) < res)
     f2c:	7e 01       	movw	r14, r28
     f2e:	8f ef       	ldi	r24, 0xFF	; 255
     f30:	e8 1a       	sub	r14, r24
     f32:	f8 0a       	sbc	r15, r24
     f34:	f7 01       	movw	r30, r14
     f36:	ee 0f       	add	r30, r30
     f38:	ff 1f       	adc	r31, r31
     f3a:	ee 0f       	add	r30, r30
     f3c:	ff 1f       	adc	r31, r31
     f3e:	e4 57       	subi	r30, 0x74	; 116
     f40:	ff 4f       	sbci	r31, 0xFF	; 255
     f42:	25 91       	lpm	r18, Z+
     f44:	35 91       	lpm	r19, Z+
     f46:	45 91       	lpm	r20, Z+
     f48:	54 91       	lpm	r21, Z
     f4a:	c3 01       	movw	r24, r6
     f4c:	b2 01       	movw	r22, r4
     f4e:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <__gesf2>
     f52:	18 16       	cp	r1, r24
     f54:	34 f0       	brlt	.+12     	; 0xf62 <_ZN22DFRobotHighTemperature15readTemperatureEj+0xe2>
                    front = mid + 1;
                else
                    {
                        mid = comp(res, mid);
     f56:	9e 01       	movw	r18, r28
     f58:	b3 01       	movw	r22, r6
     f5a:	a2 01       	movw	r20, r4
     f5c:	c5 01       	movw	r24, r10
     f5e:	33 df       	rcall	.-410    	; 0xdc6 <_ZN22DFRobotHighTemperature4compEfi>
                        return mid;
     f60:	43 c0       	rjmp	.+134    	; 0xfe8 <_ZN22DFRobotHighTemperature15readTemperatureEj+0x168>
                    }
            if (pgm_read_float(&PT100Tab[mid]) > res)
     f62:	f8 01       	movw	r30, r16
     f64:	25 91       	lpm	r18, Z+
     f66:	35 91       	lpm	r19, Z+
     f68:	45 91       	lpm	r20, Z+
     f6a:	54 91       	lpm	r21, Z
     f6c:	c3 01       	movw	r24, r6
     f6e:	b2 01       	movw	r22, r4
     f70:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <__cmpsf2>
     f74:	88 23       	and	r24, r24
     f76:	dc f4       	brge	.+54     	; 0xfae <_ZN22DFRobotHighTemperature15readTemperatureEj+0x12e>
                if (pgm_read_float(&PT100Tab[mid - 1]) > res)
     f78:	6e 01       	movw	r12, r28
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	c8 1a       	sub	r12, r24
     f7e:	d1 08       	sbc	r13, r1
     f80:	f6 01       	movw	r30, r12
     f82:	ee 0f       	add	r30, r30
     f84:	ff 1f       	adc	r31, r31
     f86:	ee 0f       	add	r30, r30
     f88:	ff 1f       	adc	r31, r31
     f8a:	e4 57       	subi	r30, 0x74	; 116
     f8c:	ff 4f       	sbci	r31, 0xFF	; 255
     f8e:	25 91       	lpm	r18, Z+
     f90:	35 91       	lpm	r19, Z+
     f92:	45 91       	lpm	r20, Z+
     f94:	54 91       	lpm	r21, Z
     f96:	c3 01       	movw	r24, r6
     f98:	b2 01       	movw	r22, r4
     f9a:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <__cmpsf2>
     f9e:	88 23       	and	r24, r24
     fa0:	34 f0       	brlt	.+12     	; 0xfae <_ZN22DFRobotHighTemperature15readTemperatureEj+0x12e>
                    end = mid - 1;
                else
                    {
                        mid = comp(res, mid - 1);
     fa2:	96 01       	movw	r18, r12
     fa4:	b3 01       	movw	r22, r6
     fa6:	a2 01       	movw	r20, r4
     fa8:	c5 01       	movw	r24, r10
     faa:	0d df       	rcall	.-486    	; 0xdc6 <_ZN22DFRobotHighTemperature4compEfi>
                        return mid;
     fac:	1d c0       	rjmp	.+58     	; 0xfe8 <_ZN22DFRobotHighTemperature15readTemperatureEj+0x168>
                    }
            mid = front + (end - front) / 2;
     fae:	c6 01       	movw	r24, r12
     fb0:	8e 19       	sub	r24, r14
     fb2:	9f 09       	sbc	r25, r15
     fb4:	ec 01       	movw	r28, r24
     fb6:	0a f4       	brpl	.+2      	; 0xfba <_ZN22DFRobotHighTemperature15readTemperatureEj+0x13a>
     fb8:	21 96       	adiw	r28, 0x01	; 1
     fba:	d5 95       	asr	r29
     fbc:	c7 95       	ror	r28
     fbe:	ce 0d       	add	r28, r14
     fc0:	df 1d       	adc	r29, r15
	//searched by the halving method
    int front = 0, end = 0, mid = 0;
    front = 0;
    end = 399;
    mid = (front + end) / 2;
    while (front < end && pgm_read_float(&PT100Tab[mid]) != res)  
     fc2:	ec 14       	cp	r14, r12
     fc4:	fd 04       	cpc	r15, r13
     fc6:	74 f4       	brge	.+28     	; 0xfe4 <_ZN22DFRobotHighTemperature15readTemperatureEj+0x164>
     fc8:	9e cf       	rjmp	.-196    	; 0xf06 <_ZN22DFRobotHighTemperature15readTemperatureEj+0x86>
        {
            if (pgm_read_float(&PT100Tab[mid]) < res)
     fca:	f8 01       	movw	r30, r16
     fcc:	25 91       	lpm	r18, Z+
     fce:	35 91       	lpm	r19, Z+
     fd0:	45 91       	lpm	r20, Z+
     fd2:	54 91       	lpm	r21, Z
     fd4:	c3 01       	movw	r24, r6
     fd6:	b2 01       	movw	r22, r4
     fd8:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <__gesf2>
     fdc:	18 16       	cp	r1, r24
     fde:	0c f4       	brge	.+2      	; 0xfe2 <_ZN22DFRobotHighTemperature15readTemperatureEj+0x162>
     fe0:	a5 cf       	rjmp	.-182    	; 0xf2c <_ZN22DFRobotHighTemperature15readTemperatureEj+0xac>
     fe2:	bf cf       	rjmp	.-130    	; 0xf62 <_ZN22DFRobotHighTemperature15readTemperatureEj+0xe2>
                if (pgm_read_float(&PT100Tab[mid - 1]) > res)
                    end = mid - 1;
                else
                    {
                        mid = comp(res, mid - 1);
                        return mid;
     fe4:	8c 2f       	mov	r24, r28
     fe6:	9d 2f       	mov	r25, r29
                    }
            mid = front + (end - front) / 2;
        }
    return mid;
}
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	1f 91       	pop	r17
     fee:	0f 91       	pop	r16
     ff0:	ff 90       	pop	r15
     ff2:	ef 90       	pop	r14
     ff4:	df 90       	pop	r13
     ff6:	cf 90       	pop	r12
     ff8:	bf 90       	pop	r11
     ffa:	af 90       	pop	r10
     ffc:	7f 90       	pop	r7
     ffe:	6f 90       	pop	r6
    1000:	5f 90       	pop	r5
    1002:	4f 90       	pop	r4
    1004:	08 95       	ret

00001006 <_ZN20DeviceDriveInterFace13Device_WritesEPKc>:
class DeviceDriveInterFace
{
	public:
	virtual void Device_Init() = 0;
	virtual char Device_Read() const{return 0;}
	virtual void Device_Writes(const char* data){}
    1006:	08 95       	ret

00001008 <_ZN20DeviceDriveInterFace12Device_WriteEc>:
	virtual void Device_Write(char data){}
    1008:	08 95       	ret

0000100a <_ZN20DeviceDriveInterFace11Stop_DeviceEv>:
	virtual void Stop_Device(void){}
    100a:	08 95       	ret

0000100c <_ZN3Adc11Device_InitEv>:
{
	return channel_inf;
}
void Adc::Read_Set()
{
	read_flag = 0;
    100c:	80 e4       	ldi	r24, 0x40	; 64
    100e:	87 b9       	out	0x07, r24	; 7
    1010:	87 e8       	ldi	r24, 0x87	; 135
    1012:	86 b9       	out	0x06, r24	; 6
    1014:	08 95       	ret

00001016 <_ZN3Adc12Start_DeviceEh>:
    1016:	36 99       	sbic	0x06, 6	; 6
    1018:	fe cf       	rjmp	.-4      	; 0x1016 <_ZN3Adc12Start_DeviceEh>
    101a:	87 b1       	in	r24, 0x07	; 7
    101c:	80 7e       	andi	r24, 0xE0	; 224
    101e:	68 2b       	or	r22, r24
    1020:	67 b9       	out	0x07, r22	; 7
    1022:	36 9a       	sbi	0x06, 6	; 6
    1024:	08 95       	ret

00001026 <_ZNK3Adc11Device_ReadEv>:
    1026:	fc 01       	movw	r30, r24
    1028:	82 81       	ldd	r24, Z+2	; 0x02
    102a:	08 95       	ret

0000102c <_ZN3AdcnwEj>:
}
void* Adc::operator new(size_t size)
{
	return malloc(size);
    102c:	0c 94 56 1c 	jmp	0x38ac	; 0x38ac <pvPortMalloc>
}
    1030:	08 95       	ret

00001032 <Alarm_Init>:
	AlarmTable[Alarm].Time = 0;
	AlarmTable[Alarm].alarm_Handle = Handle;
}
void Alarm_Close(Alarm_t Alarm)
{
	AlarmTable[Alarm].alarm_Handle = NULL;
    1032:	8c e0       	ldi	r24, 0x0C	; 12
    1034:	83 bf       	out	0x33, r24	; 51
    1036:	8c e7       	ldi	r24, 0x7C	; 124
    1038:	81 bf       	out	0x31, r24	; 49
    103a:	87 b7       	in	r24, 0x37	; 55
    103c:	82 60       	ori	r24, 0x02	; 2
    103e:	87 bf       	out	0x37, r24	; 55
    1040:	08 95       	ret

00001042 <Alarm_Stop>:
    1042:	87 b7       	in	r24, 0x37	; 55
    1044:	8d 7f       	andi	r24, 0xFD	; 253
    1046:	87 bf       	out	0x37, r24	; 55
    1048:	08 95       	ret

0000104a <Alarm_Start>:
    104a:	87 b7       	in	r24, 0x37	; 55
    104c:	82 60       	ori	r24, 0x02	; 2
    104e:	87 bf       	out	0x37, r24	; 55
    1050:	08 95       	ret

00001052 <Alarm_Open>:
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	fc 01       	movw	r30, r24
    1056:	ee 0f       	add	r30, r30
    1058:	ff 1f       	adc	r31, r31
    105a:	df 01       	movw	r26, r30
    105c:	a8 0f       	add	r26, r24
    105e:	b9 1f       	adc	r27, r25
    1060:	aa 0f       	add	r26, r26
    1062:	bb 1f       	adc	r27, r27
    1064:	ae 5b       	subi	r26, 0xBE	; 190
    1066:	bd 4f       	sbci	r27, 0xFD	; 253
    1068:	11 96       	adiw	r26, 0x01	; 1
    106a:	7c 93       	st	X, r23
    106c:	6e 93       	st	-X, r22
    106e:	13 96       	adiw	r26, 0x03	; 3
    1070:	1c 92       	st	X, r1
    1072:	1e 92       	st	-X, r1
    1074:	12 97       	sbiw	r26, 0x02	; 2
    1076:	fd 01       	movw	r30, r26
    1078:	55 83       	std	Z+5, r21	; 0x05
    107a:	44 83       	std	Z+4, r20	; 0x04
    107c:	08 95       	ret

0000107e <__vector_15>:
}
/*5ms마다 호출됨 */
void TIMER0_COMP_vect(void)
{
    107e:	1f 92       	push	r1
    1080:	0f 92       	push	r0
    1082:	0f b6       	in	r0, 0x3f	; 63
    1084:	0f 92       	push	r0
    1086:	11 24       	eor	r1, r1
    1088:	0b b6       	in	r0, 0x3b	; 59
    108a:	0f 92       	push	r0
    108c:	ef 92       	push	r14
    108e:	ff 92       	push	r15
    1090:	0f 93       	push	r16
    1092:	1f 93       	push	r17
    1094:	2f 93       	push	r18
    1096:	3f 93       	push	r19
    1098:	4f 93       	push	r20
    109a:	5f 93       	push	r21
    109c:	6f 93       	push	r22
    109e:	7f 93       	push	r23
    10a0:	8f 93       	push	r24
    10a2:	9f 93       	push	r25
    10a4:	af 93       	push	r26
    10a6:	bf 93       	push	r27
    10a8:	cf 93       	push	r28
    10aa:	df 93       	push	r29
    10ac:	ef 93       	push	r30
    10ae:	ff 93       	push	r31
    10b0:	c2 e4       	ldi	r28, 0x42	; 66
    10b2:	d2 e0       	ldi	r29, 0x02	; 2
    10b4:	0f 2e       	mov	r0, r31
    10b6:	f0 e6       	ldi	r31, 0x60	; 96
    10b8:	ef 2e       	mov	r14, r31
    10ba:	f2 e0       	ldi	r31, 0x02	; 2
    10bc:	ff 2e       	mov	r15, r31
    10be:	f0 2d       	mov	r31, r0
	uint8_t i;
	for(i=0;i<ALARM_MAX;i++)
	{
		if(AlarmTable[i].alarm_Handle)
    10c0:	ec 81       	ldd	r30, Y+4	; 0x04
    10c2:	fd 81       	ldd	r31, Y+5	; 0x05
    10c4:	30 97       	sbiw	r30, 0x00	; 0
    10c6:	79 f0       	breq	.+30     	; 0x10e6 <__vector_15+0x68>
		{
			AlarmTable[i].Time++;
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	9b 81       	ldd	r25, Y+3	; 0x03
    10cc:	01 96       	adiw	r24, 0x01	; 1
    10ce:	9b 83       	std	Y+3, r25	; 0x03
    10d0:	8a 83       	std	Y+2, r24	; 0x02
			if(AlarmTable[i].Period == AlarmTable[i].Time)
    10d2:	28 81       	ld	r18, Y
    10d4:	39 81       	ldd	r19, Y+1	; 0x01
    10d6:	82 17       	cp	r24, r18
    10d8:	93 07       	cpc	r25, r19
    10da:	29 f4       	brne	.+10     	; 0x10e6 <__vector_15+0x68>
			{
				AlarmTable[i].Time = 0;
    10dc:	1b 82       	std	Y+3, r1	; 0x03
    10de:	1a 82       	std	Y+2, r1	; 0x02
				AlarmTable[i].alarm_Handle();
    10e0:	09 95       	icall
				AlarmTable[i].alarm_Handle = NULL;
    10e2:	1d 82       	std	Y+5, r1	; 0x05
    10e4:	1c 82       	std	Y+4, r1	; 0x04
    10e6:	26 96       	adiw	r28, 0x06	; 6
}
/*5ms마다 호출됨 */
void TIMER0_COMP_vect(void)
{
	uint8_t i;
	for(i=0;i<ALARM_MAX;i++)
    10e8:	ce 15       	cp	r28, r14
    10ea:	df 05       	cpc	r29, r15
    10ec:	49 f7       	brne	.-46     	; 0x10c0 <__vector_15+0x42>
				AlarmTable[i].alarm_Handle();
				AlarmTable[i].alarm_Handle = NULL;
			}
		}
	}
}
    10ee:	ff 91       	pop	r31
    10f0:	ef 91       	pop	r30
    10f2:	df 91       	pop	r29
    10f4:	cf 91       	pop	r28
    10f6:	bf 91       	pop	r27
    10f8:	af 91       	pop	r26
    10fa:	9f 91       	pop	r25
    10fc:	8f 91       	pop	r24
    10fe:	7f 91       	pop	r23
    1100:	6f 91       	pop	r22
    1102:	5f 91       	pop	r21
    1104:	4f 91       	pop	r20
    1106:	3f 91       	pop	r19
    1108:	2f 91       	pop	r18
    110a:	1f 91       	pop	r17
    110c:	0f 91       	pop	r16
    110e:	ff 90       	pop	r15
    1110:	ef 90       	pop	r14
    1112:	0f 90       	pop	r0
    1114:	0b be       	out	0x3b, r0	; 59
    1116:	0f 90       	pop	r0
    1118:	0f be       	out	0x3f, r0	; 63
    111a:	0f 90       	pop	r0
    111c:	1f 90       	pop	r1
    111e:	18 95       	reti

00001120 <_ZNK20DeviceDriveInterFace11Device_ReadEv>:

class DeviceDriveInterFace
{
	public:
	virtual void Device_Init() = 0;
	virtual char Device_Read() const{return 0;}
    1120:	80 e0       	ldi	r24, 0x00	; 0
    1122:	08 95       	ret

00001124 <_ZN20DeviceDriveInterFace12Start_DeviceEh>:
	virtual void Device_Writes(const char* data){}
	virtual void Device_Write(char data){}
	virtual void Stop_Device(void){}
	virtual void Start_Device(unsigned char){}
    1124:	08 95       	ret

00001126 <_ZN13Char_LCD2004A5delayEc>:
	if(addr < 8)
		this->Data_set(addr);
}
void Char_LCD2004A::operator delete(void* ptr)
{
	free(ptr);
    1126:	66 23       	and	r22, r22
    1128:	51 f0       	breq	.+20     	; 0x113e <_ZN13Char_LCD2004A5delayEc+0x18>
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	ef ea       	ldi	r30, 0xAF	; 175
    112e:	f4 e0       	ldi	r31, 0x04	; 4
    1130:	31 97       	sbiw	r30, 0x01	; 1
    1132:	f1 f7       	brne	.-4      	; 0x1130 <_ZN13Char_LCD2004A5delayEc+0xa>
    1134:	00 c0       	rjmp	.+0      	; 0x1136 <_ZN13Char_LCD2004A5delayEc+0x10>
    1136:	00 00       	nop
    1138:	8f 5f       	subi	r24, 0xFF	; 255
    113a:	68 13       	cpse	r22, r24
    113c:	f7 cf       	rjmp	.-18     	; 0x112c <_ZN13Char_LCD2004A5delayEc+0x6>
    113e:	08 95       	ret

00001140 <_ZN13Char_LCD2004A11Command_SetEc>:
    1140:	0f 93       	push	r16
    1142:	1f 93       	push	r17
    1144:	cf 93       	push	r28
    1146:	8c 01       	movw	r16, r24
    1148:	c6 2f       	mov	r28, r22
    114a:	d8 98       	cbi	0x1b, 0	; 27
    114c:	86 2f       	mov	r24, r22
    114e:	80 7f       	andi	r24, 0xF0	; 240
    1150:	8b bb       	out	0x1b, r24	; 27
    1152:	d9 9a       	sbi	0x1b, 1	; 27
    1154:	61 e0       	ldi	r22, 0x01	; 1
    1156:	c8 01       	movw	r24, r16
    1158:	e6 df       	rcall	.-52     	; 0x1126 <_ZN13Char_LCD2004A5delayEc>
    115a:	d9 98       	cbi	0x1b, 1	; 27
    115c:	c2 95       	swap	r28
    115e:	c0 7f       	andi	r28, 0xF0	; 240
    1160:	cb bb       	out	0x1b, r28	; 27
    1162:	d9 9a       	sbi	0x1b, 1	; 27
    1164:	61 e0       	ldi	r22, 0x01	; 1
    1166:	c8 01       	movw	r24, r16
    1168:	de df       	rcall	.-68     	; 0x1126 <_ZN13Char_LCD2004A5delayEc>
    116a:	d9 98       	cbi	0x1b, 1	; 27
    116c:	cf 91       	pop	r28
    116e:	1f 91       	pop	r17
    1170:	0f 91       	pop	r16
    1172:	08 95       	ret

00001174 <_ZN13Char_LCD2004A8Data_setEc>:
    1174:	0f 93       	push	r16
    1176:	1f 93       	push	r17
    1178:	cf 93       	push	r28
    117a:	8c 01       	movw	r16, r24
    117c:	c6 2f       	mov	r28, r22
    117e:	d8 9a       	sbi	0x1b, 0	; 27
    1180:	86 2f       	mov	r24, r22
    1182:	80 7f       	andi	r24, 0xF0	; 240
    1184:	81 60       	ori	r24, 0x01	; 1
    1186:	8b bb       	out	0x1b, r24	; 27
    1188:	d9 9a       	sbi	0x1b, 1	; 27
    118a:	61 e0       	ldi	r22, 0x01	; 1
    118c:	c8 01       	movw	r24, r16
    118e:	cb df       	rcall	.-106    	; 0x1126 <_ZN13Char_LCD2004A5delayEc>
    1190:	d9 98       	cbi	0x1b, 1	; 27
    1192:	80 e1       	ldi	r24, 0x10	; 16
    1194:	c8 9f       	mul	r28, r24
    1196:	b0 01       	movw	r22, r0
    1198:	11 24       	eor	r1, r1
    119a:	61 60       	ori	r22, 0x01	; 1
    119c:	6b bb       	out	0x1b, r22	; 27
    119e:	d9 9a       	sbi	0x1b, 1	; 27
    11a0:	61 e0       	ldi	r22, 0x01	; 1
    11a2:	c8 01       	movw	r24, r16
    11a4:	c0 df       	rcall	.-128    	; 0x1126 <_ZN13Char_LCD2004A5delayEc>
    11a6:	d9 98       	cbi	0x1b, 1	; 27
    11a8:	cf 91       	pop	r28
    11aa:	1f 91       	pop	r17
    11ac:	0f 91       	pop	r16
    11ae:	08 95       	ret

000011b0 <_ZN13Char_LCD2004A13Device_WritesEPKc>:
    11b0:	0f 93       	push	r16
    11b2:	1f 93       	push	r17
    11b4:	cf 93       	push	r28
    11b6:	df 93       	push	r29
    11b8:	eb 01       	movw	r28, r22
    11ba:	68 81       	ld	r22, Y
    11bc:	66 23       	and	r22, r22
    11be:	39 f0       	breq	.+14     	; 0x11ce <_ZN13Char_LCD2004A13Device_WritesEPKc+0x1e>
    11c0:	8c 01       	movw	r16, r24
    11c2:	21 96       	adiw	r28, 0x01	; 1
    11c4:	c8 01       	movw	r24, r16
    11c6:	d6 df       	rcall	.-84     	; 0x1174 <_ZN13Char_LCD2004A8Data_setEc>
    11c8:	69 91       	ld	r22, Y+
    11ca:	61 11       	cpse	r22, r1
    11cc:	fb cf       	rjmp	.-10     	; 0x11c4 <_ZN13Char_LCD2004A13Device_WritesEPKc+0x14>
    11ce:	df 91       	pop	r29
    11d0:	cf 91       	pop	r28
    11d2:	1f 91       	pop	r17
    11d4:	0f 91       	pop	r16
    11d6:	08 95       	ret

000011d8 <_ZN13Char_LCD2004A9Clear_LcdEv>:
    11d8:	cf 93       	push	r28
    11da:	df 93       	push	r29
    11dc:	ec 01       	movw	r28, r24
    11de:	61 e0       	ldi	r22, 0x01	; 1
    11e0:	af df       	rcall	.-162    	; 0x1140 <_ZN13Char_LCD2004A11Command_SetEc>
    11e2:	63 e0       	ldi	r22, 0x03	; 3
    11e4:	ce 01       	movw	r24, r28
    11e6:	9f df       	rcall	.-194    	; 0x1126 <_ZN13Char_LCD2004A5delayEc>
    11e8:	df 91       	pop	r29
    11ea:	cf 91       	pop	r28
    11ec:	08 95       	ret

000011ee <_ZN13Char_LCD2004A11Device_InitEv>:
    11ee:	cf 93       	push	r28
    11f0:	df 93       	push	r29
    11f2:	ec 01       	movw	r28, r24
    11f4:	8f ef       	ldi	r24, 0xFF	; 255
    11f6:	8b bb       	out	0x1b, r24	; 27
    11f8:	68 e2       	ldi	r22, 0x28	; 40
    11fa:	ce 01       	movw	r24, r28
    11fc:	a1 df       	rcall	.-190    	; 0x1140 <_ZN13Char_LCD2004A11Command_SetEc>
    11fe:	66 e0       	ldi	r22, 0x06	; 6
    1200:	ce 01       	movw	r24, r28
    1202:	9e df       	rcall	.-196    	; 0x1140 <_ZN13Char_LCD2004A11Command_SetEc>
    1204:	6c e0       	ldi	r22, 0x0C	; 12
    1206:	ce 01       	movw	r24, r28
    1208:	9b df       	rcall	.-202    	; 0x1140 <_ZN13Char_LCD2004A11Command_SetEc>
    120a:	ce 01       	movw	r24, r28
    120c:	e5 df       	rcall	.-54     	; 0x11d8 <_ZN13Char_LCD2004A9Clear_LcdEv>
    120e:	df 91       	pop	r29
    1210:	cf 91       	pop	r28
    1212:	08 95       	ret

00001214 <_ZN13Char_LCD2004AC1Ev>:
    1214:	2b e5       	ldi	r18, 0x5B	; 91
    1216:	31 e0       	ldi	r19, 0x01	; 1
    1218:	fc 01       	movw	r30, r24
    121a:	31 83       	std	Z+1, r19	; 0x01
    121c:	20 83       	st	Z, r18
    121e:	2f ef       	ldi	r18, 0xFF	; 255
    1220:	2a bb       	out	0x1a, r18	; 26
    1222:	e5 cf       	rjmp	.-54     	; 0x11ee <_ZN13Char_LCD2004A11Device_InitEv>
    1224:	08 95       	ret

00001226 <_ZN13Char_LCD2004A10Cursor_SetEcc>:
    1226:	41 30       	cpi	r20, 0x01	; 1
    1228:	41 f0       	breq	.+16     	; 0x123a <_ZN13Char_LCD2004A10Cursor_SetEcc+0x14>
    122a:	28 f0       	brcs	.+10     	; 0x1236 <_ZN13Char_LCD2004A10Cursor_SetEcc+0x10>
    122c:	42 30       	cpi	r20, 0x02	; 2
    122e:	39 f0       	breq	.+14     	; 0x123e <_ZN13Char_LCD2004A10Cursor_SetEcc+0x18>
    1230:	43 30       	cpi	r20, 0x03	; 3
    1232:	39 f0       	breq	.+14     	; 0x1242 <_ZN13Char_LCD2004A10Cursor_SetEcc+0x1c>
    1234:	07 c0       	rjmp	.+14     	; 0x1244 <_ZN13Char_LCD2004A10Cursor_SetEcc+0x1e>
    1236:	40 e8       	ldi	r20, 0x80	; 128
    1238:	05 c0       	rjmp	.+10     	; 0x1244 <_ZN13Char_LCD2004A10Cursor_SetEcc+0x1e>
    123a:	40 ec       	ldi	r20, 0xC0	; 192
    123c:	03 c0       	rjmp	.+6      	; 0x1244 <_ZN13Char_LCD2004A10Cursor_SetEcc+0x1e>
    123e:	44 e9       	ldi	r20, 0x94	; 148
    1240:	01 c0       	rjmp	.+2      	; 0x1244 <_ZN13Char_LCD2004A10Cursor_SetEcc+0x1e>
    1242:	44 ed       	ldi	r20, 0xD4	; 212
    1244:	64 0f       	add	r22, r20
    1246:	7c cf       	rjmp	.-264    	; 0x1140 <_ZN13Char_LCD2004A11Command_SetEc>
    1248:	08 95       	ret

0000124a <_ZN13Char_LCD2004A16Set_Cursor_PrintEccPKc>:
    124a:	0f 93       	push	r16
    124c:	1f 93       	push	r17
    124e:	cf 93       	push	r28
    1250:	df 93       	push	r29
    1252:	8c 01       	movw	r16, r24
    1254:	e9 01       	movw	r28, r18
    1256:	e7 df       	rcall	.-50     	; 0x1226 <_ZN13Char_LCD2004A10Cursor_SetEcc>
    1258:	68 81       	ld	r22, Y
    125a:	66 23       	and	r22, r22
    125c:	31 f0       	breq	.+12     	; 0x126a <_ZN13Char_LCD2004A16Set_Cursor_PrintEccPKc+0x20>
    125e:	21 96       	adiw	r28, 0x01	; 1
    1260:	c8 01       	movw	r24, r16
    1262:	88 df       	rcall	.-240    	; 0x1174 <_ZN13Char_LCD2004A8Data_setEc>
    1264:	69 91       	ld	r22, Y+
    1266:	61 11       	cpse	r22, r1
    1268:	fb cf       	rjmp	.-10     	; 0x1260 <_ZN13Char_LCD2004A16Set_Cursor_PrintEccPKc+0x16>
    126a:	df 91       	pop	r29
    126c:	cf 91       	pop	r28
    126e:	1f 91       	pop	r17
    1270:	0f 91       	pop	r16
    1272:	08 95       	ret

00001274 <_ZN13Char_LCD2004A9Lcd_PrintEPKc>:
    1274:	0f 93       	push	r16
    1276:	1f 93       	push	r17
    1278:	cf 93       	push	r28
    127a:	df 93       	push	r29
    127c:	eb 01       	movw	r28, r22
    127e:	68 81       	ld	r22, Y
    1280:	66 23       	and	r22, r22
    1282:	39 f0       	breq	.+14     	; 0x1292 <_ZN13Char_LCD2004A9Lcd_PrintEPKc+0x1e>
    1284:	8c 01       	movw	r16, r24
    1286:	21 96       	adiw	r28, 0x01	; 1
    1288:	c8 01       	movw	r24, r16
    128a:	74 df       	rcall	.-280    	; 0x1174 <_ZN13Char_LCD2004A8Data_setEc>
    128c:	69 91       	ld	r22, Y+
    128e:	61 11       	cpse	r22, r1
    1290:	fb cf       	rjmp	.-10     	; 0x1288 <_ZN13Char_LCD2004A9Lcd_PrintEPKc+0x14>
    1292:	df 91       	pop	r29
    1294:	cf 91       	pop	r28
    1296:	1f 91       	pop	r17
    1298:	0f 91       	pop	r16
    129a:	08 95       	ret

0000129c <_ZN13Char_LCD2004A11Cursor_HomeEv>:
    129c:	cf 93       	push	r28
    129e:	df 93       	push	r29
    12a0:	ec 01       	movw	r28, r24
    12a2:	62 e0       	ldi	r22, 0x02	; 2
    12a4:	4d df       	rcall	.-358    	; 0x1140 <_ZN13Char_LCD2004A11Command_SetEc>
    12a6:	63 e0       	ldi	r22, 0x03	; 3
    12a8:	ce 01       	movw	r24, r28
    12aa:	3d df       	rcall	.-390    	; 0x1126 <_ZN13Char_LCD2004A5delayEc>
    12ac:	df 91       	pop	r29
    12ae:	cf 91       	pop	r28
    12b0:	08 95       	ret

000012b2 <_ZN13Char_LCD2004A13Register_FontEcPKh>:
    12b2:	ef 92       	push	r14
    12b4:	ff 92       	push	r15
    12b6:	0f 93       	push	r16
    12b8:	1f 93       	push	r17
    12ba:	cf 93       	push	r28
    12bc:	df 93       	push	r29
    12be:	7c 01       	movw	r14, r24
    12c0:	8a 01       	movw	r16, r20
    12c2:	61 11       	cpse	r22, r1
    12c4:	03 c0       	rjmp	.+6      	; 0x12cc <_ZN13Char_LCD2004A13Register_FontEcPKh+0x1a>
    12c6:	60 e4       	ldi	r22, 0x40	; 64
    12c8:	3b df       	rcall	.-394    	; 0x1140 <_ZN13Char_LCD2004A11Command_SetEc>
    12ca:	09 c0       	rjmp	.+18     	; 0x12de <_ZN13Char_LCD2004A13Register_FontEcPKh+0x2c>
    12cc:	c6 2f       	mov	r28, r22
    12ce:	cc 0f       	add	r28, r28
    12d0:	cc 0f       	add	r28, r28
    12d2:	cc 0f       	add	r28, r28
    12d4:	60 e4       	ldi	r22, 0x40	; 64
    12d6:	6c 0f       	add	r22, r28
    12d8:	33 df       	rcall	.-410    	; 0x1140 <_ZN13Char_LCD2004A11Command_SetEc>
    12da:	c1 34       	cpi	r28, 0x41	; 65
    12dc:	48 f4       	brcc	.+18     	; 0x12f0 <_ZN13Char_LCD2004A13Register_FontEcPKh+0x3e>
    12de:	e8 01       	movw	r28, r16
    12e0:	08 5f       	subi	r16, 0xF8	; 248
    12e2:	1f 4f       	sbci	r17, 0xFF	; 255
    12e4:	69 91       	ld	r22, Y+
    12e6:	c7 01       	movw	r24, r14
    12e8:	45 df       	rcall	.-374    	; 0x1174 <_ZN13Char_LCD2004A8Data_setEc>
    12ea:	c0 17       	cp	r28, r16
    12ec:	d1 07       	cpc	r29, r17
    12ee:	d1 f7       	brne	.-12     	; 0x12e4 <_ZN13Char_LCD2004A13Register_FontEcPKh+0x32>
    12f0:	df 91       	pop	r29
    12f2:	cf 91       	pop	r28
    12f4:	1f 91       	pop	r17
    12f6:	0f 91       	pop	r16
    12f8:	ff 90       	pop	r15
    12fa:	ef 90       	pop	r14
    12fc:	08 95       	ret

000012fe <_ZN13Char_LCD2004A10Font_PrintEc>:
    12fe:	68 30       	cpi	r22, 0x08	; 8
    1300:	08 f4       	brcc	.+2      	; 0x1304 <_ZN13Char_LCD2004A10Font_PrintEc+0x6>
    1302:	38 cf       	rjmp	.-400    	; 0x1174 <_ZN13Char_LCD2004A8Data_setEc>
    1304:	08 95       	ret

00001306 <_ZN13Char_LCD2004AnwEj>:
}
void* Char_LCD2004A::operator new(size_t size)
{
	return malloc(size);
    1306:	0c 94 56 1c 	jmp	0x38ac	; 0x38ac <pvPortMalloc>
}
    130a:	08 95       	ret

0000130c <_ZN12Count_Sensor11Device_InitEv>:
#define cbi(PORTX, BitX) PORTX &= ~(1 << BitX)
void Count_Sensor::Device_Init()
{
	//cbi(DDRD,0); //PORTD 0PIN INPUT
	//sbi(PORTD,0); //USE PULL UP
	DDRD = 0x00;
    130c:	11 ba       	out	0x11, r1	; 17
	PORTD = 0xFF;
    130e:	8f ef       	ldi	r24, 0xFF	; 255
    1310:	82 bb       	out	0x12, r24	; 18
	sbi(EICRA,1);
    1312:	ea e6       	ldi	r30, 0x6A	; 106
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	82 60       	ori	r24, 0x02	; 2
    131a:	80 83       	st	Z, r24
	cbi(EICRA,0);  // ISC10 = 1 ISC00 = 0;
    131c:	80 81       	ld	r24, Z
    131e:	8e 7f       	andi	r24, 0xFE	; 254
    1320:	80 83       	st	Z, r24
	sbi(EIMSK,0);  // 0Pin interrupt Enable;
    1322:	89 b7       	in	r24, 0x39	; 57
    1324:	81 60       	ori	r24, 0x01	; 1
    1326:	89 bf       	out	0x39, r24	; 57
    1328:	08 95       	ret

0000132a <_ZN12Count_SensornwEj>:
}
void* Count_Sensor::operator new(size_t size)
{
	return malloc(size);
    132a:	0c 94 56 1c 	jmp	0x38ac	; 0x38ac <pvPortMalloc>
}
    132e:	08 95       	ret

00001330 <_ZN11Dev_ManagerC1Ev>:
}
void Dev_Manager::Close_Handle(Dev_type Device)
{
	if(interface[Device])
	{
		isr_handle[Device] = nullptr;
    1330:	2a e0       	ldi	r18, 0x0A	; 10
    1332:	dc 01       	movw	r26, r24
    1334:	e2 2f       	mov	r30, r18
    1336:	1d 92       	st	X+, r1
    1338:	ea 95       	dec	r30
    133a:	e9 f7       	brne	.-6      	; 0x1336 <_ZN11Dev_ManagerC1Ev+0x6>
    133c:	fc 01       	movw	r30, r24
    133e:	3a 96       	adiw	r30, 0x0a	; 10
    1340:	df 01       	movw	r26, r30
    1342:	1d 92       	st	X+, r1
    1344:	2a 95       	dec	r18
    1346:	e9 f7       	brne	.-6      	; 0x1342 <_ZN11Dev_ManagerC1Ev+0x12>
    1348:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <_ZN11Dev_Manager4instE+0x1>
    134c:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <_ZN11Dev_Manager4instE>
    1350:	08 95       	ret

00001352 <_ZN11Dev_Manager11getInstanceEv>:
    1352:	cf 93       	push	r28
    1354:	df 93       	push	r29
    1356:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <_ZN11Dev_Manager4instE>
    135a:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <_ZN11Dev_Manager4instE+0x1>
    135e:	89 2b       	or	r24, r25
    1360:	51 f4       	brne	.+20     	; 0x1376 <_ZN11Dev_Manager11getInstanceEv+0x24>
    1362:	84 e1       	ldi	r24, 0x14	; 20
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	0e 94 56 1c 	call	0x38ac	; 0x38ac <pvPortMalloc>
    136a:	ec 01       	movw	r28, r24
    136c:	e1 df       	rcall	.-62     	; 0x1330 <_ZN11Dev_ManagerC1Ev>
    136e:	d0 93 61 02 	sts	0x0261, r29	; 0x800261 <_ZN11Dev_Manager4instE+0x1>
    1372:	c0 93 60 02 	sts	0x0260, r28	; 0x800260 <_ZN11Dev_Manager4instE>
    1376:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <_ZN11Dev_Manager4instE>
    137a:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <_ZN11Dev_Manager4instE+0x1>
    137e:	df 91       	pop	r29
    1380:	cf 91       	pop	r28
    1382:	08 95       	ret

00001384 <_ZN11Dev_Manager12Register_DevEP20DeviceDriveInterFace8Dev_type>:
    1384:	50 e0       	ldi	r21, 0x00	; 0
    1386:	44 0f       	add	r20, r20
    1388:	55 1f       	adc	r21, r21
    138a:	84 0f       	add	r24, r20
    138c:	95 1f       	adc	r25, r21
    138e:	fc 01       	movw	r30, r24
    1390:	71 83       	std	Z+1, r23	; 0x01
    1392:	60 83       	st	Z, r22
    1394:	08 95       	ret

00001396 <_ZN11Dev_ManagernwEj>:
    1396:	0c 94 56 1c 	jmp	0x38ac	; 0x38ac <pvPortMalloc>
    139a:	08 95       	ret

0000139c <_ZN11Dev_Manager5WriteE8Dev_typec>:
    139c:	26 2f       	mov	r18, r22
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	22 0f       	add	r18, r18
    13a2:	33 1f       	adc	r19, r19
    13a4:	82 0f       	add	r24, r18
    13a6:	93 1f       	adc	r25, r19
    13a8:	dc 01       	movw	r26, r24
    13aa:	8d 91       	ld	r24, X+
    13ac:	9c 91       	ld	r25, X
    13ae:	00 97       	sbiw	r24, 0x00	; 0
    13b0:	41 f0       	breq	.+16     	; 0x13c2 <_ZN11Dev_Manager5WriteE8Dev_typec+0x26>
    13b2:	64 2f       	mov	r22, r20
    13b4:	dc 01       	movw	r26, r24
    13b6:	ed 91       	ld	r30, X+
    13b8:	fc 91       	ld	r31, X
    13ba:	06 80       	ldd	r0, Z+6	; 0x06
    13bc:	f7 81       	ldd	r31, Z+7	; 0x07
    13be:	e0 2d       	mov	r30, r0
    13c0:	09 95       	icall
    13c2:	08 95       	ret

000013c4 <_ZN11Dev_Manager6WritesE8Dev_typePKc>:
    13c4:	26 2f       	mov	r18, r22
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	22 0f       	add	r18, r18
    13ca:	33 1f       	adc	r19, r19
    13cc:	82 0f       	add	r24, r18
    13ce:	93 1f       	adc	r25, r19
    13d0:	dc 01       	movw	r26, r24
    13d2:	8d 91       	ld	r24, X+
    13d4:	9c 91       	ld	r25, X
    13d6:	00 97       	sbiw	r24, 0x00	; 0
    13d8:	41 f0       	breq	.+16     	; 0x13ea <_ZN11Dev_Manager6WritesE8Dev_typePKc+0x26>
    13da:	ba 01       	movw	r22, r20
    13dc:	dc 01       	movw	r26, r24
    13de:	ed 91       	ld	r30, X+
    13e0:	fc 91       	ld	r31, X
    13e2:	04 80       	ldd	r0, Z+4	; 0x04
    13e4:	f5 81       	ldd	r31, Z+5	; 0x05
    13e6:	e0 2d       	mov	r30, r0
    13e8:	09 95       	icall
    13ea:	08 95       	ret

000013ec <_ZN11Dev_Manager11Device_InitE8Dev_type>:
    13ec:	70 e0       	ldi	r23, 0x00	; 0
    13ee:	66 0f       	add	r22, r22
    13f0:	77 1f       	adc	r23, r23
    13f2:	86 0f       	add	r24, r22
    13f4:	97 1f       	adc	r25, r23
    13f6:	dc 01       	movw	r26, r24
    13f8:	8d 91       	ld	r24, X+
    13fa:	9c 91       	ld	r25, X
    13fc:	00 97       	sbiw	r24, 0x00	; 0
    13fe:	39 f0       	breq	.+14     	; 0x140e <_ZN11Dev_Manager11Device_InitE8Dev_type+0x22>
    1400:	dc 01       	movw	r26, r24
    1402:	ed 91       	ld	r30, X+
    1404:	fc 91       	ld	r31, X
    1406:	01 90       	ld	r0, Z+
    1408:	f0 81       	ld	r31, Z
    140a:	e0 2d       	mov	r30, r0
    140c:	09 95       	icall
    140e:	08 95       	ret

00001410 <_ZN11Dev_Manager11Open_HandleE8Dev_typePFvS0_jE>:
    1410:	e6 2f       	mov	r30, r22
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	ee 0f       	add	r30, r30
    1416:	ff 1f       	adc	r31, r31
    1418:	e8 0f       	add	r30, r24
    141a:	f9 1f       	adc	r31, r25
    141c:	80 81       	ld	r24, Z
    141e:	91 81       	ldd	r25, Z+1	; 0x01
    1420:	89 2b       	or	r24, r25
    1422:	11 f0       	breq	.+4      	; 0x1428 <_ZN11Dev_Manager11Open_HandleE8Dev_typePFvS0_jE+0x18>
    1424:	53 87       	std	Z+11, r21	; 0x0b
    1426:	42 87       	std	Z+10, r20	; 0x0a
    1428:	08 95       	ret

0000142a <_ZN11Dev_Manager12Driver_CheckE8Dev_type>:
    142a:	70 e0       	ldi	r23, 0x00	; 0
    142c:	66 0f       	add	r22, r22
    142e:	77 1f       	adc	r23, r23
    1430:	fc 01       	movw	r30, r24
    1432:	e6 0f       	add	r30, r22
    1434:	f7 1f       	adc	r31, r23
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	20 81       	ld	r18, Z
    143a:	31 81       	ldd	r19, Z+1	; 0x01
    143c:	23 2b       	or	r18, r19
    143e:	09 f4       	brne	.+2      	; 0x1442 <_ZN11Dev_Manager12Driver_CheckE8Dev_type+0x18>
    1440:	80 e0       	ldi	r24, 0x00	; 0
    1442:	08 95       	ret

00001444 <_ZNK11Dev_Manager16getInterfaceAddrE8Dev_type>:
	}
}
DeviceDriveInterFace* const Dev_Manager::getInterfaceAddr(Dev_type Device) const
{
	if(interface[Device])
    1444:	70 e0       	ldi	r23, 0x00	; 0
    1446:	66 0f       	add	r22, r22
    1448:	77 1f       	adc	r23, r23
    144a:	86 0f       	add	r24, r22
    144c:	97 1f       	adc	r25, r23
	{
		return interface[Device];
	}
	else
		return nullptr;
}
    144e:	fc 01       	movw	r30, r24
    1450:	80 81       	ld	r24, Z
    1452:	91 81       	ldd	r25, Z+1	; 0x01
    1454:	08 95       	ret

00001456 <__vector_18>:
ISR(USART0_RX_vect)
{
    1456:	1f 92       	push	r1
    1458:	0f 92       	push	r0
    145a:	0f b6       	in	r0, 0x3f	; 63
    145c:	0f 92       	push	r0
    145e:	11 24       	eor	r1, r1
    1460:	0b b6       	in	r0, 0x3b	; 59
    1462:	0f 92       	push	r0
    1464:	2f 93       	push	r18
    1466:	3f 93       	push	r19
    1468:	4f 93       	push	r20
    146a:	5f 93       	push	r21
    146c:	6f 93       	push	r22
    146e:	7f 93       	push	r23
    1470:	8f 93       	push	r24
    1472:	9f 93       	push	r25
    1474:	af 93       	push	r26
    1476:	bf 93       	push	r27
    1478:	ef 93       	push	r30
	Dev_Manager::getInstance()->isr_handle[UART0](UART0,UDR0);
    147a:	ff 93       	push	r31
    147c:	6a df       	rcall	.-300    	; 0x1352 <_ZN11Dev_Manager11getInstanceEv>
    147e:	6c b1       	in	r22, 0x0c	; 12
    1480:	70 e0       	ldi	r23, 0x00	; 0
    1482:	dc 01       	movw	r26, r24
    1484:	1a 96       	adiw	r26, 0x0a	; 10
    1486:	ed 91       	ld	r30, X+
    1488:	fc 91       	ld	r31, X
    148a:	1b 97       	sbiw	r26, 0x0b	; 11
    148c:	80 e0       	ldi	r24, 0x00	; 0
}
    148e:	09 95       	icall
    1490:	ff 91       	pop	r31
    1492:	ef 91       	pop	r30
    1494:	bf 91       	pop	r27
    1496:	af 91       	pop	r26
    1498:	9f 91       	pop	r25
    149a:	8f 91       	pop	r24
    149c:	7f 91       	pop	r23
    149e:	6f 91       	pop	r22
    14a0:	5f 91       	pop	r21
    14a2:	4f 91       	pop	r20
    14a4:	3f 91       	pop	r19
    14a6:	2f 91       	pop	r18
    14a8:	0f 90       	pop	r0
    14aa:	0b be       	out	0x3b, r0	; 59
    14ac:	0f 90       	pop	r0
    14ae:	0f be       	out	0x3f, r0	; 63
    14b0:	0f 90       	pop	r0
    14b2:	1f 90       	pop	r1
    14b4:	18 95       	reti

000014b6 <__vector_30>:
ISR(USART1_RX_vect)
{
    14b6:	1f 92       	push	r1
    14b8:	0f 92       	push	r0
    14ba:	0f b6       	in	r0, 0x3f	; 63
    14bc:	0f 92       	push	r0
    14be:	11 24       	eor	r1, r1
    14c0:	0b b6       	in	r0, 0x3b	; 59
    14c2:	0f 92       	push	r0
    14c4:	2f 93       	push	r18
    14c6:	3f 93       	push	r19
    14c8:	4f 93       	push	r20
    14ca:	5f 93       	push	r21
    14cc:	6f 93       	push	r22
    14ce:	7f 93       	push	r23
    14d0:	8f 93       	push	r24
    14d2:	9f 93       	push	r25
    14d4:	af 93       	push	r26
    14d6:	bf 93       	push	r27
    14d8:	ef 93       	push	r30
	Dev_Manager::getInstance()->isr_handle[RS485](RS485,UDR1);
    14da:	ff 93       	push	r31
    14dc:	3a df       	rcall	.-396    	; 0x1352 <_ZN11Dev_Manager11getInstanceEv>
    14de:	60 91 9c 00 	lds	r22, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    14e2:	70 e0       	ldi	r23, 0x00	; 0
    14e4:	dc 01       	movw	r26, r24
    14e6:	1c 96       	adiw	r26, 0x0c	; 12
    14e8:	ed 91       	ld	r30, X+
    14ea:	fc 91       	ld	r31, X
    14ec:	1d 97       	sbiw	r26, 0x0d	; 13
    14ee:	81 e0       	ldi	r24, 0x01	; 1
}
    14f0:	09 95       	icall
    14f2:	ff 91       	pop	r31
    14f4:	ef 91       	pop	r30
    14f6:	bf 91       	pop	r27
    14f8:	af 91       	pop	r26
    14fa:	9f 91       	pop	r25
    14fc:	8f 91       	pop	r24
    14fe:	7f 91       	pop	r23
    1500:	6f 91       	pop	r22
    1502:	5f 91       	pop	r21
    1504:	4f 91       	pop	r20
    1506:	3f 91       	pop	r19
    1508:	2f 91       	pop	r18
    150a:	0f 90       	pop	r0
    150c:	0b be       	out	0x3b, r0	; 59
    150e:	0f 90       	pop	r0
    1510:	0f be       	out	0x3f, r0	; 63
    1512:	0f 90       	pop	r0
    1514:	1f 90       	pop	r1
    1516:	18 95       	reti

00001518 <__vector_28>:
ISR(TIMER3_COMPC_vect)
{
    1518:	1f 92       	push	r1
    151a:	0f 92       	push	r0
    151c:	0f b6       	in	r0, 0x3f	; 63
    151e:	0f 92       	push	r0
    1520:	11 24       	eor	r1, r1
    1522:	0b b6       	in	r0, 0x3b	; 59
    1524:	0f 92       	push	r0
    1526:	2f 93       	push	r18
    1528:	3f 93       	push	r19
    152a:	4f 93       	push	r20
    152c:	5f 93       	push	r21
    152e:	6f 93       	push	r22
    1530:	7f 93       	push	r23
    1532:	8f 93       	push	r24
    1534:	9f 93       	push	r25
    1536:	af 93       	push	r26
    1538:	bf 93       	push	r27
    153a:	ef 93       	push	r30
	Dev_Manager::getInstance()->isr_handle[SEC_TIMER](SEC_TIMER,NULL);
    153c:	ff 93       	push	r31
    153e:	09 df       	rcall	.-494    	; 0x1352 <_ZN11Dev_Manager11getInstanceEv>
    1540:	dc 01       	movw	r26, r24
    1542:	1e 96       	adiw	r26, 0x0e	; 14
    1544:	ed 91       	ld	r30, X+
    1546:	fc 91       	ld	r31, X
    1548:	1f 97       	sbiw	r26, 0x0f	; 15
    154a:	60 e0       	ldi	r22, 0x00	; 0
    154c:	70 e0       	ldi	r23, 0x00	; 0
    154e:	82 e0       	ldi	r24, 0x02	; 2
}
    1550:	09 95       	icall
    1552:	ff 91       	pop	r31
    1554:	ef 91       	pop	r30
    1556:	bf 91       	pop	r27
    1558:	af 91       	pop	r26
    155a:	9f 91       	pop	r25
    155c:	8f 91       	pop	r24
    155e:	7f 91       	pop	r23
    1560:	6f 91       	pop	r22
    1562:	5f 91       	pop	r21
    1564:	4f 91       	pop	r20
    1566:	3f 91       	pop	r19
    1568:	2f 91       	pop	r18
    156a:	0f 90       	pop	r0
    156c:	0b be       	out	0x3b, r0	; 59
    156e:	0f 90       	pop	r0
    1570:	0f be       	out	0x3f, r0	; 63
    1572:	0f 90       	pop	r0
    1574:	1f 90       	pop	r1
    1576:	18 95       	reti

00001578 <__vector_1>:
ISR(INT0_vect)
{
    1578:	1f 92       	push	r1
    157a:	0f 92       	push	r0
    157c:	0f b6       	in	r0, 0x3f	; 63
    157e:	0f 92       	push	r0
    1580:	11 24       	eor	r1, r1
    1582:	0b b6       	in	r0, 0x3b	; 59
    1584:	0f 92       	push	r0
    1586:	2f 93       	push	r18
    1588:	3f 93       	push	r19
    158a:	4f 93       	push	r20
    158c:	5f 93       	push	r21
    158e:	6f 93       	push	r22
    1590:	7f 93       	push	r23
    1592:	8f 93       	push	r24
    1594:	9f 93       	push	r25
    1596:	af 93       	push	r26
    1598:	bf 93       	push	r27
    159a:	ef 93       	push	r30
	Dev_Manager::getInstance()->isr_handle[COUNT_SENSOR](COUNT_SENSOR,NULL);
    159c:	ff 93       	push	r31
    159e:	d9 de       	rcall	.-590    	; 0x1352 <_ZN11Dev_Manager11getInstanceEv>
    15a0:	dc 01       	movw	r26, r24
    15a2:	50 96       	adiw	r26, 0x10	; 16
    15a4:	ed 91       	ld	r30, X+
    15a6:	fc 91       	ld	r31, X
    15a8:	51 97       	sbiw	r26, 0x11	; 17
    15aa:	60 e0       	ldi	r22, 0x00	; 0
    15ac:	70 e0       	ldi	r23, 0x00	; 0
    15ae:	83 e0       	ldi	r24, 0x03	; 3
}
    15b0:	09 95       	icall
    15b2:	ff 91       	pop	r31
    15b4:	ef 91       	pop	r30
    15b6:	bf 91       	pop	r27
    15b8:	af 91       	pop	r26
    15ba:	9f 91       	pop	r25
    15bc:	8f 91       	pop	r24
    15be:	7f 91       	pop	r23
    15c0:	6f 91       	pop	r22
    15c2:	5f 91       	pop	r21
    15c4:	4f 91       	pop	r20
    15c6:	3f 91       	pop	r19
    15c8:	2f 91       	pop	r18
    15ca:	0f 90       	pop	r0
    15cc:	0b be       	out	0x3b, r0	; 59
    15ce:	0f 90       	pop	r0
    15d0:	0f be       	out	0x3f, r0	; 63
    15d2:	0f 90       	pop	r0
    15d4:	1f 90       	pop	r1
    15d6:	18 95       	reti

000015d8 <__vector_21>:
ISR(ADC_vect)
{	
    15d8:	1f 92       	push	r1
    15da:	0f 92       	push	r0
    15dc:	0f b6       	in	r0, 0x3f	; 63
    15de:	0f 92       	push	r0
    15e0:	11 24       	eor	r1, r1
    15e2:	0b b6       	in	r0, 0x3b	; 59
    15e4:	0f 92       	push	r0
    15e6:	2f 93       	push	r18
    15e8:	3f 93       	push	r19
    15ea:	4f 93       	push	r20
    15ec:	5f 93       	push	r21
    15ee:	6f 93       	push	r22
    15f0:	7f 93       	push	r23
    15f2:	8f 93       	push	r24
    15f4:	9f 93       	push	r25
    15f6:	af 93       	push	r26
    15f8:	bf 93       	push	r27
    15fa:	ef 93       	push	r30
	Dev_Manager::getInstance()->isr_handle[_ADC](_ADC,ADCL+((uint16_t)ADCH << 8));
    15fc:	ff 93       	push	r31
    15fe:	a9 de       	rcall	.-686    	; 0x1352 <_ZN11Dev_Manager11getInstanceEv>
    1600:	24 b1       	in	r18, 0x04	; 4
    1602:	65 b1       	in	r22, 0x05	; 5
    1604:	70 e0       	ldi	r23, 0x00	; 0
    1606:	76 2f       	mov	r23, r22
    1608:	66 27       	eor	r22, r22
    160a:	62 0f       	add	r22, r18
    160c:	71 1d       	adc	r23, r1
    160e:	dc 01       	movw	r26, r24
    1610:	52 96       	adiw	r26, 0x12	; 18
    1612:	ed 91       	ld	r30, X+
    1614:	fc 91       	ld	r31, X
    1616:	53 97       	sbiw	r26, 0x13	; 19
    1618:	84 e0       	ldi	r24, 0x04	; 4
}
    161a:	09 95       	icall
    161c:	ff 91       	pop	r31
    161e:	ef 91       	pop	r30
    1620:	bf 91       	pop	r27
    1622:	af 91       	pop	r26
    1624:	9f 91       	pop	r25
    1626:	8f 91       	pop	r24
    1628:	7f 91       	pop	r23
    162a:	6f 91       	pop	r22
    162c:	5f 91       	pop	r21
    162e:	4f 91       	pop	r20
    1630:	3f 91       	pop	r19
    1632:	2f 91       	pop	r18
    1634:	0f 90       	pop	r0
    1636:	0b be       	out	0x3b, r0	; 59
    1638:	0f 90       	pop	r0
    163a:	0f be       	out	0x3f, r0	; 63
    163c:	0f 90       	pop	r0
    163e:	1f 90       	pop	r1
    1640:	18 95       	reti

00001642 <_ZN5Timer11Device_InitEv>:
{
	
}
void Timer::Device_Init()
{
	TCCR3A = 0x40;
    1642:	80 e4       	ldi	r24, 0x40	; 64
    1644:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
	TCCR3B = 0x04;
    1648:	84 e0       	ldi	r24, 0x04	; 4
    164a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	OCR3A = 15624;
    164e:	88 e0       	ldi	r24, 0x08	; 8
    1650:	9d e3       	ldi	r25, 0x3D	; 61
    1652:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    1656:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	ETIMSK = 1 << OCIE3C;
    165a:	82 e0       	ldi	r24, 0x02	; 2
    165c:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x7e007d>
    1660:	08 95       	ret

00001662 <_ZN5TimerC1Ev>:
 * Created: 2017-07-25 오후 3:18:57
 *  Author: bluebiz
 */ 
#include "per_sec_timer.h"

Timer::Timer()
    1662:	2b e7       	ldi	r18, 0x7B	; 123
    1664:	31 e0       	ldi	r19, 0x01	; 1
    1666:	fc 01       	movw	r30, r24
    1668:	31 83       	std	Z+1, r19	; 0x01
    166a:	20 83       	st	Z, r18
    166c:	08 95       	ret

0000166e <_ZN5TimernwEj>:
	OCR3A = 15624;
	ETIMSK = 1 << OCIE3C;
}
void* Timer::operator new(size_t size)
{
	return malloc(size);
    166e:	0c 94 56 1c 	jmp	0x38ac	; 0x38ac <pvPortMalloc>
}
    1672:	08 95       	ret

00001674 <_ZN11RS485Driver11Device_InitEv>:
{
	this->Uart_baudrate = _Uart_baudrate;
}
void RS485Driver::operator delete(void* ptr)
{
	free(ptr);
    1674:	cf 93       	push	r28
    1676:	df 93       	push	r29
    1678:	ec 01       	movw	r28, r24
    167a:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    167e:	88 e9       	ldi	r24, 0x98	; 152
    1680:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
    1684:	86 e0       	ldi	r24, 0x06	; 6
    1686:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
    168a:	be 01       	movw	r22, r28
    168c:	6e 5f       	subi	r22, 0xFE	; 254
    168e:	7f 4f       	sbci	r23, 0xFF	; 255
    1690:	ce 01       	movw	r24, r28
    1692:	19 d1       	rcall	.+562    	; 0x18c6 <_ZN4Ubbr10Ubbr_ValueERKj>
    1694:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
    1698:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	0e 94 1f 20 	call	0x403e	; 0x403e <xQueueCreateMutex>
    16a2:	9f 83       	std	Y+7, r25	; 0x07
    16a4:	8e 83       	std	Y+6, r24	; 0x06
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	0e 94 1f 20 	call	0x403e	; 0x403e <xQueueCreateMutex>
    16ac:	9d 83       	std	Y+5, r25	; 0x05
    16ae:	8c 83       	std	Y+4, r24	; 0x04
    16b0:	df 91       	pop	r29
    16b2:	cf 91       	pop	r28
    16b4:	08 95       	ret

000016b6 <_ZN11RS485DriverC1Ev>:
    16b6:	2b e8       	ldi	r18, 0x8B	; 139
    16b8:	31 e0       	ldi	r19, 0x01	; 1
    16ba:	fc 01       	movw	r30, r24
    16bc:	31 83       	std	Z+1, r19	; 0x01
    16be:	20 83       	st	Z, r18
    16c0:	20 e8       	ldi	r18, 0x80	; 128
    16c2:	35 e2       	ldi	r19, 0x25	; 37
    16c4:	33 83       	std	Z+3, r19	; 0x03
    16c6:	22 83       	std	Z+2, r18	; 0x02
    16c8:	20 91 62 02 	lds	r18, 0x0262	; 0x800262 <_ZN11RS485Driver4instE>
    16cc:	30 91 63 02 	lds	r19, 0x0263	; 0x800263 <_ZN11RS485Driver4instE+0x1>
    16d0:	23 2b       	or	r18, r19
    16d2:	21 f4       	brne	.+8      	; 0x16dc <_ZN11RS485DriverC1Ev+0x26>
    16d4:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <_ZN11RS485Driver4instE+0x1>
    16d8:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <_ZN11RS485Driver4instE>
    16dc:	08 95       	ret

000016de <_ZN11RS485DrivernwEj>:
}
void* RS485Driver::operator new(size_t size)
{
	return malloc(size);
    16de:	0c 94 56 1c 	jmp	0x38ac	; 0x38ac <pvPortMalloc>
}
    16e2:	08 95       	ret

000016e4 <_ZN11RS485Driver12UART_PutcharEc>:
void RS485Driver::UART_Putchar(const char data)
{
    16e4:	1f 93       	push	r17
    16e6:	cf 93       	push	r28
    16e8:	df 93       	push	r29
    16ea:	ec 01       	movw	r28, r24
    16ec:	16 2f       	mov	r17, r22
	if(xSemaphoreTake(char_Mutex,100) == pdPASS)
    16ee:	20 e0       	ldi	r18, 0x00	; 0
    16f0:	44 e6       	ldi	r20, 0x64	; 100
    16f2:	50 e0       	ldi	r21, 0x00	; 0
    16f4:	60 e0       	ldi	r22, 0x00	; 0
    16f6:	70 e0       	ldi	r23, 0x00	; 0
    16f8:	8c 81       	ldd	r24, Y+4	; 0x04
    16fa:	9d 81       	ldd	r25, Y+5	; 0x05
    16fc:	0e 94 37 20 	call	0x406e	; 0x406e <xQueueGenericReceive>
    1700:	81 30       	cpi	r24, 0x01	; 1
    1702:	81 f4       	brne	.+32     	; 0x1724 <_ZN11RS485Driver12UART_PutcharEc+0x40>
	{
		while((UCSR1A & (1 << UDRE1)) == 0);
    1704:	eb e9       	ldi	r30, 0x9B	; 155
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	85 ff       	sbrs	r24, 5
    170c:	fd cf       	rjmp	.-6      	; 0x1708 <_ZN11RS485Driver12UART_PutcharEc+0x24>
		UDR1 = data;
    170e:	10 93 9c 00 	sts	0x009C, r17	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
		xSemaphoreGive(char_Mutex);
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	40 e0       	ldi	r20, 0x00	; 0
    1716:	50 e0       	ldi	r21, 0x00	; 0
    1718:	60 e0       	ldi	r22, 0x00	; 0
    171a:	70 e0       	ldi	r23, 0x00	; 0
    171c:	8c 81       	ldd	r24, Y+4	; 0x04
    171e:	9d 81       	ldd	r25, Y+5	; 0x05
    1720:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <xQueueGenericSend>
	}
}
    1724:	df 91       	pop	r29
    1726:	cf 91       	pop	r28
    1728:	1f 91       	pop	r17
    172a:	08 95       	ret

0000172c <_ZN11RS485Driver12Device_WriteEc>:
		}
		xSemaphoreGive(Uart_Mutex);
	}
}
void RS485Driver::Device_Write(char data)
{
    172c:	db cf       	rjmp	.-74     	; 0x16e4 <_ZN11RS485Driver12UART_PutcharEc>
    172e:	08 95       	ret

00001730 <_ZN11RS485Driver14UART_PutStringEPKc>:
    1730:	0f 93       	push	r16
    1732:	1f 93       	push	r17
    1734:	cf 93       	push	r28
    1736:	df 93       	push	r29
    1738:	8c 01       	movw	r16, r24
    173a:	eb 01       	movw	r28, r22
    173c:	20 e0       	ldi	r18, 0x00	; 0
    173e:	44 e6       	ldi	r20, 0x64	; 100
    1740:	50 e0       	ldi	r21, 0x00	; 0
    1742:	60 e0       	ldi	r22, 0x00	; 0
    1744:	70 e0       	ldi	r23, 0x00	; 0
    1746:	fc 01       	movw	r30, r24
    1748:	86 81       	ldd	r24, Z+6	; 0x06
    174a:	97 81       	ldd	r25, Z+7	; 0x07
    174c:	0e 94 37 20 	call	0x406e	; 0x406e <xQueueGenericReceive>
    1750:	81 30       	cpi	r24, 0x01	; 1
    1752:	99 f4       	brne	.+38     	; 0x177a <_ZN11RS485Driver14UART_PutStringEPKc+0x4a>
    1754:	68 81       	ld	r22, Y
    1756:	66 23       	and	r22, r22
    1758:	31 f0       	breq	.+12     	; 0x1766 <_ZN11RS485Driver14UART_PutStringEPKc+0x36>
    175a:	21 96       	adiw	r28, 0x01	; 1
    175c:	c8 01       	movw	r24, r16
    175e:	c2 df       	rcall	.-124    	; 0x16e4 <_ZN11RS485Driver12UART_PutcharEc>
    1760:	69 91       	ld	r22, Y+
    1762:	61 11       	cpse	r22, r1
    1764:	fb cf       	rjmp	.-10     	; 0x175c <_ZN11RS485Driver14UART_PutStringEPKc+0x2c>
    1766:	20 e0       	ldi	r18, 0x00	; 0
    1768:	40 e0       	ldi	r20, 0x00	; 0
    176a:	50 e0       	ldi	r21, 0x00	; 0
    176c:	60 e0       	ldi	r22, 0x00	; 0
    176e:	70 e0       	ldi	r23, 0x00	; 0
    1770:	f8 01       	movw	r30, r16
    1772:	86 81       	ldd	r24, Z+6	; 0x06
    1774:	97 81       	ldd	r25, Z+7	; 0x07
    1776:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <xQueueGenericSend>
    177a:	df 91       	pop	r29
    177c:	cf 91       	pop	r28
    177e:	1f 91       	pop	r17
    1780:	0f 91       	pop	r16
    1782:	08 95       	ret

00001784 <_ZN11RS485Driver13Device_WritesEPKc>:
    1784:	d5 cf       	rjmp	.-86     	; 0x1730 <_ZN11RS485Driver14UART_PutStringEPKc>
    1786:	08 95       	ret

00001788 <__vector_9>:
	OCR2 = 249; //4ms마다 인터럽트
	sbi(TIMSK,OCIE2); // 인터럽트 활성화	
	//Timer_Alarm::ptr = mem4;
}
void Timer_Alarm::Service_routine()
{
    1788:	1f 92       	push	r1
    178a:	0f 92       	push	r0
    178c:	0f b6       	in	r0, 0x3f	; 63
    178e:	0f 92       	push	r0
    1790:	11 24       	eor	r1, r1
    1792:	0b b6       	in	r0, 0x3b	; 59
    1794:	0f 92       	push	r0
    1796:	8f 93       	push	r24
    1798:	9f 93       	push	r25
    179a:	ef 93       	push	r30
    179c:	ff 93       	push	r31
	mem4[3]++;
    179e:	ee e2       	ldi	r30, 0x2E	; 46
    17a0:	f3 e0       	ldi	r31, 0x03	; 3
    17a2:	86 81       	ldd	r24, Z+6	; 0x06
    17a4:	97 81       	ldd	r25, Z+7	; 0x07
    17a6:	01 96       	adiw	r24, 0x01	; 1
    17a8:	97 83       	std	Z+7, r25	; 0x07
    17aa:	86 83       	std	Z+6, r24	; 0x06
}
    17ac:	ff 91       	pop	r31
    17ae:	ef 91       	pop	r30
    17b0:	9f 91       	pop	r25
    17b2:	8f 91       	pop	r24
    17b4:	0f 90       	pop	r0
    17b6:	0b be       	out	0x3b, r0	; 59
    17b8:	0f 90       	pop	r0
    17ba:	0f be       	out	0x3f, r0	; 63
    17bc:	0f 90       	pop	r0
    17be:	1f 90       	pop	r1
    17c0:	18 95       	reti

000017c2 <_ZN10UartDriver11Device_InitEv>:
{
	return Ubbr::Ubbr_Value(_Uart_baudrate);
}
void UartDriver::operator delete(void* ptr)
{
	free(ptr);
    17c2:	cf 93       	push	r28
    17c4:	df 93       	push	r29
    17c6:	ec 01       	movw	r28, r24
    17c8:	88 e9       	ldi	r24, 0x98	; 152
    17ca:	8a b9       	out	0x0a, r24	; 10
    17cc:	86 e0       	ldi	r24, 0x06	; 6
    17ce:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
    17d2:	be 01       	movw	r22, r28
    17d4:	6e 5f       	subi	r22, 0xFE	; 254
    17d6:	7f 4f       	sbci	r23, 0xFF	; 255
    17d8:	ce 01       	movw	r24, r28
    17da:	75 d0       	rcall	.+234    	; 0x18c6 <_ZN4Ubbr10Ubbr_ValueERKj>
    17dc:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    17e0:	99 b9       	out	0x09, r25	; 9
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	0e 94 1f 20 	call	0x403e	; 0x403e <xQueueCreateMutex>
    17e8:	9f 83       	std	Y+7, r25	; 0x07
    17ea:	8e 83       	std	Y+6, r24	; 0x06
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	0e 94 1f 20 	call	0x403e	; 0x403e <xQueueCreateMutex>
    17f2:	9d 83       	std	Y+5, r25	; 0x05
    17f4:	8c 83       	std	Y+4, r24	; 0x04
    17f6:	df 91       	pop	r29
    17f8:	cf 91       	pop	r28
    17fa:	08 95       	ret

000017fc <_ZN10UartDriverC1Ev>:
    17fc:	2b e9       	ldi	r18, 0x9B	; 155
    17fe:	31 e0       	ldi	r19, 0x01	; 1
    1800:	fc 01       	movw	r30, r24
    1802:	31 83       	std	Z+1, r19	; 0x01
    1804:	20 83       	st	Z, r18
    1806:	20 e4       	ldi	r18, 0x40	; 64
    1808:	38 e3       	ldi	r19, 0x38	; 56
    180a:	33 83       	std	Z+3, r19	; 0x03
    180c:	22 83       	std	Z+2, r18	; 0x02
    180e:	20 91 64 02 	lds	r18, 0x0264	; 0x800264 <_ZN10UartDriver4instE>
    1812:	30 91 65 02 	lds	r19, 0x0265	; 0x800265 <_ZN10UartDriver4instE+0x1>
    1816:	23 2b       	or	r18, r19
    1818:	21 f4       	brne	.+8      	; 0x1822 <_ZN10UartDriverC1Ev+0x26>
    181a:	90 93 65 02 	sts	0x0265, r25	; 0x800265 <_ZN10UartDriver4instE+0x1>
    181e:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <_ZN10UartDriver4instE>
    1822:	08 95       	ret

00001824 <_ZN10UartDrivernwEj>:
}
void* UartDriver::operator new(size_t size)
{
	return malloc(size);
    1824:	0c 94 56 1c 	jmp	0x38ac	; 0x38ac <pvPortMalloc>
}
    1828:	08 95       	ret

0000182a <_ZN10UartDriver12UART_PutcharEc>:
void UartDriver::UART_Putchar(const char data)
{
    182a:	1f 93       	push	r17
    182c:	cf 93       	push	r28
    182e:	df 93       	push	r29
    1830:	ec 01       	movw	r28, r24
    1832:	16 2f       	mov	r17, r22
	if(xSemaphoreTake(char_Mutex,100) == pdPASS)
    1834:	20 e0       	ldi	r18, 0x00	; 0
    1836:	44 e6       	ldi	r20, 0x64	; 100
    1838:	50 e0       	ldi	r21, 0x00	; 0
    183a:	60 e0       	ldi	r22, 0x00	; 0
    183c:	70 e0       	ldi	r23, 0x00	; 0
    183e:	8c 81       	ldd	r24, Y+4	; 0x04
    1840:	9d 81       	ldd	r25, Y+5	; 0x05
    1842:	0e 94 37 20 	call	0x406e	; 0x406e <xQueueGenericReceive>
    1846:	81 30       	cpi	r24, 0x01	; 1
    1848:	61 f4       	brne	.+24     	; 0x1862 <_ZN10UartDriver12UART_PutcharEc+0x38>
	{
		while((UCSR0A & (1 << UDRE0)) == 0);
    184a:	5d 9b       	sbis	0x0b, 5	; 11
    184c:	fe cf       	rjmp	.-4      	; 0x184a <_ZN10UartDriver12UART_PutcharEc+0x20>
		UDR0 = data;
    184e:	1c b9       	out	0x0c, r17	; 12
		xSemaphoreGive(char_Mutex);
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	40 e0       	ldi	r20, 0x00	; 0
    1854:	50 e0       	ldi	r21, 0x00	; 0
    1856:	60 e0       	ldi	r22, 0x00	; 0
    1858:	70 e0       	ldi	r23, 0x00	; 0
    185a:	8c 81       	ldd	r24, Y+4	; 0x04
    185c:	9d 81       	ldd	r25, Y+5	; 0x05
    185e:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <xQueueGenericSend>
	}
}
    1862:	df 91       	pop	r29
    1864:	cf 91       	pop	r28
    1866:	1f 91       	pop	r17
    1868:	08 95       	ret

0000186a <_ZN10UartDriver12Device_WriteEc>:
    186a:	df cf       	rjmp	.-66     	; 0x182a <_ZN10UartDriver12UART_PutcharEc>
    186c:	08 95       	ret

0000186e <_ZN10UartDriver14UART_PutStringEPKc>:
    186e:	0f 93       	push	r16
    1870:	1f 93       	push	r17
    1872:	cf 93       	push	r28
    1874:	df 93       	push	r29
    1876:	8c 01       	movw	r16, r24
    1878:	eb 01       	movw	r28, r22
    187a:	20 e0       	ldi	r18, 0x00	; 0
    187c:	44 e6       	ldi	r20, 0x64	; 100
    187e:	50 e0       	ldi	r21, 0x00	; 0
    1880:	60 e0       	ldi	r22, 0x00	; 0
    1882:	70 e0       	ldi	r23, 0x00	; 0
    1884:	fc 01       	movw	r30, r24
    1886:	86 81       	ldd	r24, Z+6	; 0x06
    1888:	97 81       	ldd	r25, Z+7	; 0x07
    188a:	0e 94 37 20 	call	0x406e	; 0x406e <xQueueGenericReceive>
    188e:	81 30       	cpi	r24, 0x01	; 1
    1890:	99 f4       	brne	.+38     	; 0x18b8 <_ZN10UartDriver14UART_PutStringEPKc+0x4a>
    1892:	68 81       	ld	r22, Y
    1894:	66 23       	and	r22, r22
    1896:	31 f0       	breq	.+12     	; 0x18a4 <_ZN10UartDriver14UART_PutStringEPKc+0x36>
    1898:	21 96       	adiw	r28, 0x01	; 1
    189a:	c8 01       	movw	r24, r16
    189c:	c6 df       	rcall	.-116    	; 0x182a <_ZN10UartDriver12UART_PutcharEc>
    189e:	69 91       	ld	r22, Y+
    18a0:	61 11       	cpse	r22, r1
    18a2:	fb cf       	rjmp	.-10     	; 0x189a <_ZN10UartDriver14UART_PutStringEPKc+0x2c>
    18a4:	20 e0       	ldi	r18, 0x00	; 0
    18a6:	40 e0       	ldi	r20, 0x00	; 0
    18a8:	50 e0       	ldi	r21, 0x00	; 0
    18aa:	60 e0       	ldi	r22, 0x00	; 0
    18ac:	70 e0       	ldi	r23, 0x00	; 0
    18ae:	f8 01       	movw	r30, r16
    18b0:	86 81       	ldd	r24, Z+6	; 0x06
    18b2:	97 81       	ldd	r25, Z+7	; 0x07
    18b4:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <xQueueGenericSend>
    18b8:	df 91       	pop	r29
    18ba:	cf 91       	pop	r28
    18bc:	1f 91       	pop	r17
    18be:	0f 91       	pop	r16
    18c0:	08 95       	ret

000018c2 <_ZN10UartDriver13Device_WritesEPKc>:
    18c2:	d5 cf       	rjmp	.-86     	; 0x186e <_ZN10UartDriver14UART_PutStringEPKc>
    18c4:	08 95       	ret

000018c6 <_ZN4Ubbr10Ubbr_ValueERKj>:
 *  Author: bluebiz
 */ 
#include "Ubbr_Calculate.h"

uint16_t Ubbr::Ubbr_Value(const uint16_t &Uart_baudrate)
{
    18c6:	cf 92       	push	r12
    18c8:	df 92       	push	r13
    18ca:	ef 92       	push	r14
    18cc:	ff 92       	push	r15
    18ce:	cf 93       	push	r28
    18d0:	df 93       	push	r29
	float temp =  (((F_cpu / (Uart_baudrate * 16UL))) - 1);
	float ubbr_h = (uint16_t)(temp + 0.5);
    18d2:	fb 01       	movw	r30, r22
    18d4:	20 81       	ld	r18, Z
    18d6:	31 81       	ldd	r19, Z+1	; 0x01
    18d8:	c9 01       	movw	r24, r18
    18da:	a0 e0       	ldi	r26, 0x00	; 0
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	88 0f       	add	r24, r24
    18e0:	99 1f       	adc	r25, r25
    18e2:	aa 1f       	adc	r26, r26
    18e4:	bb 1f       	adc	r27, r27
    18e6:	88 0f       	add	r24, r24
    18e8:	99 1f       	adc	r25, r25
    18ea:	aa 1f       	adc	r26, r26
    18ec:	bb 1f       	adc	r27, r27
    18ee:	9c 01       	movw	r18, r24
    18f0:	ad 01       	movw	r20, r26
    18f2:	22 0f       	add	r18, r18
    18f4:	33 1f       	adc	r19, r19
    18f6:	44 1f       	adc	r20, r20
    18f8:	55 1f       	adc	r21, r21
    18fa:	22 0f       	add	r18, r18
    18fc:	33 1f       	adc	r19, r19
    18fe:	44 1f       	adc	r20, r20
    1900:	55 1f       	adc	r21, r21
    1902:	60 e0       	ldi	r22, 0x00	; 0
    1904:	74 e2       	ldi	r23, 0x24	; 36
    1906:	84 ef       	ldi	r24, 0xF4	; 244
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	0e 94 f3 27 	call	0x4fe6	; 0x4fe6 <__udivmodsi4>
    190e:	ca 01       	movw	r24, r20
    1910:	b9 01       	movw	r22, r18
    1912:	61 50       	subi	r22, 0x01	; 1
    1914:	71 09       	sbc	r23, r1
    1916:	81 09       	sbc	r24, r1
    1918:	91 09       	sbc	r25, r1
    191a:	0e 94 da 26 	call	0x4db4	; 0x4db4 <__floatunsisf>
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	40 e0       	ldi	r20, 0x00	; 0
    1924:	5f e3       	ldi	r21, 0x3F	; 63
    1926:	0e 94 d9 25 	call	0x4bb2	; 0x4bb2 <__addsf3>
    192a:	6b 01       	movw	r12, r22
    192c:	7c 01       	movw	r14, r24
	float ubbr_l = (uint8_t)(temp + 0.5);
	uint16_t result = (0xff00 & ((uint16_t)ubbr_h << 8)) | (0x00ff & (uint8_t)ubbr_l);
	return result;
    192e:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__fixunssfsi>
    1932:	d6 2f       	mov	r29, r22
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	cf 2f       	mov	r28, r31
    1938:	c7 01       	movw	r24, r14
    193a:	b6 01       	movw	r22, r12
    193c:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__fixunssfsi>
}
    1940:	ce 01       	movw	r24, r28
    1942:	86 2b       	or	r24, r22
    1944:	df 91       	pop	r29
    1946:	cf 91       	pop	r28
    1948:	ff 90       	pop	r15
    194a:	ef 90       	pop	r14
    194c:	df 90       	pop	r13
    194e:	cf 90       	pop	r12
    1950:	08 95       	ret

00001952 <_Z14enc28j60ReadOphh>:
// link status
uint8_t enc28j60linkup(void)
{
        // bit 10 (= bit 3 in upper reg)
	return(enc28j60PhyReadH(PHSTAT2) && 4);
}
    1952:	c0 98       	cbi	0x18, 0	; 24
    1954:	96 2f       	mov	r25, r22
    1956:	6f 71       	andi	r22, 0x1F	; 31
    1958:	86 2b       	or	r24, r22
    195a:	8f b9       	out	0x0f, r24	; 15
    195c:	77 9b       	sbis	0x0e, 7	; 14
    195e:	fe cf       	rjmp	.-4      	; 0x195c <_Z14enc28j60ReadOphh+0xa>
    1960:	1f b8       	out	0x0f, r1	; 15
    1962:	77 9b       	sbis	0x0e, 7	; 14
    1964:	fe cf       	rjmp	.-4      	; 0x1962 <_Z14enc28j60ReadOphh+0x10>
    1966:	99 23       	and	r25, r25
    1968:	1c f4       	brge	.+6      	; 0x1970 <_Z14enc28j60ReadOphh+0x1e>
    196a:	1f b8       	out	0x0f, r1	; 15
    196c:	77 9b       	sbis	0x0e, 7	; 14
    196e:	fe cf       	rjmp	.-4      	; 0x196c <_Z14enc28j60ReadOphh+0x1a>
    1970:	c0 9a       	sbi	0x18, 0	; 24
    1972:	8f b1       	in	r24, 0x0f	; 15
    1974:	08 95       	ret

00001976 <_Z15enc28j60WriteOphhh>:
    1976:	c0 98       	cbi	0x18, 0	; 24
    1978:	6f 71       	andi	r22, 0x1F	; 31
    197a:	86 2b       	or	r24, r22
    197c:	8f b9       	out	0x0f, r24	; 15
    197e:	77 9b       	sbis	0x0e, 7	; 14
    1980:	fe cf       	rjmp	.-4      	; 0x197e <_Z15enc28j60WriteOphhh+0x8>
    1982:	4f b9       	out	0x0f, r20	; 15
    1984:	77 9b       	sbis	0x0e, 7	; 14
    1986:	fe cf       	rjmp	.-4      	; 0x1984 <_Z15enc28j60WriteOphhh+0xe>
    1988:	c0 9a       	sbi	0x18, 0	; 24
    198a:	08 95       	ret

0000198c <_Z18enc28j60ReadBufferjPh>:
    198c:	fb 01       	movw	r30, r22
    198e:	c0 98       	cbi	0x18, 0	; 24
    1990:	2a e3       	ldi	r18, 0x3A	; 58
    1992:	2f b9       	out	0x0f, r18	; 15
    1994:	77 9b       	sbis	0x0e, 7	; 14
    1996:	fe cf       	rjmp	.-4      	; 0x1994 <_Z18enc28j60ReadBufferjPh+0x8>
    1998:	00 97       	sbiw	r24, 0x00	; 0
    199a:	61 f0       	breq	.+24     	; 0x19b4 <_Z18enc28j60ReadBufferjPh+0x28>
    199c:	df 01       	movw	r26, r30
    199e:	a8 0f       	add	r26, r24
    19a0:	b9 1f       	adc	r27, r25
    19a2:	1f b8       	out	0x0f, r1	; 15
    19a4:	77 9b       	sbis	0x0e, 7	; 14
    19a6:	fe cf       	rjmp	.-4      	; 0x19a4 <_Z18enc28j60ReadBufferjPh+0x18>
    19a8:	9f b1       	in	r25, 0x0f	; 15
    19aa:	91 93       	st	Z+, r25
    19ac:	ae 17       	cp	r26, r30
    19ae:	bf 07       	cpc	r27, r31
    19b0:	c1 f7       	brne	.-16     	; 0x19a2 <_Z18enc28j60ReadBufferjPh+0x16>
    19b2:	01 c0       	rjmp	.+2      	; 0x19b6 <_Z18enc28j60ReadBufferjPh+0x2a>
    19b4:	df 01       	movw	r26, r30
    19b6:	1c 92       	st	X, r1
    19b8:	c0 9a       	sbi	0x18, 0	; 24
    19ba:	08 95       	ret

000019bc <_Z19enc28j60WriteBufferjPh>:
    19bc:	fb 01       	movw	r30, r22
    19be:	c0 98       	cbi	0x18, 0	; 24
    19c0:	2a e7       	ldi	r18, 0x7A	; 122
    19c2:	2f b9       	out	0x0f, r18	; 15
    19c4:	77 9b       	sbis	0x0e, 7	; 14
    19c6:	fe cf       	rjmp	.-4      	; 0x19c4 <_Z19enc28j60WriteBufferjPh+0x8>
    19c8:	00 97       	sbiw	r24, 0x00	; 0
    19ca:	61 f0       	breq	.+24     	; 0x19e4 <_Z19enc28j60WriteBufferjPh+0x28>
    19cc:	9f 01       	movw	r18, r30
    19ce:	28 0f       	add	r18, r24
    19d0:	39 1f       	adc	r19, r25
    19d2:	03 c0       	rjmp	.+6      	; 0x19da <_Z19enc28j60WriteBufferjPh+0x1e>
    19d4:	2e 17       	cp	r18, r30
    19d6:	3f 07       	cpc	r19, r31
    19d8:	29 f0       	breq	.+10     	; 0x19e4 <_Z19enc28j60WriteBufferjPh+0x28>
    19da:	91 91       	ld	r25, Z+
    19dc:	9f b9       	out	0x0f, r25	; 15
    19de:	77 9b       	sbis	0x0e, 7	; 14
    19e0:	fe cf       	rjmp	.-4      	; 0x19de <_Z19enc28j60WriteBufferjPh+0x22>
    19e2:	f8 cf       	rjmp	.-16     	; 0x19d4 <_Z19enc28j60WriteBufferjPh+0x18>
    19e4:	c0 9a       	sbi	0x18, 0	; 24
    19e6:	08 95       	ret

000019e8 <_Z15enc28j60SetBankh>:
    19e8:	1f 93       	push	r17
    19ea:	cf 93       	push	r28
    19ec:	df 93       	push	r29
    19ee:	18 2f       	mov	r17, r24
    19f0:	10 76       	andi	r17, 0x60	; 96
    19f2:	c1 2f       	mov	r28, r17
    19f4:	d0 e0       	ldi	r29, 0x00	; 0
    19f6:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <_ZL12Enc28j60Bank>
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	c8 17       	cp	r28, r24
    19fe:	d9 07       	cpc	r29, r25
    1a00:	a1 f0       	breq	.+40     	; 0x1a2a <_Z15enc28j60SetBankh+0x42>
    1a02:	43 e0       	ldi	r20, 0x03	; 3
    1a04:	6f e1       	ldi	r22, 0x1F	; 31
    1a06:	80 ea       	ldi	r24, 0xA0	; 160
    1a08:	b6 df       	rcall	.-148    	; 0x1976 <_Z15enc28j60WriteOphhh>
    1a0a:	ae 01       	movw	r20, r28
    1a0c:	55 95       	asr	r21
    1a0e:	47 95       	ror	r20
    1a10:	55 95       	asr	r21
    1a12:	47 95       	ror	r20
    1a14:	55 95       	asr	r21
    1a16:	47 95       	ror	r20
    1a18:	55 95       	asr	r21
    1a1a:	47 95       	ror	r20
    1a1c:	55 95       	asr	r21
    1a1e:	47 95       	ror	r20
    1a20:	6f e1       	ldi	r22, 0x1F	; 31
    1a22:	80 e8       	ldi	r24, 0x80	; 128
    1a24:	a8 df       	rcall	.-176    	; 0x1976 <_Z15enc28j60WriteOphhh>
    1a26:	10 93 68 02 	sts	0x0268, r17	; 0x800268 <_ZL12Enc28j60Bank>
    1a2a:	df 91       	pop	r29
    1a2c:	cf 91       	pop	r28
    1a2e:	1f 91       	pop	r17
    1a30:	08 95       	ret

00001a32 <_Z12enc28j60Readh>:
    1a32:	cf 93       	push	r28
    1a34:	c8 2f       	mov	r28, r24
    1a36:	d8 df       	rcall	.-80     	; 0x19e8 <_Z15enc28j60SetBankh>
    1a38:	6c 2f       	mov	r22, r28
    1a3a:	80 e0       	ldi	r24, 0x00	; 0
    1a3c:	8a df       	rcall	.-236    	; 0x1952 <_Z14enc28j60ReadOphh>
    1a3e:	cf 91       	pop	r28
    1a40:	08 95       	ret

00001a42 <_Z13enc28j60Writehh>:
    1a42:	cf 93       	push	r28
    1a44:	df 93       	push	r29
    1a46:	c8 2f       	mov	r28, r24
    1a48:	d6 2f       	mov	r29, r22
    1a4a:	ce df       	rcall	.-100    	; 0x19e8 <_Z15enc28j60SetBankh>
    1a4c:	4d 2f       	mov	r20, r29
    1a4e:	6c 2f       	mov	r22, r28
    1a50:	80 e4       	ldi	r24, 0x40	; 64
    1a52:	91 df       	rcall	.-222    	; 0x1976 <_Z15enc28j60WriteOphhh>
    1a54:	df 91       	pop	r29
    1a56:	cf 91       	pop	r28
    1a58:	08 95       	ret

00001a5a <_Z16enc28j60PhyWritehj>:
    1a5a:	cf 93       	push	r28
    1a5c:	df 93       	push	r29
    1a5e:	d6 2f       	mov	r29, r22
    1a60:	c7 2f       	mov	r28, r23
    1a62:	68 2f       	mov	r22, r24
    1a64:	84 ed       	ldi	r24, 0xD4	; 212
    1a66:	ed df       	rcall	.-38     	; 0x1a42 <_Z13enc28j60Writehh>
    1a68:	6d 2f       	mov	r22, r29
    1a6a:	86 ed       	ldi	r24, 0xD6	; 214
    1a6c:	ea df       	rcall	.-44     	; 0x1a42 <_Z13enc28j60Writehh>
    1a6e:	6c 2f       	mov	r22, r28
    1a70:	87 ed       	ldi	r24, 0xD7	; 215
    1a72:	e7 df       	rcall	.-50     	; 0x1a42 <_Z13enc28j60Writehh>
    1a74:	8a ee       	ldi	r24, 0xEA	; 234
    1a76:	dd df       	rcall	.-70     	; 0x1a32 <_Z12enc28j60Readh>
    1a78:	80 ff       	sbrs	r24, 0
    1a7a:	04 c0       	rjmp	.+8      	; 0x1a84 <_Z16enc28j60PhyWritehj+0x2a>
    1a7c:	85 e0       	ldi	r24, 0x05	; 5
    1a7e:	8a 95       	dec	r24
    1a80:	f1 f7       	brne	.-4      	; 0x1a7e <_Z16enc28j60PhyWritehj+0x24>
    1a82:	f8 cf       	rjmp	.-16     	; 0x1a74 <_Z16enc28j60PhyWritehj+0x1a>
    1a84:	df 91       	pop	r29
    1a86:	cf 91       	pop	r28
    1a88:	08 95       	ret

00001a8a <_Z14enc28j60clkouth>:
    1a8a:	68 2f       	mov	r22, r24
    1a8c:	67 70       	andi	r22, 0x07	; 7
    1a8e:	85 e7       	ldi	r24, 0x75	; 117
    1a90:	d8 cf       	rjmp	.-80     	; 0x1a42 <_Z13enc28j60Writehh>
    1a92:	08 95       	ret

00001a94 <_Z12enc28j60InitPh>:
    1a94:	cf 93       	push	r28
    1a96:	df 93       	push	r29
    1a98:	ec 01       	movw	r28, r24
    1a9a:	b8 9a       	sbi	0x17, 0	; 23
    1a9c:	c0 9a       	sbi	0x18, 0	; 24
    1a9e:	a6 d2       	rcall	.+1356   	; 0x1fec <_Z8spi_initv>
    1aa0:	4f ef       	ldi	r20, 0xFF	; 255
    1aa2:	60 e0       	ldi	r22, 0x00	; 0
    1aa4:	8f ef       	ldi	r24, 0xFF	; 255
    1aa6:	67 df       	rcall	.-306    	; 0x1976 <_Z15enc28j60WriteOphhh>
    1aa8:	82 e3       	ldi	r24, 0x32	; 50
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	a9 d2       	rcall	.+1362   	; 0x2000 <_Z8delay_msj>
    1aae:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <_ZL13NextPacketPtr+0x1>
    1ab2:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <_ZL13NextPacketPtr>
    1ab6:	60 e0       	ldi	r22, 0x00	; 0
    1ab8:	88 e0       	ldi	r24, 0x08	; 8
    1aba:	c3 df       	rcall	.-122    	; 0x1a42 <_Z13enc28j60Writehh>
    1abc:	60 e0       	ldi	r22, 0x00	; 0
    1abe:	89 e0       	ldi	r24, 0x09	; 9
    1ac0:	c0 df       	rcall	.-128    	; 0x1a42 <_Z13enc28j60Writehh>
    1ac2:	60 e0       	ldi	r22, 0x00	; 0
    1ac4:	8c e0       	ldi	r24, 0x0C	; 12
    1ac6:	bd df       	rcall	.-134    	; 0x1a42 <_Z13enc28j60Writehh>
    1ac8:	60 e0       	ldi	r22, 0x00	; 0
    1aca:	8d e0       	ldi	r24, 0x0D	; 13
    1acc:	ba df       	rcall	.-140    	; 0x1a42 <_Z13enc28j60Writehh>
    1ace:	6e ef       	ldi	r22, 0xFE	; 254
    1ad0:	8a e0       	ldi	r24, 0x0A	; 10
    1ad2:	b7 df       	rcall	.-146    	; 0x1a42 <_Z13enc28j60Writehh>
    1ad4:	69 e1       	ldi	r22, 0x19	; 25
    1ad6:	8b e0       	ldi	r24, 0x0B	; 11
    1ad8:	b4 df       	rcall	.-152    	; 0x1a42 <_Z13enc28j60Writehh>
    1ada:	6f ef       	ldi	r22, 0xFF	; 255
    1adc:	84 e0       	ldi	r24, 0x04	; 4
    1ade:	b1 df       	rcall	.-158    	; 0x1a42 <_Z13enc28j60Writehh>
    1ae0:	69 e1       	ldi	r22, 0x19	; 25
    1ae2:	85 e0       	ldi	r24, 0x05	; 5
    1ae4:	ae df       	rcall	.-164    	; 0x1a42 <_Z13enc28j60Writehh>
    1ae6:	6f ef       	ldi	r22, 0xFF	; 255
    1ae8:	86 e0       	ldi	r24, 0x06	; 6
    1aea:	ab df       	rcall	.-170    	; 0x1a42 <_Z13enc28j60Writehh>
    1aec:	6f e1       	ldi	r22, 0x1F	; 31
    1aee:	87 e0       	ldi	r24, 0x07	; 7
    1af0:	a8 df       	rcall	.-176    	; 0x1a42 <_Z13enc28j60Writehh>
    1af2:	60 eb       	ldi	r22, 0xB0	; 176
    1af4:	88 e3       	ldi	r24, 0x38	; 56
    1af6:	a5 df       	rcall	.-182    	; 0x1a42 <_Z13enc28j60Writehh>
    1af8:	6f e3       	ldi	r22, 0x3F	; 63
    1afa:	88 e2       	ldi	r24, 0x28	; 40
    1afc:	a2 df       	rcall	.-188    	; 0x1a42 <_Z13enc28j60Writehh>
    1afe:	60 e3       	ldi	r22, 0x30	; 48
    1b00:	89 e2       	ldi	r24, 0x29	; 41
    1b02:	9f df       	rcall	.-194    	; 0x1a42 <_Z13enc28j60Writehh>
    1b04:	69 ef       	ldi	r22, 0xF9	; 249
    1b06:	80 e3       	ldi	r24, 0x30	; 48
    1b08:	9c df       	rcall	.-200    	; 0x1a42 <_Z13enc28j60Writehh>
    1b0a:	67 ef       	ldi	r22, 0xF7	; 247
    1b0c:	81 e3       	ldi	r24, 0x31	; 49
    1b0e:	99 df       	rcall	.-206    	; 0x1a42 <_Z13enc28j60Writehh>
    1b10:	6d e0       	ldi	r22, 0x0D	; 13
    1b12:	80 ec       	ldi	r24, 0xC0	; 192
    1b14:	96 df       	rcall	.-212    	; 0x1a42 <_Z13enc28j60Writehh>
    1b16:	60 e0       	ldi	r22, 0x00	; 0
    1b18:	81 ec       	ldi	r24, 0xC1	; 193
    1b1a:	93 df       	rcall	.-218    	; 0x1a42 <_Z13enc28j60Writehh>
    1b1c:	42 e3       	ldi	r20, 0x32	; 50
    1b1e:	62 ec       	ldi	r22, 0xC2	; 194
    1b20:	80 e8       	ldi	r24, 0x80	; 128
    1b22:	29 df       	rcall	.-430    	; 0x1976 <_Z15enc28j60WriteOphhh>
    1b24:	62 e1       	ldi	r22, 0x12	; 18
    1b26:	86 ec       	ldi	r24, 0xC6	; 198
    1b28:	8c df       	rcall	.-232    	; 0x1a42 <_Z13enc28j60Writehh>
    1b2a:	6c e0       	ldi	r22, 0x0C	; 12
    1b2c:	87 ec       	ldi	r24, 0xC7	; 199
    1b2e:	89 df       	rcall	.-238    	; 0x1a42 <_Z13enc28j60Writehh>
    1b30:	62 e1       	ldi	r22, 0x12	; 18
    1b32:	84 ec       	ldi	r24, 0xC4	; 196
    1b34:	86 df       	rcall	.-244    	; 0x1a42 <_Z13enc28j60Writehh>
    1b36:	6c ed       	ldi	r22, 0xDC	; 220
    1b38:	8a ec       	ldi	r24, 0xCA	; 202
    1b3a:	83 df       	rcall	.-250    	; 0x1a42 <_Z13enc28j60Writehh>
    1b3c:	65 e0       	ldi	r22, 0x05	; 5
    1b3e:	8b ec       	ldi	r24, 0xCB	; 203
    1b40:	80 df       	rcall	.-256    	; 0x1a42 <_Z13enc28j60Writehh>
    1b42:	68 81       	ld	r22, Y
    1b44:	84 ee       	ldi	r24, 0xE4	; 228
    1b46:	7d df       	rcall	.-262    	; 0x1a42 <_Z13enc28j60Writehh>
    1b48:	69 81       	ldd	r22, Y+1	; 0x01
    1b4a:	85 ee       	ldi	r24, 0xE5	; 229
    1b4c:	7a df       	rcall	.-268    	; 0x1a42 <_Z13enc28j60Writehh>
    1b4e:	6a 81       	ldd	r22, Y+2	; 0x02
    1b50:	82 ee       	ldi	r24, 0xE2	; 226
    1b52:	77 df       	rcall	.-274    	; 0x1a42 <_Z13enc28j60Writehh>
    1b54:	6b 81       	ldd	r22, Y+3	; 0x03
    1b56:	83 ee       	ldi	r24, 0xE3	; 227
    1b58:	74 df       	rcall	.-280    	; 0x1a42 <_Z13enc28j60Writehh>
    1b5a:	6c 81       	ldd	r22, Y+4	; 0x04
    1b5c:	80 ee       	ldi	r24, 0xE0	; 224
    1b5e:	71 df       	rcall	.-286    	; 0x1a42 <_Z13enc28j60Writehh>
    1b60:	6d 81       	ldd	r22, Y+5	; 0x05
    1b62:	81 ee       	ldi	r24, 0xE1	; 225
    1b64:	6e df       	rcall	.-292    	; 0x1a42 <_Z13enc28j60Writehh>
    1b66:	60 e0       	ldi	r22, 0x00	; 0
    1b68:	71 e0       	ldi	r23, 0x01	; 1
    1b6a:	80 e1       	ldi	r24, 0x10	; 16
    1b6c:	76 df       	rcall	.-276    	; 0x1a5a <_Z16enc28j60PhyWritehj>
    1b6e:	8f e1       	ldi	r24, 0x1F	; 31
    1b70:	3b df       	rcall	.-394    	; 0x19e8 <_Z15enc28j60SetBankh>
    1b72:	40 ec       	ldi	r20, 0xC0	; 192
    1b74:	6b e1       	ldi	r22, 0x1B	; 27
    1b76:	80 e8       	ldi	r24, 0x80	; 128
    1b78:	fe de       	rcall	.-516    	; 0x1976 <_Z15enc28j60WriteOphhh>
    1b7a:	44 e0       	ldi	r20, 0x04	; 4
    1b7c:	6f e1       	ldi	r22, 0x1F	; 31
    1b7e:	80 e8       	ldi	r24, 0x80	; 128
    1b80:	fa de       	rcall	.-524    	; 0x1976 <_Z15enc28j60WriteOphhh>
    1b82:	df 91       	pop	r29
    1b84:	cf 91       	pop	r28
    1b86:	08 95       	ret

00001b88 <_Z18enc28j60PacketSendjPh>:

void enc28j60PacketSend(uint16_t len, uint8_t* packet)
{
    1b88:	0f 93       	push	r16
    1b8a:	1f 93       	push	r17
    1b8c:	cf 93       	push	r28
    1b8e:	df 93       	push	r29
    1b90:	ec 01       	movw	r28, r24
    1b92:	8b 01       	movw	r16, r22
	// Set the write pointer to start of transmit buffer area
	enc28j60Write(EWRPTL, TXSTART_INIT&0xFF);
    1b94:	6f ef       	ldi	r22, 0xFF	; 255
    1b96:	82 e0       	ldi	r24, 0x02	; 2
    1b98:	54 df       	rcall	.-344    	; 0x1a42 <_Z13enc28j60Writehh>
	enc28j60Write(EWRPTH, TXSTART_INIT>>8);
    1b9a:	69 e1       	ldi	r22, 0x19	; 25
    1b9c:	83 e0       	ldi	r24, 0x03	; 3
    1b9e:	51 df       	rcall	.-350    	; 0x1a42 <_Z13enc28j60Writehh>
	// Set the TXND pointer to correspond to the packet size given
	enc28j60Write(ETXNDL, (TXSTART_INIT+len)&0xFF);
    1ba0:	6c 2f       	mov	r22, r28
    1ba2:	61 50       	subi	r22, 0x01	; 1
    1ba4:	86 e0       	ldi	r24, 0x06	; 6
    1ba6:	4d df       	rcall	.-358    	; 0x1a42 <_Z13enc28j60Writehh>
	enc28j60Write(ETXNDH, (TXSTART_INIT+len)>>8);
    1ba8:	ce 01       	movw	r24, r28
    1baa:	81 50       	subi	r24, 0x01	; 1
    1bac:	96 4e       	sbci	r25, 0xE6	; 230
    1bae:	69 2f       	mov	r22, r25
    1bb0:	87 e0       	ldi	r24, 0x07	; 7
	// write per-packet control byte (0x00 means use macon3 settings)
	enc28j60WriteOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
    1bb2:	47 df       	rcall	.-370    	; 0x1a42 <_Z13enc28j60Writehh>
    1bb4:	40 e0       	ldi	r20, 0x00	; 0
    1bb6:	60 e0       	ldi	r22, 0x00	; 0
    1bb8:	8a e7       	ldi	r24, 0x7A	; 122
	// copy the packet into the transmit buffer
	enc28j60WriteBuffer(len, packet);
    1bba:	dd de       	rcall	.-582    	; 0x1976 <_Z15enc28j60WriteOphhh>
    1bbc:	b8 01       	movw	r22, r16
	// send the contents of the transmit buffer onto the network
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
    1bbe:	ce 01       	movw	r24, r28
    1bc0:	fd de       	rcall	.-518    	; 0x19bc <_Z19enc28j60WriteBufferjPh>
    1bc2:	48 e0       	ldi	r20, 0x08	; 8
    1bc4:	6f e1       	ldi	r22, 0x1F	; 31
        // Reset the transmit logic problem. See Rev. B4 Silicon Errata point 12.
	if( (enc28j60Read(EIR) & EIR_TXERIF) ){
    1bc6:	80 e8       	ldi	r24, 0x80	; 128
    1bc8:	d6 de       	rcall	.-596    	; 0x1976 <_Z15enc28j60WriteOphhh>
    1bca:	8c e1       	ldi	r24, 0x1C	; 28
    1bcc:	32 df       	rcall	.-412    	; 0x1a32 <_Z12enc28j60Readh>
                enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRTS);
    1bce:	81 ff       	sbrs	r24, 1
    1bd0:	04 c0       	rjmp	.+8      	; 0x1bda <_Z18enc28j60PacketSendjPh+0x52>
    1bd2:	48 e0       	ldi	r20, 0x08	; 8
    1bd4:	6f e1       	ldi	r22, 0x1F	; 31
    1bd6:	80 ea       	ldi	r24, 0xA0	; 160
        }
}
    1bd8:	ce de       	rcall	.-612    	; 0x1976 <_Z15enc28j60WriteOphhh>
    1bda:	df 91       	pop	r29
    1bdc:	cf 91       	pop	r28
    1bde:	1f 91       	pop	r17
    1be0:	0f 91       	pop	r16
    1be2:	08 95       	ret

00001be4 <_Z21enc28j60PacketReceivejPh>:
// The packet will by headed by an ethernet header.
//      maxlen  The maximum acceptable length of a retrieved packet.
//      packet  Pointer where packet data should be stored.
// Returns: Packet length in bytes if a packet was retrieved, zero otherwise.
uint16_t enc28j60PacketReceive(uint16_t maxlen, uint8_t* packet)
{
    1be4:	9f 92       	push	r9
    1be6:	af 92       	push	r10
    1be8:	bf 92       	push	r11
    1bea:	cf 92       	push	r12
    1bec:	df 92       	push	r13
    1bee:	ef 92       	push	r14
    1bf0:	ff 92       	push	r15
    1bf2:	0f 93       	push	r16
    1bf4:	1f 93       	push	r17
    1bf6:	cf 93       	push	r28
    1bf8:	df 93       	push	r29
    1bfa:	5c 01       	movw	r10, r24
    1bfc:	7b 01       	movw	r14, r22
	uint16_t rxstat;
	uint16_t len;
	// check if a packet has been received and buffered
	//if( !(enc28j60Read(EIR) & EIR_PKTIF) ){
        // The above does not work. See Rev. B4 Silicon Errata point 6.
	if( enc28j60Read(EPKTCNT) ==0 ){
    1bfe:	89 e3       	ldi	r24, 0x39	; 57
    1c00:	18 df       	rcall	.-464    	; 0x1a32 <_Z12enc28j60Readh>
    1c02:	88 23       	and	r24, r24
    1c04:	09 f4       	brne	.+2      	; 0x1c08 <_Z21enc28j60PacketReceivejPh+0x24>
    1c06:	45 c0       	rjmp	.+138    	; 0x1c92 <_Z21enc28j60PacketReceivejPh+0xae>
		return(0);
        }

	// Set the read pointer to the start of the received packet
	enc28j60Write(ERDPTL, (NextPacketPtr));
    1c08:	60 91 66 02 	lds	r22, 0x0266	; 0x800266 <_ZL13NextPacketPtr>
    1c0c:	c0 91 67 02 	lds	r28, 0x0267	; 0x800267 <_ZL13NextPacketPtr+0x1>
    1c10:	80 e0       	ldi	r24, 0x00	; 0
	enc28j60Write(ERDPTH, (NextPacketPtr)>>8);
    1c12:	17 df       	rcall	.-466    	; 0x1a42 <_Z13enc28j60Writehh>
    1c14:	6c 2f       	mov	r22, r28
	// read the next packet pointer
	NextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	14 df       	rcall	.-472    	; 0x1a42 <_Z13enc28j60Writehh>
    1c1a:	60 e0       	ldi	r22, 0x00	; 0
    1c1c:	8a e3       	ldi	r24, 0x3A	; 58
	NextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
    1c1e:	99 de       	rcall	.-718    	; 0x1952 <_Z14enc28j60ReadOphh>
    1c20:	c8 2f       	mov	r28, r24
    1c22:	60 e0       	ldi	r22, 0x00	; 0
    1c24:	8a e3       	ldi	r24, 0x3A	; 58
    1c26:	95 de       	rcall	.-726    	; 0x1952 <_Z14enc28j60ReadOphh>
    1c28:	d0 e0       	ldi	r29, 0x00	; 0
    1c2a:	d8 2b       	or	r29, r24
    1c2c:	d0 93 67 02 	sts	0x0267, r29	; 0x800267 <_ZL13NextPacketPtr+0x1>
	// read the packet length (see datasheet page 43)
	len  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
    1c30:	c0 93 66 02 	sts	0x0266, r28	; 0x800266 <_ZL13NextPacketPtr>
    1c34:	60 e0       	ldi	r22, 0x00	; 0
	len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
    1c36:	8a e3       	ldi	r24, 0x3A	; 58
    1c38:	8c de       	rcall	.-744    	; 0x1952 <_Z14enc28j60ReadOphh>
    1c3a:	08 2f       	mov	r16, r24
        len-=4; //remove the CRC count
	// read the receive status (see datasheet page 43)
	rxstat  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
    1c3c:	60 e0       	ldi	r22, 0x00	; 0
    1c3e:	8a e3       	ldi	r24, 0x3A	; 58
    1c40:	88 de       	rcall	.-752    	; 0x1952 <_Z14enc28j60ReadOphh>
    1c42:	98 2e       	mov	r9, r24
    1c44:	60 e0       	ldi	r22, 0x00	; 0
	rxstat |= ((uint16_t)enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0))<<8;
    1c46:	8a e3       	ldi	r24, 0x3A	; 58
    1c48:	84 de       	rcall	.-760    	; 0x1952 <_Z14enc28j60ReadOphh>
    1c4a:	c8 2e       	mov	r12, r24
    1c4c:	60 e0       	ldi	r22, 0x00	; 0
                len=maxlen-1;
        }
        // check CRC and symbol errors (see datasheet page 44, table 7-3):
        // The ERXFCON.CRCEN is set by default. Normally we should not
        // need to check this.
        if ((rxstat & 0x80)==0){
    1c4e:	8a e3       	ldi	r24, 0x3A	; 58
    1c50:	80 de       	rcall	.-768    	; 0x1952 <_Z14enc28j60ReadOphh>
        len-=4; //remove the CRC count
	// read the receive status (see datasheet page 43)
	rxstat  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
	rxstat |= ((uint16_t)enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0))<<8;
	// limit retrieve length
        if (len>maxlen-1){
    1c52:	c7 fe       	sbrs	r12, 7
    1c54:	0f c0       	rjmp	.+30     	; 0x1c74 <_Z21enc28j60PacketReceivejPh+0x90>
    1c56:	81 e0       	ldi	r24, 0x01	; 1
	// read the next packet pointer
	NextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
	NextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
	// read the packet length (see datasheet page 43)
	len  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
	len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
    1c58:	a8 1a       	sub	r10, r24
    1c5a:	b1 08       	sbc	r11, r1
    1c5c:	10 e0       	ldi	r17, 0x00	; 0
    1c5e:	19 29       	or	r17, r9
    1c60:	04 50       	subi	r16, 0x04	; 4
    1c62:	11 09       	sbc	r17, r1
        if ((rxstat & 0x80)==0){
                // invalid
                len=0;
        }else{
                // copy the packet from the receive buffer
                enc28j60ReadBuffer(len, packet);
    1c64:	a0 16       	cp	r10, r16
    1c66:	b1 06       	cpc	r11, r17
    1c68:	08 f4       	brcc	.+2      	; 0x1c6c <_Z21enc28j60PacketReceivejPh+0x88>
    1c6a:	85 01       	movw	r16, r10
        // check CRC and symbol errors (see datasheet page 44, table 7-3):
        // The ERXFCON.CRCEN is set by default. Normally we should not
        // need to check this.
        if ((rxstat & 0x80)==0){
                // invalid
                len=0;
    1c6c:	b7 01       	movw	r22, r14
                // copy the packet from the receive buffer
                enc28j60ReadBuffer(len, packet);
        }
	// Move the RX read pointer to the start of the next received packet
	// This frees the memory we just read out
	enc28j60Write(ERXRDPTL, (NextPacketPtr));
    1c6e:	c8 01       	movw	r24, r16
    1c70:	8d de       	rcall	.-742    	; 0x198c <_Z18enc28j60ReadBufferjPh>
    1c72:	02 c0       	rjmp	.+4      	; 0x1c78 <_Z21enc28j60PacketReceivejPh+0x94>
    1c74:	00 e0       	ldi	r16, 0x00	; 0
	enc28j60Write(ERXRDPTH, (NextPacketPtr)>>8);
    1c76:	10 e0       	ldi	r17, 0x00	; 0
    1c78:	6c 2f       	mov	r22, r28
    1c7a:	8c e0       	ldi	r24, 0x0C	; 12
    1c7c:	e2 de       	rcall	.-572    	; 0x1a42 <_Z13enc28j60Writehh>
	// decrement the packet counter indicate we are done with this packet
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
    1c7e:	6d 2f       	mov	r22, r29
    1c80:	8d e0       	ldi	r24, 0x0D	; 13
    1c82:	df de       	rcall	.-578    	; 0x1a42 <_Z13enc28j60Writehh>
    1c84:	40 e4       	ldi	r20, 0x40	; 64
    1c86:	6e e1       	ldi	r22, 0x1E	; 30
	return(len);
    1c88:	80 e8       	ldi	r24, 0x80	; 128
    1c8a:	75 de       	rcall	.-790    	; 0x1976 <_Z15enc28j60WriteOphhh>
    1c8c:	80 2f       	mov	r24, r16
	uint16_t len;
	// check if a packet has been received and buffered
	//if( !(enc28j60Read(EIR) & EIR_PKTIF) ){
        // The above does not work. See Rev. B4 Silicon Errata point 6.
	if( enc28j60Read(EPKTCNT) ==0 ){
		return(0);
    1c8e:	91 2f       	mov	r25, r17
    1c90:	02 c0       	rjmp	.+4      	; 0x1c96 <_Z21enc28j60PacketReceivejPh+0xb2>
	enc28j60Write(ERXRDPTL, (NextPacketPtr));
	enc28j60Write(ERXRDPTH, (NextPacketPtr)>>8);
	// decrement the packet counter indicate we are done with this packet
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
	return(len);
}
    1c92:	80 e0       	ldi	r24, 0x00	; 0
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	df 91       	pop	r29
    1c98:	cf 91       	pop	r28
    1c9a:	1f 91       	pop	r17
    1c9c:	0f 91       	pop	r16
    1c9e:	ff 90       	pop	r15
    1ca0:	ef 90       	pop	r14
    1ca2:	df 90       	pop	r13
    1ca4:	cf 90       	pop	r12
    1ca6:	bf 90       	pop	r11
    1ca8:	af 90       	pop	r10
    1caa:	9f 90       	pop	r9
    1cac:	08 95       	ret

00001cae <_Z8checksumPhjh>:
        }else{
                // no options:
                // 20 bytes:
                buf[TCP_HEADER_LEN_P]=0x50;
        }
}
    1cae:	cf 92       	push	r12
    1cb0:	df 92       	push	r13
    1cb2:	ef 92       	push	r14
    1cb4:	ff 92       	push	r15
    1cb6:	cf 93       	push	r28
    1cb8:	df 93       	push	r29
    1cba:	ec 01       	movw	r28, r24
    1cbc:	db 01       	movw	r26, r22
    1cbe:	41 30       	cpi	r20, 0x01	; 1
    1cc0:	61 f4       	brne	.+24     	; 0x1cda <_Z8checksumPhjh+0x2c>
    1cc2:	6b 01       	movw	r12, r22
    1cc4:	88 e0       	ldi	r24, 0x08	; 8
    1cc6:	c8 1a       	sub	r12, r24
    1cc8:	d1 08       	sbc	r13, r1
    1cca:	e1 2c       	mov	r14, r1
    1ccc:	f1 2c       	mov	r15, r1
    1cce:	81 e1       	ldi	r24, 0x11	; 17
    1cd0:	c8 0e       	add	r12, r24
    1cd2:	d1 1c       	adc	r13, r1
    1cd4:	e1 1c       	adc	r14, r1
    1cd6:	f1 1c       	adc	r15, r1
    1cd8:	11 c0       	rjmp	.+34     	; 0x1cfc <_Z8checksumPhjh+0x4e>
    1cda:	42 30       	cpi	r20, 0x02	; 2
    1cdc:	61 f4       	brne	.+24     	; 0x1cf6 <_Z8checksumPhjh+0x48>
    1cde:	6b 01       	movw	r12, r22
    1ce0:	88 e0       	ldi	r24, 0x08	; 8
    1ce2:	c8 1a       	sub	r12, r24
    1ce4:	d1 08       	sbc	r13, r1
    1ce6:	e1 2c       	mov	r14, r1
    1ce8:	f1 2c       	mov	r15, r1
    1cea:	86 e0       	ldi	r24, 0x06	; 6
    1cec:	c8 0e       	add	r12, r24
    1cee:	d1 1c       	adc	r13, r1
    1cf0:	e1 1c       	adc	r14, r1
    1cf2:	f1 1c       	adc	r15, r1
    1cf4:	03 c0       	rjmp	.+6      	; 0x1cfc <_Z8checksumPhjh+0x4e>
    1cf6:	c1 2c       	mov	r12, r1
    1cf8:	d1 2c       	mov	r13, r1
    1cfa:	76 01       	movw	r14, r12
    1cfc:	a2 30       	cpi	r26, 0x02	; 2
    1cfe:	b1 05       	cpc	r27, r1
    1d00:	f0 f0       	brcs	.+60     	; 0x1d3e <_Z8checksumPhjh+0x90>
    1d02:	9d 01       	movw	r18, r26
    1d04:	fe 01       	movw	r30, r28
    1d06:	40 81       	ld	r20, Z
    1d08:	50 e0       	ldi	r21, 0x00	; 0
    1d0a:	60 e0       	ldi	r22, 0x00	; 0
    1d0c:	70 e0       	ldi	r23, 0x00	; 0
    1d0e:	76 2f       	mov	r23, r22
    1d10:	65 2f       	mov	r22, r21
    1d12:	54 2f       	mov	r21, r20
    1d14:	44 27       	eor	r20, r20
    1d16:	81 81       	ldd	r24, Z+1	; 0x01
    1d18:	48 2b       	or	r20, r24
    1d1a:	c4 0e       	add	r12, r20
    1d1c:	d5 1e       	adc	r13, r21
    1d1e:	e6 1e       	adc	r14, r22
    1d20:	f7 1e       	adc	r15, r23
    1d22:	32 96       	adiw	r30, 0x02	; 2
    1d24:	22 50       	subi	r18, 0x02	; 2
    1d26:	31 09       	sbc	r19, r1
    1d28:	22 30       	cpi	r18, 0x02	; 2
    1d2a:	31 05       	cpc	r19, r1
    1d2c:	60 f7       	brcc	.-40     	; 0x1d06 <_Z8checksumPhjh+0x58>
    1d2e:	cd 01       	movw	r24, r26
    1d30:	02 97       	sbiw	r24, 0x02	; 2
    1d32:	8e 7f       	andi	r24, 0xFE	; 254
    1d34:	02 96       	adiw	r24, 0x02	; 2
    1d36:	c8 0f       	add	r28, r24
    1d38:	d9 1f       	adc	r29, r25
    1d3a:	a1 70       	andi	r26, 0x01	; 1
    1d3c:	bb 27       	eor	r27, r27
    1d3e:	ab 2b       	or	r26, r27
    1d40:	61 f0       	breq	.+24     	; 0x1d5a <_Z8checksumPhjh+0xac>
    1d42:	88 81       	ld	r24, Y
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	a0 e0       	ldi	r26, 0x00	; 0
    1d48:	b0 e0       	ldi	r27, 0x00	; 0
    1d4a:	ba 2f       	mov	r27, r26
    1d4c:	a9 2f       	mov	r26, r25
    1d4e:	98 2f       	mov	r25, r24
    1d50:	88 27       	eor	r24, r24
    1d52:	c8 0e       	add	r12, r24
    1d54:	d9 1e       	adc	r13, r25
    1d56:	ea 1e       	adc	r14, r26
    1d58:	fb 1e       	adc	r15, r27
    1d5a:	a7 01       	movw	r20, r14
    1d5c:	66 27       	eor	r22, r22
    1d5e:	77 27       	eor	r23, r23
    1d60:	41 15       	cp	r20, r1
    1d62:	51 05       	cpc	r21, r1
    1d64:	61 05       	cpc	r22, r1
    1d66:	71 05       	cpc	r23, r1
    1d68:	71 f0       	breq	.+28     	; 0x1d86 <_Z8checksumPhjh+0xd8>
    1d6a:	ee 24       	eor	r14, r14
    1d6c:	ff 24       	eor	r15, r15
    1d6e:	c4 0e       	add	r12, r20
    1d70:	d5 1e       	adc	r13, r21
    1d72:	e6 1e       	adc	r14, r22
    1d74:	f7 1e       	adc	r15, r23
    1d76:	a7 01       	movw	r20, r14
    1d78:	66 27       	eor	r22, r22
    1d7a:	77 27       	eor	r23, r23
    1d7c:	41 15       	cp	r20, r1
    1d7e:	51 05       	cpc	r21, r1
    1d80:	61 05       	cpc	r22, r1
    1d82:	71 05       	cpc	r23, r1
    1d84:	91 f7       	brne	.-28     	; 0x1d6a <_Z8checksumPhjh+0xbc>
    1d86:	c6 01       	movw	r24, r12
    1d88:	80 95       	com	r24
    1d8a:	90 95       	com	r25
    1d8c:	df 91       	pop	r29
    1d8e:	cf 91       	pop	r28
    1d90:	ff 90       	pop	r15
    1d92:	ef 90       	pop	r14
    1d94:	df 90       	pop	r13
    1d96:	cf 90       	pop	r12
    1d98:	08 95       	ret

00001d9a <_Z19init_ip_arp_udp_tcpPhS_h>:
    1d9a:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <__data_start>
    1d9e:	a6 2f       	mov	r26, r22
    1da0:	b7 2f       	mov	r27, r23
    1da2:	e9 e6       	ldi	r30, 0x69	; 105
    1da4:	f2 e0       	ldi	r31, 0x02	; 2
    1da6:	4d e6       	ldi	r20, 0x6D	; 109
    1da8:	52 e0       	ldi	r21, 0x02	; 2
    1daa:	2d 91       	ld	r18, X+
    1dac:	21 93       	st	Z+, r18
    1dae:	e4 17       	cp	r30, r20
    1db0:	f5 07       	cpc	r31, r21
    1db2:	d9 f7       	brne	.-10     	; 0x1daa <_Z19init_ip_arp_udp_tcpPhS_h+0x10>
    1db4:	a8 2f       	mov	r26, r24
    1db6:	b9 2f       	mov	r27, r25
    1db8:	ed e6       	ldi	r30, 0x6D	; 109
    1dba:	f2 e0       	ldi	r31, 0x02	; 2
    1dbc:	23 e7       	ldi	r18, 0x73	; 115
    1dbe:	32 e0       	ldi	r19, 0x02	; 2
    1dc0:	8d 91       	ld	r24, X+
    1dc2:	81 93       	st	Z+, r24
    1dc4:	e2 17       	cp	r30, r18
    1dc6:	f3 07       	cpc	r31, r19
    1dc8:	d9 f7       	brne	.-10     	; 0x1dc0 <_Z19init_ip_arp_udp_tcpPhS_h+0x26>
    1dca:	08 95       	ret

00001dcc <_Z25eth_type_is_arp_and_my_ipPhj>:
    1dcc:	69 32       	cpi	r22, 0x29	; 41
    1dce:	71 05       	cpc	r23, r1
    1dd0:	c8 f0       	brcs	.+50     	; 0x1e04 <_Z25eth_type_is_arp_and_my_ipPhj+0x38>
    1dd2:	fc 01       	movw	r30, r24
    1dd4:	24 85       	ldd	r18, Z+12	; 0x0c
    1dd6:	28 30       	cpi	r18, 0x08	; 8
    1dd8:	b9 f4       	brne	.+46     	; 0x1e08 <_Z25eth_type_is_arp_and_my_ipPhj+0x3c>
    1dda:	25 85       	ldd	r18, Z+13	; 0x0d
    1ddc:	26 30       	cpi	r18, 0x06	; 6
    1dde:	b1 f4       	brne	.+44     	; 0x1e0c <_Z25eth_type_is_arp_and_my_ipPhj+0x40>
    1de0:	36 a1       	ldd	r19, Z+38	; 0x26
    1de2:	20 91 69 02 	lds	r18, 0x0269	; 0x800269 <_ZL6ipaddr>
    1de6:	32 13       	cpse	r19, r18
    1de8:	13 c0       	rjmp	.+38     	; 0x1e10 <_Z25eth_type_is_arp_and_my_ipPhj+0x44>
    1dea:	b7 96       	adiw	r30, 0x27	; 39
    1dec:	aa e6       	ldi	r26, 0x6A	; 106
    1dee:	b2 e0       	ldi	r27, 0x02	; 2
    1df0:	8a 96       	adiw	r24, 0x2a	; 42
    1df2:	31 91       	ld	r19, Z+
    1df4:	2d 91       	ld	r18, X+
    1df6:	32 13       	cpse	r19, r18
    1df8:	0d c0       	rjmp	.+26     	; 0x1e14 <_Z25eth_type_is_arp_and_my_ipPhj+0x48>
    1dfa:	e8 17       	cp	r30, r24
    1dfc:	f9 07       	cpc	r31, r25
    1dfe:	c9 f7       	brne	.-14     	; 0x1df2 <_Z25eth_type_is_arp_and_my_ipPhj+0x26>
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	08 95       	ret
    1e04:	80 e0       	ldi	r24, 0x00	; 0
    1e06:	08 95       	ret
    1e08:	80 e0       	ldi	r24, 0x00	; 0
    1e0a:	08 95       	ret
    1e0c:	80 e0       	ldi	r24, 0x00	; 0
    1e0e:	08 95       	ret
    1e10:	80 e0       	ldi	r24, 0x00	; 0
    1e12:	08 95       	ret
    1e14:	80 e0       	ldi	r24, 0x00	; 0
    1e16:	08 95       	ret

00001e18 <_Z24eth_type_is_ip_and_my_ipPhj>:
    1e18:	cf 93       	push	r28
    1e1a:	df 93       	push	r29
    1e1c:	fc 01       	movw	r30, r24
    1e1e:	6a 32       	cpi	r22, 0x2A	; 42
    1e20:	71 05       	cpc	r23, r1
    1e22:	e0 f0       	brcs	.+56     	; 0x1e5c <_Z24eth_type_is_ip_and_my_ipPhj+0x44>
    1e24:	84 85       	ldd	r24, Z+12	; 0x0c
    1e26:	88 30       	cpi	r24, 0x08	; 8
    1e28:	d9 f4       	brne	.+54     	; 0x1e60 <_Z24eth_type_is_ip_and_my_ipPhj+0x48>
    1e2a:	85 85       	ldd	r24, Z+13	; 0x0d
    1e2c:	81 11       	cpse	r24, r1
    1e2e:	1a c0       	rjmp	.+52     	; 0x1e64 <_Z24eth_type_is_ip_and_my_ipPhj+0x4c>
    1e30:	96 85       	ldd	r25, Z+14	; 0x0e
    1e32:	95 34       	cpi	r25, 0x45	; 69
    1e34:	c1 f4       	brne	.+48     	; 0x1e66 <_Z24eth_type_is_ip_and_my_ipPhj+0x4e>
    1e36:	26 8d       	ldd	r18, Z+30	; 0x1e
    1e38:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <_ZL6ipaddr>
    1e3c:	29 13       	cpse	r18, r25
    1e3e:	13 c0       	rjmp	.+38     	; 0x1e66 <_Z24eth_type_is_ip_and_my_ipPhj+0x4e>
    1e40:	df 01       	movw	r26, r30
    1e42:	5f 96       	adiw	r26, 0x1f	; 31
    1e44:	ca e6       	ldi	r28, 0x6A	; 106
    1e46:	d2 e0       	ldi	r29, 0x02	; 2
    1e48:	b2 96       	adiw	r30, 0x22	; 34
    1e4a:	2d 91       	ld	r18, X+
    1e4c:	99 91       	ld	r25, Y+
    1e4e:	29 13       	cpse	r18, r25
    1e50:	0a c0       	rjmp	.+20     	; 0x1e66 <_Z24eth_type_is_ip_and_my_ipPhj+0x4e>
    1e52:	ae 17       	cp	r26, r30
    1e54:	bf 07       	cpc	r27, r31
    1e56:	c9 f7       	brne	.-14     	; 0x1e4a <_Z24eth_type_is_ip_and_my_ipPhj+0x32>
    1e58:	81 e0       	ldi	r24, 0x01	; 1
    1e5a:	05 c0       	rjmp	.+10     	; 0x1e66 <_Z24eth_type_is_ip_and_my_ipPhj+0x4e>
    1e5c:	80 e0       	ldi	r24, 0x00	; 0
    1e5e:	03 c0       	rjmp	.+6      	; 0x1e66 <_Z24eth_type_is_ip_and_my_ipPhj+0x4e>
    1e60:	80 e0       	ldi	r24, 0x00	; 0
    1e62:	01 c0       	rjmp	.+2      	; 0x1e66 <_Z24eth_type_is_ip_and_my_ipPhj+0x4e>
    1e64:	80 e0       	ldi	r24, 0x00	; 0
    1e66:	df 91       	pop	r29
    1e68:	cf 91       	pop	r28
    1e6a:	08 95       	ret

00001e6c <_Z8make_ethPh>:
    1e6c:	fc 01       	movw	r30, r24
    1e6e:	ad e6       	ldi	r26, 0x6D	; 109
    1e70:	b2 e0       	ldi	r27, 0x02	; 2
    1e72:	9c 01       	movw	r18, r24
    1e74:	2a 5f       	subi	r18, 0xFA	; 250
    1e76:	3f 4f       	sbci	r19, 0xFF	; 255
    1e78:	86 81       	ldd	r24, Z+6	; 0x06
    1e7a:	81 93       	st	Z+, r24
    1e7c:	8d 91       	ld	r24, X+
    1e7e:	85 83       	std	Z+5, r24	; 0x05
    1e80:	e2 17       	cp	r30, r18
    1e82:	f3 07       	cpc	r31, r19
    1e84:	c9 f7       	brne	.-14     	; 0x1e78 <_Z8make_ethPh+0xc>
    1e86:	08 95       	ret

00001e88 <_Z20fill_ip_hdr_checksumPh>:
    1e88:	cf 93       	push	r28
    1e8a:	df 93       	push	r29
    1e8c:	ec 01       	movw	r28, r24
    1e8e:	18 8e       	std	Y+24, r1	; 0x18
    1e90:	19 8e       	std	Y+25, r1	; 0x19
    1e92:	80 e4       	ldi	r24, 0x40	; 64
    1e94:	8c 8b       	std	Y+20, r24	; 0x14
    1e96:	1d 8a       	std	Y+21, r1	; 0x15
    1e98:	8e 8b       	std	Y+22, r24	; 0x16
    1e9a:	40 e0       	ldi	r20, 0x00	; 0
    1e9c:	64 e1       	ldi	r22, 0x14	; 20
    1e9e:	70 e0       	ldi	r23, 0x00	; 0
    1ea0:	ce 01       	movw	r24, r28
    1ea2:	0e 96       	adiw	r24, 0x0e	; 14
    1ea4:	04 df       	rcall	.-504    	; 0x1cae <_Z8checksumPhjh>
    1ea6:	98 8f       	std	Y+24, r25	; 0x18
    1ea8:	89 8f       	std	Y+25, r24	; 0x19
    1eaa:	df 91       	pop	r29
    1eac:	cf 91       	pop	r28
    1eae:	08 95       	ret

00001eb0 <_Z7make_ipPh>:
    1eb0:	ac 01       	movw	r20, r24
    1eb2:	a9 e6       	ldi	r26, 0x69	; 105
    1eb4:	b2 e0       	ldi	r27, 0x02	; 2
    1eb6:	fc 01       	movw	r30, r24
    1eb8:	7a 96       	adiw	r30, 0x1a	; 26
    1eba:	2d e6       	ldi	r18, 0x6D	; 109
    1ebc:	32 e0       	ldi	r19, 0x02	; 2
    1ebe:	90 81       	ld	r25, Z
    1ec0:	94 83       	std	Z+4, r25	; 0x04
    1ec2:	9d 91       	ld	r25, X+
    1ec4:	91 93       	st	Z+, r25
    1ec6:	a2 17       	cp	r26, r18
    1ec8:	b3 07       	cpc	r27, r19
    1eca:	c9 f7       	brne	.-14     	; 0x1ebe <_Z7make_ipPh+0xe>
    1ecc:	ca 01       	movw	r24, r20
    1ece:	dc cf       	rjmp	.-72     	; 0x1e88 <_Z20fill_ip_hdr_checksumPh>
    1ed0:	08 95       	ret

00001ed2 <_Z28make_arp_answer_from_requestPh>:

void make_arp_answer_from_request(uint8_t *buf)
{
    1ed2:	cf 93       	push	r28
    1ed4:	df 93       	push	r29
        uint8_t i=0;
        //
        make_eth(buf);
    1ed6:	ec 01       	movw	r28, r24
        buf[ETH_ARP_OPCODE_H_P]=ETH_ARP_OPCODE_REPLY_H_V;
    1ed8:	c9 df       	rcall	.-110    	; 0x1e6c <_Z8make_ethPh>
        buf[ETH_ARP_OPCODE_L_P]=ETH_ARP_OPCODE_REPLY_L_V;
    1eda:	1c 8a       	std	Y+20, r1	; 0x14
    1edc:	82 e0       	ldi	r24, 0x02	; 2
    1ede:	8d 8b       	std	Y+21, r24	; 0x15
    1ee0:	ad e6       	ldi	r26, 0x6D	; 109
    1ee2:	b2 e0       	ldi	r27, 0x02	; 2
    1ee4:	fe 01       	movw	r30, r28
    1ee6:	76 96       	adiw	r30, 0x16	; 22
    1ee8:	23 e7       	ldi	r18, 0x73	; 115
        // fill the mac addresses:
        while(i<6){
                buf[ETH_ARP_DST_MAC_P+i]=buf[ETH_ARP_SRC_MAC_P+i];
    1eea:	32 e0       	ldi	r19, 0x02	; 2
    1eec:	80 81       	ld	r24, Z
                buf[ETH_ARP_SRC_MAC_P+i]=macaddr[i];
    1eee:	82 87       	std	Z+10, r24	; 0x0a
    1ef0:	8d 91       	ld	r24, X+
        //
        make_eth(buf);
        buf[ETH_ARP_OPCODE_H_P]=ETH_ARP_OPCODE_REPLY_H_V;
        buf[ETH_ARP_OPCODE_L_P]=ETH_ARP_OPCODE_REPLY_L_V;
        // fill the mac addresses:
        while(i<6){
    1ef2:	81 93       	st	Z+, r24
    1ef4:	a2 17       	cp	r26, r18
    1ef6:	b3 07       	cpc	r27, r19
    1ef8:	c9 f7       	brne	.-14     	; 0x1eec <_Z28make_arp_answer_from_requestPh+0x1a>
    1efa:	a9 e6       	ldi	r26, 0x69	; 105
    1efc:	b2 e0       	ldi	r27, 0x02	; 2
    1efe:	fe 01       	movw	r30, r28
    1f00:	7c 96       	adiw	r30, 0x1c	; 28
    1f02:	2d e6       	ldi	r18, 0x6D	; 109
                buf[ETH_ARP_SRC_MAC_P+i]=macaddr[i];
                i++;
        }
        i=0;
        while(i<4){
                buf[ETH_ARP_DST_IP_P+i]=buf[ETH_ARP_SRC_IP_P+i];
    1f04:	32 e0       	ldi	r19, 0x02	; 2
    1f06:	80 81       	ld	r24, Z
                buf[ETH_ARP_SRC_IP_P+i]=ipaddr[i];
    1f08:	82 87       	std	Z+10, r24	; 0x0a
    1f0a:	8d 91       	ld	r24, X+
                buf[ETH_ARP_DST_MAC_P+i]=buf[ETH_ARP_SRC_MAC_P+i];
                buf[ETH_ARP_SRC_MAC_P+i]=macaddr[i];
                i++;
        }
        i=0;
        while(i<4){
    1f0c:	81 93       	st	Z+, r24
    1f0e:	a2 17       	cp	r26, r18
    1f10:	b3 07       	cpc	r27, r19
                buf[ETH_ARP_DST_IP_P+i]=buf[ETH_ARP_SRC_IP_P+i];
                buf[ETH_ARP_SRC_IP_P+i]=ipaddr[i];
                i++;
        }
        // eth+arp is 42 bytes:
        enc28j60PacketSend(42,buf); 
    1f12:	c9 f7       	brne	.-14     	; 0x1f06 <_Z28make_arp_answer_from_requestPh+0x34>
    1f14:	be 01       	movw	r22, r28
    1f16:	8a e2       	ldi	r24, 0x2A	; 42
    1f18:	90 e0       	ldi	r25, 0x00	; 0
}
    1f1a:	36 de       	rcall	.-916    	; 0x1b88 <_Z18enc28j60PacketSendjPh>
    1f1c:	df 91       	pop	r29
    1f1e:	cf 91       	pop	r28
    1f20:	08 95       	ret

00001f22 <_Z28make_echo_reply_from_requestPhj>:

void make_echo_reply_from_request(uint8_t *buf,uint16_t len)
{
    1f22:	0f 93       	push	r16
    1f24:	1f 93       	push	r17
    1f26:	cf 93       	push	r28
    1f28:	df 93       	push	r29
    1f2a:	ec 01       	movw	r28, r24
        make_eth(buf);
        make_ip(buf);
    1f2c:	8b 01       	movw	r16, r22
    1f2e:	9e df       	rcall	.-196    	; 0x1e6c <_Z8make_ethPh>
        buf[ICMP_TYPE_P]=ICMP_TYPE_ECHOREPLY_V;
    1f30:	ce 01       	movw	r24, r28
        // we changed only the icmp.type field from request(=8) to reply(=0).
        // we can therefore easily correct the checksum:
        if (buf[ICMP_CHECKSUM_P] > (0xff-0x08)){
    1f32:	be df       	rcall	.-132    	; 0x1eb0 <_Z7make_ipPh>
    1f34:	1a a2       	std	Y+34, r1	; 0x22
    1f36:	8c a1       	ldd	r24, Y+36	; 0x24
                buf[ICMP_CHECKSUM_P+1]++;
    1f38:	88 3f       	cpi	r24, 0xF8	; 248
    1f3a:	18 f0       	brcs	.+6      	; 0x1f42 <_Z28make_echo_reply_from_requestPhj+0x20>
    1f3c:	9d a1       	ldd	r25, Y+37	; 0x25
        }
        buf[ICMP_CHECKSUM_P]+=0x08;
    1f3e:	9f 5f       	subi	r25, 0xFF	; 255
        //
        enc28j60PacketSend(len,buf);
    1f40:	9d a3       	std	Y+37, r25	; 0x25
    1f42:	88 5f       	subi	r24, 0xF8	; 248
    1f44:	8c a3       	std	Y+36, r24	; 0x24
}
    1f46:	be 01       	movw	r22, r28
    1f48:	c8 01       	movw	r24, r16
    1f4a:	1e de       	rcall	.-964    	; 0x1b88 <_Z18enc28j60PacketSendjPh>
    1f4c:	df 91       	pop	r29
    1f4e:	cf 91       	pop	r28
    1f50:	1f 91       	pop	r17
    1f52:	0f 91       	pop	r16
    1f54:	08 95       	ret

00001f56 <_Z27make_udp_reply_from_requestPhPchj>:

// you can send a max of 220 bytes of data
void make_udp_reply_from_request(uint8_t *buf,char *data,uint8_t datalen,uint16_t port)
{
    1f56:	df 92       	push	r13
    1f58:	ef 92       	push	r14
    1f5a:	ff 92       	push	r15
    1f5c:	0f 93       	push	r16
    1f5e:	1f 93       	push	r17
    1f60:	cf 93       	push	r28
    1f62:	df 93       	push	r29
    1f64:	ec 01       	movw	r28, r24
    1f66:	d6 2e       	mov	r13, r22
    1f68:	e7 2e       	mov	r14, r23
    1f6a:	04 2f       	mov	r16, r20
    1f6c:	12 2f       	mov	r17, r18
        uint8_t i=0;
        uint16_t ck;
        make_eth(buf);
    1f6e:	f3 2e       	mov	r15, r19
    1f70:	7d df       	rcall	.-262    	; 0x1e6c <_Z8make_ethPh>
    1f72:	0d 3d       	cpi	r16, 0xDD	; 221
    1f74:	08 f0       	brcs	.+2      	; 0x1f78 <_Z27make_udp_reply_from_requestPhPchj+0x22>
        if (datalen>220){
                datalen=220;
        }
        // total length field in the IP header must be set:
        buf[IP_TOTLEN_H_P]=0;
    1f76:	0c ed       	ldi	r16, 0xDC	; 220
        buf[IP_TOTLEN_L_P]=IP_HEADER_LEN+UDP_HEADER_LEN+datalen;
    1f78:	18 8a       	std	Y+16, r1	; 0x10
    1f7a:	8c e1       	ldi	r24, 0x1C	; 28
        make_ip(buf);
    1f7c:	80 0f       	add	r24, r16
    1f7e:	89 8b       	std	Y+17, r24	; 0x11
        // send to port:
        //buf[UDP_DST_PORT_H_P]=port>>8;
        //buf[UDP_DST_PORT_L_P]=port & 0xff;
        // sent to port of sender and use "port" as own source:
        buf[UDP_DST_PORT_H_P]=buf[UDP_SRC_PORT_H_P];
    1f80:	ce 01       	movw	r24, r28
    1f82:	96 df       	rcall	.-212    	; 0x1eb0 <_Z7make_ipPh>
        buf[UDP_DST_PORT_L_P]= buf[UDP_SRC_PORT_L_P];
    1f84:	8a a1       	ldd	r24, Y+34	; 0x22
    1f86:	8c a3       	std	Y+36, r24	; 0x24
        buf[UDP_SRC_PORT_H_P]=port>>8;
    1f88:	8b a1       	ldd	r24, Y+35	; 0x23
        buf[UDP_SRC_PORT_L_P]=port & 0xff;
    1f8a:	8d a3       	std	Y+37, r24	; 0x25
        // calculte the udp length:
        buf[UDP_LEN_H_P]=0;
    1f8c:	fa a2       	std	Y+34, r15	; 0x22
        buf[UDP_LEN_L_P]=UDP_HEADER_LEN+datalen;
    1f8e:	1b a3       	std	Y+35, r17	; 0x23
    1f90:	1e a2       	std	Y+38, r1	; 0x26
    1f92:	88 e0       	ldi	r24, 0x08	; 8
        // zero the checksum
        buf[UDP_CHECKSUM_H_P]=0;
    1f94:	80 0f       	add	r24, r16
        buf[UDP_CHECKSUM_L_P]=0;
    1f96:	8f a3       	std	Y+39, r24	; 0x27
        // copy the data:
        while(i<datalen){
    1f98:	18 a6       	std	Y+40, r1	; 0x28
    1f9a:	19 a6       	std	Y+41, r1	; 0x29
    1f9c:	00 23       	and	r16, r16
    1f9e:	81 f0       	breq	.+32     	; 0x1fc0 <_Z27make_udp_reply_from_requestPhPchj+0x6a>
    1fa0:	ad 2d       	mov	r26, r13
    1fa2:	be 2d       	mov	r27, r14
    1fa4:	fe 01       	movw	r30, r28
    1fa6:	ba 96       	adiw	r30, 0x2a	; 42
    1fa8:	2f ef       	ldi	r18, 0xFF	; 255
    1faa:	20 0f       	add	r18, r16
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	25 5d       	subi	r18, 0xD5	; 213
    1fb0:	3f 4f       	sbci	r19, 0xFF	; 255
                buf[UDP_DATA_P+i]=data[i];
    1fb2:	2c 0f       	add	r18, r28
    1fb4:	3d 1f       	adc	r19, r29
        buf[UDP_LEN_L_P]=UDP_HEADER_LEN+datalen;
        // zero the checksum
        buf[UDP_CHECKSUM_H_P]=0;
        buf[UDP_CHECKSUM_L_P]=0;
        // copy the data:
        while(i<datalen){
    1fb6:	9d 91       	ld	r25, X+
    1fb8:	91 93       	st	Z+, r25
    1fba:	e2 17       	cp	r30, r18
                buf[UDP_DATA_P+i]=data[i];
                i++;
        }
        ck=checksum(&buf[IP_SRC_P], 16 + datalen,1);
    1fbc:	f3 07       	cpc	r31, r19
    1fbe:	d9 f7       	brne	.-10     	; 0x1fb6 <_Z27make_udp_reply_from_requestPhPchj+0x60>
    1fc0:	10 e0       	ldi	r17, 0x00	; 0
    1fc2:	b8 01       	movw	r22, r16
    1fc4:	60 5f       	subi	r22, 0xF0	; 240
    1fc6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fc8:	41 e0       	ldi	r20, 0x01	; 1
    1fca:	ce 01       	movw	r24, r28
        buf[UDP_CHECKSUM_H_P]=ck>>8;
    1fcc:	4a 96       	adiw	r24, 0x1a	; 26
        buf[UDP_CHECKSUM_L_P]=ck& 0xff;
        enc28j60PacketSend(UDP_HEADER_LEN+IP_HEADER_LEN+ETH_HEADER_LEN+datalen,buf);
    1fce:	6f de       	rcall	.-802    	; 0x1cae <_Z8checksumPhjh>
    1fd0:	98 a7       	std	Y+40, r25	; 0x28
    1fd2:	89 a7       	std	Y+41, r24	; 0x29
    1fd4:	be 01       	movw	r22, r28
}
    1fd6:	c8 01       	movw	r24, r16
    1fd8:	8a 96       	adiw	r24, 0x2a	; 42
    1fda:	d6 dd       	rcall	.-1108   	; 0x1b88 <_Z18enc28j60PacketSendjPh>
    1fdc:	df 91       	pop	r29
    1fde:	cf 91       	pop	r28
    1fe0:	1f 91       	pop	r17
    1fe2:	0f 91       	pop	r16
    1fe4:	ff 90       	pop	r15
    1fe6:	ef 90       	pop	r14
    1fe8:	df 90       	pop	r13
    1fea:	08 95       	ret

00001fec <_Z8spi_initv>:
#include "spi.h"

void spi_init(void)
{
    //DDRB  |= 1<<PB5 | 1<<PB7; // mosi, sck output
	DDRB  |= 1<<SPI_MOSI | 1<<SPI_SCK; // mosi, sck output
    1fec:	87 b3       	in	r24, 0x17	; 23
    1fee:	86 60       	ori	r24, 0x06	; 6
    1ff0:	87 bb       	out	0x17, r24	; 23
	cbi(SPI_DDR,SPI_MISO); // MISO is input
    1ff2:	bb 98       	cbi	0x17, 3	; 23
        
           //    CSPASSIVE; ###############################
    cbi(SPI_PORT,SPI_MOSI); // MOSI low
    1ff4:	c2 98       	cbi	0x18, 2	; 24
    cbi(SPI_PORT,SPI_SCK); // SCK low
    1ff6:	c1 98       	cbi	0x18, 1	; 24
    //CPHA = 0;
  //  SPCR &= 0xF3;

	// initialize SPI interface
	// master mode and Fosc/2 clock:
    SPCR = (1<<SPE)|(1<<MSTR);  
    1ff8:	80 e5       	ldi	r24, 0x50	; 80
    1ffa:	8d b9       	out	0x0d, r24	; 13
     //SPCR &= 0x7B;
   // master mode and Fosc/128 clock:
   //SPCR &= 0xFB;
  
	//SPSR = 0x00;
    SPSR |= (1<<SPI2X); 
    1ffc:	70 9a       	sbi	0x0e, 0	; 14
    1ffe:	08 95       	ret

00002000 <_Z8delay_msj>:
/* delay for a minimum of <ms> */
{
        // we use a calibrated macro. This is more
        // accurate and not so much compiler dependent
        // as self made code.
        while(ms){
    2000:	00 97       	sbiw	r24, 0x00	; 0
    2002:	41 f0       	breq	.+16     	; 0x2014 <_Z8delay_msj+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2004:	ef eb       	ldi	r30, 0xBF	; 191
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	31 97       	sbiw	r30, 0x01	; 1
    200a:	f1 f7       	brne	.-4      	; 0x2008 <_Z8delay_msj+0x8>
    200c:	00 c0       	rjmp	.+0      	; 0x200e <_Z8delay_msj+0xe>
    200e:	00 00       	nop
                _delay_ms(0.96);
                ms--;
    2010:	01 97       	sbiw	r24, 0x01	; 1
/* delay for a minimum of <ms> */
{
        // we use a calibrated macro. This is more
        // accurate and not so much compiler dependent
        // as self made code.
        while(ms){
    2012:	c1 f7       	brne	.-16     	; 0x2004 <_Z8delay_msj+0x4>
    2014:	08 95       	ret

00002016 <_Z9Timer_ISR8Dev_typej>:
	sb->Serialstore(data);
	sbi(PORTB,6);
}
void Timer_ISR(Dev_type Device,uint16_t Arg)
{
	mem4[SEC]++;
    2016:	ee e2       	ldi	r30, 0x2E	; 46
    2018:	f3 e0       	ldi	r31, 0x03	; 3
    201a:	84 85       	ldd	r24, Z+12	; 0x0c
    201c:	95 85       	ldd	r25, Z+13	; 0x0d
    201e:	01 96       	adiw	r24, 0x01	; 1
    2020:	95 87       	std	Z+13, r25	; 0x0d
    2022:	84 87       	std	Z+12, r24	; 0x0c
	Ctl_LCD_Cursor++;
    2024:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <Ctl_LCD_Cursor>
    2028:	8f 5f       	subi	r24, 0xFF	; 255
    202a:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <Ctl_LCD_Cursor>
	cbi(PORTB,5); //통신 램프 클리어
    202e:	c5 98       	cbi	0x18, 5	; 24
	cbi(PORTB,6); //통신 램프 클리어 	
    2030:	c6 98       	cbi	0x18, 6	; 24
	#if USE_SYSTEM_SEC
		//mem4[SYSTEM_SEC_CLOCK]++;
		current_states_times++;
    2032:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <current_states_times>
    2036:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <current_states_times+0x1>
    203a:	a0 91 a8 03 	lds	r26, 0x03A8	; 0x8003a8 <current_states_times+0x2>
    203e:	b0 91 a9 03 	lds	r27, 0x03A9	; 0x8003a9 <current_states_times+0x3>
    2042:	01 96       	adiw	r24, 0x01	; 1
    2044:	a1 1d       	adc	r26, r1
    2046:	b1 1d       	adc	r27, r1
    2048:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <current_states_times>
    204c:	90 93 a7 03 	sts	0x03A7, r25	; 0x8003a7 <current_states_times+0x1>
    2050:	a0 93 a8 03 	sts	0x03A8, r26	; 0x8003a8 <current_states_times+0x2>
    2054:	b0 93 a9 03 	sts	0x03A9, r27	; 0x8003a9 <current_states_times+0x3>
    2058:	08 95       	ret

0000205a <_Z7ADC_ISR8Dev_typej>:
	#endif
}
void ADC_ISR(Dev_type Device,uint16_t Arg)
{
    205a:	08 95       	ret

0000205c <_Z9Set_Alarmv>:
{
	Alarm_Open(ALARM0,80,Set_Alarm);
}
void Set_Alarm()
{
	if(chatter_flag == 0)
    205c:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <chatter_flag>
    2060:	81 11       	cpse	r24, r1
    2062:	03 c0       	rjmp	.+6      	; 0x206a <_Z9Set_Alarmv+0xe>
	{
		chatter_flag = 1;
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <chatter_flag>
    206a:	08 95       	ret

0000206c <_ZL5proc4Pv>:
		seq++;
	}
	
}
static void proc4(void* pvParam)
{
    206c:	cf 93       	push	r28
    206e:	df 93       	push	r29
    2070:	cd b7       	in	r28, 0x3d	; 61
    2072:	de b7       	in	r29, 0x3e	; 62
    2074:	cc 54       	subi	r28, 0x4C	; 76
    2076:	d1 09       	sbc	r29, r1
    2078:	0f b6       	in	r0, 0x3f	; 63
    207a:	f8 94       	cli
    207c:	de bf       	out	0x3e, r29	; 62
    207e:	0f be       	out	0x3f, r0	; 63
    2080:	cd bf       	out	0x3d, r28	; 61
	char ip_adr1[12];
		 lcd->Clear_Lcd();
    2082:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    2086:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    208a:	a6 d8       	rcall	.-3764   	; 0x11d8 <_ZN13Char_LCD2004A9Clear_LcdEv>
		 unsigned char left_up[8]  = {0x01,0x02,0x04,0x08,0x10,0x10,0x10,0x10};
    208c:	88 e0       	ldi	r24, 0x08	; 8
    208e:	e7 e0       	ldi	r30, 0x07	; 7
    2090:	f1 e0       	ldi	r31, 0x01	; 1
    2092:	de 01       	movw	r26, r28
    2094:	1d 96       	adiw	r26, 0x0d	; 13
    2096:	01 90       	ld	r0, Z+
    2098:	0d 92       	st	X+, r0
    209a:	8a 95       	dec	r24
    209c:	e1 f7       	brne	.-8      	; 0x2096 <_ZL5proc4Pv+0x2a>
		 unsigned char right_up[8] = {0x10,0x08,0x04,0x02,0x01,0x01,0x01,0x01};
    209e:	88 e0       	ldi	r24, 0x08	; 8
    20a0:	ef e0       	ldi	r30, 0x0F	; 15
    20a2:	f1 e0       	ldi	r31, 0x01	; 1
    20a4:	de 01       	movw	r26, r28
    20a6:	55 96       	adiw	r26, 0x15	; 21
    20a8:	01 90       	ld	r0, Z+
    20aa:	0d 92       	st	X+, r0
    20ac:	8a 95       	dec	r24
    20ae:	e1 f7       	brne	.-8      	; 0x20a8 <_ZL5proc4Pv+0x3c>
		 unsigned char right_down[8] = {0x01,0x01,0x01,0x01,0x02,0x04,0x08,0x10};
    20b0:	88 e0       	ldi	r24, 0x08	; 8
    20b2:	e7 e1       	ldi	r30, 0x17	; 23
    20b4:	f1 e0       	ldi	r31, 0x01	; 1
    20b6:	de 01       	movw	r26, r28
    20b8:	5d 96       	adiw	r26, 0x1d	; 29
    20ba:	01 90       	ld	r0, Z+
    20bc:	0d 92       	st	X+, r0
    20be:	8a 95       	dec	r24
    20c0:	e1 f7       	brne	.-8      	; 0x20ba <_ZL5proc4Pv+0x4e>
		 unsigned char left_down[8] = {0x10,0x10,0x10,0x10,0x08,0x04,0x02,0x01};
    20c2:	88 e0       	ldi	r24, 0x08	; 8
    20c4:	ef e1       	ldi	r30, 0x1F	; 31
    20c6:	f1 e0       	ldi	r31, 0x01	; 1
    20c8:	de 01       	movw	r26, r28
    20ca:	95 96       	adiw	r26, 0x25	; 37
    20cc:	01 90       	ld	r0, Z+
    20ce:	0d 92       	st	X+, r0
    20d0:	8a 95       	dec	r24
    20d2:	e1 f7       	brne	.-8      	; 0x20cc <_ZL5proc4Pv+0x60>
		 
		 
		 unsigned char left_pic[8] = {0x01,0x02,0x06,0x0E,0x1E,0x16,0x12,0x11};
    20d4:	88 e0       	ldi	r24, 0x08	; 8
    20d6:	e7 e2       	ldi	r30, 0x27	; 39
    20d8:	f1 e0       	ldi	r31, 0x01	; 1
    20da:	de 01       	movw	r26, r28
    20dc:	9d 96       	adiw	r26, 0x2d	; 45
    20de:	01 90       	ld	r0, Z+
    20e0:	0d 92       	st	X+, r0
    20e2:	8a 95       	dec	r24
    20e4:	e1 f7       	brne	.-8      	; 0x20de <_ZL5proc4Pv+0x72>
		 unsigned char right_pic[8] = {0x10,0x08,0x0C,0x0E,0x0F,0X0D,0x09,0x11};
    20e6:	88 e0       	ldi	r24, 0x08	; 8
    20e8:	ef e2       	ldi	r30, 0x2F	; 47
    20ea:	f1 e0       	ldi	r31, 0x01	; 1
    20ec:	de 01       	movw	r26, r28
    20ee:	d5 96       	adiw	r26, 0x35	; 53
    20f0:	01 90       	ld	r0, Z+
    20f2:	0d 92       	st	X+, r0
    20f4:	8a 95       	dec	r24
    20f6:	e1 f7       	brne	.-8      	; 0x20f0 <_ZL5proc4Pv+0x84>
		 unsigned char right_down_pic[8] = {0x11,0x09,0x0D,0x0F,0x0E,0x0C,0x08,0x10};
    20f8:	88 e0       	ldi	r24, 0x08	; 8
    20fa:	e7 e3       	ldi	r30, 0x37	; 55
    20fc:	f1 e0       	ldi	r31, 0x01	; 1
    20fe:	de 01       	movw	r26, r28
    2100:	dd 96       	adiw	r26, 0x3d	; 61
    2102:	01 90       	ld	r0, Z+
    2104:	0d 92       	st	X+, r0
    2106:	8a 95       	dec	r24
    2108:	e1 f7       	brne	.-8      	; 0x2102 <_ZL5proc4Pv+0x96>
		 unsigned char left_down_pic[8] = {0x11,0x12,0x1E,0x1E,0x0E,0x06,0x02,0x01};
    210a:	88 e0       	ldi	r24, 0x08	; 8
    210c:	ef e3       	ldi	r30, 0x3F	; 63
    210e:	f1 e0       	ldi	r31, 0x01	; 1
    2110:	de 01       	movw	r26, r28
    2112:	ab 5b       	subi	r26, 0xBB	; 187
    2114:	bf 4f       	sbci	r27, 0xFF	; 255
    2116:	01 90       	ld	r0, Z+
    2118:	0d 92       	st	X+, r0
    211a:	8a 95       	dec	r24
    211c:	e1 f7       	brne	.-8      	; 0x2116 <_ZL5proc4Pv+0xaa>
		 
		 
		 
		 lcd->Register_Font(0,left_up);
    211e:	ae 01       	movw	r20, r28
    2120:	43 5f       	subi	r20, 0xF3	; 243
    2122:	5f 4f       	sbci	r21, 0xFF	; 255
    2124:	60 e0       	ldi	r22, 0x00	; 0
    2126:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    212a:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    212e:	c1 d8       	rcall	.-3710   	; 0x12b2 <_ZN13Char_LCD2004A13Register_FontEcPKh>
		 lcd->Register_Font(1,right_up);
    2130:	ae 01       	movw	r20, r28
    2132:	4b 5e       	subi	r20, 0xEB	; 235
    2134:	5f 4f       	sbci	r21, 0xFF	; 255
    2136:	61 e0       	ldi	r22, 0x01	; 1
    2138:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    213c:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    2140:	b8 d8       	rcall	.-3728   	; 0x12b2 <_ZN13Char_LCD2004A13Register_FontEcPKh>
		 lcd->Register_Font(2,right_down);
    2142:	ae 01       	movw	r20, r28
    2144:	43 5e       	subi	r20, 0xE3	; 227
    2146:	5f 4f       	sbci	r21, 0xFF	; 255
    2148:	62 e0       	ldi	r22, 0x02	; 2
    214a:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    214e:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    2152:	af d8       	rcall	.-3746   	; 0x12b2 <_ZN13Char_LCD2004A13Register_FontEcPKh>
		 lcd->Register_Font(3,left_down);
    2154:	ae 01       	movw	r20, r28
    2156:	4b 5d       	subi	r20, 0xDB	; 219
    2158:	5f 4f       	sbci	r21, 0xFF	; 255
    215a:	63 e0       	ldi	r22, 0x03	; 3
    215c:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    2160:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    2164:	a6 d8       	rcall	.-3764   	; 0x12b2 <_ZN13Char_LCD2004A13Register_FontEcPKh>
		 
		 lcd->Register_Font(4,left_pic);
    2166:	ae 01       	movw	r20, r28
    2168:	43 5d       	subi	r20, 0xD3	; 211
    216a:	5f 4f       	sbci	r21, 0xFF	; 255
    216c:	64 e0       	ldi	r22, 0x04	; 4
    216e:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    2172:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    2176:	9d d8       	rcall	.-3782   	; 0x12b2 <_ZN13Char_LCD2004A13Register_FontEcPKh>
		 lcd->Register_Font(5,right_pic);
    2178:	ae 01       	movw	r20, r28
    217a:	4b 5c       	subi	r20, 0xCB	; 203
    217c:	5f 4f       	sbci	r21, 0xFF	; 255
    217e:	65 e0       	ldi	r22, 0x05	; 5
    2180:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    2184:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    2188:	94 d8       	rcall	.-3800   	; 0x12b2 <_ZN13Char_LCD2004A13Register_FontEcPKh>
		 lcd->Register_Font(6,right_down_pic);
    218a:	ae 01       	movw	r20, r28
    218c:	43 5c       	subi	r20, 0xC3	; 195
    218e:	5f 4f       	sbci	r21, 0xFF	; 255
    2190:	66 e0       	ldi	r22, 0x06	; 6
    2192:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    2196:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
		 lcd->Register_Font(7,left_down_pic);
    219a:	8b d8       	rcall	.-3818   	; 0x12b2 <_ZN13Char_LCD2004A13Register_FontEcPKh>
    219c:	ae 01       	movw	r20, r28
    219e:	4b 5b       	subi	r20, 0xBB	; 187
    21a0:	5f 4f       	sbci	r21, 0xFF	; 255
    21a2:	67 e0       	ldi	r22, 0x07	; 7
    21a4:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    21a8:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
			cls_var = 0;
			goto LCD_CLEAR;
		}
		lcd->Cursor_Home();
		lcd->Device_Writes("IP :");
		sprintf(ip_adr1,"%d",myip[0]);
    21ac:	82 d8       	rcall	.-3836   	; 0x12b2 <_ZN13Char_LCD2004A13Register_FontEcPKh>
    21ae:	0f 2e       	mov	r0, r31
    21b0:	fe e0       	ldi	r31, 0x0E	; 14
    21b2:	8f 2e       	mov	r8, r31
    21b4:	f3 e0       	ldi	r31, 0x03	; 3
    21b6:	9f 2e       	mov	r9, r31
    21b8:	f0 2d       	mov	r31, r0
    21ba:	0f 2e       	mov	r0, r31
    21bc:	fc ea       	ldi	r31, 0xAC	; 172
    21be:	cf 2e       	mov	r12, r31
    21c0:	f1 e0       	ldi	r31, 0x01	; 1
    21c2:	df 2e       	mov	r13, r31
    21c4:	f0 2d       	mov	r31, r0
    21c6:	9e 01       	movw	r18, r28
    21c8:	2f 5f       	subi	r18, 0xFF	; 255
    21ca:	3f 4f       	sbci	r19, 0xFF	; 255
		lcd->Device_Writes(ip_adr1);
		lcd->Device_Writes(".");
		sprintf(ip_adr1,"%d",myip[3]);
		lcd->Device_Writes(ip_adr1);
		lcd->Set_Cursor_Print(0,1,"MAC:");
		sprintf(ip_adr1,"%x",mymac[0]);
    21cc:	79 01       	movw	r14, r18
    21ce:	0f 2e       	mov	r0, r31
    21d0:	f1 e0       	ldi	r31, 0x01	; 1
    21d2:	af 2e       	mov	r10, r31
    21d4:	f1 e0       	ldi	r31, 0x01	; 1
    21d6:	bf 2e       	mov	r11, r31
    21d8:	f0 2d       	mov	r31, r0
    21da:	06 eb       	ldi	r16, 0xB6	; 182
		lcd->Device_Writes(":");
		sprintf(ip_adr1,"%x",mymac[5]);
		lcd->Device_Writes(ip_adr1);
					 //char num = Ctl_LCD_Cursor % 4;
		char cnts1 = lcd_cnt / 30;
		char num = cnts1 % 4;
    21dc:	11 e0       	ldi	r17, 0x01	; 1
    21de:	0f 2e       	mov	r0, r31
    21e0:	f9 e8       	ldi	r31, 0x89	; 137
    21e2:	5f 2e       	mov	r5, r31
			cls_var = 0;
			goto LCD_CLEAR;
		}
		lcd->Cursor_Home();
		lcd->Device_Writes("IP :");
		sprintf(ip_adr1,"%d",myip[0]);
    21e4:	f0 2d       	mov	r31, r0
    21e6:	62 2e       	mov	r6, r18
		 lcd->Register_Font(4,left_pic);
		 lcd->Register_Font(5,right_pic);
		 lcd->Register_Font(6,right_down_pic);
		 lcd->Register_Font(7,left_down_pic);
		 LCD_CLEAR:
			lcd->Clear_Lcd();
    21e8:	7f 2c       	mov	r7, r15
    21ea:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    21ee:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    21f2:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <_ZN13Char_LCD2004A9Clear_LcdEv>
	while(1)
	{
		if(cls_var == 1)
    21f6:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <cls_var>
		{
			cls_var = 0;
    21fa:	81 30       	cpi	r24, 0x01	; 1
    21fc:	19 f4       	brne	.+6      	; 0x2204 <_ZL5proc4Pv+0x198>
			goto LCD_CLEAR;
    21fe:	10 92 12 03 	sts	0x0312, r1	; 0x800312 <cls_var>
		}
		lcd->Cursor_Home();
    2202:	f3 cf       	rjmp	.-26     	; 0x21ea <_ZL5proc4Pv+0x17e>
    2204:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    2208:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
		lcd->Device_Writes("IP :");
    220c:	47 d8       	rcall	.-3954   	; 0x129c <_ZN13Char_LCD2004A11Cursor_HomeEv>
    220e:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    2212:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    2216:	dc 01       	movw	r26, r24
    2218:	ed 91       	ld	r30, X+
    221a:	fc 91       	ld	r31, X
    221c:	04 80       	ldd	r0, Z+4	; 0x04
    221e:	f5 81       	ldd	r31, Z+5	; 0x05
    2220:	e0 2d       	mov	r30, r0
    2222:	67 ea       	ldi	r22, 0xA7	; 167
    2224:	71 e0       	ldi	r23, 0x01	; 1
		sprintf(ip_adr1,"%d",myip[0]);
    2226:	09 95       	icall
    2228:	f4 01       	movw	r30, r8
    222a:	80 81       	ld	r24, Z
    222c:	1f 92       	push	r1
    222e:	8f 93       	push	r24
    2230:	df 92       	push	r13
    2232:	cf 92       	push	r12
    2234:	ff 92       	push	r15
    2236:	ef 92       	push	r14
    2238:	0e 94 2d 28 	call	0x505a	; 0x505a <sprintf>
		lcd->Device_Writes(ip_adr1);
    223c:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    2240:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    2244:	dc 01       	movw	r26, r24
    2246:	ed 91       	ld	r30, X+
    2248:	fc 91       	ld	r31, X
    224a:	04 80       	ldd	r0, Z+4	; 0x04
    224c:	f5 81       	ldd	r31, Z+5	; 0x05
    224e:	e0 2d       	mov	r30, r0
    2250:	66 2d       	mov	r22, r6
    2252:	77 2d       	mov	r23, r7
		lcd->Device_Writes(".");
    2254:	09 95       	icall
    2256:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    225a:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    225e:	dc 01       	movw	r26, r24
    2260:	ed 91       	ld	r30, X+
    2262:	fc 91       	ld	r31, X
    2264:	04 80       	ldd	r0, Z+4	; 0x04
    2266:	f5 81       	ldd	r31, Z+5	; 0x05
    2268:	e0 2d       	mov	r30, r0
    226a:	6f ea       	ldi	r22, 0xAF	; 175
    226c:	71 e0       	ldi	r23, 0x01	; 1
		sprintf(ip_adr1,"%d",myip[1]);
    226e:	09 95       	icall
    2270:	f4 01       	movw	r30, r8
    2272:	81 81       	ldd	r24, Z+1	; 0x01
    2274:	1f 92       	push	r1
    2276:	8f 93       	push	r24
    2278:	df 92       	push	r13
    227a:	cf 92       	push	r12
    227c:	ff 92       	push	r15
    227e:	ef 92       	push	r14
    2280:	0e 94 2d 28 	call	0x505a	; 0x505a <sprintf>
		lcd->Device_Writes(ip_adr1);
    2284:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    2288:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    228c:	dc 01       	movw	r26, r24
    228e:	ed 91       	ld	r30, X+
    2290:	fc 91       	ld	r31, X
    2292:	04 80       	ldd	r0, Z+4	; 0x04
    2294:	f5 81       	ldd	r31, Z+5	; 0x05
    2296:	e0 2d       	mov	r30, r0
    2298:	66 2d       	mov	r22, r6
    229a:	77 2d       	mov	r23, r7
		lcd->Device_Writes(".");
    229c:	09 95       	icall
    229e:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    22a2:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    22a6:	dc 01       	movw	r26, r24
    22a8:	ed 91       	ld	r30, X+
    22aa:	fc 91       	ld	r31, X
    22ac:	04 80       	ldd	r0, Z+4	; 0x04
    22ae:	f5 81       	ldd	r31, Z+5	; 0x05
    22b0:	e0 2d       	mov	r30, r0
    22b2:	6f ea       	ldi	r22, 0xAF	; 175
    22b4:	71 e0       	ldi	r23, 0x01	; 1
		sprintf(ip_adr1,"%d",myip[2]);
    22b6:	09 95       	icall
    22b8:	f4 01       	movw	r30, r8
    22ba:	82 81       	ldd	r24, Z+2	; 0x02
    22bc:	1f 92       	push	r1
    22be:	8f 93       	push	r24
    22c0:	df 92       	push	r13
    22c2:	cf 92       	push	r12
    22c4:	ff 92       	push	r15
    22c6:	ef 92       	push	r14
    22c8:	0e 94 2d 28 	call	0x505a	; 0x505a <sprintf>
		lcd->Device_Writes(ip_adr1);
    22cc:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    22d0:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    22d4:	dc 01       	movw	r26, r24
    22d6:	ed 91       	ld	r30, X+
    22d8:	fc 91       	ld	r31, X
    22da:	04 80       	ldd	r0, Z+4	; 0x04
    22dc:	f5 81       	ldd	r31, Z+5	; 0x05
    22de:	e0 2d       	mov	r30, r0
    22e0:	66 2d       	mov	r22, r6
    22e2:	77 2d       	mov	r23, r7
		lcd->Device_Writes(".");
    22e4:	09 95       	icall
    22e6:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    22ea:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    22ee:	dc 01       	movw	r26, r24
    22f0:	ed 91       	ld	r30, X+
    22f2:	fc 91       	ld	r31, X
    22f4:	04 80       	ldd	r0, Z+4	; 0x04
    22f6:	f5 81       	ldd	r31, Z+5	; 0x05
    22f8:	e0 2d       	mov	r30, r0
    22fa:	6f ea       	ldi	r22, 0xAF	; 175
    22fc:	71 e0       	ldi	r23, 0x01	; 1
		sprintf(ip_adr1,"%d",myip[3]);
    22fe:	09 95       	icall
    2300:	f4 01       	movw	r30, r8
    2302:	83 81       	ldd	r24, Z+3	; 0x03
    2304:	1f 92       	push	r1
    2306:	8f 93       	push	r24
    2308:	df 92       	push	r13
    230a:	cf 92       	push	r12
    230c:	ff 92       	push	r15
    230e:	ef 92       	push	r14
    2310:	0e 94 2d 28 	call	0x505a	; 0x505a <sprintf>
		lcd->Device_Writes(ip_adr1);
    2314:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    2318:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    231c:	dc 01       	movw	r26, r24
    231e:	ed 91       	ld	r30, X+
    2320:	fc 91       	ld	r31, X
    2322:	04 80       	ldd	r0, Z+4	; 0x04
    2324:	f5 81       	ldd	r31, Z+5	; 0x05
    2326:	e0 2d       	mov	r30, r0
    2328:	66 2d       	mov	r22, r6
    232a:	77 2d       	mov	r23, r7
		lcd->Set_Cursor_Print(0,1,"MAC:");
    232c:	09 95       	icall
    232e:	21 eb       	ldi	r18, 0xB1	; 177
    2330:	31 e0       	ldi	r19, 0x01	; 1
    2332:	41 e0       	ldi	r20, 0x01	; 1
    2334:	60 e0       	ldi	r22, 0x00	; 0
    2336:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    233a:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    233e:	0e 94 25 09 	call	0x124a	; 0x124a <_ZN13Char_LCD2004A16Set_Cursor_PrintEccPKc>
		sprintf(ip_adr1,"%x",mymac[0]);
    2342:	f5 01       	movw	r30, r10
    2344:	80 81       	ld	r24, Z
    2346:	1f 92       	push	r1
    2348:	8f 93       	push	r24
    234a:	1f 93       	push	r17
    234c:	0f 93       	push	r16
    234e:	ff 92       	push	r15
    2350:	ef 92       	push	r14
    2352:	0e 94 2d 28 	call	0x505a	; 0x505a <sprintf>
		lcd->Device_Writes(ip_adr1);
    2356:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    235a:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    235e:	dc 01       	movw	r26, r24
    2360:	ed 91       	ld	r30, X+
    2362:	fc 91       	ld	r31, X
    2364:	04 80       	ldd	r0, Z+4	; 0x04
    2366:	f5 81       	ldd	r31, Z+5	; 0x05
    2368:	e0 2d       	mov	r30, r0
    236a:	66 2d       	mov	r22, r6
    236c:	77 2d       	mov	r23, r7
		lcd->Device_Writes(":");
    236e:	09 95       	icall
    2370:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    2374:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    2378:	dc 01       	movw	r26, r24
    237a:	ed 91       	ld	r30, X+
    237c:	fc 91       	ld	r31, X
    237e:	04 80       	ldd	r0, Z+4	; 0x04
    2380:	f5 81       	ldd	r31, Z+5	; 0x05
    2382:	e0 2d       	mov	r30, r0
    2384:	6a ea       	ldi	r22, 0xAA	; 170
    2386:	71 e0       	ldi	r23, 0x01	; 1
		sprintf(ip_adr1,"%x",mymac[1]);
    2388:	09 95       	icall
    238a:	f5 01       	movw	r30, r10
    238c:	81 81       	ldd	r24, Z+1	; 0x01
    238e:	1f 92       	push	r1
    2390:	8f 93       	push	r24
    2392:	1f 93       	push	r17
    2394:	0f 93       	push	r16
    2396:	ff 92       	push	r15
    2398:	ef 92       	push	r14
    239a:	0e 94 2d 28 	call	0x505a	; 0x505a <sprintf>
		lcd->Device_Writes(ip_adr1);
    239e:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    23a2:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    23a6:	0f b6       	in	r0, 0x3f	; 63
    23a8:	f8 94       	cli
    23aa:	de bf       	out	0x3e, r29	; 62
    23ac:	0f be       	out	0x3f, r0	; 63
    23ae:	cd bf       	out	0x3d, r28	; 61
    23b0:	dc 01       	movw	r26, r24
    23b2:	ed 91       	ld	r30, X+
    23b4:	fc 91       	ld	r31, X
    23b6:	04 80       	ldd	r0, Z+4	; 0x04
    23b8:	f5 81       	ldd	r31, Z+5	; 0x05
    23ba:	e0 2d       	mov	r30, r0
    23bc:	66 2d       	mov	r22, r6
    23be:	77 2d       	mov	r23, r7
		lcd->Device_Writes(":");
    23c0:	09 95       	icall
    23c2:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    23c6:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    23ca:	dc 01       	movw	r26, r24
    23cc:	ed 91       	ld	r30, X+
    23ce:	fc 91       	ld	r31, X
    23d0:	04 80       	ldd	r0, Z+4	; 0x04
    23d2:	f5 81       	ldd	r31, Z+5	; 0x05
    23d4:	e0 2d       	mov	r30, r0
    23d6:	6a ea       	ldi	r22, 0xAA	; 170
    23d8:	71 e0       	ldi	r23, 0x01	; 1
		sprintf(ip_adr1,"%x",mymac[2]);
    23da:	09 95       	icall
    23dc:	f5 01       	movw	r30, r10
    23de:	82 81       	ldd	r24, Z+2	; 0x02
    23e0:	1f 92       	push	r1
    23e2:	8f 93       	push	r24
    23e4:	1f 93       	push	r17
    23e6:	0f 93       	push	r16
    23e8:	ff 92       	push	r15
    23ea:	ef 92       	push	r14
    23ec:	0e 94 2d 28 	call	0x505a	; 0x505a <sprintf>
		lcd->Device_Writes(ip_adr1);
    23f0:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    23f4:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    23f8:	dc 01       	movw	r26, r24
    23fa:	ed 91       	ld	r30, X+
    23fc:	fc 91       	ld	r31, X
    23fe:	04 80       	ldd	r0, Z+4	; 0x04
    2400:	f5 81       	ldd	r31, Z+5	; 0x05
    2402:	e0 2d       	mov	r30, r0
    2404:	66 2d       	mov	r22, r6
    2406:	77 2d       	mov	r23, r7
		lcd->Device_Writes(":");
    2408:	09 95       	icall
    240a:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    240e:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    2412:	dc 01       	movw	r26, r24
    2414:	ed 91       	ld	r30, X+
    2416:	fc 91       	ld	r31, X
    2418:	04 80       	ldd	r0, Z+4	; 0x04
    241a:	f5 81       	ldd	r31, Z+5	; 0x05
    241c:	e0 2d       	mov	r30, r0
    241e:	6a ea       	ldi	r22, 0xAA	; 170
    2420:	71 e0       	ldi	r23, 0x01	; 1
		sprintf(ip_adr1,"%x",mymac[3]);
    2422:	09 95       	icall
    2424:	f5 01       	movw	r30, r10
    2426:	83 81       	ldd	r24, Z+3	; 0x03
    2428:	1f 92       	push	r1
    242a:	8f 93       	push	r24
    242c:	1f 93       	push	r17
    242e:	0f 93       	push	r16
    2430:	ff 92       	push	r15
    2432:	ef 92       	push	r14
    2434:	0e 94 2d 28 	call	0x505a	; 0x505a <sprintf>
		lcd->Device_Writes(ip_adr1);
    2438:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    243c:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    2440:	dc 01       	movw	r26, r24
    2442:	ed 91       	ld	r30, X+
    2444:	fc 91       	ld	r31, X
    2446:	04 80       	ldd	r0, Z+4	; 0x04
    2448:	f5 81       	ldd	r31, Z+5	; 0x05
    244a:	e0 2d       	mov	r30, r0
    244c:	66 2d       	mov	r22, r6
    244e:	77 2d       	mov	r23, r7
		lcd->Device_Writes(":");
    2450:	09 95       	icall
    2452:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    2456:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    245a:	dc 01       	movw	r26, r24
    245c:	ed 91       	ld	r30, X+
    245e:	fc 91       	ld	r31, X
    2460:	04 80       	ldd	r0, Z+4	; 0x04
    2462:	f5 81       	ldd	r31, Z+5	; 0x05
    2464:	e0 2d       	mov	r30, r0
    2466:	6a ea       	ldi	r22, 0xAA	; 170
    2468:	71 e0       	ldi	r23, 0x01	; 1
		sprintf(ip_adr1,"%x",mymac[4]);
    246a:	09 95       	icall
    246c:	f5 01       	movw	r30, r10
    246e:	84 81       	ldd	r24, Z+4	; 0x04
    2470:	1f 92       	push	r1
    2472:	8f 93       	push	r24
    2474:	1f 93       	push	r17
    2476:	0f 93       	push	r16
    2478:	ff 92       	push	r15
    247a:	ef 92       	push	r14
    247c:	0e 94 2d 28 	call	0x505a	; 0x505a <sprintf>
		lcd->Device_Writes(ip_adr1);
    2480:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    2484:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    2488:	dc 01       	movw	r26, r24
    248a:	ed 91       	ld	r30, X+
    248c:	fc 91       	ld	r31, X
    248e:	04 80       	ldd	r0, Z+4	; 0x04
    2490:	f5 81       	ldd	r31, Z+5	; 0x05
    2492:	e0 2d       	mov	r30, r0
    2494:	66 2d       	mov	r22, r6
    2496:	77 2d       	mov	r23, r7
		lcd->Device_Writes(":");
    2498:	09 95       	icall
    249a:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    249e:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    24a2:	dc 01       	movw	r26, r24
    24a4:	ed 91       	ld	r30, X+
    24a6:	fc 91       	ld	r31, X
    24a8:	04 80       	ldd	r0, Z+4	; 0x04
    24aa:	f5 81       	ldd	r31, Z+5	; 0x05
    24ac:	e0 2d       	mov	r30, r0
    24ae:	6a ea       	ldi	r22, 0xAA	; 170
    24b0:	71 e0       	ldi	r23, 0x01	; 1
		sprintf(ip_adr1,"%x",mymac[5]);
    24b2:	09 95       	icall
    24b4:	f5 01       	movw	r30, r10
    24b6:	85 81       	ldd	r24, Z+5	; 0x05
    24b8:	1f 92       	push	r1
    24ba:	8f 93       	push	r24
    24bc:	1f 93       	push	r17
    24be:	0f 93       	push	r16
    24c0:	ff 92       	push	r15
    24c2:	ef 92       	push	r14
    24c4:	0e 94 2d 28 	call	0x505a	; 0x505a <sprintf>
		lcd->Device_Writes(ip_adr1);
    24c8:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    24cc:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    24d0:	dc 01       	movw	r26, r24
    24d2:	ed 91       	ld	r30, X+
    24d4:	fc 91       	ld	r31, X
    24d6:	04 80       	ldd	r0, Z+4	; 0x04
    24d8:	f5 81       	ldd	r31, Z+5	; 0x05
    24da:	e0 2d       	mov	r30, r0
    24dc:	66 2d       	mov	r22, r6
    24de:	77 2d       	mov	r23, r7
					 //char num = Ctl_LCD_Cursor % 4;
		char cnts1 = lcd_cnt / 30;
    24e0:	09 95       	icall
    24e2:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <lcd_cnt>
		char num = cnts1 % 4;
    24e6:	85 9d       	mul	r24, r5
    24e8:	81 2d       	mov	r24, r1
    24ea:	11 24       	eor	r1, r1
    24ec:	82 95       	swap	r24
    24ee:	8f 70       	andi	r24, 0x0F	; 15
		if(num == 0)
    24f0:	83 70       	andi	r24, 0x03	; 3
    24f2:	0f b6       	in	r0, 0x3f	; 63
    24f4:	f8 94       	cli
    24f6:	de bf       	out	0x3e, r29	; 62
    24f8:	0f be       	out	0x3f, r0	; 63
    24fa:	cd bf       	out	0x3d, r28	; 61
    24fc:	09 f0       	breq	.+2      	; 0x2500 <_ZL5proc4Pv+0x494>
		{
			lcd->Cursor_Home();
    24fe:	43 c0       	rjmp	.+134    	; 0x2586 <_ZL5proc4Pv+0x51a>
    2500:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    2504:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    2508:	0e 94 4e 09 	call	0x129c	; 0x129c <_ZN13Char_LCD2004A11Cursor_HomeEv>
			lcd->Cursor_Set(0,2);
    250c:	42 e0       	ldi	r20, 0x02	; 2
    250e:	60 e0       	ldi	r22, 0x00	; 0
    2510:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    2514:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    2518:	0e 94 13 09 	call	0x1226	; 0x1226 <_ZN13Char_LCD2004A10Cursor_SetEcc>
			lcd->Font_Print(0x04);
    251c:	64 e0       	ldi	r22, 0x04	; 4
    251e:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    2522:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    2526:	0e 94 7f 09 	call	0x12fe	; 0x12fe <_ZN13Char_LCD2004A10Font_PrintEc>
			lcd->Font_Print(0x01);
    252a:	61 e0       	ldi	r22, 0x01	; 1
    252c:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    2530:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    2534:	0e 94 7f 09 	call	0x12fe	; 0x12fe <_ZN13Char_LCD2004A10Font_PrintEc>
			lcd->Lcd_Print("Sensor Gateway");
    2538:	69 eb       	ldi	r22, 0xB9	; 185
    253a:	71 e0       	ldi	r23, 0x01	; 1
    253c:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    2540:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    2544:	0e 94 3a 09 	call	0x1274	; 0x1274 <_ZN13Char_LCD2004A9Lcd_PrintEPKc>
			lcd->Cursor_Set(0,3);
    2548:	43 e0       	ldi	r20, 0x03	; 3
    254a:	60 e0       	ldi	r22, 0x00	; 0
    254c:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    2550:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    2554:	0e 94 13 09 	call	0x1226	; 0x1226 <_ZN13Char_LCD2004A10Cursor_SetEcc>
			lcd->Font_Print(0x03);
    2558:	63 e0       	ldi	r22, 0x03	; 3
    255a:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    255e:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    2562:	0e 94 7f 09 	call	0x12fe	; 0x12fe <_ZN13Char_LCD2004A10Font_PrintEc>
			lcd->Font_Print(0x02);
    2566:	62 e0       	ldi	r22, 0x02	; 2
    2568:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    256c:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    2570:	0e 94 7f 09 	call	0x12fe	; 0x12fe <_ZN13Char_LCD2004A10Font_PrintEc>
			lcd->Lcd_Print("BLUE-BIZ.CO.LTD");
    2574:	68 ec       	ldi	r22, 0xC8	; 200
    2576:	71 e0       	ldi	r23, 0x01	; 1
    2578:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    257c:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    2580:	0e 94 3a 09 	call	0x1274	; 0x1274 <_ZN13Char_LCD2004A9Lcd_PrintEPKc>
		}
		else if(num == 1)
    2584:	38 ce       	rjmp	.-912    	; 0x21f6 <_ZL5proc4Pv+0x18a>
    2586:	81 30       	cpi	r24, 0x01	; 1
    2588:	09 f0       	breq	.+2      	; 0x258c <_ZL5proc4Pv+0x520>
		{
			 lcd->Cursor_Home();
    258a:	43 c0       	rjmp	.+134    	; 0x2612 <_ZL5proc4Pv+0x5a6>
    258c:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    2590:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    2594:	0e 94 4e 09 	call	0x129c	; 0x129c <_ZN13Char_LCD2004A11Cursor_HomeEv>
			 lcd->Cursor_Set(0,2);
    2598:	42 e0       	ldi	r20, 0x02	; 2
    259a:	60 e0       	ldi	r22, 0x00	; 0
    259c:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    25a0:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    25a4:	0e 94 13 09 	call	0x1226	; 0x1226 <_ZN13Char_LCD2004A10Cursor_SetEcc>
			 lcd->Font_Print(0x00);
    25a8:	60 e0       	ldi	r22, 0x00	; 0
    25aa:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    25ae:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    25b2:	0e 94 7f 09 	call	0x12fe	; 0x12fe <_ZN13Char_LCD2004A10Font_PrintEc>
			 lcd->Font_Print(0x05);
    25b6:	65 e0       	ldi	r22, 0x05	; 5
    25b8:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    25bc:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    25c0:	0e 94 7f 09 	call	0x12fe	; 0x12fe <_ZN13Char_LCD2004A10Font_PrintEc>
			 lcd->Lcd_Print("Sensor Gateway");
    25c4:	69 eb       	ldi	r22, 0xB9	; 185
    25c6:	71 e0       	ldi	r23, 0x01	; 1
    25c8:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    25cc:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    25d0:	0e 94 3a 09 	call	0x1274	; 0x1274 <_ZN13Char_LCD2004A9Lcd_PrintEPKc>
			 lcd->Cursor_Set(0,3);
    25d4:	43 e0       	ldi	r20, 0x03	; 3
    25d6:	60 e0       	ldi	r22, 0x00	; 0
    25d8:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    25dc:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    25e0:	0e 94 13 09 	call	0x1226	; 0x1226 <_ZN13Char_LCD2004A10Cursor_SetEcc>
			 lcd->Font_Print(0x03);
    25e4:	63 e0       	ldi	r22, 0x03	; 3
    25e6:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    25ea:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    25ee:	0e 94 7f 09 	call	0x12fe	; 0x12fe <_ZN13Char_LCD2004A10Font_PrintEc>
			 lcd->Font_Print(0x02);
    25f2:	62 e0       	ldi	r22, 0x02	; 2
    25f4:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    25f8:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    25fc:	0e 94 7f 09 	call	0x12fe	; 0x12fe <_ZN13Char_LCD2004A10Font_PrintEc>
			 lcd->Lcd_Print("BLUE-BIZ.CO.LTD");
    2600:	68 ec       	ldi	r22, 0xC8	; 200
    2602:	71 e0       	ldi	r23, 0x01	; 1
    2604:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    2608:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    260c:	0e 94 3a 09 	call	0x1274	; 0x1274 <_ZN13Char_LCD2004A9Lcd_PrintEPKc>
		}
		else if(num == 2)
    2610:	f2 cd       	rjmp	.-1052   	; 0x21f6 <_ZL5proc4Pv+0x18a>
    2612:	82 30       	cpi	r24, 0x02	; 2
    2614:	09 f0       	breq	.+2      	; 0x2618 <_ZL5proc4Pv+0x5ac>
		{
			lcd->Cursor_Home();
    2616:	43 c0       	rjmp	.+134    	; 0x269e <_ZL5proc4Pv+0x632>
    2618:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    261c:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    2620:	0e 94 4e 09 	call	0x129c	; 0x129c <_ZN13Char_LCD2004A11Cursor_HomeEv>
			lcd->Cursor_Set(0,2);
    2624:	42 e0       	ldi	r20, 0x02	; 2
    2626:	60 e0       	ldi	r22, 0x00	; 0
    2628:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    262c:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    2630:	0e 94 13 09 	call	0x1226	; 0x1226 <_ZN13Char_LCD2004A10Cursor_SetEcc>
			lcd->Font_Print(0x00);
    2634:	60 e0       	ldi	r22, 0x00	; 0
    2636:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    263a:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    263e:	0e 94 7f 09 	call	0x12fe	; 0x12fe <_ZN13Char_LCD2004A10Font_PrintEc>
			lcd->Font_Print(0x01);
    2642:	61 e0       	ldi	r22, 0x01	; 1
    2644:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    2648:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    264c:	0e 94 7f 09 	call	0x12fe	; 0x12fe <_ZN13Char_LCD2004A10Font_PrintEc>
			lcd->Lcd_Print("Sensor Gateway");
    2650:	69 eb       	ldi	r22, 0xB9	; 185
    2652:	71 e0       	ldi	r23, 0x01	; 1
    2654:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    2658:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    265c:	0e 94 3a 09 	call	0x1274	; 0x1274 <_ZN13Char_LCD2004A9Lcd_PrintEPKc>
			lcd->Cursor_Set(0,3);
    2660:	43 e0       	ldi	r20, 0x03	; 3
    2662:	60 e0       	ldi	r22, 0x00	; 0
    2664:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    2668:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    266c:	0e 94 13 09 	call	0x1226	; 0x1226 <_ZN13Char_LCD2004A10Cursor_SetEcc>
			lcd->Font_Print(0x03);
    2670:	63 e0       	ldi	r22, 0x03	; 3
    2672:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    2676:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    267a:	0e 94 7f 09 	call	0x12fe	; 0x12fe <_ZN13Char_LCD2004A10Font_PrintEc>
			lcd->Font_Print(0x06);
    267e:	66 e0       	ldi	r22, 0x06	; 6
    2680:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    2684:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    2688:	0e 94 7f 09 	call	0x12fe	; 0x12fe <_ZN13Char_LCD2004A10Font_PrintEc>
			lcd->Lcd_Print("BLUE-BIZ.CO.LTD");
    268c:	68 ec       	ldi	r22, 0xC8	; 200
    268e:	71 e0       	ldi	r23, 0x01	; 1
    2690:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    2694:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    2698:	0e 94 3a 09 	call	0x1274	; 0x1274 <_ZN13Char_LCD2004A9Lcd_PrintEPKc>
		}
		else if(num == 3)
    269c:	ac cd       	rjmp	.-1192   	; 0x21f6 <_ZL5proc4Pv+0x18a>
    269e:	83 30       	cpi	r24, 0x03	; 3
    26a0:	09 f0       	breq	.+2      	; 0x26a4 <_ZL5proc4Pv+0x638>
		{
			 lcd->Cursor_Home();
    26a2:	a9 cd       	rjmp	.-1198   	; 0x21f6 <_ZL5proc4Pv+0x18a>
    26a4:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    26a8:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    26ac:	0e 94 4e 09 	call	0x129c	; 0x129c <_ZN13Char_LCD2004A11Cursor_HomeEv>
			 lcd->Cursor_Set(0,2);
    26b0:	42 e0       	ldi	r20, 0x02	; 2
    26b2:	60 e0       	ldi	r22, 0x00	; 0
    26b4:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    26b8:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    26bc:	0e 94 13 09 	call	0x1226	; 0x1226 <_ZN13Char_LCD2004A10Cursor_SetEcc>
			 lcd->Font_Print(0x00);
    26c0:	60 e0       	ldi	r22, 0x00	; 0
    26c2:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    26c6:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    26ca:	0e 94 7f 09 	call	0x12fe	; 0x12fe <_ZN13Char_LCD2004A10Font_PrintEc>
			 lcd->Font_Print(0x01);
    26ce:	61 e0       	ldi	r22, 0x01	; 1
    26d0:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    26d4:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    26d8:	0e 94 7f 09 	call	0x12fe	; 0x12fe <_ZN13Char_LCD2004A10Font_PrintEc>
			 lcd->Lcd_Print("Sensor Gateway");
    26dc:	69 eb       	ldi	r22, 0xB9	; 185
    26de:	71 e0       	ldi	r23, 0x01	; 1
    26e0:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    26e4:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    26e8:	0e 94 3a 09 	call	0x1274	; 0x1274 <_ZN13Char_LCD2004A9Lcd_PrintEPKc>
			 lcd->Cursor_Set(0,3);
    26ec:	43 e0       	ldi	r20, 0x03	; 3
    26ee:	60 e0       	ldi	r22, 0x00	; 0
    26f0:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    26f4:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    26f8:	0e 94 13 09 	call	0x1226	; 0x1226 <_ZN13Char_LCD2004A10Cursor_SetEcc>
			 lcd->Font_Print(0x07);
    26fc:	67 e0       	ldi	r22, 0x07	; 7
    26fe:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    2702:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    2706:	0e 94 7f 09 	call	0x12fe	; 0x12fe <_ZN13Char_LCD2004A10Font_PrintEc>
			 lcd->Font_Print(0x02);
    270a:	62 e0       	ldi	r22, 0x02	; 2
    270c:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    2710:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    2714:	0e 94 7f 09 	call	0x12fe	; 0x12fe <_ZN13Char_LCD2004A10Font_PrintEc>
			 lcd->Lcd_Print("BLUE-BIZ.CO.LTD");
    2718:	68 ec       	ldi	r22, 0xC8	; 200
    271a:	71 e0       	ldi	r23, 0x01	; 1
    271c:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <lcd>
    2720:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <lcd+0x1>
    2724:	0e 94 3a 09 	call	0x1274	; 0x1274 <_ZN13Char_LCD2004A9Lcd_PrintEPKc>
    2728:	66 cd       	rjmp	.-1332   	; 0x21f6 <_ZL5proc4Pv+0x18a>

0000272a <_ZL5proc2Pv>:
	}
}

#if USE_ETH
static void proc2(void* pvParam)
{
    272a:	cf 93       	push	r28
    272c:	df 93       	push	r29
    272e:	cd b7       	in	r28, 0x3d	; 61
    2730:	de b7       	in	r29, 0x3e	; 62
    2732:	a1 97       	sbiw	r28, 0x21	; 33
    2734:	0f b6       	in	r0, 0x3f	; 63
    2736:	f8 94       	cli
    2738:	de bf       	out	0x3e, r29	; 62
    273a:	0f be       	out	0x3f, r0	; 63
    273c:	cd bf       	out	0x3d, r28	; 61
RESET_ETH:
    char led_flag = 0;
	//lcd->Clear_Lcd();
	//static uint8_t mymac[6] = {0x54,0x55,0x58,0x10,0x00,0x24};
	//static uint8_t myip[4] = {0,0,0,0};
	memcpy(myip,cmp_mem,sizeof(cmp_mem));		
    273e:	0f 2e       	mov	r0, r31
    2740:	f6 e1       	ldi	r31, 0x16	; 22
    2742:	6f 2e       	mov	r6, r31
    2744:	f3 e0       	ldi	r31, 0x03	; 3
    2746:	7f 2e       	mov	r7, r31
    2748:	f0 2d       	mov	r31, r0

	 while(1)
	 {	 

		 
		 if((cmp_mem[0] != mem4[IPV4_0]) | (cmp_mem[1] != mem4[IPV4_1]) | (cmp_mem[2] != mem4[IPV4_2]) | (cmp_mem[3] != mem4[IPV4_3]))
    274a:	0f 2e       	mov	r0, r31
    274c:	fe e6       	ldi	r31, 0x6E	; 110
    274e:	8f 2e       	mov	r8, r31
    2750:	f3 e0       	ldi	r31, 0x03	; 3
    2752:	9f 2e       	mov	r9, r31
    2754:	f0 2d       	mov	r31, r0
    2756:	0f 2e       	mov	r0, r31
    2758:	f0 e7       	ldi	r31, 0x70	; 112
    275a:	4f 2e       	mov	r4, r31
    275c:	f3 e0       	ldi	r31, 0x03	; 3
    275e:	5f 2e       	mov	r5, r31
    2760:	f0 2d       	mov	r31, r0
			 }
			 
		 }
		 else if(buf[UDP_DATA_P] == 0x03 + '0') //end time fromServer
		 {
			 char temp[14] = {0};
    2762:	ce 01       	movw	r24, r28
    2764:	01 96       	adiw	r24, 0x01	; 1
    2766:	9f 8f       	std	Y+31, r25	; 0x1f
    2768:	8e 8f       	std	Y+30, r24	; 0x1e

	 while(1)
	 {	 

		 
		 if((cmp_mem[0] != mem4[IPV4_0]) | (cmp_mem[1] != mem4[IPV4_1]) | (cmp_mem[2] != mem4[IPV4_2]) | (cmp_mem[3] != mem4[IPV4_3]))
    276a:	33 24       	eor	r3, r3
    276c:	33 94       	inc	r3
RESET_ETH:
    char led_flag = 0;
	//lcd->Clear_Lcd();
	//static uint8_t mymac[6] = {0x54,0x55,0x58,0x10,0x00,0x24};
	//static uint8_t myip[4] = {0,0,0,0};
	memcpy(myip,cmp_mem,sizeof(cmp_mem));		
    276e:	f3 01       	movw	r30, r6
    2770:	80 81       	ld	r24, Z
    2772:	91 81       	ldd	r25, Z+1	; 0x01
    2774:	a2 81       	ldd	r26, Z+2	; 0x02
    2776:	b3 81       	ldd	r27, Z+3	; 0x03
    2778:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <_ZL4myip>
    277c:	90 93 0f 03 	sts	0x030F, r25	; 0x80030f <_ZL4myip+0x1>
    2780:	a0 93 10 03 	sts	0x0310, r26	; 0x800310 <_ZL4myip+0x2>
    2784:	b0 93 11 03 	sts	0x0311, r27	; 0x800311 <_ZL4myip+0x3>
	static uint8_t buf[BUFFER_SIZE+1];
	uint16_t plen;
	DDRB = 0xff;
    2788:	8f ef       	ldi	r24, 0xFF	; 255
    278a:	87 bb       	out	0x17, r24	; 23
	PORTB = 0xff;
    278c:	88 bb       	out	0x18, r24	; 24
	 enc28j60Init(mymac);
    278e:	81 e0       	ldi	r24, 0x01	; 1
    2790:	91 e0       	ldi	r25, 0x01	; 1
	 enc28j60clkout(2); // change clkout from 6.25MHz to 12.5MHz
    2792:	80 d9       	rcall	.-3328   	; 0x1a94 <_Z12enc28j60InitPh>
    2794:	82 e0       	ldi	r24, 0x02	; 2
	 vTaskDelay(10);
    2796:	79 d9       	rcall	.-3342   	; 0x1a8a <_Z14enc28j60clkouth>
    2798:	8a e0       	ldi	r24, 0x0A	; 10
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	0e 94 c0 23 	call	0x4780	; 0x4780 <vTaskDelay>
	 enc28j60PhyWrite(PHLCON,0x476);
    27a0:	66 e7       	ldi	r22, 0x76	; 118
    27a2:	74 e0       	ldi	r23, 0x04	; 4
    27a4:	84 e1       	ldi	r24, 0x14	; 20
	 vTaskDelay(20);
    27a6:	59 d9       	rcall	.-3406   	; 0x1a5a <_Z16enc28j60PhyWritehj>
    27a8:	84 e1       	ldi	r24, 0x14	; 20
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	0e 94 c0 23 	call	0x4780	; 0x4780 <vTaskDelay>
	 init_ip_arp_udp_tcp(mymac,myip,MYWWWPORT);
    27b0:	40 e5       	ldi	r20, 0x50	; 80
    27b2:	6e e0       	ldi	r22, 0x0E	; 14
    27b4:	73 e0       	ldi	r23, 0x03	; 3
    27b6:	81 e0       	ldi	r24, 0x01	; 1
    27b8:	91 e0       	ldi	r25, 0x01	; 1

#if USE_ETH
static void proc2(void* pvParam)
{
RESET_ETH:
    char led_flag = 0;
    27ba:	ef da       	rcall	.-2594   	; 0x1d9a <_Z19init_ip_arp_udp_tcpPhS_h>

	 while(1)
	 {	 

		 
		 if((cmp_mem[0] != mem4[IPV4_0]) | (cmp_mem[1] != mem4[IPV4_1]) | (cmp_mem[2] != mem4[IPV4_2]) | (cmp_mem[3] != mem4[IPV4_3]))
    27bc:	21 2c       	mov	r2, r1
    27be:	02 e7       	ldi	r16, 0x72	; 114
    27c0:	13 e0       	ldi	r17, 0x03	; 3
    27c2:	0f 2e       	mov	r0, r31
    27c4:	f4 e7       	ldi	r31, 0x74	; 116
    27c6:	af 2e       	mov	r10, r31
    27c8:	f3 e0       	ldi	r31, 0x03	; 3
    27ca:	bf 2e       	mov	r11, r31
			 else
			 {
				 PORTB = cbi(PORTB,4); 
			 }
			 static int data[19] = {0};
			 data[0] = mem4[TEMP];
    27cc:	f0 2d       	mov	r31, r0
    27ce:	0f 2e       	mov	r0, r31
    27d0:	f3 e7       	ldi	r31, 0x73	; 115
    27d2:	ef 2e       	mov	r14, r31
    27d4:	f2 e0       	ldi	r31, 0x02	; 2
    27d6:	ff 2e       	mov	r15, r31
    27d8:	f0 2d       	mov	r31, r0
    27da:	0f 2e       	mov	r0, r31
    27dc:	fe e2       	ldi	r31, 0x2E	; 46
    27de:	cf 2e       	mov	r12, r31
    27e0:	f3 e0       	ldi	r31, 0x03	; 3
    27e2:	df 2e       	mov	r13, r31

	 while(1)
	 {	 

		 
		 if((cmp_mem[0] != mem4[IPV4_0]) | (cmp_mem[1] != mem4[IPV4_1]) | (cmp_mem[2] != mem4[IPV4_2]) | (cmp_mem[3] != mem4[IPV4_3]))
    27e4:	f0 2d       	mov	r31, r0
    27e6:	d3 01       	movw	r26, r6
    27e8:	8c 91       	ld	r24, X
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	f4 01       	movw	r30, r8
    27ee:	60 81       	ld	r22, Z
    27f0:	71 81       	ldd	r23, Z+1	; 0x01
    27f2:	11 96       	adiw	r26, 0x01	; 1
    27f4:	4c 91       	ld	r20, X
    27f6:	50 e0       	ldi	r21, 0x00	; 0
    27f8:	33 2d       	mov	r19, r3
    27fa:	d2 01       	movw	r26, r4
    27fc:	ed 91       	ld	r30, X+
    27fe:	fc 91       	ld	r31, X
    2800:	4e 17       	cp	r20, r30
    2802:	5f 07       	cpc	r21, r31
    2804:	09 f4       	brne	.+2      	; 0x2808 <_ZL5proc2Pv+0xde>
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	23 2d       	mov	r18, r3
    280a:	86 17       	cp	r24, r22
    280c:	97 07       	cpc	r25, r23
    280e:	09 f4       	brne	.+2      	; 0x2812 <_ZL5proc2Pv+0xe8>
    2810:	20 e0       	ldi	r18, 0x00	; 0
    2812:	32 2b       	or	r19, r18
    2814:	f3 01       	movw	r30, r6
    2816:	42 81       	ldd	r20, Z+2	; 0x02
    2818:	50 e0       	ldi	r21, 0x00	; 0
    281a:	23 2d       	mov	r18, r3
    281c:	d8 01       	movw	r26, r16
    281e:	ed 91       	ld	r30, X+
    2820:	fc 91       	ld	r31, X
    2822:	4e 17       	cp	r20, r30
    2824:	5f 07       	cpc	r21, r31
    2826:	09 f4       	brne	.+2      	; 0x282a <_ZL5proc2Pv+0x100>
    2828:	20 e0       	ldi	r18, 0x00	; 0
    282a:	23 2b       	or	r18, r19
    282c:	71 f4       	brne	.+28     	; 0x284a <_ZL5proc2Pv+0x120>
    282e:	f3 01       	movw	r30, r6
    2830:	23 81       	ldd	r18, Z+3	; 0x03
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	43 2d       	mov	r20, r3
    2836:	d5 01       	movw	r26, r10
    2838:	ed 91       	ld	r30, X+
    283a:	fc 91       	ld	r31, X
    283c:	2e 17       	cp	r18, r30
    283e:	3f 07       	cpc	r19, r31
    2840:	09 f4       	brne	.+2      	; 0x2844 <_ZL5proc2Pv+0x11a>
    2842:	40 e0       	ldi	r20, 0x00	; 0
    2844:	44 23       	and	r20, r20
    2846:	09 f4       	brne	.+2      	; 0x284a <_ZL5proc2Pv+0x120>
		 {
			 if(cmp_mem[0] != mem4[IPV4_0])
    2848:	47 c0       	rjmp	.+142    	; 0x28d8 <_ZL5proc2Pv+0x1ae>
    284a:	86 17       	cp	r24, r22
    284c:	97 07       	cpc	r25, r23
			 {
				  eeprom_update_byte((uint8_t*)0,mem4[IPV4_0]);
    284e:	41 f0       	breq	.+16     	; 0x2860 <_ZL5proc2Pv+0x136>
    2850:	80 e0       	ldi	r24, 0x00	; 0
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	0e 94 10 2b 	call	0x5620	; 0x5620 <eeprom_update_byte>
				  cmp_mem[0] = mem4[IPV4_0];
    2858:	f4 01       	movw	r30, r8
    285a:	80 81       	ld	r24, Z
    285c:	d3 01       	movw	r26, r6
			 }
			 if(cmp_mem[1] != mem4[IPV4_1])
    285e:	8c 93       	st	X, r24
    2860:	f2 01       	movw	r30, r4
    2862:	60 81       	ld	r22, Z
    2864:	71 81       	ldd	r23, Z+1	; 0x01
    2866:	d3 01       	movw	r26, r6
    2868:	11 96       	adiw	r26, 0x01	; 1
    286a:	8c 91       	ld	r24, X
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	86 17       	cp	r24, r22
    2870:	97 07       	cpc	r25, r23
			 {
				  eeprom_update_byte((uint8_t*)1,mem4[IPV4_1]);
    2872:	49 f0       	breq	.+18     	; 0x2886 <_ZL5proc2Pv+0x15c>
    2874:	81 e0       	ldi	r24, 0x01	; 1
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	0e 94 10 2b 	call	0x5620	; 0x5620 <eeprom_update_byte>
				  cmp_mem[1] = mem4[IPV4_1];
    287c:	f2 01       	movw	r30, r4
    287e:	80 81       	ld	r24, Z
    2880:	d3 01       	movw	r26, r6
    2882:	11 96       	adiw	r26, 0x01	; 1
			 }
			 if(cmp_mem[2] != mem4[IPV4_2])
    2884:	8c 93       	st	X, r24
    2886:	60 91 72 03 	lds	r22, 0x0372	; 0x800372 <mem4+0x44>
    288a:	70 91 73 03 	lds	r23, 0x0373	; 0x800373 <mem4+0x45>
    288e:	f3 01       	movw	r30, r6
    2890:	82 81       	ldd	r24, Z+2	; 0x02
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	86 17       	cp	r24, r22
    2896:	97 07       	cpc	r25, r23
			 {
				  eeprom_update_byte((uint8_t*)2,mem4[IPV4_2]);
    2898:	49 f0       	breq	.+18     	; 0x28ac <_ZL5proc2Pv+0x182>
    289a:	82 e0       	ldi	r24, 0x02	; 2
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	0e 94 10 2b 	call	0x5620	; 0x5620 <eeprom_update_byte>
				  cmp_mem[2] = mem4[IPV4_2];
    28a2:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <mem4+0x44>
    28a6:	d3 01       	movw	r26, r6
    28a8:	12 96       	adiw	r26, 0x02	; 2
			 }
			 if(cmp_mem[3] != mem4[IPV4_3])
    28aa:	8c 93       	st	X, r24
    28ac:	60 91 74 03 	lds	r22, 0x0374	; 0x800374 <mem4+0x46>
    28b0:	70 91 75 03 	lds	r23, 0x0375	; 0x800375 <mem4+0x47>
    28b4:	f3 01       	movw	r30, r6
    28b6:	83 81       	ldd	r24, Z+3	; 0x03
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	86 17       	cp	r24, r22
    28bc:	97 07       	cpc	r25, r23
			 {
				  eeprom_update_byte((uint8_t*)3,mem4[IPV4_3]);
    28be:	49 f0       	breq	.+18     	; 0x28d2 <_ZL5proc2Pv+0x1a8>
    28c0:	83 e0       	ldi	r24, 0x03	; 3
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	0e 94 10 2b 	call	0x5620	; 0x5620 <eeprom_update_byte>
				  cmp_mem[3] = mem4[IPV4_3];
    28c8:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <mem4+0x46>
    28cc:	d3 01       	movw	r26, r6
    28ce:	13 96       	adiw	r26, 0x03	; 3
			 }
			 cls_var = 1;
    28d0:	8c 93       	st	X, r24
    28d2:	30 92 12 03 	sts	0x0312, r3	; 0x800312 <cls_var>
			 goto RESET_ETH;
		 }
		 plen = enc28j60PacketReceive(BUFFER_SIZE, buf);
    28d6:	4b cf       	rjmp	.-362    	; 0x276e <_ZL5proc2Pv+0x44>
    28d8:	69 e9       	ldi	r22, 0x99	; 153
    28da:	72 e0       	ldi	r23, 0x02	; 2
    28dc:	84 e6       	ldi	r24, 0x64	; 100
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	81 d9       	rcall	.-3326   	; 0x1be4 <_Z21enc28j60PacketReceivejPh>
		 if(plen==0)
    28e2:	99 a3       	std	Y+33, r25	; 0x21
    28e4:	88 a3       	std	Y+32, r24	; 0x20
		 {
			 goto UDP_SEND;
		 }
		 if(eth_type_is_arp_and_my_ip(buf,plen))
    28e6:	00 97       	sbiw	r24, 0x00	; 0
    28e8:	09 f4       	brne	.+2      	; 0x28ec <_ZL5proc2Pv+0x1c2>
    28ea:	3b c1       	rjmp	.+630    	; 0x2b62 <_ZL5proc2Pv+0x438>
    28ec:	bc 01       	movw	r22, r24
    28ee:	89 e9       	ldi	r24, 0x99	; 153
    28f0:	92 e0       	ldi	r25, 0x02	; 2
		 {
			 make_arp_answer_from_request(buf);
    28f2:	6c da       	rcall	.-2856   	; 0x1dcc <_Z25eth_type_is_arp_and_my_ipPhj>
    28f4:	88 23       	and	r24, r24
    28f6:	21 f0       	breq	.+8      	; 0x2900 <_ZL5proc2Pv+0x1d6>
			 continue;
    28f8:	89 e9       	ldi	r24, 0x99	; 153
		 }
		 if(eth_type_is_ip_and_my_ip(buf,plen)==0)
    28fa:	92 e0       	ldi	r25, 0x02	; 2
    28fc:	ea da       	rcall	.-2604   	; 0x1ed2 <_Z28make_arp_answer_from_requestPh>
    28fe:	73 cf       	rjmp	.-282    	; 0x27e6 <_ZL5proc2Pv+0xbc>
    2900:	68 a1       	ldd	r22, Y+32	; 0x20
    2902:	79 a1       	ldd	r23, Y+33	; 0x21
    2904:	89 e9       	ldi	r24, 0x99	; 153
    2906:	92 e0       	ldi	r25, 0x02	; 2
    2908:	87 da       	rcall	.-2802   	; 0x1e18 <_Z24eth_type_is_ip_and_my_ipPhj>
    290a:	88 23       	and	r24, r24
		 {
			 continue;
		 }
		 if(buf[IP_PROTO_P]==IP_PROTO_ICMP_V && buf[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V)
    290c:	09 f4       	brne	.+2      	; 0x2910 <_ZL5proc2Pv+0x1e6>
    290e:	6b cf       	rjmp	.-298    	; 0x27e6 <_ZL5proc2Pv+0xbc>
    2910:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <_ZZL5proc2PvE3buf+0x17>
    2914:	81 30       	cpi	r24, 0x01	; 1
    2916:	51 f4       	brne	.+20     	; 0x292c <_ZL5proc2Pv+0x202>
		 {
			make_echo_reply_from_request(buf,plen);
    2918:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <_ZZL5proc2PvE3buf+0x22>
    291c:	88 30       	cpi	r24, 0x08	; 8
    291e:	31 f4       	brne	.+12     	; 0x292c <_ZL5proc2Pv+0x202>
    2920:	68 a1       	ldd	r22, Y+32	; 0x20
    2922:	79 a1       	ldd	r23, Y+33	; 0x21
			continue;
    2924:	89 e9       	ldi	r24, 0x99	; 153
		 }
		 if(buf[UDP_DATA_P] == 0x01)  //리눅스 서버용 파싱 
    2926:	92 e0       	ldi	r25, 0x02	; 2
    2928:	fc da       	rcall	.-2568   	; 0x1f22 <_Z28make_echo_reply_from_requestPhj>
    292a:	5d cf       	rjmp	.-326    	; 0x27e6 <_ZL5proc2Pv+0xbc>
    292c:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <_ZZL5proc2PvE3buf+0x2a>
		 {
			 char temp[16] = {0};
    2930:	81 30       	cpi	r24, 0x01	; 1
    2932:	09 f0       	breq	.+2      	; 0x2936 <_ZL5proc2Pv+0x20c>
    2934:	50 c0       	rjmp	.+160    	; 0x29d6 <_ZL5proc2Pv+0x2ac>
    2936:	80 e1       	ldi	r24, 0x10	; 16
    2938:	ee 8d       	ldd	r30, Y+30	; 0x1e
    293a:	ff 8d       	ldd	r31, Y+31	; 0x1f
			 char loop = buf[UDP_DATA_P + 1];
			 char start = 2;
			 char num = 0;
			 for(char i=1;i<loop+1;i++)
    293c:	11 92       	st	Z+, r1
    293e:	8a 95       	dec	r24
    2940:	e9 f7       	brne	.-6      	; 0x293c <_ZL5proc2Pv+0x212>
    2942:	40 91 c4 02 	lds	r20, 0x02C4	; 0x8002c4 <_ZZL5proc2PvE3buf+0x2b>
    2946:	50 e0       	ldi	r21, 0x00	; 0
    2948:	4f 5f       	subi	r20, 0xFF	; 255
    294a:	5f 4f       	sbci	r21, 0xFF	; 255
    294c:	42 30       	cpi	r20, 0x02	; 2
    294e:	51 05       	cpc	r21, r1
			 {
				 temp[i-1] = buf[UDP_DATA_P + (start + (i-1))];
    2950:	0c f0       	brlt	.+2      	; 0x2954 <_ZL5proc2Pv+0x22a>
    2952:	95 c1       	rjmp	.+810    	; 0x2c7e <_ZL5proc2Pv+0x554>
    2954:	22 c0       	rjmp	.+68     	; 0x299a <_ZL5proc2Pv+0x270>
    2956:	fc 01       	movw	r30, r24
    2958:	e7 56       	subi	r30, 0x67	; 103
    295a:	fd 4f       	sbci	r31, 0xFD	; 253
    295c:	63 a5       	ldd	r22, Z+43	; 0x2b
    295e:	fe 01       	movw	r30, r28
				 if(i % 2 == 0)
    2960:	e8 0f       	add	r30, r24
    2962:	f9 1f       	adc	r31, r25
				 {
					 mem4[UDP_DATA0 + num] =  (( 0xff00 & temp[i-1] << 8)) | (0x00ff & temp[i-2]);
    2964:	60 83       	st	Z, r22
    2966:	20 fd       	sbrc	r18, 0
    2968:	12 c0       	rjmp	.+36     	; 0x298e <_ZL5proc2Pv+0x264>
    296a:	e3 2f       	mov	r30, r19
    296c:	f0 e0       	ldi	r31, 0x00	; 0
    296e:	ee 0f       	add	r30, r30
    2970:	ff 1f       	adc	r31, r31
    2972:	ee 5b       	subi	r30, 0xBE	; 190
    2974:	fc 4f       	sbci	r31, 0xFC	; 252
    2976:	af ef       	ldi	r26, 0xFF	; 255
    2978:	bf ef       	ldi	r27, 0xFF	; 255
    297a:	ac 0f       	add	r26, r28
    297c:	bd 1f       	adc	r27, r29
    297e:	a8 0f       	add	r26, r24
    2980:	b9 1f       	adc	r27, r25
    2982:	8c 91       	ld	r24, X
    2984:	90 e0       	ldi	r25, 0x00	; 0
					 num++;
    2986:	96 2b       	or	r25, r22
		 {
			 char temp[16] = {0};
			 char loop = buf[UDP_DATA_P + 1];
			 char start = 2;
			 char num = 0;
			 for(char i=1;i<loop+1;i++)
    2988:	91 83       	std	Z+1, r25	; 0x01
    298a:	80 83       	st	Z, r24
    298c:	3f 5f       	subi	r19, 0xFF	; 255
    298e:	2f 5f       	subi	r18, 0xFF	; 255
    2990:	82 2f       	mov	r24, r18
    2992:	90 e0       	ldi	r25, 0x00	; 0
				 {
					 mem4[UDP_DATA0 + num] =  (( 0xff00 & temp[i-1] << 8)) | (0x00ff & temp[i-2]);
					 num++;
				 }
			 }
			  mem4[GOAL_CNT] =  (0xff00 & (buf[UDP_DATA_P + 14] << 8))| (0x00ff & buf[UDP_DATA_P + 15]);
    2994:	84 17       	cp	r24, r20
    2996:	95 07       	cpc	r25, r21
    2998:	f4 f2       	brlt	.-68     	; 0x2956 <_ZL5proc2Pv+0x22c>
    299a:	e9 e9       	ldi	r30, 0x99	; 153
    299c:	f2 e0       	ldi	r31, 0x02	; 2
    299e:	80 ad       	ldd	r24, Z+56	; 0x38
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	98 2f       	mov	r25, r24
    29a4:	88 27       	eor	r24, r24
    29a6:	21 ad       	ldd	r18, Z+57	; 0x39
    29a8:	82 2b       	or	r24, r18
    29aa:	d6 01       	movw	r26, r12
    29ac:	51 96       	adiw	r26, 0x11	; 17
			  mem4[TARGET_MAX] = mem4[GOAL_CNT];
    29ae:	9c 93       	st	X, r25
    29b0:	8e 93       	st	-X, r24
    29b2:	50 97       	sbiw	r26, 0x10	; 16
    29b4:	dd 96       	adiw	r26, 0x3d	; 61
			  mem4[TARGET_GOAL_CNT] = mem4[GOAL_CNT];
    29b6:	9c 93       	st	X, r25
    29b8:	8e 93       	st	-X, r24
    29ba:	dc 97       	sbiw	r26, 0x3c	; 60
    29bc:	d9 96       	adiw	r26, 0x39	; 57
			  mem4[WARNING_HIGH] = mem4[GOAL_CNT];
    29be:	9c 93       	st	X, r25
    29c0:	8e 93       	st	-X, r24
    29c2:	d8 97       	sbiw	r26, 0x38	; 56
    29c4:	d7 96       	adiw	r26, 0x37	; 55
			  mem4[TARGET_CMP] = mem4[GOAL_CNT];
    29c6:	9c 93       	st	X, r25
    29c8:	8e 93       	st	-X, r24
    29ca:	d6 97       	sbiw	r26, 0x36	; 54
    29cc:	df 96       	adiw	r26, 0x3f	; 63
    29ce:	9c 93       	st	X, r25
			  goto UDP_SEND;
			 
		 }
		 if(buf[UDP_DATA_P] == 0x01 + '0') // 기존 라이브러리 사용 (자바용) 프로덕트 이름 시리얼번호 카운트 받음
    29d0:	8e 93       	st	-X, r24
    29d2:	de 97       	sbiw	r26, 0x3e	; 62
    29d4:	c6 c0       	rjmp	.+396    	; 0x2b62 <_ZL5proc2Pv+0x438>
		 {
			 char temp[29] = {0};
    29d6:	81 33       	cpi	r24, 0x31	; 49
    29d8:	09 f0       	breq	.+2      	; 0x29dc <_ZL5proc2Pv+0x2b2>
    29da:	51 c0       	rjmp	.+162    	; 0x2a7e <_ZL5proc2Pv+0x354>
    29dc:	8d e1       	ldi	r24, 0x1D	; 29
    29de:	ee 8d       	ldd	r30, Y+30	; 0x1e
    29e0:	ff 8d       	ldd	r31, Y+31	; 0x1f
			 char loop = buf[UDP_DATA_P + 1];
    29e2:	11 92       	st	Z+, r1
    29e4:	8a 95       	dec	r24
			 loop = loop - '0';
			 if(loop <= 1 | loop > 30)
    29e6:	e9 f7       	brne	.-6      	; 0x29e2 <_ZL5proc2Pv+0x2b8>
    29e8:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <_ZZL5proc2PvE3buf+0x2b>
    29ec:	9e ec       	ldi	r25, 0xCE	; 206
    29ee:	98 0f       	add	r25, r24
			 {
				 goto UDP_SEND;
			 }
			 char start = 2;
			 char num = 0;
			 for(char i=1;i<loop+1;i++)
    29f0:	9d 31       	cpi	r25, 0x1D	; 29
    29f2:	08 f0       	brcs	.+2      	; 0x29f6 <_ZL5proc2Pv+0x2cc>
    29f4:	b6 c0       	rjmp	.+364    	; 0x2b62 <_ZL5proc2Pv+0x438>
    29f6:	80 53       	subi	r24, 0x30	; 48
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	01 96       	adiw	r24, 0x01	; 1
    29fc:	82 30       	cpi	r24, 0x02	; 2
    29fe:	91 05       	cpc	r25, r1
			 {
				 temp[i-1] = buf[UDP_DATA_P + (start + (i-1))];
    2a00:	0c f0       	brlt	.+2      	; 0x2a04 <_ZL5proc2Pv+0x2da>
    2a02:	43 c1       	rjmp	.+646    	; 0x2c8a <_ZL5proc2Pv+0x560>
    2a04:	22 c0       	rjmp	.+68     	; 0x2a4a <_ZL5proc2Pv+0x320>
    2a06:	f9 01       	movw	r30, r18
    2a08:	e7 56       	subi	r30, 0x67	; 103
    2a0a:	fd 4f       	sbci	r31, 0xFD	; 253
    2a0c:	63 a5       	ldd	r22, Z+43	; 0x2b
    2a0e:	fe 01       	movw	r30, r28
				 if(i % 2 == 0)
    2a10:	e2 0f       	add	r30, r18
    2a12:	f3 1f       	adc	r31, r19
				 {
					mem4[UDP_DATA0 + num] =  (( 0xff00 & temp[i-1] << 8)) | (0x00ff & temp[i-2]);
    2a14:	60 83       	st	Z, r22
    2a16:	40 fd       	sbrc	r20, 0
    2a18:	12 c0       	rjmp	.+36     	; 0x2a3e <_ZL5proc2Pv+0x314>
    2a1a:	e5 2f       	mov	r30, r21
    2a1c:	f0 e0       	ldi	r31, 0x00	; 0
    2a1e:	ee 0f       	add	r30, r30
    2a20:	ff 1f       	adc	r31, r31
    2a22:	ee 5b       	subi	r30, 0xBE	; 190
    2a24:	fc 4f       	sbci	r31, 0xFC	; 252
    2a26:	af ef       	ldi	r26, 0xFF	; 255
    2a28:	bf ef       	ldi	r27, 0xFF	; 255
    2a2a:	ac 0f       	add	r26, r28
    2a2c:	bd 1f       	adc	r27, r29
    2a2e:	a2 0f       	add	r26, r18
    2a30:	b3 1f       	adc	r27, r19
    2a32:	2c 91       	ld	r18, X
    2a34:	30 e0       	ldi	r19, 0x00	; 0
					num++;
    2a36:	36 2b       	or	r19, r22
			 {
				 goto UDP_SEND;
			 }
			 char start = 2;
			 char num = 0;
			 for(char i=1;i<loop+1;i++)
    2a38:	31 83       	std	Z+1, r19	; 0x01
    2a3a:	20 83       	st	Z, r18
    2a3c:	5f 5f       	subi	r21, 0xFF	; 255
    2a3e:	4f 5f       	subi	r20, 0xFF	; 255
    2a40:	24 2f       	mov	r18, r20
    2a42:	30 e0       	ldi	r19, 0x00	; 0
				 {
					mem4[UDP_DATA0 + num] =  (( 0xff00 & temp[i-1] << 8)) | (0x00ff & temp[i-2]);
					num++;
				 }
			 }
			 mem4[GOAL_CNT] = mem4[UDP_DATA14];
    2a44:	28 17       	cp	r18, r24
    2a46:	39 07       	cpc	r19, r25
    2a48:	f4 f2       	brlt	.-68     	; 0x2a06 <_ZL5proc2Pv+0x2dc>
    2a4a:	d6 01       	movw	r26, r12
    2a4c:	d0 96       	adiw	r26, 0x30	; 48
    2a4e:	8d 91       	ld	r24, X+
    2a50:	9c 91       	ld	r25, X
    2a52:	d1 97       	sbiw	r26, 0x31	; 49
    2a54:	51 96       	adiw	r26, 0x11	; 17
			 mem4[TARGET_MAX] = mem4[GOAL_CNT];
    2a56:	9c 93       	st	X, r25
    2a58:	8e 93       	st	-X, r24
    2a5a:	50 97       	sbiw	r26, 0x10	; 16
    2a5c:	dd 96       	adiw	r26, 0x3d	; 61
			 mem4[TARGET_GOAL_CNT] = mem4[GOAL_CNT];
    2a5e:	9c 93       	st	X, r25
    2a60:	8e 93       	st	-X, r24
    2a62:	dc 97       	sbiw	r26, 0x3c	; 60
    2a64:	d9 96       	adiw	r26, 0x39	; 57
			 mem4[WARNING_HIGH] = mem4[GOAL_CNT];
    2a66:	9c 93       	st	X, r25
    2a68:	8e 93       	st	-X, r24
    2a6a:	d8 97       	sbiw	r26, 0x38	; 56
    2a6c:	d7 96       	adiw	r26, 0x37	; 55
			 mem4[TARGET_CMP] = mem4[GOAL_CNT];
    2a6e:	9c 93       	st	X, r25
    2a70:	8e 93       	st	-X, r24
    2a72:	d6 97       	sbiw	r26, 0x36	; 54
    2a74:	df 96       	adiw	r26, 0x3f	; 63
			 goto UDP_SEND;
    2a76:	9c 93       	st	X, r25
		 }
		 else if(buf[UDP_DATA_P] == 0x02 + '0')  //start time from Server
    2a78:	8e 93       	st	-X, r24
    2a7a:	de 97       	sbiw	r26, 0x3e	; 62
		 {
			 char temp[14] = {0};
    2a7c:	72 c0       	rjmp	.+228    	; 0x2b62 <_ZL5proc2Pv+0x438>
    2a7e:	82 33       	cpi	r24, 0x32	; 50
    2a80:	c1 f5       	brne	.+112    	; 0x2af2 <_ZL5proc2Pv+0x3c8>
    2a82:	8e e0       	ldi	r24, 0x0E	; 14
    2a84:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2a86:	ff 8d       	ldd	r31, Y+31	; 0x1f
			 char loop = buf[UDP_DATA_P + 1];
    2a88:	11 92       	st	Z+, r1
    2a8a:	8a 95       	dec	r24
			 loop = loop - '0';
			 if(loop <= 1 | loop > 14)
    2a8c:	e9 f7       	brne	.-6      	; 0x2a88 <_ZL5proc2Pv+0x35e>
    2a8e:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <_ZZL5proc2PvE3buf+0x2b>
    2a92:	9e ec       	ldi	r25, 0xCE	; 206
    2a94:	98 0f       	add	r25, r24
			 {
				goto UDP_SEND;
			 }
			 char start = 2;
			 char num = 0;
			 for(char i=1;i<loop+1;i++)
    2a96:	9d 30       	cpi	r25, 0x0D	; 13
    2a98:	08 f0       	brcs	.+2      	; 0x2a9c <_ZL5proc2Pv+0x372>
    2a9a:	63 c0       	rjmp	.+198    	; 0x2b62 <_ZL5proc2Pv+0x438>
    2a9c:	80 53       	subi	r24, 0x30	; 48
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	01 96       	adiw	r24, 0x01	; 1
    2aa2:	82 30       	cpi	r24, 0x02	; 2
    2aa4:	91 05       	cpc	r25, r1
			 {
				  temp[i-1] = buf[UDP_DATA_P + (start + (i-1))];
    2aa6:	0c f0       	brlt	.+2      	; 0x2aaa <_ZL5proc2Pv+0x380>
    2aa8:	f6 c0       	rjmp	.+492    	; 0x2c96 <_ZL5proc2Pv+0x56c>
    2aaa:	5b c0       	rjmp	.+182    	; 0x2b62 <_ZL5proc2Pv+0x438>
    2aac:	f9 01       	movw	r30, r18
    2aae:	e7 56       	subi	r30, 0x67	; 103
    2ab0:	fd 4f       	sbci	r31, 0xFD	; 253
    2ab2:	63 a5       	ldd	r22, Z+43	; 0x2b
    2ab4:	fe 01       	movw	r30, r28
				  if(i % 2 == 0)
    2ab6:	e2 0f       	add	r30, r18
    2ab8:	f3 1f       	adc	r31, r19
				  {
					  mem4[DATE_DATA0 + num] =  (( 0xff00 & temp[i-1] << 8)) | (0x00ff & temp[i-2]);
    2aba:	60 83       	st	Z, r22
    2abc:	40 fd       	sbrc	r20, 0
    2abe:	12 c0       	rjmp	.+36     	; 0x2ae4 <_ZL5proc2Pv+0x3ba>
    2ac0:	e5 2f       	mov	r30, r21
    2ac2:	f0 e0       	ldi	r31, 0x00	; 0
    2ac4:	ee 0f       	add	r30, r30
    2ac6:	ff 1f       	adc	r31, r31
    2ac8:	ec 57       	subi	r30, 0x7C	; 124
    2aca:	fc 4f       	sbci	r31, 0xFC	; 252
    2acc:	af ef       	ldi	r26, 0xFF	; 255
    2ace:	bf ef       	ldi	r27, 0xFF	; 255
    2ad0:	ac 0f       	add	r26, r28
    2ad2:	bd 1f       	adc	r27, r29
    2ad4:	a2 0f       	add	r26, r18
    2ad6:	b3 1f       	adc	r27, r19
    2ad8:	2c 91       	ld	r18, X
    2ada:	30 e0       	ldi	r19, 0x00	; 0
					  num++;
    2adc:	36 2b       	or	r19, r22
			 {
				goto UDP_SEND;
			 }
			 char start = 2;
			 char num = 0;
			 for(char i=1;i<loop+1;i++)
    2ade:	31 83       	std	Z+1, r19	; 0x01
    2ae0:	20 83       	st	Z, r18
    2ae2:	5f 5f       	subi	r21, 0xFF	; 255
    2ae4:	4f 5f       	subi	r20, 0xFF	; 255
    2ae6:	24 2f       	mov	r18, r20
    2ae8:	30 e0       	ldi	r19, 0x00	; 0
    2aea:	28 17       	cp	r18, r24
					  num++;
				  }
			 }
			 
		 }
		 else if(buf[UDP_DATA_P] == 0x03 + '0') //end time fromServer
    2aec:	39 07       	cpc	r19, r25
    2aee:	f4 f2       	brlt	.-68     	; 0x2aac <_ZL5proc2Pv+0x382>
		 {
			 char temp[14] = {0};
    2af0:	38 c0       	rjmp	.+112    	; 0x2b62 <_ZL5proc2Pv+0x438>
    2af2:	83 33       	cpi	r24, 0x33	; 51
    2af4:	b1 f5       	brne	.+108    	; 0x2b62 <_ZL5proc2Pv+0x438>
    2af6:	8e e0       	ldi	r24, 0x0E	; 14
    2af8:	ae 8d       	ldd	r26, Y+30	; 0x1e
    2afa:	bf 8d       	ldd	r27, Y+31	; 0x1f
			 char loop = buf[UDP_DATA_P + 1];
    2afc:	1d 92       	st	X+, r1
    2afe:	8a 95       	dec	r24
			 loop = loop - '0';
			 if(loop <= 1 | loop > 14)
    2b00:	e9 f7       	brne	.-6      	; 0x2afc <_ZL5proc2Pv+0x3d2>
    2b02:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <_ZZL5proc2PvE3buf+0x2b>
    2b06:	9e ec       	ldi	r25, 0xCE	; 206
			 {
				 goto UDP_SEND;
			 }
			 char start = 2;
			 char num = 0;
			 for(char i=1;i<loop+1;i++)
    2b08:	98 0f       	add	r25, r24
    2b0a:	9d 30       	cpi	r25, 0x0D	; 13
    2b0c:	50 f5       	brcc	.+84     	; 0x2b62 <_ZL5proc2Pv+0x438>
    2b0e:	80 53       	subi	r24, 0x30	; 48
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	01 96       	adiw	r24, 0x01	; 1
    2b14:	82 30       	cpi	r24, 0x02	; 2
    2b16:	91 05       	cpc	r25, r1
			 {
				 temp[i-1] = buf[UDP_DATA_P + (start + (i-1))];
    2b18:	0c f0       	brlt	.+2      	; 0x2b1c <_ZL5proc2Pv+0x3f2>
    2b1a:	c3 c0       	rjmp	.+390    	; 0x2ca2 <_ZL5proc2Pv+0x578>
    2b1c:	22 c0       	rjmp	.+68     	; 0x2b62 <_ZL5proc2Pv+0x438>
    2b1e:	f9 01       	movw	r30, r18
    2b20:	e7 56       	subi	r30, 0x67	; 103
    2b22:	fd 4f       	sbci	r31, 0xFD	; 253
    2b24:	63 a5       	ldd	r22, Z+43	; 0x2b
    2b26:	fe 01       	movw	r30, r28
				 if(i % 2 == 0)
    2b28:	e2 0f       	add	r30, r18
    2b2a:	f3 1f       	adc	r31, r19
				 {
					 mem4[DATE_DATA7 + num] =  (( 0xff00 & temp[i-1] << 8)) | (0x00ff & temp[i-2]);
    2b2c:	60 83       	st	Z, r22
    2b2e:	40 fd       	sbrc	r20, 0
    2b30:	12 c0       	rjmp	.+36     	; 0x2b56 <_ZL5proc2Pv+0x42c>
    2b32:	e5 2f       	mov	r30, r21
    2b34:	f0 e0       	ldi	r31, 0x00	; 0
    2b36:	ee 0f       	add	r30, r30
    2b38:	ff 1f       	adc	r31, r31
    2b3a:	ee 56       	subi	r30, 0x6E	; 110
    2b3c:	fc 4f       	sbci	r31, 0xFC	; 252
    2b3e:	af ef       	ldi	r26, 0xFF	; 255
    2b40:	bf ef       	ldi	r27, 0xFF	; 255
    2b42:	ac 0f       	add	r26, r28
    2b44:	bd 1f       	adc	r27, r29
    2b46:	a2 0f       	add	r26, r18
    2b48:	b3 1f       	adc	r27, r19
    2b4a:	2c 91       	ld	r18, X
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
					 num++;
    2b4e:	36 2b       	or	r19, r22
			 {
				 goto UDP_SEND;
			 }
			 char start = 2;
			 char num = 0;
			 for(char i=1;i<loop+1;i++)
    2b50:	31 83       	std	Z+1, r19	; 0x01
    2b52:	20 83       	st	Z, r18
    2b54:	5f 5f       	subi	r21, 0xFF	; 255
    2b56:	4f 5f       	subi	r20, 0xFF	; 255
    2b58:	24 2f       	mov	r18, r20
    2b5a:	30 e0       	ldi	r19, 0x00	; 0
					 num++;
				 }
			 }
		 }
		 UDP_SEND:
			 led_flag = ~led_flag;
    2b5c:	28 17       	cp	r18, r24
			 if(led_flag)
    2b5e:	39 07       	cpc	r19, r25
			 {
				 PORTB = sbi(PORTB,4);
    2b60:	f4 f2       	brlt	.-68     	; 0x2b1e <_ZL5proc2Pv+0x3f4>
    2b62:	20 94       	com	r2
    2b64:	29 f0       	breq	.+10     	; 0x2b70 <_ZL5proc2Pv+0x446>
    2b66:	88 b3       	in	r24, 0x18	; 24
    2b68:	80 61       	ori	r24, 0x10	; 16
			 }
			 else
			 {
				 PORTB = cbi(PORTB,4); 
    2b6a:	88 bb       	out	0x18, r24	; 24
    2b6c:	88 bb       	out	0x18, r24	; 24
    2b6e:	04 c0       	rjmp	.+8      	; 0x2b78 <_ZL5proc2Pv+0x44e>
    2b70:	88 b3       	in	r24, 0x18	; 24
			 }
			 static int data[19] = {0};
			 data[0] = mem4[TEMP];
    2b72:	8f 7e       	andi	r24, 0xEF	; 239
    2b74:	88 bb       	out	0x18, r24	; 24
    2b76:	88 bb       	out	0x18, r24	; 24
    2b78:	f6 01       	movw	r30, r12
    2b7a:	82 81       	ldd	r24, Z+2	; 0x02
    2b7c:	93 81       	ldd	r25, Z+3	; 0x03
    2b7e:	d7 01       	movw	r26, r14
			 data[1] = mem4[COUNT];
    2b80:	11 96       	adiw	r26, 0x01	; 1
    2b82:	9c 93       	st	X, r25
    2b84:	8e 93       	st	-X, r24
    2b86:	86 81       	ldd	r24, Z+6	; 0x06
    2b88:	97 81       	ldd	r25, Z+7	; 0x07
    2b8a:	13 96       	adiw	r26, 0x03	; 3
			 data[2] = mem4[PRESSURE];
    2b8c:	9c 93       	st	X, r25
    2b8e:	8e 93       	st	-X, r24
    2b90:	12 97       	sbiw	r26, 0x02	; 2
    2b92:	84 81       	ldd	r24, Z+4	; 0x04
    2b94:	95 81       	ldd	r25, Z+5	; 0x05
    2b96:	15 96       	adiw	r26, 0x05	; 5
			 data[3] = mem4[GOAL_CNT];
    2b98:	9c 93       	st	X, r25
    2b9a:	8e 93       	st	-X, r24
    2b9c:	14 97       	sbiw	r26, 0x04	; 4
    2b9e:	80 89       	ldd	r24, Z+16	; 0x10
    2ba0:	91 89       	ldd	r25, Z+17	; 0x11
    2ba2:	17 96       	adiw	r26, 0x07	; 7
			 data[4] = mem4[MACHINE_STATES];
    2ba4:	9c 93       	st	X, r25
    2ba6:	8e 93       	st	-X, r24
    2ba8:	16 97       	sbiw	r26, 0x06	; 6
    2baa:	82 89       	ldd	r24, Z+18	; 0x12
    2bac:	93 89       	ldd	r25, Z+19	; 0x13
    2bae:	19 96       	adiw	r26, 0x09	; 9
			 data[5] = mem4[SEC];
    2bb0:	9c 93       	st	X, r25
    2bb2:	8e 93       	st	-X, r24
    2bb4:	18 97       	sbiw	r26, 0x08	; 8
    2bb6:	84 85       	ldd	r24, Z+12	; 0x0c
    2bb8:	95 85       	ldd	r25, Z+13	; 0x0d
    2bba:	1b 96       	adiw	r26, 0x0b	; 11
			 data[6] = mem4[MIN];
    2bbc:	9c 93       	st	X, r25
    2bbe:	8e 93       	st	-X, r24
    2bc0:	1a 97       	sbiw	r26, 0x0a	; 10
    2bc2:	82 85       	ldd	r24, Z+10	; 0x0a
    2bc4:	93 85       	ldd	r25, Z+11	; 0x0b
    2bc6:	1d 96       	adiw	r26, 0x0d	; 13
			 data[7] = mem4[HOUR];
    2bc8:	9c 93       	st	X, r25
    2bca:	8e 93       	st	-X, r24
    2bcc:	1c 97       	sbiw	r26, 0x0c	; 12
    2bce:	80 85       	ldd	r24, Z+8	; 0x08
    2bd0:	91 85       	ldd	r25, Z+9	; 0x09
    2bd2:	1f 96       	adiw	r26, 0x0f	; 15
			 data[8] = mem4[CURRENT_RUN_NUMBER];  //현재 생산 페이지
    2bd4:	9c 93       	st	X, r25
    2bd6:	8e 93       	st	-X, r24
    2bd8:	1e 97       	sbiw	r26, 0x0e	; 14
    2bda:	e2 e8       	ldi	r30, 0x82	; 130
    2bdc:	f3 e0       	ldi	r31, 0x03	; 3
    2bde:	80 81       	ld	r24, Z
    2be0:	91 81       	ldd	r25, Z+1	; 0x01
    2be2:	51 96       	adiw	r26, 0x11	; 17
			 data[9] = mem4[CURRENT_STATE_ON]; //혀재 생산 상태 값을 보냄. 가동중 or 가동 아닌 상태
    2be4:	9c 93       	st	X, r25
    2be6:	8e 93       	st	-X, r24
    2be8:	50 97       	sbiw	r26, 0x10	; 16
    2bea:	a0 e8       	ldi	r26, 0x80	; 128
    2bec:	b3 e0       	ldi	r27, 0x03	; 3
    2bee:	8d 91       	ld	r24, X+
    2bf0:	9c 91       	ld	r25, X
			 data[10] = mem4[START_BUTTON]; //현재 시작 버튼의 상태를 보냄
    2bf2:	f7 01       	movw	r30, r14
    2bf4:	93 8b       	std	Z+19, r25	; 0x13
    2bf6:	82 8b       	std	Z+18, r24	; 0x12
    2bf8:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <mem4+0x4c>
    2bfc:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <mem4+0x4d>
			 data[11] = mem4[CURRENT_PAGE]; //현재 뷰 페이지 정보 
    2c00:	95 8b       	std	Z+21, r25	; 0x15
    2c02:	84 8b       	std	Z+20, r24	; 0x14
    2c04:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <mem4+0x50>
    2c08:	90 91 7f 03 	lds	r25, 0x037F	; 0x80037f <mem4+0x51>
			 data[12] = device_serial;
    2c0c:	97 8b       	std	Z+23, r25	; 0x17
    2c0e:	86 8b       	std	Z+22, r24	; 0x16
    2c10:	81 e0       	ldi	r24, 0x01	; 1
			 data[13] = mem4[UDP_DATA0];
    2c12:	90 ef       	ldi	r25, 0xF0	; 240
    2c14:	91 8f       	std	Z+25, r25	; 0x19
    2c16:	80 8f       	std	Z+24, r24	; 0x18
    2c18:	d6 01       	movw	r26, r12
    2c1a:	54 96       	adiw	r26, 0x14	; 20
    2c1c:	8d 91       	ld	r24, X+
    2c1e:	9c 91       	ld	r25, X
			 data[14] = mem4[UDP_DATA1];
    2c20:	55 97       	sbiw	r26, 0x15	; 21
    2c22:	93 8f       	std	Z+27, r25	; 0x1b
    2c24:	82 8f       	std	Z+26, r24	; 0x1a
    2c26:	56 96       	adiw	r26, 0x16	; 22
    2c28:	8d 91       	ld	r24, X+
    2c2a:	9c 91       	ld	r25, X
			 data[15] = mem4[UDP_DATA2];
    2c2c:	57 97       	sbiw	r26, 0x17	; 23
    2c2e:	95 8f       	std	Z+29, r25	; 0x1d
    2c30:	84 8f       	std	Z+28, r24	; 0x1c
    2c32:	58 96       	adiw	r26, 0x18	; 24
    2c34:	8d 91       	ld	r24, X+
    2c36:	9c 91       	ld	r25, X
			 data[16] = mem4[UDP_DATA3];
    2c38:	59 97       	sbiw	r26, 0x19	; 25
    2c3a:	97 8f       	std	Z+31, r25	; 0x1f
    2c3c:	86 8f       	std	Z+30, r24	; 0x1e
    2c3e:	5a 96       	adiw	r26, 0x1a	; 26
    2c40:	8d 91       	ld	r24, X+
    2c42:	9c 91       	ld	r25, X
			 data[17] = mem4[UDP_DATA4];
    2c44:	5b 97       	sbiw	r26, 0x1b	; 27
    2c46:	91 a3       	std	Z+33, r25	; 0x21
    2c48:	80 a3       	std	Z+32, r24	; 0x20
    2c4a:	5c 96       	adiw	r26, 0x1c	; 28
    2c4c:	8d 91       	ld	r24, X+
    2c4e:	9c 91       	ld	r25, X
			 data[18] = mem4[UDP_DATA5];
    2c50:	5d 97       	sbiw	r26, 0x1d	; 29
    2c52:	93 a3       	std	Z+35, r25	; 0x23
    2c54:	82 a3       	std	Z+34, r24	; 0x22
    2c56:	5e 96       	adiw	r26, 0x1e	; 30
    2c58:	8d 91       	ld	r24, X+
			 make_udp_reply_from_request(buf,(char*)&data,sizeof(data),MYUDPPORT);
    2c5a:	9c 91       	ld	r25, X
    2c5c:	5f 97       	sbiw	r26, 0x1f	; 31
    2c5e:	95 a3       	std	Z+37, r25	; 0x25
    2c60:	84 a3       	std	Z+36, r24	; 0x24
    2c62:	2f e0       	ldi	r18, 0x0F	; 15
    2c64:	37 e2       	ldi	r19, 0x27	; 39
    2c66:	46 e2       	ldi	r20, 0x26	; 38
			// memcpy(buf,data,sizeof(data));
			 //enc28j60PacketSend(UDP_HEADER_LEN+IP_HEADER_LEN+ETH_HEADER_LEN+sizeof(data),buf);
			 //vTaskDelay(500);
			 //memset(buf,0,sizeof(buf));
			 //vTaskDelay(100);
			 lcd_cnt++;
    2c68:	b7 01       	movw	r22, r14
    2c6a:	89 e9       	ldi	r24, 0x99	; 153
    2c6c:	92 e0       	ldi	r25, 0x02	; 2
    2c6e:	73 d9       	rcall	.-3354   	; 0x1f56 <_Z27make_udp_reply_from_requestPhPchj>
    2c70:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <lcd_cnt>
			taskYIELD();
    2c74:	8f 5f       	subi	r24, 0xFF	; 255
    2c76:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <lcd_cnt>
			 char loop = buf[UDP_DATA_P + 1];
			 char start = 2;
			 char num = 0;
			 for(char i=1;i<loop+1;i++)
			 {
				 temp[i-1] = buf[UDP_DATA_P + (start + (i-1))];
    2c7a:	77 d7       	rcall	.+3822   	; 0x3b6a <vPortYield>
    2c7c:	b4 cd       	rjmp	.-1176   	; 0x27e6 <_ZL5proc2Pv+0xbc>
    2c7e:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <_ZZL5proc2PvE3buf+0x2c>
    2c82:	89 83       	std	Y+1, r24	; 0x01
			 }
			 char start = 2;
			 char num = 0;
			 for(char i=1;i<loop+1;i++)
			 {
				 temp[i-1] = buf[UDP_DATA_P + (start + (i-1))];
    2c84:	21 e0       	ldi	r18, 0x01	; 1
    2c86:	30 e0       	ldi	r19, 0x00	; 0
    2c88:	82 ce       	rjmp	.-764    	; 0x298e <_ZL5proc2Pv+0x264>
    2c8a:	20 91 c5 02 	lds	r18, 0x02C5	; 0x8002c5 <_ZZL5proc2PvE3buf+0x2c>
    2c8e:	29 83       	std	Y+1, r18	; 0x01
			 }
			 char start = 2;
			 char num = 0;
			 for(char i=1;i<loop+1;i++)
			 {
				  temp[i-1] = buf[UDP_DATA_P + (start + (i-1))];
    2c90:	41 e0       	ldi	r20, 0x01	; 1
    2c92:	50 e0       	ldi	r21, 0x00	; 0
    2c94:	d4 ce       	rjmp	.-600    	; 0x2a3e <_ZL5proc2Pv+0x314>
    2c96:	20 91 c5 02 	lds	r18, 0x02C5	; 0x8002c5 <_ZZL5proc2PvE3buf+0x2c>
    2c9a:	29 83       	std	Y+1, r18	; 0x01
			 }
			 char start = 2;
			 char num = 0;
			 for(char i=1;i<loop+1;i++)
			 {
				 temp[i-1] = buf[UDP_DATA_P + (start + (i-1))];
    2c9c:	41 e0       	ldi	r20, 0x01	; 1
    2c9e:	50 e0       	ldi	r21, 0x00	; 0
    2ca0:	21 cf       	rjmp	.-446    	; 0x2ae4 <_ZL5proc2Pv+0x3ba>
    2ca2:	20 91 c5 02 	lds	r18, 0x02C5	; 0x8002c5 <_ZZL5proc2PvE3buf+0x2c>
    2ca6:	29 83       	std	Y+1, r18	; 0x01
    2ca8:	41 e0       	ldi	r20, 0x01	; 1
    2caa:	50 e0       	ldi	r21, 0x00	; 0
    2cac:	54 cf       	rjmp	.-344    	; 0x2b56 <_ZL5proc2Pv+0x42c>

00002cae <_ZL5proc1Pv>:
			/////////////////////////////////			
		}
	}
}
static void proc1(void* pvParam) 
{
    2cae:	cf 93       	push	r28
    2cb0:	df 93       	push	r29
    2cb2:	cd b7       	in	r28, 0x3d	; 61
    2cb4:	de b7       	in	r29, 0x3e	; 62
    2cb6:	2f 97       	sbiw	r28, 0x0f	; 15
    2cb8:	0f b6       	in	r0, 0x3f	; 63
    2cba:	f8 94       	cli
    2cbc:	de bf       	out	0x3e, r29	; 62
    2cbe:	0f be       	out	0x3f, r0	; 63
    2cc0:	cd bf       	out	0x3d, r28	; 61
    2cc2:	6c 01       	movw	r12, r24
	//UART1 
	SerialBuffer *sb = static_cast<SerialBuffer*>(pvParam);
	uint8_t proc1_buff[15] = {0};
    2cc4:	fe 01       	movw	r30, r28
    2cc6:	31 96       	adiw	r30, 0x01	; 1
    2cc8:	8f e0       	ldi	r24, 0x0F	; 15
    2cca:	df 01       	movw	r26, r30
    2ccc:	1d 92       	st	X+, r1
    2cce:	8a 95       	dec	r24
    2cd0:	e9 f7       	brne	.-6      	; 0x2ccc <_ZL5proc1Pv+0x1e>
		
	while(1)
	{
	   if(mem4[TARGET_CMP] != mem4[GOAL_CNT])
    2cd2:	0e e2       	ldi	r16, 0x2E	; 46
    2cd4:	13 e0       	ldi	r17, 0x03	; 3
    2cd6:	5e 01       	movw	r10, r28
    2cd8:	b0 e1       	ldi	r27, 0x10	; 16
    2cda:	ab 0e       	add	r10, r27
    2cdc:	b1 1c       	adc	r11, r1
			else
			{
				cbi(PORTB,7);
				GetExceptionCode(&exception,0x01,0x06);
				sb->SerialWrite((char*)&exception,sizeof(exception)); //리스폰스 데이터 쓰기.
				cbi(UCSR1B,RXCIE0);
    2cde:	0f 2e       	mov	r0, r31
    2ce0:	fa e9       	ldi	r31, 0x9A	; 154
    2ce2:	8f 2e       	mov	r8, r31
    2ce4:	91 2c       	mov	r9, r1
    2ce6:	f0 2d       	mov	r31, r0
	
				count_number = ((0xff & proc1_buff[7]) << 8) | (0xff & proc1_buff[8]);
				current_temp = ((0xff & proc1_buff[9]) << 8) | (0xff & proc1_buff[10]);
				current_pressure = ((0xff & proc1_buff[11]) << 8) | (0xff & proc1_buff[12]);
				mem4[TEMP] = current_temp;
				if(mem4[TARGET_COUNT_SENSOR]) //LOCAL SENSOR 
    2ce8:	0f 2e       	mov	r0, r31
    2cea:	f6 e7       	ldi	r31, 0x76	; 118
    2cec:	6f 2e       	mov	r6, r31
    2cee:	f3 e0       	ldi	r31, 0x03	; 3
    2cf0:	7f 2e       	mov	r7, r31
    2cf2:	f0 2d       	mov	r31, r0

				}
				mem4[PRESSURE] = current_pressure;
				if((mem4[GOAL_CNT] == mem4[COUNT])&& mem4[MACHINE_STATES] == NORMAL)
				{
					mem4[MACHINE_STATES] = COMPLETE_PRODUCTS;
    2cf4:	0f 2e       	mov	r0, r31
    2cf6:	f3 e0       	ldi	r31, 0x03	; 3
    2cf8:	2f 2e       	mov	r2, r31
    2cfa:	31 2c       	mov	r3, r1
    2cfc:	f0 2d       	mov	r31, r0
					Alarm_Start();
				}
				else //PLC
				{
					Alarm_Stop();
					if(mem4[START_BUTTON] == ON)
    2cfe:	0f 2e       	mov	r0, r31
    2d00:	fa e7       	ldi	r31, 0x7A	; 122
    2d02:	4f 2e       	mov	r4, r31
    2d04:	f3 e0       	ldi	r31, 0x03	; 3
    2d06:	5f 2e       	mov	r5, r31
    2d08:	f0 2d       	mov	r31, r0
	SerialBuffer *sb = static_cast<SerialBuffer*>(pvParam);
	uint8_t proc1_buff[15] = {0};
		
	while(1)
	{
	   if(mem4[TARGET_CMP] != mem4[GOAL_CNT])
    2d0a:	f8 01       	movw	r30, r16
    2d0c:	80 89       	ldd	r24, Z+16	; 0x10
    2d0e:	91 89       	ldd	r25, Z+17	; 0x11
    2d10:	26 ad       	ldd	r18, Z+62	; 0x3e
    2d12:	37 ad       	ldd	r19, Z+63	; 0x3f
    2d14:	28 17       	cp	r18, r24
    2d16:	39 07       	cpc	r19, r25
    2d18:	41 f0       	breq	.+16     	; 0x2d2a <_ZL5proc1Pv+0x7c>
	   {
		   mem4[TARGET_MAX] = mem4[GOAL_CNT];
    2d1a:	95 af       	std	Z+61, r25	; 0x3d
    2d1c:	84 af       	std	Z+60, r24	; 0x3c
		   mem4[TARGET_GOAL_CNT] = mem4[GOAL_CNT];
    2d1e:	91 af       	std	Z+57, r25	; 0x39
    2d20:	80 af       	std	Z+56, r24	; 0x38
		   mem4[WARNING_HIGH] = mem4[GOAL_CNT];
    2d22:	97 ab       	std	Z+55, r25	; 0x37
    2d24:	86 ab       	std	Z+54, r24	; 0x36
		   mem4[TARGET_CMP] = mem4[GOAL_CNT];
    2d26:	97 af       	std	Z+63, r25	; 0x3f
    2d28:	86 af       	std	Z+62, r24	; 0x3e
		}
		if(sb->SerialAvailable() >= 15)
    2d2a:	c6 01       	movw	r24, r12
    2d2c:	0e 94 c7 06 	call	0xd8e	; 0xd8e <_ZN12SerialBuffer15SerialAvailableEv>
    2d30:	8f 30       	cpi	r24, 0x0F	; 15
    2d32:	58 f3       	brcs	.-42     	; 0x2d0a <_ZL5proc1Pv+0x5c>
    2d34:	ce 01       	movw	r24, r28
    2d36:	01 96       	adiw	r24, 0x01	; 1
    2d38:	7c 01       	movw	r14, r24
		{
			for(uint8_t i=0;i<15;i++)
			{
				proc1_buff[i] = sb->SerialRead();
    2d3a:	c6 01       	movw	r24, r12
    2d3c:	0e 94 9b 06 	call	0xd36	; 0xd36 <_ZN12SerialBuffer10SerialReadEv>
    2d40:	d7 01       	movw	r26, r14
    2d42:	8d 93       	st	X+, r24
    2d44:	7d 01       	movw	r14, r26
		   mem4[WARNING_HIGH] = mem4[GOAL_CNT];
		   mem4[TARGET_CMP] = mem4[GOAL_CNT];
		}
		if(sb->SerialAvailable() >= 15)
		{
			for(uint8_t i=0;i<15;i++)
    2d46:	aa 15       	cp	r26, r10
    2d48:	bb 05       	cpc	r27, r11
    2d4a:	b9 f7       	brne	.-18     	; 0x2d3a <_ZL5proc1Pv+0x8c>
			{
				proc1_buff[i] = sb->SerialRead();
			}
			if(proc1_buff[0] == 0x02)
    2d4c:	89 81       	ldd	r24, Y+1	; 0x01
    2d4e:	82 30       	cpi	r24, 0x02	; 2
    2d50:	09 f0       	breq	.+2      	; 0x2d54 <_ZL5proc1Pv+0xa6>
    2d52:	74 c0       	rjmp	.+232    	; 0x2e3c <_ZL5proc1Pv+0x18e>
			{
	
				count_number = ((0xff & proc1_buff[7]) << 8) | (0xff & proc1_buff[8]);
    2d54:	88 85       	ldd	r24, Y+8	; 0x08
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	98 2f       	mov	r25, r24
    2d5a:	88 27       	eor	r24, r24
    2d5c:	29 85       	ldd	r18, Y+9	; 0x09
    2d5e:	82 2b       	or	r24, r18
    2d60:	90 93 b9 03 	sts	0x03B9, r25	; 0x8003b9 <count_number+0x1>
    2d64:	80 93 b8 03 	sts	0x03B8, r24	; 0x8003b8 <count_number>
				current_temp = ((0xff & proc1_buff[9]) << 8) | (0xff & proc1_buff[10]);
    2d68:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	98 2f       	mov	r25, r24
    2d6e:	88 27       	eor	r24, r24
    2d70:	2b 85       	ldd	r18, Y+11	; 0x0b
    2d72:	82 2b       	or	r24, r18
    2d74:	90 93 b7 03 	sts	0x03B7, r25	; 0x8003b7 <current_temp+0x1>
    2d78:	80 93 b6 03 	sts	0x03B6, r24	; 0x8003b6 <current_temp>
				current_pressure = ((0xff & proc1_buff[11]) << 8) | (0xff & proc1_buff[12]);
    2d7c:	2c 85       	ldd	r18, Y+12	; 0x0c
    2d7e:	30 e0       	ldi	r19, 0x00	; 0
    2d80:	32 2f       	mov	r19, r18
    2d82:	22 27       	eor	r18, r18
    2d84:	4d 85       	ldd	r20, Y+13	; 0x0d
    2d86:	24 2b       	or	r18, r20
    2d88:	30 93 b5 03 	sts	0x03B5, r19	; 0x8003b5 <current_pressure+0x1>
    2d8c:	20 93 b4 03 	sts	0x03B4, r18	; 0x8003b4 <current_pressure>
				mem4[TEMP] = current_temp;
    2d90:	f8 01       	movw	r30, r16
    2d92:	93 83       	std	Z+3, r25	; 0x03
    2d94:	82 83       	std	Z+2, r24	; 0x02
				if(mem4[TARGET_COUNT_SENSOR]) //LOCAL SENSOR 
    2d96:	d3 01       	movw	r26, r6
    2d98:	ed 90       	ld	r14, X+
    2d9a:	fc 90       	ld	r15, X
    2d9c:	e1 14       	cp	r14, r1
    2d9e:	f1 04       	cpc	r15, r1
    2da0:	19 f0       	breq	.+6      	; 0x2da8 <_ZL5proc1Pv+0xfa>
				{
					Alarm_Start();
    2da2:	0e 94 25 08 	call	0x104a	; 0x104a <Alarm_Start>
    2da6:	33 c0       	rjmp	.+102    	; 0x2e0e <_ZL5proc1Pv+0x160>
				}
				else //PLC
				{
					Alarm_Stop();
    2da8:	0e 94 21 08 	call	0x1042	; 0x1042 <Alarm_Stop>
					if(mem4[START_BUTTON] == ON)
    2dac:	f2 01       	movw	r30, r4
    2dae:	80 81       	ld	r24, Z
    2db0:	91 81       	ldd	r25, Z+1	; 0x01
    2db2:	01 97       	sbiw	r24, 0x01	; 1
    2db4:	61 f5       	brne	.+88     	; 0x2e0e <_ZL5proc1Pv+0x160>
					{
						uint8_t i;
						for(i=0;i<PAGE_MAX;i++)
						{
							if(current_states_lookup_table[i] == ON)
    2db6:	aa ea       	ldi	r26, 0xAA	; 170
    2db8:	b3 e0       	ldi	r27, 0x03	; 3
    2dba:	8c 91       	ld	r24, X
    2dbc:	81 30       	cpi	r24, 0x01	; 1
    2dbe:	59 f0       	breq	.+22     	; 0x2dd6 <_ZL5proc1Pv+0x128>
    2dc0:	ab ea       	ldi	r26, 0xAB	; 171
    2dc2:	b3 e0       	ldi	r27, 0x03	; 3
				{
					Alarm_Stop();
					if(mem4[START_BUTTON] == ON)
					{
						uint8_t i;
						for(i=0;i<PAGE_MAX;i++)
    2dc4:	e1 e0       	ldi	r30, 0x01	; 1
    2dc6:	cd 01       	movw	r24, r26
    2dc8:	8a 5a       	subi	r24, 0xAA	; 170
    2dca:	93 40       	sbci	r25, 0x03	; 3
    2dcc:	7c 01       	movw	r14, r24
						{
							if(current_states_lookup_table[i] == ON)
    2dce:	8d 91       	ld	r24, X+
    2dd0:	81 30       	cpi	r24, 0x01	; 1
    2dd2:	71 f4       	brne	.+28     	; 0x2df0 <_ZL5proc1Pv+0x142>
    2dd4:	01 c0       	rjmp	.+2      	; 0x2dd8 <_ZL5proc1Pv+0x12a>
    2dd6:	e0 e0       	ldi	r30, 0x00	; 0
							{
								current_cnt_mem[i] = count_number;
    2dd8:	d7 01       	movw	r26, r14
    2dda:	aa 0f       	add	r26, r26
    2ddc:	bb 1f       	adc	r27, r27
    2dde:	a6 5e       	subi	r26, 0xE6	; 230
    2de0:	bc 4f       	sbci	r27, 0xFC	; 252
    2de2:	80 91 b8 03 	lds	r24, 0x03B8	; 0x8003b8 <count_number>
    2de6:	90 91 b9 03 	lds	r25, 0x03B9	; 0x8003b9 <count_number+0x1>
    2dea:	8d 93       	st	X+, r24
    2dec:	9c 93       	st	X, r25
								break;
    2dee:	03 c0       	rjmp	.+6      	; 0x2df6 <_ZL5proc1Pv+0x148>
				{
					Alarm_Stop();
					if(mem4[START_BUTTON] == ON)
					{
						uint8_t i;
						for(i=0;i<PAGE_MAX;i++)
    2df0:	ef 5f       	subi	r30, 0xFF	; 255
    2df2:	ea 30       	cpi	r30, 0x0A	; 10
    2df4:	41 f7       	brne	.-48     	; 0x2dc6 <_ZL5proc1Pv+0x118>
							{
								current_cnt_mem[i] = count_number;
								break;
							}
						}
						mem4[COUNT] = current_cnt_mem[i]; 
    2df6:	f0 e0       	ldi	r31, 0x00	; 0
    2df8:	ee 0f       	add	r30, r30
    2dfa:	ff 1f       	adc	r31, r31
    2dfc:	e6 5e       	subi	r30, 0xE6	; 230
    2dfe:	fc 4f       	sbci	r31, 0xFC	; 252
    2e00:	80 81       	ld	r24, Z
    2e02:	91 81       	ldd	r25, Z+1	; 0x01
    2e04:	d8 01       	movw	r26, r16
    2e06:	17 96       	adiw	r26, 0x07	; 7
    2e08:	9c 93       	st	X, r25
    2e0a:	8e 93       	st	-X, r24
    2e0c:	16 97       	sbiw	r26, 0x06	; 6
					}

				}
				mem4[PRESSURE] = current_pressure;
    2e0e:	80 91 b4 03 	lds	r24, 0x03B4	; 0x8003b4 <current_pressure>
    2e12:	90 91 b5 03 	lds	r25, 0x03B5	; 0x8003b5 <current_pressure+0x1>
    2e16:	f8 01       	movw	r30, r16
    2e18:	95 83       	std	Z+5, r25	; 0x05
    2e1a:	84 83       	std	Z+4, r24	; 0x04
				if((mem4[GOAL_CNT] == mem4[COUNT])&& mem4[MACHINE_STATES] == NORMAL)
    2e1c:	20 89       	ldd	r18, Z+16	; 0x10
    2e1e:	31 89       	ldd	r19, Z+17	; 0x11
    2e20:	86 81       	ldd	r24, Z+6	; 0x06
    2e22:	97 81       	ldd	r25, Z+7	; 0x07
    2e24:	28 17       	cp	r18, r24
    2e26:	39 07       	cpc	r19, r25
    2e28:	09 f0       	breq	.+2      	; 0x2e2c <_ZL5proc1Pv+0x17e>
    2e2a:	6f cf       	rjmp	.-290    	; 0x2d0a <_ZL5proc1Pv+0x5c>
    2e2c:	82 89       	ldd	r24, Z+18	; 0x12
    2e2e:	93 89       	ldd	r25, Z+19	; 0x13
    2e30:	89 2b       	or	r24, r25
    2e32:	09 f0       	breq	.+2      	; 0x2e36 <_ZL5proc1Pv+0x188>
    2e34:	6a cf       	rjmp	.-300    	; 0x2d0a <_ZL5proc1Pv+0x5c>
				{
					mem4[MACHINE_STATES] = COMPLETE_PRODUCTS;
    2e36:	33 8a       	std	Z+19, r3	; 0x13
    2e38:	22 8a       	std	Z+18, r2	; 0x12
    2e3a:	67 cf       	rjmp	.-306    	; 0x2d0a <_ZL5proc1Pv+0x5c>
				}
			}
			else
			{
				cbi(PORTB,7);
    2e3c:	c7 98       	cbi	0x18, 7	; 24
				GetExceptionCode(&exception,0x01,0x06);
    2e3e:	46 e0       	ldi	r20, 0x06	; 6
    2e40:	61 e0       	ldi	r22, 0x01	; 1
    2e42:	82 ec       	ldi	r24, 0xC2	; 194
    2e44:	93 e0       	ldi	r25, 0x03	; 3
    2e46:	0e 94 02 06 	call	0xc04	; 0xc04 <_Z16GetExceptionCodeP16RspExceptionCodecc>
				sb->SerialWrite((char*)&exception,sizeof(exception)); //리스폰스 데이터 쓰기.
    2e4a:	45 e0       	ldi	r20, 0x05	; 5
    2e4c:	50 e0       	ldi	r21, 0x00	; 0
    2e4e:	62 ec       	ldi	r22, 0xC2	; 194
    2e50:	73 e0       	ldi	r23, 0x03	; 3
    2e52:	c6 01       	movw	r24, r12
    2e54:	0e 94 5f 06 	call	0xcbe	; 0xcbe <_ZN12SerialBuffer11SerialWriteEPKci>
				cbi(UCSR1B,RXCIE0);
    2e58:	d4 01       	movw	r26, r8
    2e5a:	8c 91       	ld	r24, X
    2e5c:	8f 77       	andi	r24, 0x7F	; 127
    2e5e:	8c 93       	st	X, r24
				sb->SerialFlush();
    2e60:	c6 01       	movw	r24, r12
    2e62:	0e 94 d2 06 	call	0xda4	; 0xda4 <_ZN12SerialBuffer11SerialFlushEv>
				sbi(UCSR1B,RXCIE0);
    2e66:	f4 01       	movw	r30, r8
    2e68:	80 81       	ld	r24, Z
    2e6a:	80 68       	ori	r24, 0x80	; 128
    2e6c:	80 83       	st	Z, r24
				sbi(PORTB,7);
    2e6e:	c7 9a       	sbi	0x18, 7	; 24
    2e70:	4c cf       	rjmp	.-360    	; 0x2d0a <_ZL5proc1Pv+0x5c>

00002e72 <_ZL4procPv>:
	{
		chatter_flag = 1;
	}
}
static void proc(void* pvParam) //터치패널 HMI RS232 쓰레드
{
    2e72:	cf 93       	push	r28
    2e74:	df 93       	push	r29
    2e76:	cd b7       	in	r28, 0x3d	; 61
    2e78:	de b7       	in	r29, 0x3e	; 62
    2e7a:	2a 97       	sbiw	r28, 0x0a	; 10
    2e7c:	0f b6       	in	r0, 0x3f	; 63
    2e7e:	f8 94       	cli
    2e80:	de bf       	out	0x3e, r29	; 62
    2e82:	0f be       	out	0x3f, r0	; 63
    2e84:	cd bf       	out	0x3d, r28	; 61
    2e86:	7c 01       	movw	r14, r24
	char read_Flag = 0;
    2e88:	b1 2c       	mov	r11, r1
	while(1)
	{
		//mem4[COUNT] = PIND;
		if(PIND == 0xfe && chatter_flag == 1)//
		{
			if(mem4[START_BUTTON] == ON)
    2e8a:	0f 2e       	mov	r0, r31
    2e8c:	fa e7       	ldi	r31, 0x7A	; 122
    2e8e:	6f 2e       	mov	r6, r31
    2e90:	f3 e0       	ldi	r31, 0x03	; 3
    2e92:	7f 2e       	mov	r7, r31
    2e94:	f0 2d       	mov	r31, r0
				if(current_states_lookup_table[mem4[CURRENT_RUN_NUMBER]] == ON)
				{
					current_cnt_mem[mem4[CURRENT_RUN_NUMBER]]++;
				}
			}
			chatter_flag = 2;
    2e96:	68 94       	set
    2e98:	33 24       	eor	r3, r3
    2e9a:	31 f8       	bld	r3, 1
		if(PIND == 0xff && chatter_flag == 2)//
		{
			vTaskDelay(10);
			chatter_flag = 0;
		}
		if(mem4[SEC] >= 60)
    2e9c:	0e e2       	ldi	r16, 0x2E	; 46
    2e9e:	13 e0       	ldi	r17, 0x03	; 3
			{
				mem4[MIN] = 0;
				mem4[HOUR]++;
			}
		}
		mem4[COUNT] = current_cnt_mem[mem4[CURRENT_PAGE]];
    2ea0:	0f 2e       	mov	r0, r31
    2ea2:	fe e7       	ldi	r31, 0x7E	; 126
    2ea4:	cf 2e       	mov	r12, r31
    2ea6:	f3 e0       	ldi	r31, 0x03	; 3
    2ea8:	df 2e       	mov	r13, r31
    2eaa:	f0 2d       	mov	r31, r0
    2eac:	2e 01       	movw	r4, r28
    2eae:	8c e0       	ldi	r24, 0x0C	; 12
    2eb0:	48 0e       	add	r4, r24
    2eb2:	51 1c       	adc	r5, r1
    2eb4:	68 94       	set
    2eb6:	22 24       	eor	r2, r2
    2eb8:	24 f8       	bld	r2, 4
    2eba:	4e 01       	movw	r8, r28
    2ebc:	99 e0       	ldi	r25, 0x09	; 9
    2ebe:	89 0e       	add	r8, r25
    2ec0:	91 1c       	adc	r9, r1
    2ec2:	1a c0       	rjmp	.+52     	; 0x2ef8 <_ZL4procPv+0x86>
    2ec4:	aa 24       	eor	r10, r10
    2ec6:	a3 94       	inc	r10
    2ec8:	bb 24       	eor	r11, r11
    2eca:	b3 94       	inc	r11
    2ecc:	15 c0       	rjmp	.+42     	; 0x2ef8 <_ZL4procPv+0x86>
    2ece:	aa 24       	eor	r10, r10
    2ed0:	a3 94       	inc	r10
    2ed2:	bb 24       	eor	r11, r11
    2ed4:	b3 94       	inc	r11
    2ed6:	10 c0       	rjmp	.+32     	; 0x2ef8 <_ZL4procPv+0x86>
    2ed8:	68 94       	set
    2eda:	aa 24       	eor	r10, r10
    2edc:	a2 f8       	bld	r10, 2
    2ede:	bb 24       	eor	r11, r11
    2ee0:	b3 94       	inc	r11
    2ee2:	0a c0       	rjmp	.+20     	; 0x2ef8 <_ZL4procPv+0x86>
    2ee4:	0f 2e       	mov	r0, r31
    2ee6:	f5 e0       	ldi	r31, 0x05	; 5
    2ee8:	af 2e       	mov	r10, r31
    2eea:	f0 2d       	mov	r31, r0
    2eec:	bb 24       	eor	r11, r11
    2eee:	b3 94       	inc	r11
    2ef0:	03 c0       	rjmp	.+6      	; 0x2ef8 <_ZL4procPv+0x86>
    2ef2:	a2 2c       	mov	r10, r2
    2ef4:	bb 24       	eor	r11, r11
    2ef6:	b3 94       	inc	r11
	SerialBuffer *sb = static_cast<SerialBuffer*>(pvParam);	
	register uint16_t i;
	while(1)
	{
		//mem4[COUNT] = PIND;
		if(PIND == 0xfe && chatter_flag == 1)//
    2ef8:	80 b3       	in	r24, 0x10	; 16
    2efa:	8e 3f       	cpi	r24, 0xFE	; 254
    2efc:	f9 f4       	brne	.+62     	; 0x2f3c <_ZL4procPv+0xca>
    2efe:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <chatter_flag>
    2f02:	81 30       	cpi	r24, 0x01	; 1
    2f04:	d9 f4       	brne	.+54     	; 0x2f3c <_ZL4procPv+0xca>
    2f06:	80 c1       	rjmp	.+768    	; 0x3208 <_ZL4procPv+0x396>
		{
			if(mem4[START_BUTTON] == ON)
			{
				if(current_states_lookup_table[mem4[CURRENT_RUN_NUMBER]] == ON)
    2f08:	a2 e8       	ldi	r26, 0x82	; 130
    2f0a:	b3 e0       	ldi	r27, 0x03	; 3
    2f0c:	8d 91       	ld	r24, X+
    2f0e:	9c 91       	ld	r25, X
    2f10:	fc 01       	movw	r30, r24
    2f12:	e6 55       	subi	r30, 0x56	; 86
    2f14:	fc 4f       	sbci	r31, 0xFC	; 252
    2f16:	20 81       	ld	r18, Z
    2f18:	21 30       	cpi	r18, 0x01	; 1
    2f1a:	51 f4       	brne	.+20     	; 0x2f30 <_ZL4procPv+0xbe>
				{
					current_cnt_mem[mem4[CURRENT_RUN_NUMBER]]++;
    2f1c:	88 0f       	add	r24, r24
    2f1e:	99 1f       	adc	r25, r25
    2f20:	fc 01       	movw	r30, r24
    2f22:	e6 5e       	subi	r30, 0xE6	; 230
    2f24:	fc 4f       	sbci	r31, 0xFC	; 252
    2f26:	80 81       	ld	r24, Z
    2f28:	91 81       	ldd	r25, Z+1	; 0x01
    2f2a:	01 96       	adiw	r24, 0x01	; 1
    2f2c:	91 83       	std	Z+1, r25	; 0x01
    2f2e:	80 83       	st	Z, r24
				}
			}
			chatter_flag = 2;
    2f30:	30 92 14 03 	sts	0x0314, r3	; 0x800314 <chatter_flag>
		}
		if(PIND == 0xff && chatter_flag == 2)//
    2f34:	80 b3       	in	r24, 0x10	; 16
    2f36:	8f 3f       	cpi	r24, 0xFF	; 255
    2f38:	49 f4       	brne	.+18     	; 0x2f4c <_ZL4procPv+0xda>
    2f3a:	6d c1       	rjmp	.+730    	; 0x3216 <_ZL4procPv+0x3a4>
    2f3c:	80 b3       	in	r24, 0x10	; 16
    2f3e:	8f 3f       	cpi	r24, 0xFF	; 255
    2f40:	29 f4       	brne	.+10     	; 0x2f4c <_ZL4procPv+0xda>
    2f42:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <chatter_flag>
    2f46:	82 30       	cpi	r24, 0x02	; 2
    2f48:	09 f4       	brne	.+2      	; 0x2f4c <_ZL4procPv+0xda>
    2f4a:	65 c1       	rjmp	.+714    	; 0x3216 <_ZL4procPv+0x3a4>
		{
			vTaskDelay(10);
			chatter_flag = 0;
		}
		if(mem4[SEC] >= 60)
    2f4c:	f8 01       	movw	r30, r16
    2f4e:	84 85       	ldd	r24, Z+12	; 0x0c
    2f50:	95 85       	ldd	r25, Z+13	; 0x0d
    2f52:	cc 97       	sbiw	r24, 0x3c	; 60
    2f54:	94 f0       	brlt	.+36     	; 0x2f7a <_ZL4procPv+0x108>
		{
			mem4[SEC] = 0;
    2f56:	15 86       	std	Z+13, r1	; 0x0d
    2f58:	14 86       	std	Z+12, r1	; 0x0c
			mem4[MIN]++;
    2f5a:	82 85       	ldd	r24, Z+10	; 0x0a
    2f5c:	93 85       	ldd	r25, Z+11	; 0x0b
    2f5e:	01 96       	adiw	r24, 0x01	; 1
			if(mem4[MIN] >= 60)
    2f60:	8c 33       	cpi	r24, 0x3C	; 60
    2f62:	91 05       	cpc	r25, r1
    2f64:	1c f4       	brge	.+6      	; 0x2f6c <_ZL4procPv+0xfa>
			chatter_flag = 0;
		}
		if(mem4[SEC] >= 60)
		{
			mem4[SEC] = 0;
			mem4[MIN]++;
    2f66:	93 87       	std	Z+11, r25	; 0x0b
    2f68:	82 87       	std	Z+10, r24	; 0x0a
    2f6a:	07 c0       	rjmp	.+14     	; 0x2f7a <_ZL4procPv+0x108>
			if(mem4[MIN] >= 60)
			{
				mem4[MIN] = 0;
    2f6c:	13 86       	std	Z+11, r1	; 0x0b
    2f6e:	12 86       	std	Z+10, r1	; 0x0a
				mem4[HOUR]++;
    2f70:	80 85       	ldd	r24, Z+8	; 0x08
    2f72:	91 85       	ldd	r25, Z+9	; 0x09
    2f74:	01 96       	adiw	r24, 0x01	; 1
    2f76:	91 87       	std	Z+9, r25	; 0x09
    2f78:	80 87       	std	Z+8, r24	; 0x08
			}
		}
		mem4[COUNT] = current_cnt_mem[mem4[CURRENT_PAGE]];
    2f7a:	d6 01       	movw	r26, r12
    2f7c:	ed 91       	ld	r30, X+
    2f7e:	fc 91       	ld	r31, X
    2f80:	ee 0f       	add	r30, r30
    2f82:	ff 1f       	adc	r31, r31
    2f84:	e6 5e       	subi	r30, 0xE6	; 230
    2f86:	fc 4f       	sbci	r31, 0xFC	; 252
    2f88:	80 81       	ld	r24, Z
    2f8a:	91 81       	ldd	r25, Z+1	; 0x01
    2f8c:	f8 01       	movw	r30, r16
    2f8e:	97 83       	std	Z+7, r25	; 0x07
    2f90:	86 83       	std	Z+6, r24	; 0x06
		if(read_Flag == 0)
    2f92:	b1 10       	cpse	r11, r1
    2f94:	59 c0       	rjmp	.+178    	; 0x3048 <_ZL4procPv+0x1d6>
		{
			if(sb->SerialAvailable() >= 2)
    2f96:	c7 01       	movw	r24, r14
    2f98:	0e 94 c7 06 	call	0xd8e	; 0xd8e <_ZN12SerialBuffer15SerialAvailableEv>
    2f9c:	82 30       	cpi	r24, 0x02	; 2
    2f9e:	08 f4       	brcc	.+2      	; 0x2fa2 <_ZL4procPv+0x130>
    2fa0:	41 c1       	rjmp	.+642    	; 0x3224 <_ZL4procPv+0x3b2>
			{
				for(i=0;i<2;i++)
				{
					buf1[i] = sb->SerialRead();
    2fa2:	c7 01       	movw	r24, r14
    2fa4:	0e 94 9b 06 	call	0xd36	; 0xd36 <_ZN12SerialBuffer10SerialReadEv>
    2fa8:	89 83       	std	Y+1, r24	; 0x01
    2faa:	c7 01       	movw	r24, r14
    2fac:	0e 94 9b 06 	call	0xd36	; 0xd36 <_ZN12SerialBuffer10SerialReadEv>
    2fb0:	8a 83       	std	Y+2, r24	; 0x02
					#if PACKET_DEBUG
						sb1->SerialWrite(buf1[i]);
					#endif
				}
				if(buf1[0] != 0x01)
    2fb2:	99 81       	ldd	r25, Y+1	; 0x01
    2fb4:	91 30       	cpi	r25, 0x01	; 1
    2fb6:	b1 f4       	brne	.+44     	; 0x2fe4 <_ZL4procPv+0x172>
				{
				//	read_Flag = 0;
					goto FREAM_ERROR;
				}
				if(buf1[1] == 0x01)
    2fb8:	81 30       	cpi	r24, 0x01	; 1
    2fba:	09 f4       	brne	.+2      	; 0x2fbe <_ZL4procPv+0x14c>
    2fbc:	4a c0       	rjmp	.+148    	; 0x3052 <_ZL4procPv+0x1e0>
				{
					function_code = 0x01;
					read_Flag = 1;
				}
				else if(buf1[1] == 0x04)
    2fbe:	84 30       	cpi	r24, 0x04	; 4
    2fc0:	09 f4       	brne	.+2      	; 0x2fc4 <_ZL4procPv+0x152>
    2fc2:	5e c0       	rjmp	.+188    	; 0x3080 <_ZL4procPv+0x20e>
				{
					function_code = 0x04;
					read_Flag = 1;
				}
				else if(buf1[1] == 0x05)
    2fc4:	85 30       	cpi	r24, 0x05	; 5
    2fc6:	09 f4       	brne	.+2      	; 0x2fca <_ZL4procPv+0x158>
    2fc8:	89 c0       	rjmp	.+274    	; 0x30dc <_ZL4procPv+0x26a>
				{
					function_code = 0x05;                              
					read_Flag = 1;
				}
				else if(buf1[1] == 0x10)
    2fca:	80 31       	cpi	r24, 0x10	; 16
    2fcc:	59 f4       	brne	.+22     	; 0x2fe4 <_ZL4procPv+0x172>
    2fce:	b4 c0       	rjmp	.+360    	; 0x3138 <_ZL4procPv+0x2c6>
    2fd0:	68 94       	set
    2fd2:	aa 24       	eor	r10, r10
    2fd4:	a2 f8       	bld	r10, 2
    2fd6:	06 c0       	rjmp	.+12     	; 0x2fe4 <_ZL4procPv+0x172>
    2fd8:	0f 2e       	mov	r0, r31
    2fda:	f5 e0       	ldi	r31, 0x05	; 5
    2fdc:	af 2e       	mov	r10, r31
    2fde:	f0 2d       	mov	r31, r0
    2fe0:	01 c0       	rjmp	.+2      	; 0x2fe4 <_ZL4procPv+0x172>
    2fe2:	a2 2c       	mov	r10, r2
				{
					FREAM_ERROR:
					#if CHECK_ERROR
						mem4[ERROR_CNT]++;
					#endif
					GetExceptionCode(&exception,0x01,0x01);  
    2fe4:	41 e0       	ldi	r20, 0x01	; 1
    2fe6:	61 e0       	ldi	r22, 0x01	; 1
    2fe8:	82 ec       	ldi	r24, 0xC2	; 194
    2fea:	93 e0       	ldi	r25, 0x03	; 3
    2fec:	0e 94 02 06 	call	0xc04	; 0xc04 <_Z16GetExceptionCodeP16RspExceptionCodecc>
					cbi(PORTB,7);
    2ff0:	c7 98       	cbi	0x18, 7	; 24
					cbi(UCSR0B,RXCIE0);
    2ff2:	57 98       	cbi	0x0a, 7	; 10
					dev->getInterfaceAddr(UART0)->Stop_Device();                                                                                                                                                                                                                
    2ff4:	60 e0       	ldi	r22, 0x00	; 0
    2ff6:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <dev>
    2ffa:	90 91 f0 03 	lds	r25, 0x03F0	; 0x8003f0 <dev+0x1>
    2ffe:	0e 94 22 0a 	call	0x1444	; 0x1444 <_ZNK11Dev_Manager16getInterfaceAddrE8Dev_type>
    3002:	dc 01       	movw	r26, r24
    3004:	ed 91       	ld	r30, X+
    3006:	fc 91       	ld	r31, X
    3008:	00 84       	ldd	r0, Z+8	; 0x08
    300a:	f1 85       	ldd	r31, Z+9	; 0x09
    300c:	e0 2d       	mov	r30, r0
    300e:	09 95       	icall
					sb->SerialFlush();
    3010:	c7 01       	movw	r24, r14
    3012:	0e 94 d2 06 	call	0xda4	; 0xda4 <_ZN12SerialBuffer11SerialFlushEv>
					dev->getInterfaceAddr(UART0)->Start_Device(0);
    3016:	60 e0       	ldi	r22, 0x00	; 0
    3018:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <dev>
    301c:	90 91 f0 03 	lds	r25, 0x03F0	; 0x8003f0 <dev+0x1>
    3020:	0e 94 22 0a 	call	0x1444	; 0x1444 <_ZNK11Dev_Manager16getInterfaceAddrE8Dev_type>
    3024:	dc 01       	movw	r26, r24
    3026:	ed 91       	ld	r30, X+
    3028:	fc 91       	ld	r31, X
    302a:	02 84       	ldd	r0, Z+10	; 0x0a
    302c:	f3 85       	ldd	r31, Z+11	; 0x0b
    302e:	e0 2d       	mov	r30, r0
    3030:	60 e0       	ldi	r22, 0x00	; 0
    3032:	09 95       	icall
					sbi(UCSR0B,RXCIE0);
    3034:	57 9a       	sbi	0x0a, 7	; 10
					sb->SerialWrite((char*)&exception,sizeof(exception));
    3036:	45 e0       	ldi	r20, 0x05	; 5
    3038:	50 e0       	ldi	r21, 0x00	; 0
    303a:	62 ec       	ldi	r22, 0xC2	; 194
    303c:	73 e0       	ldi	r23, 0x03	; 3
    303e:	c7 01       	movw	r24, r14
    3040:	0e 94 5f 06 	call	0xcbe	; 0xcbe <_ZN12SerialBuffer11SerialWriteEPKci>
					sbi(PORTB,7);
    3044:	c7 9a       	sbi	0x18, 7	; 24
    3046:	ee c0       	rjmp	.+476    	; 0x3224 <_ZL4procPv+0x3b2>
					read_Flag = 0;	
				}
			}
			
		}
		if(read_Flag == 1)
    3048:	b1 e0       	ldi	r27, 0x01	; 1
    304a:	bb 12       	cpse	r11, r27
    304c:	55 cf       	rjmp	.-342    	; 0x2ef8 <_ZL4procPv+0x86>
		{
			if(function_code == 0x01)  
    304e:	ab 12       	cpse	r10, r27
    3050:	14 c0       	rjmp	.+40     	; 0x307a <_ZL4procPv+0x208>
			{
				if(sb->SerialAvailable() >= 6)
    3052:	c7 01       	movw	r24, r14
    3054:	0e 94 c7 06 	call	0xd8e	; 0xd8e <_ZN12SerialBuffer15SerialAvailableEv>
    3058:	86 30       	cpi	r24, 0x06	; 6
    305a:	08 f4       	brcc	.+2      	; 0x305e <_ZL4procPv+0x1ec>
    305c:	33 cf       	rjmp	.-410    	; 0x2ec4 <_ZL4procPv+0x52>
    305e:	5e 01       	movw	r10, r28
    3060:	e3 e0       	ldi	r30, 0x03	; 3
    3062:	ae 0e       	add	r10, r30
    3064:	b1 1c       	adc	r11, r1
				{
					for(i=2;i<8;i++)
					{
						buf1[i] = sb->SerialRead();
    3066:	c7 01       	movw	r24, r14
    3068:	0e 94 9b 06 	call	0xd36	; 0xd36 <_ZN12SerialBuffer10SerialReadEv>
    306c:	d5 01       	movw	r26, r10
    306e:	8d 93       	st	X+, r24
    3070:	5d 01       	movw	r10, r26
		{
			if(function_code == 0x01)  
			{
				if(sb->SerialAvailable() >= 6)
				{
					for(i=2;i<8;i++)
    3072:	8a 16       	cp	r8, r26
    3074:	9b 06       	cpc	r9, r27
    3076:	b9 f7       	brne	.-18     	; 0x3066 <_ZL4procPv+0x1f4>
    3078:	2a cf       	rjmp	.-428    	; 0x2ece <_ZL4procPv+0x5c>
						#endif
					}

				}
			}
			else if(function_code == 0x04) //Max1W 값 읽기
    307a:	b4 e0       	ldi	r27, 0x04	; 4
    307c:	ab 12       	cpse	r10, r27
    307e:	2b c0       	rjmp	.+86     	; 0x30d6 <_ZL4procPv+0x264>
			{
				if(sb->SerialAvailable() >= 6)
    3080:	c7 01       	movw	r24, r14
    3082:	0e 94 c7 06 	call	0xd8e	; 0xd8e <_ZN12SerialBuffer15SerialAvailableEv>
    3086:	86 30       	cpi	r24, 0x06	; 6
    3088:	08 f4       	brcc	.+2      	; 0x308c <_ZL4procPv+0x21a>
    308a:	26 cf       	rjmp	.-436    	; 0x2ed8 <_ZL4procPv+0x66>
    308c:	5e 01       	movw	r10, r28
    308e:	e3 e0       	ldi	r30, 0x03	; 3
    3090:	ae 0e       	add	r10, r30
    3092:	b1 1c       	adc	r11, r1
				{
					for(i=2;i<8;i++)
					{
						buf1[i] = sb->SerialRead();
    3094:	c7 01       	movw	r24, r14
    3096:	0e 94 9b 06 	call	0xd36	; 0xd36 <_ZN12SerialBuffer10SerialReadEv>
    309a:	d5 01       	movw	r26, r10
    309c:	8d 93       	st	X+, r24
    309e:	5d 01       	movw	r10, r26
			}
			else if(function_code == 0x04) //Max1W 값 읽기
			{
				if(sb->SerialAvailable() >= 6)
				{
					for(i=2;i<8;i++)
    30a0:	a8 15       	cp	r26, r8
    30a2:	b9 05       	cpc	r27, r9
    30a4:	b9 f7       	brne	.-18     	; 0x3094 <_ZL4procPv+0x222>
						#if PACKET_DEBUG
							sb1->SerialWrite(buf1[i]);
						#endif
					}
					int tempadr =((0xff & buf1[2] << 8) | 0xff & buf1[3]);
					if(tempadr >= MAX_ENUM)  //주소 사이즈 체크 
    30a6:	8c 81       	ldd	r24, Y+4	; 0x04
    30a8:	90 e0       	ldi	r25, 0x00	; 0
    30aa:	cc 97       	sbiw	r24, 0x3c	; 60
    30ac:	0c f0       	brlt	.+2      	; 0x30b0 <_ZL4procPv+0x23e>
    30ae:	90 cf       	rjmp	.-224    	; 0x2fd0 <_ZL4procPv+0x15e>
							//sb->SerialWrite((char*)&exception,sizeof(exception));
							goto FREAM_ERROR;
					}
					else
					{
							GetFunc04Data(buf1,&func04,mem4);
    30b0:	a8 01       	movw	r20, r16
    30b2:	62 ed       	ldi	r22, 0xD2	; 210
    30b4:	73 e0       	ldi	r23, 0x03	; 3
    30b6:	ce 01       	movw	r24, r28
    30b8:	01 96       	adiw	r24, 0x01	; 1
    30ba:	0e 94 85 05 	call	0xb0a	; 0xb0a <_Z13GetFunc04DataPcP17GetFunctionCode04Pi>
							sb->SerialWrite((char*)&func04,sizeof(func04));
    30be:	47 e0       	ldi	r20, 0x07	; 7
    30c0:	50 e0       	ldi	r21, 0x00	; 0
    30c2:	62 ed       	ldi	r22, 0xD2	; 210
    30c4:	73 e0       	ldi	r23, 0x03	; 3
    30c6:	c7 01       	movw	r24, r14
    30c8:	0e 94 5f 06 	call	0xcbe	; 0xcbe <_ZN12SerialBuffer11SerialWriteEPKci>
    30cc:	68 94       	set
    30ce:	aa 24       	eor	r10, r10
    30d0:	a2 f8       	bld	r10, 2
							read_Flag = 0;
    30d2:	b1 2c       	mov	r11, r1
    30d4:	11 cf       	rjmp	.-478    	; 0x2ef8 <_ZL4procPv+0x86>
					}

				}
			}
			else if(function_code == 0x05) //터치 버튼 
    30d6:	b5 e0       	ldi	r27, 0x05	; 5
    30d8:	ab 12       	cpse	r10, r27
    30da:	2b c0       	rjmp	.+86     	; 0x3132 <_ZL4procPv+0x2c0>
			{
				if(sb->SerialAvailable() >= 6)
    30dc:	c7 01       	movw	r24, r14
    30de:	0e 94 c7 06 	call	0xd8e	; 0xd8e <_ZN12SerialBuffer15SerialAvailableEv>
    30e2:	86 30       	cpi	r24, 0x06	; 6
    30e4:	08 f4       	brcc	.+2      	; 0x30e8 <_ZL4procPv+0x276>
    30e6:	fe ce       	rjmp	.-516    	; 0x2ee4 <_ZL4procPv+0x72>
    30e8:	5e 01       	movw	r10, r28
    30ea:	e3 e0       	ldi	r30, 0x03	; 3
    30ec:	ae 0e       	add	r10, r30
    30ee:	b1 1c       	adc	r11, r1
				{
					for(i=2;i<8;i++)
					{
						buf1[i] = sb->SerialRead();
    30f0:	c7 01       	movw	r24, r14
    30f2:	0e 94 9b 06 	call	0xd36	; 0xd36 <_ZN12SerialBuffer10SerialReadEv>
    30f6:	d5 01       	movw	r26, r10
    30f8:	8d 93       	st	X+, r24
    30fa:	5d 01       	movw	r10, r26
			}
			else if(function_code == 0x05) //터치 버튼 
			{
				if(sb->SerialAvailable() >= 6)
				{
					for(i=2;i<8;i++)
    30fc:	a8 15       	cp	r26, r8
    30fe:	b9 05       	cpc	r27, r9
    3100:	b9 f7       	brne	.-18     	; 0x30f0 <_ZL4procPv+0x27e>
						#if PACKET_DEBUG
						sb1->SerialWrite(buf1[i]);
						#endif
					}
					int tempadr =((0xff & buf1[2] << 8) | 0xff & buf1[3]);
					if(tempadr >= MAX_ENUM)  //주소 사이즈 체크
    3102:	8c 81       	ldd	r24, Y+4	; 0x04
    3104:	90 e0       	ldi	r25, 0x00	; 0
    3106:	cc 97       	sbiw	r24, 0x3c	; 60
    3108:	0c f0       	brlt	.+2      	; 0x310c <_ZL4procPv+0x29a>
    310a:	66 cf       	rjmp	.-308    	; 0x2fd8 <_ZL4procPv+0x166>
					{
						goto FREAM_ERROR;
					}
					else
					{
						GetFunc05Data(buf1,&func05);
    310c:	69 ed       	ldi	r22, 0xD9	; 217
    310e:	73 e0       	ldi	r23, 0x03	; 3
    3110:	ce 01       	movw	r24, r28
    3112:	01 96       	adiw	r24, 0x01	; 1
    3114:	0e 94 a6 05 	call	0xb4c	; 0xb4c <_Z13GetFunc05DataPcP17GetFunctionCode05>
						sb->SerialWrite((char*)&func05,sizeof(func05));
    3118:	48 e0       	ldi	r20, 0x08	; 8
    311a:	50 e0       	ldi	r21, 0x00	; 0
    311c:	69 ed       	ldi	r22, 0xD9	; 217
    311e:	73 e0       	ldi	r23, 0x03	; 3
    3120:	c7 01       	movw	r24, r14
    3122:	0e 94 5f 06 	call	0xcbe	; 0xcbe <_ZN12SerialBuffer11SerialWriteEPKci>
    3126:	0f 2e       	mov	r0, r31
    3128:	f5 e0       	ldi	r31, 0x05	; 5
    312a:	af 2e       	mov	r10, r31
    312c:	f0 2d       	mov	r31, r0
						read_Flag = 0;
    312e:	b1 2c       	mov	r11, r1
    3130:	e3 ce       	rjmp	.-570    	; 0x2ef8 <_ZL4procPv+0x86>
					}
	
				}
			}
			else if(function_code == 0x10)  //3_MAX1W 입력 
    3132:	b0 e1       	ldi	r27, 0x10	; 16
    3134:	ab 12       	cpse	r10, r27
    3136:	e0 ce       	rjmp	.-576    	; 0x2ef8 <_ZL4procPv+0x86>
			{
				if(sb->SerialAvailable() >= 9)
    3138:	c7 01       	movw	r24, r14
    313a:	0e 94 c7 06 	call	0xd8e	; 0xd8e <_ZN12SerialBuffer15SerialAvailableEv>
    313e:	89 30       	cpi	r24, 0x09	; 9
    3140:	08 f4       	brcc	.+2      	; 0x3144 <_ZL4procPv+0x2d2>
    3142:	d7 ce       	rjmp	.-594    	; 0x2ef2 <_ZL4procPv+0x80>
    3144:	5e 01       	movw	r10, r28
    3146:	e3 e0       	ldi	r30, 0x03	; 3
    3148:	ae 0e       	add	r10, r30
    314a:	b1 1c       	adc	r11, r1
				{
					for(i=2;i<11;i++)
					{
						buf1[i] = sb->SerialRead();
    314c:	c7 01       	movw	r24, r14
    314e:	0e 94 9b 06 	call	0xd36	; 0xd36 <_ZN12SerialBuffer10SerialReadEv>
    3152:	d5 01       	movw	r26, r10
    3154:	8d 93       	st	X+, r24
    3156:	5d 01       	movw	r10, r26
			}
			else if(function_code == 0x10)  //3_MAX1W 입력 
			{
				if(sb->SerialAvailable() >= 9)
				{
					for(i=2;i<11;i++)
    3158:	a4 15       	cp	r26, r4
    315a:	b5 05       	cpc	r27, r5
    315c:	b9 f7       	brne	.-18     	; 0x314c <_ZL4procPv+0x2da>
						buf1[i] = sb->SerialRead();
						#if PACKET_DEBUG
						sb1->SerialWrite(buf1[i]);
						#endif
					}
					GetFucc10Data(buf1,&func10,mem4); //데이터 파싱
    315e:	a8 01       	movw	r20, r16
    3160:	67 ec       	ldi	r22, 0xC7	; 199
    3162:	73 e0       	ldi	r23, 0x03	; 3
    3164:	ce 01       	movw	r24, r28
    3166:	01 96       	adiw	r24, 0x01	; 1
    3168:	0e 94 bf 05 	call	0xb7e	; 0xb7e <_Z13GetFucc10DataPcP17GetFunctionCode10Pi>
					int tempadr =((0xff & buf1[2] << 8) | 0xff & buf1[3]);
					if(tempadr >= MAX_ENUM)  //주소 사이즈 체크
    316c:	8c 81       	ldd	r24, Y+4	; 0x04
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	cc 97       	sbiw	r24, 0x3c	; 60
    3172:	0c f0       	brlt	.+2      	; 0x3176 <_ZL4procPv+0x304>
    3174:	36 cf       	rjmp	.-404    	; 0x2fe2 <_ZL4procPv+0x170>
					{
						goto FREAM_ERROR;
					}
					else
					{
						if(func10.startingAddressLo == 38)
    3176:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <func10+0x3>
    317a:	86 32       	cpi	r24, 0x26	; 38
    317c:	e9 f4       	brne	.+58     	; 0x31b8 <_ZL4procPv+0x346>
						{
							if(current_states_lookup_table[mem4[CURRENT_PAGE]] == 0) //룩업 테이블은 처음 시작시 0값이어야 함,
    317e:	f6 01       	movw	r30, r12
    3180:	20 81       	ld	r18, Z
    3182:	31 81       	ldd	r19, Z+1	; 0x01
    3184:	f9 01       	movw	r30, r18
    3186:	e6 55       	subi	r30, 0x56	; 86
    3188:	fc 4f       	sbci	r31, 0xFC	; 252
    318a:	80 81       	ld	r24, Z
    318c:	81 11       	cpse	r24, r1
    318e:	2c c0       	rjmp	.+88     	; 0x31e8 <_ZL4procPv+0x376>
							{
								uint8_t flag = 0;
								mem4[START_BUTTON] = ON;
    3190:	e1 e0       	ldi	r30, 0x01	; 1
    3192:	f0 e0       	ldi	r31, 0x00	; 0
    3194:	d3 01       	movw	r26, r6
    3196:	ed 93       	st	X+, r30
    3198:	fc 93       	st	X, r31
								mem4[CURRENT_STATE_ON] = ON; // 시작 등 ON
    319a:	a0 e8       	ldi	r26, 0x80	; 128
    319c:	b3 e0       	ldi	r27, 0x03	; 3
    319e:	ed 93       	st	X+, r30
    31a0:	fc 93       	st	X, r31
    31a2:	ea ea       	ldi	r30, 0xAA	; 170
    31a4:	f3 e0       	ldi	r31, 0x03	; 3
								//룩업 테이블을 먼저 확인 함. 한개라도 가동중이면 리턴함, 가동이 반드시 끝나고 시작해야함(페이지 이동 후 시작 시)
								for(uint8_t i = 0; i< PAGE_MAX;i++)
								{
									if(current_states_lookup_table[i] == ON)
    31a6:	81 91       	ld	r24, Z+
    31a8:	81 30       	cpi	r24, 0x01	; 1
    31aa:	f1 f0       	breq	.+60     	; 0x31e8 <_ZL4procPv+0x376>
							{
								uint8_t flag = 0;
								mem4[START_BUTTON] = ON;
								mem4[CURRENT_STATE_ON] = ON; // 시작 등 ON
								//룩업 테이블을 먼저 확인 함. 한개라도 가동중이면 리턴함, 가동이 반드시 끝나고 시작해야함(페이지 이동 후 시작 시)
								for(uint8_t i = 0; i< PAGE_MAX;i++)
    31ac:	84 eb       	ldi	r24, 0xB4	; 180
    31ae:	93 e0       	ldi	r25, 0x03	; 3
    31b0:	8e 17       	cp	r24, r30
    31b2:	9f 07       	cpc	r25, r31
    31b4:	c1 f7       	brne	.-16     	; 0x31a6 <_ZL4procPv+0x334>
    31b6:	38 c0       	rjmp	.+112    	; 0x3228 <_ZL4procPv+0x3b6>
									current_states_lookup_table[mem4[CURRENT_PAGE]] = ON;
									mem4[CURRENT_RUN_NUMBER] = mem4[CURRENT_PAGE];
								}
							}
						}
						if(func10.startingAddressLo == 39)
    31b8:	87 32       	cpi	r24, 0x27	; 39
    31ba:	b1 f4       	brne	.+44     	; 0x31e8 <_ZL4procPv+0x376>
						{
						
							if(current_states_lookup_table[mem4[CURRENT_PAGE]] == ON)
    31bc:	d6 01       	movw	r26, r12
    31be:	8d 91       	ld	r24, X+
    31c0:	9c 91       	ld	r25, X
    31c2:	fc 01       	movw	r30, r24
    31c4:	e6 55       	subi	r30, 0x56	; 86
    31c6:	fc 4f       	sbci	r31, 0xFC	; 252
    31c8:	20 81       	ld	r18, Z
    31ca:	21 30       	cpi	r18, 0x01	; 1
    31cc:	69 f4       	brne	.+26     	; 0x31e8 <_ZL4procPv+0x376>
							{
								current_states_lookup_table[mem4[CURRENT_PAGE]] = 0;
    31ce:	fc 01       	movw	r30, r24
    31d0:	e6 55       	subi	r30, 0x56	; 86
    31d2:	fc 4f       	sbci	r31, 0xFC	; 252
    31d4:	10 82       	st	Z, r1
								mem4[START_BUTTON] = OFF;
    31d6:	82 e0       	ldi	r24, 0x02	; 2
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	f3 01       	movw	r30, r6
    31dc:	91 83       	std	Z+1, r25	; 0x01
    31de:	80 83       	st	Z, r24
								mem4[CURRENT_STATE_ON] = 0;//시작 등  OFF
    31e0:	a0 e8       	ldi	r26, 0x80	; 128
    31e2:	b3 e0       	ldi	r27, 0x03	; 3
    31e4:	1d 92       	st	X+, r1
    31e6:	1c 92       	st	X, r1
							}
						}
						ResponseFucc10Data(buf1,&rsp10); //리스폰스 데이터를 만듬.
    31e8:	6a eb       	ldi	r22, 0xBA	; 186
    31ea:	73 e0       	ldi	r23, 0x03	; 3
    31ec:	ce 01       	movw	r24, r28
    31ee:	01 96       	adiw	r24, 0x01	; 1
    31f0:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <_Z18ResponseFucc10DataPcP22ResponseFunctionCode10>
						sb->SerialWrite((char*)&rsp10,sizeof(rsp10)); //리스폰스 데이터 쓰기.
    31f4:	48 e0       	ldi	r20, 0x08	; 8
    31f6:	50 e0       	ldi	r21, 0x00	; 0
    31f8:	6a eb       	ldi	r22, 0xBA	; 186
    31fa:	73 e0       	ldi	r23, 0x03	; 3
    31fc:	c7 01       	movw	r24, r14
    31fe:	0e 94 5f 06 	call	0xcbe	; 0xcbe <_ZN12SerialBuffer11SerialWriteEPKci>
    3202:	a2 2c       	mov	r10, r2
						read_Flag = 0;
    3204:	b1 2c       	mov	r11, r1
    3206:	78 ce       	rjmp	.-784    	; 0x2ef8 <_ZL4procPv+0x86>
	while(1)
	{
		//mem4[COUNT] = PIND;
		if(PIND == 0xfe && chatter_flag == 1)//
		{
			if(mem4[START_BUTTON] == ON)
    3208:	f3 01       	movw	r30, r6
    320a:	80 81       	ld	r24, Z
    320c:	91 81       	ldd	r25, Z+1	; 0x01
    320e:	01 97       	sbiw	r24, 0x01	; 1
    3210:	09 f0       	breq	.+2      	; 0x3214 <_ZL4procPv+0x3a2>
    3212:	8e ce       	rjmp	.-740    	; 0x2f30 <_ZL4procPv+0xbe>
    3214:	79 ce       	rjmp	.-782    	; 0x2f08 <_ZL4procPv+0x96>
			}
			chatter_flag = 2;
		}
		if(PIND == 0xff && chatter_flag == 2)//
		{
			vTaskDelay(10);
    3216:	8a e0       	ldi	r24, 0x0A	; 10
    3218:	90 e0       	ldi	r25, 0x00	; 0
    321a:	0e 94 c0 23 	call	0x4780	; 0x4780 <vTaskDelay>
			chatter_flag = 0;
    321e:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <chatter_flag>
    3222:	94 ce       	rjmp	.-728    	; 0x2f4c <_ZL4procPv+0xda>
					}
					else
					{
						GetFunc05Data(buf1,&func05);
						sb->SerialWrite((char*)&func05,sizeof(func05));
						read_Flag = 0;
    3224:	b1 2c       	mov	r11, r1
    3226:	68 ce       	rjmp	.-816    	; 0x2ef8 <_ZL4procPv+0x86>
										break;
									}
								}
								if(flag == 0)
								{
									current_states_lookup_table[mem4[CURRENT_PAGE]] = ON;
    3228:	f9 01       	movw	r30, r18
    322a:	e6 55       	subi	r30, 0x56	; 86
    322c:	fc 4f       	sbci	r31, 0xFC	; 252
    322e:	81 e0       	ldi	r24, 0x01	; 1
    3230:	80 83       	st	Z, r24
									mem4[CURRENT_RUN_NUMBER] = mem4[CURRENT_PAGE];
    3232:	a2 e8       	ldi	r26, 0x82	; 130
    3234:	b3 e0       	ldi	r27, 0x03	; 3
    3236:	2d 93       	st	X+, r18
    3238:	3c 93       	st	X, r19
    323a:	d6 cf       	rjmp	.-84     	; 0x31e8 <_ZL4procPv+0x376>

0000323c <_Z8Uart_ISR8Dev_typej>:

void Uart_ISR(Dev_type Device,uint16_t Arg)
{ 
	uint8_t data = Arg;
	SerialBuffer *sb = (SerialBuffer*)DataStruct[UART0];
	sb->Serialstore(data);
    323c:	80 91 e1 03 	lds	r24, 0x03E1	; 0x8003e1 <DataStruct>
    3240:	90 91 e2 03 	lds	r25, 0x03E2	; 0x8003e2 <DataStruct+0x1>
    3244:	0e 94 3a 06 	call	0xc74	; 0xc74 <_ZN12SerialBuffer11SerialstoreEc>
	sbi(PORTB,5);
    3248:	c5 9a       	sbi	0x18, 5	; 24
    324a:	08 95       	ret

0000324c <_Z9RS485_ISR8Dev_typej>:
}
void RS485_ISR(Dev_type Device,uint16_t Arg)
{
	uint8_t data = Arg;
	SerialBuffer *sb = (SerialBuffer*)DataStruct[RS485];
	sb->Serialstore(data);
    324c:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <DataStruct+0x2>
    3250:	90 91 e4 03 	lds	r25, 0x03E4	; 0x8003e4 <DataStruct+0x3>
    3254:	0e 94 3a 06 	call	0xc74	; 0xc74 <_ZN12SerialBuffer11SerialstoreEc>
	sbi(PORTB,6);
    3258:	c6 9a       	sbi	0x18, 6	; 24
    325a:	08 95       	ret

0000325c <_Z16Count_Sensor_ISR8Dev_typej>:
{

}
void Count_Sensor_ISR(Dev_type Device,uint16_t Arg)
{
	Alarm_Open(ALARM0,80,Set_Alarm);
    325c:	4e e2       	ldi	r20, 0x2E	; 46
    325e:	50 e1       	ldi	r21, 0x10	; 16
    3260:	60 e5       	ldi	r22, 0x50	; 80
    3262:	70 e0       	ldi	r23, 0x00	; 0
    3264:	80 e0       	ldi	r24, 0x00	; 0
    3266:	0c 94 29 08 	jmp	0x1052	; 0x1052 <Alarm_Open>
    326a:	08 95       	ret

0000326c <_Z8Init_Devv>:
	cmp_mem[2] = mem4[IPV4_2];
	cmp_mem[3] = mem4[IPV4_3];
	
}
void Init_Dev()
{
    326c:	cf 93       	push	r28
    326e:	df 93       	push	r29
	dev = new Dev_Manager();
    3270:	84 e1       	ldi	r24, 0x14	; 20
    3272:	90 e0       	ldi	r25, 0x00	; 0
    3274:	0e 94 cb 09 	call	0x1396	; 0x1396 <_ZN11Dev_ManagernwEj>
    3278:	ec 01       	movw	r28, r24
    327a:	0e 94 98 09 	call	0x1330	; 0x1330 <_ZN11Dev_ManagerC1Ev>
    327e:	d0 93 f0 03 	sts	0x03F0, r29	; 0x8003f0 <dev+0x1>
    3282:	c0 93 ef 03 	sts	0x03EF, r28	; 0x8003ef <dev>
	lcd = new Char_LCD2004A();
    3286:	82 e0       	ldi	r24, 0x02	; 2
    3288:	90 e0       	ldi	r25, 0x00	; 0
    328a:	0e 94 83 09 	call	0x1306	; 0x1306 <_ZN13Char_LCD2004AnwEj>
    328e:	ec 01       	movw	r28, r24
    3290:	0e 94 0a 09 	call	0x1214	; 0x1214 <_ZN13Char_LCD2004AC1Ev>
    3294:	d0 93 ee 03 	sts	0x03EE, r29	; 0x8003ee <lcd+0x1>
    3298:	c0 93 ed 03 	sts	0x03ED, r28	; 0x8003ed <lcd>
	#if USE_ADC
		adc = new Adc();
    329c:	84 e0       	ldi	r24, 0x04	; 4
    329e:	90 e0       	ldi	r25, 0x00	; 0
    32a0:	0e 94 16 08 	call	0x102c	; 0x102c <_ZN3AdcnwEj>
    32a4:	fc 01       	movw	r30, r24
    32a6:	12 82       	std	Z+2, r1	; 0x02
    32a8:	13 82       	std	Z+3, r1	; 0x03
#include "FreeRTOS.h"
#include "semphr.h"
#define malloc(size) pvPortMalloc(size)
#define free(ptr) vPortFree(ptr)

class Adc : public DeviceDriveInterFace
    32aa:	8b e4       	ldi	r24, 0x4B	; 75
    32ac:	91 e0       	ldi	r25, 0x01	; 1
    32ae:	91 83       	std	Z+1, r25	; 0x01
    32b0:	80 83       	st	Z, r24
    32b2:	f0 93 ec 03 	sts	0x03EC, r31	; 0x8003ec <adc+0x1>
    32b6:	e0 93 eb 03 	sts	0x03EB, r30	; 0x8003eb <adc>
		dev->Register_Dev(adc,_ADC);
    32ba:	44 e0       	ldi	r20, 0x04	; 4
    32bc:	bf 01       	movw	r22, r30
    32be:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <dev>
    32c2:	90 91 f0 03 	lds	r25, 0x03F0	; 0x8003f0 <dev+0x1>
    32c6:	0e 94 c2 09 	call	0x1384	; 0x1384 <_ZN11Dev_Manager12Register_DevEP20DeviceDriveInterFace8Dev_type>
	#endif
	dev->Register_Dev(new UartDriver,UART0);
    32ca:	88 e0       	ldi	r24, 0x08	; 8
    32cc:	90 e0       	ldi	r25, 0x00	; 0
    32ce:	0e 94 12 0c 	call	0x1824	; 0x1824 <_ZN10UartDrivernwEj>
    32d2:	ec 01       	movw	r28, r24
    32d4:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <_ZN10UartDriverC1Ev>
    32d8:	40 e0       	ldi	r20, 0x00	; 0
    32da:	be 01       	movw	r22, r28
    32dc:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <dev>
    32e0:	90 91 f0 03 	lds	r25, 0x03F0	; 0x8003f0 <dev+0x1>
    32e4:	0e 94 c2 09 	call	0x1384	; 0x1384 <_ZN11Dev_Manager12Register_DevEP20DeviceDriveInterFace8Dev_type>
	dev->Register_Dev(new RS485Driver,RS485);
    32e8:	88 e0       	ldi	r24, 0x08	; 8
    32ea:	90 e0       	ldi	r25, 0x00	; 0
    32ec:	0e 94 6f 0b 	call	0x16de	; 0x16de <_ZN11RS485DrivernwEj>
    32f0:	ec 01       	movw	r28, r24
    32f2:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <_ZN11RS485DriverC1Ev>
    32f6:	41 e0       	ldi	r20, 0x01	; 1
    32f8:	be 01       	movw	r22, r28
    32fa:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <dev>
    32fe:	90 91 f0 03 	lds	r25, 0x03F0	; 0x8003f0 <dev+0x1>
    3302:	0e 94 c2 09 	call	0x1384	; 0x1384 <_ZN11Dev_Manager12Register_DevEP20DeviceDriveInterFace8Dev_type>
	dev->Register_Dev(new Timer,SEC_TIMER);
    3306:	82 e0       	ldi	r24, 0x02	; 2
    3308:	90 e0       	ldi	r25, 0x00	; 0
    330a:	0e 94 37 0b 	call	0x166e	; 0x166e <_ZN5TimernwEj>
    330e:	ec 01       	movw	r28, r24
    3310:	0e 94 31 0b 	call	0x1662	; 0x1662 <_ZN5TimerC1Ev>
    3314:	42 e0       	ldi	r20, 0x02	; 2
    3316:	be 01       	movw	r22, r28
    3318:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <dev>
    331c:	90 91 f0 03 	lds	r25, 0x03F0	; 0x8003f0 <dev+0x1>
    3320:	0e 94 c2 09 	call	0x1384	; 0x1384 <_ZN11Dev_Manager12Register_DevEP20DeviceDriveInterFace8Dev_type>
	dev->Register_Dev(new Count_Sensor,COUNT_SENSOR);
    3324:	82 e0       	ldi	r24, 0x02	; 2
    3326:	90 e0       	ldi	r25, 0x00	; 0
    3328:	0e 94 95 09 	call	0x132a	; 0x132a <_ZN12Count_SensornwEj>
#include "FreeRTOS.h"
#include "semphr.h"
#define malloc(size) pvPortMalloc(size)
#define free(ptr) vPortFree(ptr)

class Count_Sensor : public DeviceDriveInterFace
    332c:	2b e6       	ldi	r18, 0x6B	; 107
    332e:	31 e0       	ldi	r19, 0x01	; 1
    3330:	fc 01       	movw	r30, r24
    3332:	31 83       	std	Z+1, r19	; 0x01
    3334:	20 83       	st	Z, r18
    3336:	43 e0       	ldi	r20, 0x03	; 3
    3338:	bc 01       	movw	r22, r24
    333a:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <dev>
    333e:	90 91 f0 03 	lds	r25, 0x03F0	; 0x8003f0 <dev+0x1>
    3342:	0e 94 c2 09 	call	0x1384	; 0x1384 <_ZN11Dev_Manager12Register_DevEP20DeviceDriveInterFace8Dev_type>
	
	dev->Device_Init(UART0);
    3346:	60 e0       	ldi	r22, 0x00	; 0
    3348:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <dev>
    334c:	90 91 f0 03 	lds	r25, 0x03F0	; 0x8003f0 <dev+0x1>
    3350:	0e 94 f6 09 	call	0x13ec	; 0x13ec <_ZN11Dev_Manager11Device_InitE8Dev_type>
	dev->Device_Init(RS485);
    3354:	61 e0       	ldi	r22, 0x01	; 1
    3356:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <dev>
    335a:	90 91 f0 03 	lds	r25, 0x03F0	; 0x8003f0 <dev+0x1>
    335e:	0e 94 f6 09 	call	0x13ec	; 0x13ec <_ZN11Dev_Manager11Device_InitE8Dev_type>
	dev->Device_Init(SEC_TIMER);
    3362:	62 e0       	ldi	r22, 0x02	; 2
    3364:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <dev>
    3368:	90 91 f0 03 	lds	r25, 0x03F0	; 0x8003f0 <dev+0x1>
    336c:	0e 94 f6 09 	call	0x13ec	; 0x13ec <_ZN11Dev_Manager11Device_InitE8Dev_type>
	dev->Device_Init(COUNT_SENSOR);
    3370:	63 e0       	ldi	r22, 0x03	; 3
    3372:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <dev>
    3376:	90 91 f0 03 	lds	r25, 0x03F0	; 0x8003f0 <dev+0x1>
    337a:	0e 94 f6 09 	call	0x13ec	; 0x13ec <_ZN11Dev_Manager11Device_InitE8Dev_type>
	#if USE_ADC
		dev->Device_Init(_ADC);
    337e:	64 e0       	ldi	r22, 0x04	; 4
    3380:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <dev>
    3384:	90 91 f0 03 	lds	r25, 0x03F0	; 0x8003f0 <dev+0x1>
    3388:	0e 94 f6 09 	call	0x13ec	; 0x13ec <_ZN11Dev_Manager11Device_InitE8Dev_type>
	#endif
	dev->Writes(UART0,"Uart Init SUCCESS boadrate 9600bps \r\n");
    338c:	48 ed       	ldi	r20, 0xD8	; 216
    338e:	51 e0       	ldi	r21, 0x01	; 1
    3390:	60 e0       	ldi	r22, 0x00	; 0
    3392:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <dev>
    3396:	90 91 f0 03 	lds	r25, 0x03F0	; 0x8003f0 <dev+0x1>
    339a:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <_ZN11Dev_Manager6WritesE8Dev_typePKc>
	dev->Writes(RS485,"RS485 Init SUCCESS boadrate 9600bps \r\n");
    339e:	4e ef       	ldi	r20, 0xFE	; 254
    33a0:	51 e0       	ldi	r21, 0x01	; 1
    33a2:	61 e0       	ldi	r22, 0x01	; 1
    33a4:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <dev>
    33a8:	90 91 f0 03 	lds	r25, 0x03F0	; 0x8003f0 <dev+0x1>
    33ac:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <_ZN11Dev_Manager6WritesE8Dev_typePKc>
}
    33b0:	df 91       	pop	r29
    33b2:	cf 91       	pop	r28
    33b4:	08 95       	ret

000033b6 <main>:
#if USE_ADC
	uint16_t Adc_channels[8] = {0};
	uint8_t Adc_check_flag[8] = {0};
#endif
int main( void )
{
    33b6:	cf 92       	push	r12
    33b8:	df 92       	push	r13
    33ba:	ef 92       	push	r14
    33bc:	ff 92       	push	r15
    33be:	0f 93       	push	r16
    33c0:	cf 93       	push	r28
    33c2:	df 93       	push	r29
	mem4[CURRENT_PAGE] = 0;//초기 페이지는 1 
    33c4:	10 92 7f 03 	sts	0x037F, r1	; 0x80037f <mem4+0x51>
    33c8:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <mem4+0x50>
	vTaskStartScheduler();//스케줄러 실행 
	return 0;
}
static void System_Init()
{
	mem4[IPV4_0] = eeprom_read_byte((const uint8_t*)0);  //read ip address
    33cc:	80 e0       	ldi	r24, 0x00	; 0
    33ce:	90 e0       	ldi	r25, 0x00	; 0
    33d0:	0e 94 08 2b 	call	0x5610	; 0x5610 <eeprom_read_byte>
    33d4:	d8 2e       	mov	r13, r24
    33d6:	90 e0       	ldi	r25, 0x00	; 0
    33d8:	90 93 6f 03 	sts	0x036F, r25	; 0x80036f <mem4+0x41>
    33dc:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <mem4+0x40>
	mem4[IPV4_1] = eeprom_read_byte((const uint8_t*)1);
    33e0:	81 e0       	ldi	r24, 0x01	; 1
    33e2:	90 e0       	ldi	r25, 0x00	; 0
    33e4:	0e 94 08 2b 	call	0x5610	; 0x5610 <eeprom_read_byte>
    33e8:	d8 2f       	mov	r29, r24
    33ea:	90 e0       	ldi	r25, 0x00	; 0
    33ec:	90 93 71 03 	sts	0x0371, r25	; 0x800371 <mem4+0x43>
    33f0:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <mem4+0x42>
	mem4[IPV4_2] = eeprom_read_byte((const uint8_t*)2);
    33f4:	82 e0       	ldi	r24, 0x02	; 2
    33f6:	90 e0       	ldi	r25, 0x00	; 0
    33f8:	0e 94 08 2b 	call	0x5610	; 0x5610 <eeprom_read_byte>
    33fc:	c8 2f       	mov	r28, r24
    33fe:	90 e0       	ldi	r25, 0x00	; 0
    3400:	90 93 73 03 	sts	0x0373, r25	; 0x800373 <mem4+0x45>
    3404:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <mem4+0x44>
	mem4[IPV4_3] = eeprom_read_byte((const uint8_t*)3);
    3408:	83 e0       	ldi	r24, 0x03	; 3
    340a:	90 e0       	ldi	r25, 0x00	; 0
    340c:	0e 94 08 2b 	call	0x5610	; 0x5610 <eeprom_read_byte>
    3410:	28 2f       	mov	r18, r24
    3412:	30 e0       	ldi	r19, 0x00	; 0
    3414:	30 93 75 03 	sts	0x0375, r19	; 0x800375 <mem4+0x47>
    3418:	20 93 74 03 	sts	0x0374, r18	; 0x800374 <mem4+0x46>
	cmp_mem[0] = mem4[IPV4_0];
    341c:	e6 e1       	ldi	r30, 0x16	; 22
    341e:	f3 e0       	ldi	r31, 0x03	; 3
    3420:	d0 82       	st	Z, r13
	cmp_mem[1] = mem4[IPV4_1];
    3422:	d1 83       	std	Z+1, r29	; 0x01
	cmp_mem[2] = mem4[IPV4_2];
    3424:	c2 83       	std	Z+2, r28	; 0x02
	cmp_mem[3] = mem4[IPV4_3];
    3426:	83 83       	std	Z+3, r24	; 0x03
int main( void )
{
	mem4[CURRENT_PAGE] = 0;//초기 페이지는 1 
	System_Init();
	cli();  //인터럽트 금지 
	Init_Dev(); //dev 매니저 초기화
    3428:	f8 94       	cli
	
	
	dev->Open_Handle(UART0,Uart_ISR);  //드라이버 매니져에 인터럽트 루틴 등록
    342a:	20 df       	rcall	.-448    	; 0x326c <_Z8Init_Devv>
    342c:	4e e1       	ldi	r20, 0x1E	; 30
    342e:	59 e1       	ldi	r21, 0x19	; 25
    3430:	60 e0       	ldi	r22, 0x00	; 0
    3432:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <dev>
    3436:	90 91 f0 03 	lds	r25, 0x03F0	; 0x8003f0 <dev+0x1>
    343a:	0e 94 08 0a 	call	0x1410	; 0x1410 <_ZN11Dev_Manager11Open_HandleE8Dev_typePFvS0_jE>
	dev->Open_Handle(RS485,RS485_ISR); //드라이버 매니져에 인터럽트 루틴 등록
    343e:	46 e2       	ldi	r20, 0x26	; 38
    3440:	59 e1       	ldi	r21, 0x19	; 25
    3442:	61 e0       	ldi	r22, 0x01	; 1
    3444:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <dev>
    3448:	90 91 f0 03 	lds	r25, 0x03F0	; 0x8003f0 <dev+0x1>
    344c:	0e 94 08 0a 	call	0x1410	; 0x1410 <_ZN11Dev_Manager11Open_HandleE8Dev_typePFvS0_jE>
	dev->Open_Handle(SEC_TIMER,Timer_ISR);
    3450:	4b e0       	ldi	r20, 0x0B	; 11
    3452:	50 e1       	ldi	r21, 0x10	; 16
    3454:	62 e0       	ldi	r22, 0x02	; 2
    3456:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <dev>
    345a:	90 91 f0 03 	lds	r25, 0x03F0	; 0x8003f0 <dev+0x1>
    345e:	0e 94 08 0a 	call	0x1410	; 0x1410 <_ZN11Dev_Manager11Open_HandleE8Dev_typePFvS0_jE>
	dev->Open_Handle(COUNT_SENSOR,Count_Sensor_ISR);
    3462:	4e e2       	ldi	r20, 0x2E	; 46
    3464:	59 e1       	ldi	r21, 0x19	; 25
    3466:	63 e0       	ldi	r22, 0x03	; 3
    3468:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <dev>
    346c:	90 91 f0 03 	lds	r25, 0x03F0	; 0x8003f0 <dev+0x1>
    3470:	0e 94 08 0a 	call	0x1410	; 0x1410 <_ZN11Dev_Manager11Open_HandleE8Dev_typePFvS0_jE>
	#if USE_ADC
		dev->Open_Handle(_ADC,ADC_ISR);
    3474:	4d e2       	ldi	r20, 0x2D	; 45
    3476:	50 e1       	ldi	r21, 0x10	; 16
    3478:	64 e0       	ldi	r22, 0x04	; 4
    347a:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <dev>
    347e:	90 91 f0 03 	lds	r25, 0x03F0	; 0x8003f0 <dev+0x1>
    3482:	0e 94 08 0a 	call	0x1410	; 0x1410 <_ZN11Dev_Manager11Open_HandleE8Dev_typePFvS0_jE>
	#endif
	SerialBuffer *sb = new SerialBuffer(dev,UART0); //링 버퍼 
    3486:	88 e8       	ldi	r24, 0x88	; 136
    3488:	90 e0       	ldi	r25, 0x00	; 0
    348a:	0e 94 37 06 	call	0xc6e	; 0xc6e <_ZN12SerialBuffernwEj>
    348e:	6c 01       	movw	r12, r24
    3490:	60 91 ef 03 	lds	r22, 0x03EF	; 0x8003ef <dev>
    3494:	70 91 f0 03 	lds	r23, 0x03F0	; 0x8003f0 <dev+0x1>
    3498:	40 e0       	ldi	r20, 0x00	; 0
    349a:	0e 94 12 06 	call	0xc24	; 0xc24 <_ZN12SerialBufferC1EP11Dev_Manager8Dev_type>
	if(sb == nullptr)
    349e:	c1 14       	cp	r12, r1
    34a0:	d1 04       	cpc	r13, r1
	{
		if(debug)
		{ 
			dev->Writes(UART0,"RingBuffer Error\r\n");
		}
		exit(1);
    34a2:	21 f4       	brne	.+8      	; 0x34ac <main+0xf6>
    34a4:	81 e0       	ldi	r24, 0x01	; 1
    34a6:	90 e0       	ldi	r25, 0x00	; 0
    34a8:	0e 94 21 2b 	call	0x5642	; 0x5642 <_exit>
		if(debug)
		{
			dev->Writes(UART0,"RingBuffer UART0 SUCCESS\r\n");
		}
	}
	SerialBuffer *sb1 = new SerialBuffer(dev,RS485); //링 버퍼 
    34ac:	88 e8       	ldi	r24, 0x88	; 136
    34ae:	90 e0       	ldi	r25, 0x00	; 0
    34b0:	0e 94 37 06 	call	0xc6e	; 0xc6e <_ZN12SerialBuffernwEj>
    34b4:	ec 01       	movw	r28, r24
    34b6:	60 91 ef 03 	lds	r22, 0x03EF	; 0x8003ef <dev>
    34ba:	70 91 f0 03 	lds	r23, 0x03F0	; 0x8003f0 <dev+0x1>
    34be:	41 e0       	ldi	r20, 0x01	; 1
    34c0:	0e 94 12 06 	call	0xc24	; 0xc24 <_ZN12SerialBufferC1EP11Dev_Manager8Dev_type>
	if(sb1 == nullptr)
    34c4:	20 97       	sbiw	r28, 0x00	; 0
	{
		if(debug)
		{
			dev->Writes(UART0,"RingBuffer Error\r\n");
		}
		exit(1);
    34c6:	21 f4       	brne	.+8      	; 0x34d0 <main+0x11a>
    34c8:	81 e0       	ldi	r24, 0x01	; 1
    34ca:	90 e0       	ldi	r25, 0x00	; 0
    34cc:	0e 94 21 2b 	call	0x5642	; 0x5642 <_exit>
		if(debug)
		{
			dev->Writes(UART0,"RingBuffer UART1 SUCCESS\r\n");
		}
	}
	DataStruct[UART0] = sb;
    34d0:	e1 ee       	ldi	r30, 0xE1	; 225
    34d2:	f3 e0       	ldi	r31, 0x03	; 3
    34d4:	d1 82       	std	Z+1, r13	; 0x01
	DataStruct[RS485] = sb1;
    34d6:	c0 82       	st	Z, r12
    34d8:	d3 83       	std	Z+3, r29	; 0x03
		}
	}
	

		
	Alarm_Init(); //알람 초기화
    34da:	c2 83       	std	Z+2, r28	; 0x02
    34dc:	0e 94 19 08 	call	0x1032	; 0x1032 <Alarm_Init>
	"Task1",      //테스크 이름
	200,                   //스택의 크기
	sb,       // 테스크 매개 변수
	2,                     //테스크 우선 순위
	NULL                   //태스크 핸들
	);
    34e0:	78 94       	sei
    34e2:	e1 2c       	mov	r14, r1
    34e4:	f1 2c       	mov	r15, r1
    34e6:	02 e0       	ldi	r16, 0x02	; 2
    34e8:	96 01       	movw	r18, r12
    34ea:	48 ec       	ldi	r20, 0xC8	; 200
    34ec:	50 e0       	ldi	r21, 0x00	; 0
    34ee:	65 e2       	ldi	r22, 0x25	; 37
    34f0:	72 e0       	ldi	r23, 0x02	; 2
    34f2:	89 e3       	ldi	r24, 0x39	; 57
    34f4:	97 e1       	ldi	r25, 0x17	; 23
		"Task2",      //테스크 이름
		150,                   //스택의 크기
		sb1,       // 테스크 매개 변수
		2,                     //테스크 우선 순위
		NULL                   //태스크 핸들
		);
    34f6:	e8 d6       	rcall	.+3536   	; 0x42c8 <xTaskCreate>
    34f8:	9e 01       	movw	r18, r28
    34fa:	46 e9       	ldi	r20, 0x96	; 150
    34fc:	50 e0       	ldi	r21, 0x00	; 0
    34fe:	6b e2       	ldi	r22, 0x2B	; 43
    3500:	72 e0       	ldi	r23, 0x02	; 2
    3502:	87 e5       	ldi	r24, 0x57	; 87
    3504:	96 e1       	ldi	r25, 0x16	; 22
				"Task3",      //테스크 이름
				600,                   //스택의 크기
				NULL,       // 테스크 매개 변수
				2,                     //테스크 우선 순위0.
				NULL                   //태스크 핸들
				);
    3506:	e0 d6       	rcall	.+3520   	; 0x42c8 <xTaskCreate>
    3508:	20 e0       	ldi	r18, 0x00	; 0
    350a:	30 e0       	ldi	r19, 0x00	; 0
    350c:	48 e5       	ldi	r20, 0x58	; 88
    350e:	52 e0       	ldi	r21, 0x02	; 2
    3510:	61 e3       	ldi	r22, 0x31	; 49
    3512:	72 e0       	ldi	r23, 0x02	; 2
    3514:	85 e9       	ldi	r24, 0x95	; 149
    3516:	93 e1       	ldi	r25, 0x13	; 19
				"Task4",      //테스크 이름
				300,                   //스택의 크기
				NULL,       // 테스크 매개 변수
				2,                     //테스크 우선 순위0.
				NULL                   //태스크 핸들
		);
    3518:	d7 d6       	rcall	.+3502   	; 0x42c8 <xTaskCreate>
    351a:	20 e0       	ldi	r18, 0x00	; 0
    351c:	30 e0       	ldi	r19, 0x00	; 0
    351e:	4c e2       	ldi	r20, 0x2C	; 44
    3520:	51 e0       	ldi	r21, 0x01	; 1
    3522:	67 e3       	ldi	r22, 0x37	; 55
    3524:	72 e0       	ldi	r23, 0x02	; 2
    3526:	86 e3       	ldi	r24, 0x36	; 54
    3528:	90 e1       	ldi	r25, 0x10	; 16
		"Task3",      //테스크 이름
		80,                   //스택의 크기
		NULL,       // 테스크 매개 변수
		2,                     //테스크 우선 순위0.
		NULL                   //태스크 핸들
		);
    352a:	ce d6       	rcall	.+3484   	; 0x42c8 <xTaskCreate>
    352c:	20 e0       	ldi	r18, 0x00	; 0
    352e:	30 e0       	ldi	r19, 0x00	; 0
    3530:	40 e5       	ldi	r20, 0x50	; 80
    3532:	50 e0       	ldi	r21, 0x00	; 0
    3534:	61 e3       	ldi	r22, 0x31	; 49
    3536:	72 e0       	ldi	r23, 0x02	; 2
    3538:	8a e5       	ldi	r24, 0x5A	; 90
		#endif	

		
	
	vTaskStartScheduler();//스케줄러 실행 
    353a:	9b e1       	ldi	r25, 0x1B	; 27
    353c:	c5 d6       	rcall	.+3466   	; 0x42c8 <xTaskCreate>
	return 0;
}
    353e:	c2 d7       	rcall	.+3972   	; 0x44c4 <vTaskStartScheduler>
    3540:	80 e0       	ldi	r24, 0x00	; 0
    3542:	90 e0       	ldi	r25, 0x00	; 0
    3544:	df 91       	pop	r29
    3546:	cf 91       	pop	r28
    3548:	0f 91       	pop	r16
    354a:	ff 90       	pop	r15
    354c:	ef 90       	pop	r14
    354e:	df 90       	pop	r13
    3550:	cf 90       	pop	r12
    3552:	08 95       	ret

00003554 <_Z9fnCalTempf>:
	100, 101, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
120};

float fnCalTemp(float lfOneVolt)
{
    3554:	4f 92       	push	r4
    3556:	5f 92       	push	r5
    3558:	6f 92       	push	r6
    355a:	7f 92       	push	r7
    355c:	8f 92       	push	r8
    355e:	9f 92       	push	r9
    3560:	af 92       	push	r10
    3562:	bf 92       	push	r11
    3564:	cf 92       	push	r12
    3566:	df 92       	push	r13
    3568:	ef 92       	push	r14
    356a:	ff 92       	push	r15
    356c:	0f 93       	push	r16
    356e:	1f 93       	push	r17
    3570:	cf 93       	push	r28
    3572:	df 93       	push	r29
    3574:	cd b7       	in	r28, 0x3d	; 61
    3576:	de b7       	in	r29, 0x3e	; 62
    3578:	28 97       	sbiw	r28, 0x08	; 8
    357a:	0f b6       	in	r0, 0x3f	; 63
    357c:	f8 94       	cli
    357e:	de bf       	out	0x3e, r29	; 62
    3580:	0f be       	out	0x3f, r0	; 63
    3582:	cd bf       	out	0x3d, r28	; 61
    3584:	6b 01       	movw	r12, r22
    3586:	7c 01       	movw	r14, r24
	uint8_t dClass = 0;
	float lfCalTemp = 0;
	
	for( i=0; i<161; i++ )
	{
		if( lfOneVolt<pgm_read_float(&g_alfVolt[i]) )
    3588:	ee e0       	ldi	r30, 0x0E	; 14
    358a:	f8 e0       	ldi	r31, 0x08	; 8
    358c:	25 91       	lpm	r18, Z+
    358e:	35 91       	lpm	r19, Z+
    3590:	45 91       	lpm	r20, Z+
    3592:	54 91       	lpm	r21, Z
    3594:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <__cmpsf2>
    3598:	88 23       	and	r24, r24
    359a:	c4 f0       	brlt	.+48     	; 0x35cc <_Z9fnCalTempf+0x78>
    359c:	02 e1       	ldi	r16, 0x12	; 18
    359e:	18 e0       	ldi	r17, 0x08	; 8
{
	uint8_t i = 0;
	uint8_t dClass = 0;
	float lfCalTemp = 0;
	
	for( i=0; i<161; i++ )
    35a0:	21 e0       	ldi	r18, 0x01	; 1
    35a2:	29 83       	std	Y+1, r18	; 0x01
	{
		if( lfOneVolt<pgm_read_float(&g_alfVolt[i]) )
    35a4:	f8 01       	movw	r30, r16
    35a6:	65 91       	lpm	r22, Z+
    35a8:	75 91       	lpm	r23, Z+
    35aa:	85 91       	lpm	r24, Z+
    35ac:	94 91       	lpm	r25, Z
    35ae:	a7 01       	movw	r20, r14
    35b0:	96 01       	movw	r18, r12
    35b2:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <__gesf2>
    35b6:	18 16       	cp	r1, r24
    35b8:	54 f0       	brlt	.+20     	; 0x35ce <_Z9fnCalTempf+0x7a>
{
	uint8_t i = 0;
	uint8_t dClass = 0;
	float lfCalTemp = 0;
	
	for( i=0; i<161; i++ )
    35ba:	39 81       	ldd	r19, Y+1	; 0x01
    35bc:	3f 5f       	subi	r19, 0xFF	; 255
    35be:	39 83       	std	Y+1, r19	; 0x01
    35c0:	0c 5f       	subi	r16, 0xFC	; 252
    35c2:	1f 4f       	sbci	r17, 0xFF	; 255
    35c4:	31 3a       	cpi	r19, 0xA1	; 161
    35c6:	71 f7       	brne	.-36     	; 0x35a4 <_Z9fnCalTempf+0x50>
120};

float fnCalTemp(float lfOneVolt)
{
	uint8_t i = 0;
	uint8_t dClass = 0;
    35c8:	19 82       	std	Y+1, r1	; 0x01
    35ca:	01 c0       	rjmp	.+2      	; 0x35ce <_Z9fnCalTempf+0x7a>
	float lfCalTemp = 0;
	
	for( i=0; i<161; i++ )
    35cc:	19 82       	std	Y+1, r1	; 0x01
		{
			dClass = i;
			break;
		}
	}
	if (pgm_read_dword(&g_adTemp[dClass-1])<0 )
    35ce:	49 81       	ldd	r20, Y+1	; 0x01
    35d0:	a4 2f       	mov	r26, r20
    35d2:	b0 e0       	ldi	r27, 0x00	; 0
    35d4:	9d 01       	movw	r18, r26
    35d6:	21 50       	subi	r18, 0x01	; 1
    35d8:	31 09       	sbc	r19, r1
    35da:	f9 01       	movw	r30, r18
    35dc:	ee 0f       	add	r30, r30
    35de:	ff 1f       	adc	r31, r31
    35e0:	e4 53       	subi	r30, 0x34	; 52
    35e2:	f9 4f       	sbci	r31, 0xF9	; 249
    35e4:	45 91       	lpm	r20, Z+
    35e6:	55 91       	lpm	r21, Z+
    35e8:	65 91       	lpm	r22, Z+
    35ea:	74 91       	lpm	r23, Z
		//정답지: 32~40 간략화           //1도   상위 고정값 - 측정된 값    /1도 구간에서 저항 변환량
		lfCalTemp = pgm_read_dword(&g_adTemp[dClass-1]) + (1 * ( (pgm_read_float(&g_alfVolt[dClass])-lfOneVolt)/(pgm_read_float(&g_alfVolt[dClass])-pgm_read_float(&g_alfVolt[dClass-1])) ));
	}
	else
	{
		lfCalTemp = pgm_read_dword(&g_adTemp[dClass]) - (1 * ( (pgm_read_float(&g_alfVolt[dClass])-lfOneVolt)/(pgm_read_float(&g_alfVolt[dClass])-pgm_read_float(&g_alfVolt[dClass-1])) ));
    35ec:	fd 01       	movw	r30, r26
    35ee:	ee 0f       	add	r30, r30
    35f0:	ff 1f       	adc	r31, r31
    35f2:	e4 53       	subi	r30, 0x34	; 52
    35f4:	f9 4f       	sbci	r31, 0xF9	; 249
    35f6:	65 91       	lpm	r22, Z+
    35f8:	75 91       	lpm	r23, Z+
    35fa:	85 91       	lpm	r24, Z+
    35fc:	94 91       	lpm	r25, Z
    35fe:	ad 01       	movw	r20, r26
    3600:	44 0f       	add	r20, r20
    3602:	55 1f       	adc	r21, r21
    3604:	44 0f       	add	r20, r20
    3606:	55 1f       	adc	r21, r21
    3608:	42 5f       	subi	r20, 0xF2	; 242
    360a:	57 4f       	sbci	r21, 0xF7	; 247
    360c:	fa 01       	movw	r30, r20
    360e:	45 90       	lpm	r4, Z+
    3610:	55 90       	lpm	r5, Z+
    3612:	65 90       	lpm	r6, Z+
    3614:	74 90       	lpm	r7, Z
    3616:	fa 01       	movw	r30, r20
    3618:	85 90       	lpm	r8, Z+
    361a:	95 90       	lpm	r9, Z+
    361c:	a5 90       	lpm	r10, Z+
    361e:	b4 90       	lpm	r11, Z
    3620:	f9 01       	movw	r30, r18
    3622:	ee 0f       	add	r30, r30
    3624:	ff 1f       	adc	r31, r31
    3626:	ee 0f       	add	r30, r30
    3628:	ff 1f       	adc	r31, r31
    362a:	e2 5f       	subi	r30, 0xF2	; 242
    362c:	f7 4f       	sbci	r31, 0xF7	; 247
    362e:	25 91       	lpm	r18, Z+
    3630:	35 91       	lpm	r19, Z+
    3632:	45 91       	lpm	r20, Z+
    3634:	54 91       	lpm	r21, Z
    3636:	29 83       	std	Y+1, r18	; 0x01
    3638:	3a 83       	std	Y+2, r19	; 0x02
    363a:	4b 83       	std	Y+3, r20	; 0x03
    363c:	5c 83       	std	Y+4, r21	; 0x04
	}
	return lfCalTemp;
    363e:	0e 94 da 26 	call	0x4db4	; 0x4db4 <__floatunsisf>
    3642:	6d 83       	std	Y+5, r22	; 0x05
    3644:	7e 83       	std	Y+6, r23	; 0x06
    3646:	8f 83       	std	Y+7, r24	; 0x07
    3648:	98 87       	std	Y+8, r25	; 0x08
    364a:	a7 01       	movw	r20, r14
    364c:	96 01       	movw	r18, r12
    364e:	c3 01       	movw	r24, r6
    3650:	b2 01       	movw	r22, r4
    3652:	0e 94 d8 25 	call	0x4bb0	; 0x4bb0 <__subsf3>
    3656:	6b 01       	movw	r12, r22
    3658:	7c 01       	movw	r14, r24
    365a:	29 81       	ldd	r18, Y+1	; 0x01
    365c:	3a 81       	ldd	r19, Y+2	; 0x02
    365e:	4b 81       	ldd	r20, Y+3	; 0x03
    3660:	5c 81       	ldd	r21, Y+4	; 0x04
    3662:	c5 01       	movw	r24, r10
    3664:	b4 01       	movw	r22, r8
    3666:	0e 94 d8 25 	call	0x4bb0	; 0x4bb0 <__subsf3>
    366a:	9b 01       	movw	r18, r22
    366c:	ac 01       	movw	r20, r24
    366e:	c7 01       	movw	r24, r14
    3670:	b6 01       	movw	r22, r12
    3672:	0e 94 41 26 	call	0x4c82	; 0x4c82 <__divsf3>
    3676:	9b 01       	movw	r18, r22
    3678:	ac 01       	movw	r20, r24
    367a:	6d 81       	ldd	r22, Y+5	; 0x05
    367c:	7e 81       	ldd	r23, Y+6	; 0x06
    367e:	8f 81       	ldd	r24, Y+7	; 0x07
    3680:	98 85       	ldd	r25, Y+8	; 0x08
    3682:	0e 94 d8 25 	call	0x4bb0	; 0x4bb0 <__subsf3>
}
    3686:	28 96       	adiw	r28, 0x08	; 8
    3688:	0f b6       	in	r0, 0x3f	; 63
    368a:	f8 94       	cli
    368c:	de bf       	out	0x3e, r29	; 62
    368e:	0f be       	out	0x3f, r0	; 63
    3690:	cd bf       	out	0x3d, r28	; 61
    3692:	df 91       	pop	r29
    3694:	cf 91       	pop	r28
    3696:	1f 91       	pop	r17
    3698:	0f 91       	pop	r16
    369a:	ff 90       	pop	r15
    369c:	ef 90       	pop	r14
    369e:	df 90       	pop	r13
    36a0:	cf 90       	pop	r12
    36a2:	bf 90       	pop	r11
    36a4:	af 90       	pop	r10
    36a6:	9f 90       	pop	r9
    36a8:	8f 90       	pop	r8
    36aa:	7f 90       	pop	r7
    36ac:	6f 90       	pop	r6
    36ae:	5f 90       	pop	r5
    36b0:	4f 90       	pop	r4
    36b2:	08 95       	ret

000036b4 <_ZL5proc3Pv>:
static void proc3(void* pvParam)
{
    36b4:	cf 93       	push	r28
    36b6:	df 93       	push	r29
    36b8:	00 d0       	rcall	.+0      	; 0x36ba <_ZL5proc3Pv+0x6>
    36ba:	00 d0       	rcall	.+0      	; 0x36bc <_ZL5proc3Pv+0x8>
    36bc:	cd b7       	in	r28, 0x3d	; 61
    36be:	de b7       	in	r29, 0x3e	; 62
	DFRobotHighTemperature PT100(5.000);
    36c0:	40 e0       	ldi	r20, 0x00	; 0
    36c2:	50 e0       	ldi	r21, 0x00	; 0
    36c4:	60 ea       	ldi	r22, 0xA0	; 160
    36c6:	70 e4       	ldi	r23, 0x40	; 64
    36c8:	ce 01       	movw	r24, r28
    36ca:	01 96       	adiw	r24, 0x01	; 1
    36cc:	0e 94 dd 06 	call	0xdba	; 0xdba <_ZN22DFRobotHighTemperatureC1Ef>
	uint8_t cnt = 0;
	uint8_t seq = 0;
	uint8_t cnt1 = 0;
	uint8_t cnt2 = 0;
    36d0:	31 2c       	mov	r3, r1
static void proc3(void* pvParam)
{
	DFRobotHighTemperature PT100(5.000);
	uint8_t cnt = 0;
	uint8_t seq = 0;
	uint8_t cnt1 = 0;
    36d2:	c1 2c       	mov	r12, r1
}
static void proc3(void* pvParam)
{
	DFRobotHighTemperature PT100(5.000);
	uint8_t cnt = 0;
	uint8_t seq = 0;
    36d4:	10 e0       	ldi	r17, 0x00	; 0
	return lfCalTemp;
}
static void proc3(void* pvParam)
{
	DFRobotHighTemperature PT100(5.000);
	uint8_t cnt = 0;
    36d6:	00 e0       	ldi	r16, 0x00	; 0
	uint8_t seq = 0;
	uint8_t cnt1 = 0;
	uint8_t cnt2 = 0;
	while(1)
	{
		adc->Start_Device(seq % 3);
    36d8:	0f 2e       	mov	r0, r31
    36da:	fb ea       	ldi	r31, 0xAB	; 171
    36dc:	df 2e       	mov	r13, r31
    36de:	f0 2d       	mov	r31, r0
			cnt1++;
		}
		else if(channel == 2)
		{
			uint16_t read = ADCL+((uint16_t)ADCH << 8);
			Adc_channels[channel] += read;
    36e0:	0f 2e       	mov	r0, r31
    36e2:	fe ef       	ldi	r31, 0xFE	; 254
    36e4:	ef 2e       	mov	r14, r31
    36e6:	f2 e0       	ldi	r31, 0x02	; 2
    36e8:	ff 2e       	mov	r15, r31
    36ea:	f0 2d       	mov	r31, r0
		}
		else if(cnt1 >= ADC_LOOP)
		{
			unsigned int temp = Adc_channels[1] / ADC_LOOP;
			//int temp1 = PT100.readTemperature(temp);
			mem4[LOCAL_PT100_SENSOR] = temp - 5;
    36ec:	0f 2e       	mov	r0, r31
    36ee:	f2 ea       	ldi	r31, 0xA2	; 162
    36f0:	8f 2e       	mov	r8, r31
    36f2:	f3 e0       	ldi	r31, 0x03	; 3
    36f4:	9f 2e       	mov	r9, r31
    36f6:	f0 2d       	mov	r31, r0
			cnt2++;
		}
		
		if(cnt >= ADC_LOOP)
		{
			mem4[LOCAL_TEMP_SENSOR] = Adc_channels[0] / ADC_LOOP;
    36f8:	0f 2e       	mov	r0, r31
    36fa:	f0 ea       	ldi	r31, 0xA0	; 160
    36fc:	af 2e       	mov	r10, r31
    36fe:	f3 e0       	ldi	r31, 0x03	; 3
    3700:	bf 2e       	mov	r11, r31
    3702:	f0 2d       	mov	r31, r0
	uint8_t seq = 0;
	uint8_t cnt1 = 0;
	uint8_t cnt2 = 0;
	while(1)
	{
		adc->Start_Device(seq % 3);
    3704:	a0 91 eb 03 	lds	r26, 0x03EB	; 0x8003eb <adc>
    3708:	b0 91 ec 03 	lds	r27, 0x03EC	; 0x8003ec <adc+0x1>
    370c:	1d 9d       	mul	r17, r13
    370e:	91 2d       	mov	r25, r1
    3710:	11 24       	eor	r1, r1
    3712:	96 95       	lsr	r25
    3714:	89 2f       	mov	r24, r25
    3716:	88 0f       	add	r24, r24
    3718:	98 0f       	add	r25, r24
    371a:	61 2f       	mov	r22, r17
    371c:	69 1b       	sub	r22, r25
    371e:	ed 91       	ld	r30, X+
    3720:	fc 91       	ld	r31, X
    3722:	11 97       	sbiw	r26, 0x01	; 1
    3724:	02 84       	ldd	r0, Z+10	; 0x0a
    3726:	f3 85       	ldd	r31, Z+11	; 0x0b
    3728:	e0 2d       	mov	r30, r0
    372a:	cd 01       	movw	r24, r26
    372c:	09 95       	icall
		uint8_t channel = ADMUX & 0x1f; 
    372e:	87 b1       	in	r24, 0x07	; 7
    3730:	8f 71       	andi	r24, 0x1F	; 31
    3732:	78 2e       	mov	r7, r24
		vTaskDelay(10);
    3734:	8a e0       	ldi	r24, 0x0A	; 10
    3736:	90 e0       	ldi	r25, 0x00	; 0
    3738:	0e 94 c0 23 	call	0x4780	; 0x4780 <vTaskDelay>
		if(channel == 0)
    373c:	71 10       	cpse	r7, r1
    373e:	2d c0       	rjmp	.+90     	; 0x379a <_ZL5proc3Pv+0xe6>
		{
			uint16_t read = ADCL+((uint16_t)ADCH << 8);
    3740:	84 b1       	in	r24, 0x04	; 4
    3742:	65 b1       	in	r22, 0x05	; 5
			float temp = read * 4.8828125;
			Adc_channels[channel] = Adc_channels[channel] + (temp / 10);
    3744:	70 e0       	ldi	r23, 0x00	; 0
    3746:	76 2f       	mov	r23, r22
    3748:	66 27       	eor	r22, r22
    374a:	68 0f       	add	r22, r24
    374c:	71 1d       	adc	r23, r1
    374e:	80 e0       	ldi	r24, 0x00	; 0
    3750:	90 e0       	ldi	r25, 0x00	; 0
    3752:	0e 94 da 26 	call	0x4db4	; 0x4db4 <__floatunsisf>
    3756:	20 e0       	ldi	r18, 0x00	; 0
    3758:	30 e4       	ldi	r19, 0x40	; 64
    375a:	4c e9       	ldi	r20, 0x9C	; 156
    375c:	50 e4       	ldi	r21, 0x40	; 64
    375e:	0e 94 90 27 	call	0x4f20	; 0x4f20 <__mulsf3>
    3762:	20 e0       	ldi	r18, 0x00	; 0
    3764:	30 e0       	ldi	r19, 0x00	; 0
    3766:	40 e2       	ldi	r20, 0x20	; 32
    3768:	51 e4       	ldi	r21, 0x41	; 65
    376a:	0e 94 41 26 	call	0x4c82	; 0x4c82 <__divsf3>
    376e:	2b 01       	movw	r4, r22
    3770:	3c 01       	movw	r6, r24
    3772:	f7 01       	movw	r30, r14
    3774:	60 81       	ld	r22, Z
    3776:	71 81       	ldd	r23, Z+1	; 0x01
    3778:	80 e0       	ldi	r24, 0x00	; 0
    377a:	90 e0       	ldi	r25, 0x00	; 0
    377c:	0e 94 da 26 	call	0x4db4	; 0x4db4 <__floatunsisf>
    3780:	9b 01       	movw	r18, r22
    3782:	ac 01       	movw	r20, r24
    3784:	c3 01       	movw	r24, r6
    3786:	b2 01       	movw	r22, r4
    3788:	0e 94 d9 25 	call	0x4bb2	; 0x4bb2 <__addsf3>
    378c:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__fixunssfsi>
    3790:	f7 01       	movw	r30, r14
    3792:	71 83       	std	Z+1, r23	; 0x01
    3794:	60 83       	st	Z, r22
			cnt++;
    3796:	0f 5f       	subi	r16, 0xFF	; 255
    3798:	2a c0       	rjmp	.+84     	; 0x37ee <_ZL5proc3Pv+0x13a>
		}
		else if(channel == 1)
    379a:	f1 e0       	ldi	r31, 0x01	; 1
    379c:	7f 12       	cpse	r7, r31
    379e:	14 c0       	rjmp	.+40     	; 0x37c8 <_ZL5proc3Pv+0x114>
		{
			uint16_t read = ADCL+((uint16_t)ADCH << 8);
    37a0:	84 b1       	in	r24, 0x04	; 4
    37a2:	65 b1       	in	r22, 0x05	; 5
			Adc_channels[channel] +=PT100.readTemperature(read);
    37a4:	70 e0       	ldi	r23, 0x00	; 0
    37a6:	76 2f       	mov	r23, r22
    37a8:	66 27       	eor	r22, r22
    37aa:	68 0f       	add	r22, r24
    37ac:	71 1d       	adc	r23, r1
    37ae:	ce 01       	movw	r24, r28
    37b0:	01 96       	adiw	r24, 0x01	; 1
    37b2:	0e 94 40 07 	call	0xe80	; 0xe80 <_ZN22DFRobotHighTemperature15readTemperatureEj>
    37b6:	f7 01       	movw	r30, r14
    37b8:	22 81       	ldd	r18, Z+2	; 0x02
    37ba:	33 81       	ldd	r19, Z+3	; 0x03
    37bc:	82 0f       	add	r24, r18
    37be:	93 1f       	adc	r25, r19
    37c0:	93 83       	std	Z+3, r25	; 0x03
    37c2:	82 83       	std	Z+2, r24	; 0x02
			//mem4[LOCAL_PT100_SENSOR] = read;
			cnt1++;
    37c4:	c3 94       	inc	r12
    37c6:	13 c0       	rjmp	.+38     	; 0x37ee <_ZL5proc3Pv+0x13a>
		}
		else if(channel == 2)
    37c8:	f2 e0       	ldi	r31, 0x02	; 2
    37ca:	7f 12       	cpse	r7, r31
    37cc:	10 c0       	rjmp	.+32     	; 0x37ee <_ZL5proc3Pv+0x13a>
		{
			uint16_t read = ADCL+((uint16_t)ADCH << 8);
    37ce:	84 b1       	in	r24, 0x04	; 4
    37d0:	95 b1       	in	r25, 0x05	; 5
			Adc_channels[channel] += read;
    37d2:	f7 01       	movw	r30, r14
    37d4:	24 81       	ldd	r18, Z+4	; 0x04
    37d6:	35 81       	ldd	r19, Z+5	; 0x05
    37d8:	28 0f       	add	r18, r24
    37da:	31 1d       	adc	r19, r1
    37dc:	89 2f       	mov	r24, r25
    37de:	90 e0       	ldi	r25, 0x00	; 0
    37e0:	98 2f       	mov	r25, r24
    37e2:	88 27       	eor	r24, r24
    37e4:	82 0f       	add	r24, r18
    37e6:	93 1f       	adc	r25, r19
    37e8:	95 83       	std	Z+5, r25	; 0x05
    37ea:	84 83       	std	Z+4, r24	; 0x04
			cnt2++;
    37ec:	33 94       	inc	r3
		}
		
		if(cnt >= ADC_LOOP)
    37ee:	0e 31       	cpi	r16, 0x1E	; 30
    37f0:	a8 f0       	brcs	.+42     	; 0x381c <_ZL5proc3Pv+0x168>
		{
			mem4[LOCAL_TEMP_SENSOR] = Adc_channels[0] / ADC_LOOP;
    37f2:	f7 01       	movw	r30, r14
    37f4:	20 81       	ld	r18, Z
    37f6:	31 81       	ldd	r19, Z+1	; 0x01
    37f8:	a9 e8       	ldi	r26, 0x89	; 137
    37fa:	b8 e8       	ldi	r27, 0x88	; 136
    37fc:	0e 94 15 28 	call	0x502a	; 0x502a <__umulhisi3>
    3800:	92 95       	swap	r25
    3802:	82 95       	swap	r24
    3804:	8f 70       	andi	r24, 0x0F	; 15
    3806:	89 27       	eor	r24, r25
    3808:	9f 70       	andi	r25, 0x0F	; 15
    380a:	89 27       	eor	r24, r25
    380c:	f5 01       	movw	r30, r10
    380e:	91 83       	std	Z+1, r25	; 0x01
    3810:	80 83       	st	Z, r24
			Adc_channels[0] = 0;
    3812:	f7 01       	movw	r30, r14
    3814:	11 82       	std	Z+1, r1	; 0x01
    3816:	10 82       	st	Z, r1
			cnt = 0;
    3818:	00 e0       	ldi	r16, 0x00	; 0
    381a:	45 c0       	rjmp	.+138    	; 0x38a6 <_ZL5proc3Pv+0x1f2>
		}
		else if(cnt1 >= ADC_LOOP)
    381c:	fd e1       	ldi	r31, 0x1D	; 29
    381e:	fc 15       	cp	r31, r12
    3820:	b0 f4       	brcc	.+44     	; 0x384e <_ZL5proc3Pv+0x19a>
		{
			unsigned int temp = Adc_channels[1] / ADC_LOOP;
			//int temp1 = PT100.readTemperature(temp);
			mem4[LOCAL_PT100_SENSOR] = temp - 5;
    3822:	f7 01       	movw	r30, r14
    3824:	22 81       	ldd	r18, Z+2	; 0x02
    3826:	33 81       	ldd	r19, Z+3	; 0x03
    3828:	a9 e8       	ldi	r26, 0x89	; 137
    382a:	b8 e8       	ldi	r27, 0x88	; 136
    382c:	0e 94 15 28 	call	0x502a	; 0x502a <__umulhisi3>
    3830:	92 95       	swap	r25
    3832:	82 95       	swap	r24
    3834:	8f 70       	andi	r24, 0x0F	; 15
    3836:	89 27       	eor	r24, r25
    3838:	9f 70       	andi	r25, 0x0F	; 15
    383a:	89 27       	eor	r24, r25
    383c:	05 97       	sbiw	r24, 0x05	; 5
    383e:	f4 01       	movw	r30, r8
    3840:	91 83       	std	Z+1, r25	; 0x01
    3842:	80 83       	st	Z, r24
			Adc_channels[1] = 0;
    3844:	f7 01       	movw	r30, r14
    3846:	13 82       	std	Z+3, r1	; 0x03
    3848:	12 82       	std	Z+2, r1	; 0x02
			cnt1 = 0;
    384a:	c1 2c       	mov	r12, r1
    384c:	2c c0       	rjmp	.+88     	; 0x38a6 <_ZL5proc3Pv+0x1f2>
		}
		else if(cnt2 >= ADC_LOOP)
    384e:	fd e1       	ldi	r31, 0x1D	; 29
    3850:	f3 15       	cp	r31, r3
    3852:	48 f5       	brcc	.+82     	; 0x38a6 <_ZL5proc3Pv+0x1f2>
		{
			float vin = (Adc_channels[2] / ADC_LOOP )* 0.004887;
			float temp = fnCalTemp(vin);
    3854:	f7 01       	movw	r30, r14
    3856:	24 81       	ldd	r18, Z+4	; 0x04
    3858:	35 81       	ldd	r19, Z+5	; 0x05
    385a:	a9 e8       	ldi	r26, 0x89	; 137
    385c:	b8 e8       	ldi	r27, 0x88	; 136
    385e:	0e 94 15 28 	call	0x502a	; 0x502a <__umulhisi3>
    3862:	92 95       	swap	r25
    3864:	82 95       	swap	r24
    3866:	8f 70       	andi	r24, 0x0F	; 15
    3868:	89 27       	eor	r24, r25
    386a:	9f 70       	andi	r25, 0x0F	; 15
    386c:	89 27       	eor	r24, r25
    386e:	bc 01       	movw	r22, r24
    3870:	80 e0       	ldi	r24, 0x00	; 0
    3872:	90 e0       	ldi	r25, 0x00	; 0
    3874:	0e 94 da 26 	call	0x4db4	; 0x4db4 <__floatunsisf>
    3878:	21 e2       	ldi	r18, 0x21	; 33
    387a:	33 e2       	ldi	r19, 0x23	; 35
    387c:	40 ea       	ldi	r20, 0xA0	; 160
    387e:	5b e3       	ldi	r21, 0x3B	; 59
    3880:	0e 94 90 27 	call	0x4f20	; 0x4f20 <__mulsf3>
    3884:	67 de       	rcall	.-818    	; 0x3554 <_Z9fnCalTempf>
			mem4[LOCAL_NTC_SENSOR] = temp * 10;
    3886:	20 e0       	ldi	r18, 0x00	; 0
    3888:	30 e0       	ldi	r19, 0x00	; 0
    388a:	40 e2       	ldi	r20, 0x20	; 32
    388c:	51 e4       	ldi	r21, 0x41	; 65
    388e:	0e 94 90 27 	call	0x4f20	; 0x4f20 <__mulsf3>
    3892:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <__fixsfsi>
    3896:	e4 ea       	ldi	r30, 0xA4	; 164
    3898:	f3 e0       	ldi	r31, 0x03	; 3
    389a:	71 83       	std	Z+1, r23	; 0x01
    389c:	60 83       	st	Z, r22
			Adc_channels[2] = 0;
    389e:	f7 01       	movw	r30, r14
    38a0:	15 82       	std	Z+5, r1	; 0x05
    38a2:	14 82       	std	Z+4, r1	; 0x04
			
			cnt2 = 0;
    38a4:	31 2c       	mov	r3, r1
		}
		seq++;
    38a6:	1f 5f       	subi	r17, 0xFF	; 255
	DFRobotHighTemperature PT100(5.000);
	uint8_t cnt = 0;
	uint8_t seq = 0;
	uint8_t cnt1 = 0;
	uint8_t cnt2 = 0;
	while(1)
    38a8:	2d cf       	rjmp	.-422    	; 0x3704 <_ZL5proc3Pv+0x50>

000038aa <vApplicationStackOverflowHook>:
		}
	}
	
}
void vApplicationStackOverflowHook( TaskHandle_t xTask, signed char *pcTaskName )
{
    38aa:	08 95       	ret

000038ac <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    38ac:	cf 93       	push	r28
    38ae:	df 93       	push	r29
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
    38b0:	ec 01       	movw	r28, r24
	{
		if( pucAlignedHeap == NULL )
    38b2:	30 d6       	rcall	.+3168   	; 0x4514 <vTaskSuspendAll>
    38b4:	80 91 f1 03 	lds	r24, 0x03F1	; 0x8003f1 <pucAlignedHeap.2069>
    38b8:	90 91 f2 03 	lds	r25, 0x03F2	; 0x8003f2 <pucAlignedHeap.2069+0x1>
    38bc:	89 2b       	or	r24, r25
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    38be:	31 f4       	brne	.+12     	; 0x38cc <pvPortMalloc+0x20>
    38c0:	86 ef       	ldi	r24, 0xF6	; 246
    38c2:	93 e0       	ldi	r25, 0x03	; 3
    38c4:	90 93 f2 03 	sts	0x03F2, r25	; 0x8003f2 <pucAlignedHeap.2069+0x1>
    38c8:	80 93 f1 03 	sts	0x03F1, r24	; 0x8003f1 <pucAlignedHeap.2069>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    38cc:	20 91 f3 03 	lds	r18, 0x03F3	; 0x8003f3 <xNextFreeByte>
    38d0:	30 91 f4 03 	lds	r19, 0x03F4	; 0x8003f4 <xNextFreeByte+0x1>
    38d4:	c9 01       	movw	r24, r18
    38d6:	8c 0f       	add	r24, r28
    38d8:	9d 1f       	adc	r25, r29
    38da:	83 3c       	cpi	r24, 0xC3	; 195
    38dc:	49 e0       	ldi	r20, 0x09	; 9
    38de:	94 07       	cpc	r25, r20
    38e0:	70 f4       	brcc	.+28     	; 0x38fe <pvPortMalloc+0x52>
    38e2:	28 17       	cp	r18, r24
    38e4:	39 07       	cpc	r19, r25
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    38e6:	70 f4       	brcc	.+28     	; 0x3904 <pvPortMalloc+0x58>
    38e8:	c0 91 f1 03 	lds	r28, 0x03F1	; 0x8003f1 <pucAlignedHeap.2069>
    38ec:	d0 91 f2 03 	lds	r29, 0x03F2	; 0x8003f2 <pucAlignedHeap.2069+0x1>
    38f0:	c2 0f       	add	r28, r18
			xNextFreeByte += xWantedSize;
    38f2:	d3 1f       	adc	r29, r19
    38f4:	90 93 f4 03 	sts	0x03F4, r25	; 0x8003f4 <xNextFreeByte+0x1>
    38f8:	80 93 f3 03 	sts	0x03F3, r24	; 0x8003f3 <xNextFreeByte>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
    38fc:	05 c0       	rjmp	.+10     	; 0x3908 <pvPortMalloc+0x5c>
    38fe:	c0 e0       	ldi	r28, 0x00	; 0
    3900:	d0 e0       	ldi	r29, 0x00	; 0
    3902:	02 c0       	rjmp	.+4      	; 0x3908 <pvPortMalloc+0x5c>
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    3904:	c0 e0       	ldi	r28, 0x00	; 0
    3906:	d0 e0       	ldi	r29, 0x00	; 0
		}
	}
	#endif

	return pvReturn;
}
    3908:	c2 d6       	rcall	.+3460   	; 0x468e <xTaskResumeAll>
    390a:	ce 01       	movw	r24, r28
    390c:	df 91       	pop	r29
    390e:	cf 91       	pop	r28
    3910:	08 95       	ret

00003912 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    3912:	08 95       	ret

00003914 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    3914:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    3916:	03 96       	adiw	r24, 0x03	; 3
    3918:	92 83       	std	Z+2, r25	; 0x02
    391a:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    391c:	2f ef       	ldi	r18, 0xFF	; 255
    391e:	3f ef       	ldi	r19, 0xFF	; 255
    3920:	34 83       	std	Z+4, r19	; 0x04
    3922:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    3924:	96 83       	std	Z+6, r25	; 0x06
    3926:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    3928:	90 87       	std	Z+8, r25	; 0x08
    392a:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    392c:	10 82       	st	Z, r1
    392e:	08 95       	ret

00003930 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    3930:	fc 01       	movw	r30, r24
    3932:	11 86       	std	Z+9, r1	; 0x09
    3934:	10 86       	std	Z+8, r1	; 0x08
    3936:	08 95       	ret

00003938 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    3938:	cf 93       	push	r28
    393a:	df 93       	push	r29
    393c:	9c 01       	movw	r18, r24
    393e:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    3940:	dc 01       	movw	r26, r24
    3942:	11 96       	adiw	r26, 0x01	; 1
    3944:	cd 91       	ld	r28, X+
    3946:	dc 91       	ld	r29, X
    3948:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    394a:	d3 83       	std	Z+3, r29	; 0x03
    394c:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    394e:	8c 81       	ldd	r24, Y+4	; 0x04
    3950:	9d 81       	ldd	r25, Y+5	; 0x05
    3952:	95 83       	std	Z+5, r25	; 0x05
    3954:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    3956:	8c 81       	ldd	r24, Y+4	; 0x04
    3958:	9d 81       	ldd	r25, Y+5	; 0x05
    395a:	dc 01       	movw	r26, r24
    395c:	13 96       	adiw	r26, 0x03	; 3
    395e:	7c 93       	st	X, r23
    3960:	6e 93       	st	-X, r22
    3962:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
    3964:	7d 83       	std	Y+5, r23	; 0x05
    3966:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    3968:	31 87       	std	Z+9, r19	; 0x09
    396a:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    396c:	f9 01       	movw	r30, r18
    396e:	80 81       	ld	r24, Z
    3970:	8f 5f       	subi	r24, 0xFF	; 255
    3972:	80 83       	st	Z, r24
}
    3974:	df 91       	pop	r29
    3976:	cf 91       	pop	r28
    3978:	08 95       	ret

0000397a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    397a:	cf 93       	push	r28
    397c:	df 93       	push	r29
    397e:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    3980:	48 81       	ld	r20, Y
    3982:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    3984:	4f 3f       	cpi	r20, 0xFF	; 255
    3986:	2f ef       	ldi	r18, 0xFF	; 255
    3988:	52 07       	cpc	r21, r18
    398a:	21 f4       	brne	.+8      	; 0x3994 <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    398c:	fc 01       	movw	r30, r24
    398e:	a7 81       	ldd	r26, Z+7	; 0x07
    3990:	b0 85       	ldd	r27, Z+8	; 0x08
    3992:	0d c0       	rjmp	.+26     	; 0x39ae <vListInsert+0x34>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    3994:	dc 01       	movw	r26, r24
    3996:	13 96       	adiw	r26, 0x03	; 3
    3998:	01 c0       	rjmp	.+2      	; 0x399c <vListInsert+0x22>
    399a:	df 01       	movw	r26, r30
    399c:	12 96       	adiw	r26, 0x02	; 2
    399e:	ed 91       	ld	r30, X+
    39a0:	fc 91       	ld	r31, X
    39a2:	13 97       	sbiw	r26, 0x03	; 3
    39a4:	20 81       	ld	r18, Z
    39a6:	31 81       	ldd	r19, Z+1	; 0x01
    39a8:	42 17       	cp	r20, r18
    39aa:	53 07       	cpc	r21, r19
    39ac:	b0 f7       	brcc	.-20     	; 0x399a <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    39ae:	12 96       	adiw	r26, 0x02	; 2
    39b0:	ed 91       	ld	r30, X+
    39b2:	fc 91       	ld	r31, X
    39b4:	13 97       	sbiw	r26, 0x03	; 3
    39b6:	fb 83       	std	Y+3, r31	; 0x03
    39b8:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    39ba:	d5 83       	std	Z+5, r29	; 0x05
    39bc:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    39be:	bd 83       	std	Y+5, r27	; 0x05
    39c0:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
    39c2:	13 96       	adiw	r26, 0x03	; 3
    39c4:	dc 93       	st	X, r29
    39c6:	ce 93       	st	-X, r28
    39c8:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    39ca:	99 87       	std	Y+9, r25	; 0x09
    39cc:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    39ce:	fc 01       	movw	r30, r24
    39d0:	20 81       	ld	r18, Z
    39d2:	2f 5f       	subi	r18, 0xFF	; 255
    39d4:	20 83       	st	Z, r18
}
    39d6:	df 91       	pop	r29
    39d8:	cf 91       	pop	r28
    39da:	08 95       	ret

000039dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    39dc:	cf 93       	push	r28
    39de:	df 93       	push	r29
    39e0:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    39e2:	a0 85       	ldd	r26, Z+8	; 0x08
    39e4:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    39e6:	c2 81       	ldd	r28, Z+2	; 0x02
    39e8:	d3 81       	ldd	r29, Z+3	; 0x03
    39ea:	84 81       	ldd	r24, Z+4	; 0x04
    39ec:	95 81       	ldd	r25, Z+5	; 0x05
    39ee:	9d 83       	std	Y+5, r25	; 0x05
    39f0:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    39f2:	c4 81       	ldd	r28, Z+4	; 0x04
    39f4:	d5 81       	ldd	r29, Z+5	; 0x05
    39f6:	82 81       	ldd	r24, Z+2	; 0x02
    39f8:	93 81       	ldd	r25, Z+3	; 0x03
    39fa:	9b 83       	std	Y+3, r25	; 0x03
    39fc:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    39fe:	11 96       	adiw	r26, 0x01	; 1
    3a00:	8d 91       	ld	r24, X+
    3a02:	9c 91       	ld	r25, X
    3a04:	12 97       	sbiw	r26, 0x02	; 2
    3a06:	e8 17       	cp	r30, r24
    3a08:	f9 07       	cpc	r31, r25
    3a0a:	31 f4       	brne	.+12     	; 0x3a18 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    3a0c:	84 81       	ldd	r24, Z+4	; 0x04
    3a0e:	95 81       	ldd	r25, Z+5	; 0x05
    3a10:	12 96       	adiw	r26, 0x02	; 2
    3a12:	9c 93       	st	X, r25
    3a14:	8e 93       	st	-X, r24
    3a16:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    3a18:	11 86       	std	Z+9, r1	; 0x09
    3a1a:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    3a1c:	8c 91       	ld	r24, X
    3a1e:	81 50       	subi	r24, 0x01	; 1
    3a20:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
    3a22:	df 91       	pop	r29
    3a24:	cf 91       	pop	r28
    3a26:	08 95       	ret

00003a28 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    3a28:	31 e1       	ldi	r19, 0x11	; 17
    3a2a:	fc 01       	movw	r30, r24
    3a2c:	30 83       	st	Z, r19
    3a2e:	31 97       	sbiw	r30, 0x01	; 1
    3a30:	22 e2       	ldi	r18, 0x22	; 34
    3a32:	20 83       	st	Z, r18
    3a34:	31 97       	sbiw	r30, 0x01	; 1
    3a36:	a3 e3       	ldi	r26, 0x33	; 51
    3a38:	a0 83       	st	Z, r26
    3a3a:	31 97       	sbiw	r30, 0x01	; 1
    3a3c:	60 83       	st	Z, r22
    3a3e:	31 97       	sbiw	r30, 0x01	; 1
    3a40:	70 83       	st	Z, r23
    3a42:	31 97       	sbiw	r30, 0x01	; 1
    3a44:	10 82       	st	Z, r1
    3a46:	31 97       	sbiw	r30, 0x01	; 1
    3a48:	60 e8       	ldi	r22, 0x80	; 128
    3a4a:	60 83       	st	Z, r22
    3a4c:	31 97       	sbiw	r30, 0x01	; 1
    3a4e:	10 82       	st	Z, r1
    3a50:	31 97       	sbiw	r30, 0x01	; 1
    3a52:	62 e0       	ldi	r22, 0x02	; 2
    3a54:	60 83       	st	Z, r22
    3a56:	31 97       	sbiw	r30, 0x01	; 1
    3a58:	63 e0       	ldi	r22, 0x03	; 3
    3a5a:	60 83       	st	Z, r22
    3a5c:	31 97       	sbiw	r30, 0x01	; 1
    3a5e:	64 e0       	ldi	r22, 0x04	; 4
    3a60:	60 83       	st	Z, r22
    3a62:	31 97       	sbiw	r30, 0x01	; 1
    3a64:	65 e0       	ldi	r22, 0x05	; 5
    3a66:	60 83       	st	Z, r22
    3a68:	31 97       	sbiw	r30, 0x01	; 1
    3a6a:	66 e0       	ldi	r22, 0x06	; 6
    3a6c:	60 83       	st	Z, r22
    3a6e:	31 97       	sbiw	r30, 0x01	; 1
    3a70:	67 e0       	ldi	r22, 0x07	; 7
    3a72:	60 83       	st	Z, r22
    3a74:	31 97       	sbiw	r30, 0x01	; 1
    3a76:	68 e0       	ldi	r22, 0x08	; 8
    3a78:	60 83       	st	Z, r22
    3a7a:	31 97       	sbiw	r30, 0x01	; 1
    3a7c:	69 e0       	ldi	r22, 0x09	; 9
    3a7e:	60 83       	st	Z, r22
    3a80:	31 97       	sbiw	r30, 0x01	; 1
    3a82:	60 e1       	ldi	r22, 0x10	; 16
    3a84:	60 83       	st	Z, r22
    3a86:	31 97       	sbiw	r30, 0x01	; 1
    3a88:	30 83       	st	Z, r19
    3a8a:	31 97       	sbiw	r30, 0x01	; 1
    3a8c:	32 e1       	ldi	r19, 0x12	; 18
    3a8e:	30 83       	st	Z, r19
    3a90:	31 97       	sbiw	r30, 0x01	; 1
    3a92:	33 e1       	ldi	r19, 0x13	; 19
    3a94:	30 83       	st	Z, r19
    3a96:	31 97       	sbiw	r30, 0x01	; 1
    3a98:	34 e1       	ldi	r19, 0x14	; 20
    3a9a:	30 83       	st	Z, r19
    3a9c:	31 97       	sbiw	r30, 0x01	; 1
    3a9e:	35 e1       	ldi	r19, 0x15	; 21
    3aa0:	30 83       	st	Z, r19
    3aa2:	31 97       	sbiw	r30, 0x01	; 1
    3aa4:	36 e1       	ldi	r19, 0x16	; 22
    3aa6:	30 83       	st	Z, r19
    3aa8:	31 97       	sbiw	r30, 0x01	; 1
    3aaa:	37 e1       	ldi	r19, 0x17	; 23
    3aac:	30 83       	st	Z, r19
    3aae:	31 97       	sbiw	r30, 0x01	; 1
    3ab0:	38 e1       	ldi	r19, 0x18	; 24
    3ab2:	30 83       	st	Z, r19
    3ab4:	31 97       	sbiw	r30, 0x01	; 1
    3ab6:	39 e1       	ldi	r19, 0x19	; 25
    3ab8:	30 83       	st	Z, r19
    3aba:	31 97       	sbiw	r30, 0x01	; 1
    3abc:	30 e2       	ldi	r19, 0x20	; 32
    3abe:	30 83       	st	Z, r19
    3ac0:	31 97       	sbiw	r30, 0x01	; 1
    3ac2:	31 e2       	ldi	r19, 0x21	; 33
    3ac4:	30 83       	st	Z, r19
    3ac6:	31 97       	sbiw	r30, 0x01	; 1
    3ac8:	20 83       	st	Z, r18
    3aca:	31 97       	sbiw	r30, 0x01	; 1
    3acc:	23 e2       	ldi	r18, 0x23	; 35
    3ace:	20 83       	st	Z, r18
    3ad0:	31 97       	sbiw	r30, 0x01	; 1
    3ad2:	40 83       	st	Z, r20
    3ad4:	31 97       	sbiw	r30, 0x01	; 1
    3ad6:	50 83       	st	Z, r21
    3ad8:	31 97       	sbiw	r30, 0x01	; 1
    3ada:	26 e2       	ldi	r18, 0x26	; 38
    3adc:	20 83       	st	Z, r18
    3ade:	31 97       	sbiw	r30, 0x01	; 1
    3ae0:	27 e2       	ldi	r18, 0x27	; 39
    3ae2:	20 83       	st	Z, r18
    3ae4:	31 97       	sbiw	r30, 0x01	; 1
    3ae6:	28 e2       	ldi	r18, 0x28	; 40
    3ae8:	20 83       	st	Z, r18
    3aea:	31 97       	sbiw	r30, 0x01	; 1
    3aec:	29 e2       	ldi	r18, 0x29	; 41
    3aee:	20 83       	st	Z, r18
    3af0:	31 97       	sbiw	r30, 0x01	; 1
    3af2:	20 e3       	ldi	r18, 0x30	; 48
    3af4:	20 83       	st	Z, r18
    3af6:	31 97       	sbiw	r30, 0x01	; 1
    3af8:	21 e3       	ldi	r18, 0x31	; 49
    3afa:	20 83       	st	Z, r18
    3afc:	86 97       	sbiw	r24, 0x26	; 38
    3afe:	08 95       	ret

00003b00 <xPortStartScheduler>:
    3b00:	1b bc       	out	0x2b, r1	; 43
    3b02:	89 ef       	ldi	r24, 0xF9	; 249
    3b04:	8a bd       	out	0x2a, r24	; 42
    3b06:	8b e0       	ldi	r24, 0x0B	; 11
    3b08:	8e bd       	out	0x2e, r24	; 46
    3b0a:	87 b7       	in	r24, 0x37	; 55
    3b0c:	80 61       	ori	r24, 0x10	; 16
    3b0e:	87 bf       	out	0x37, r24	; 55
    3b10:	a0 91 1d 0e 	lds	r26, 0x0E1D	; 0x800e1d <pxCurrentTCB>
    3b14:	b0 91 1e 0e 	lds	r27, 0x0E1E	; 0x800e1e <pxCurrentTCB+0x1>
    3b18:	cd 91       	ld	r28, X+
    3b1a:	cd bf       	out	0x3d, r28	; 61
    3b1c:	dd 91       	ld	r29, X+
    3b1e:	de bf       	out	0x3e, r29	; 62
    3b20:	ff 91       	pop	r31
    3b22:	ef 91       	pop	r30
    3b24:	df 91       	pop	r29
    3b26:	cf 91       	pop	r28
    3b28:	bf 91       	pop	r27
    3b2a:	af 91       	pop	r26
    3b2c:	9f 91       	pop	r25
    3b2e:	8f 91       	pop	r24
    3b30:	7f 91       	pop	r23
    3b32:	6f 91       	pop	r22
    3b34:	5f 91       	pop	r21
    3b36:	4f 91       	pop	r20
    3b38:	3f 91       	pop	r19
    3b3a:	2f 91       	pop	r18
    3b3c:	1f 91       	pop	r17
    3b3e:	0f 91       	pop	r16
    3b40:	ff 90       	pop	r15
    3b42:	ef 90       	pop	r14
    3b44:	df 90       	pop	r13
    3b46:	cf 90       	pop	r12
    3b48:	bf 90       	pop	r11
    3b4a:	af 90       	pop	r10
    3b4c:	9f 90       	pop	r9
    3b4e:	8f 90       	pop	r8
    3b50:	7f 90       	pop	r7
    3b52:	6f 90       	pop	r6
    3b54:	5f 90       	pop	r5
    3b56:	4f 90       	pop	r4
    3b58:	3f 90       	pop	r3
    3b5a:	2f 90       	pop	r2
    3b5c:	1f 90       	pop	r1
    3b5e:	0f 90       	pop	r0
    3b60:	0f be       	out	0x3f, r0	; 63
    3b62:	0f 90       	pop	r0
    3b64:	08 95       	ret
    3b66:	81 e0       	ldi	r24, 0x01	; 1
    3b68:	08 95       	ret

00003b6a <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    3b6a:	0f 92       	push	r0
    3b6c:	0f b6       	in	r0, 0x3f	; 63
    3b6e:	f8 94       	cli
    3b70:	0f 92       	push	r0
    3b72:	1f 92       	push	r1
    3b74:	11 24       	eor	r1, r1
    3b76:	2f 92       	push	r2
    3b78:	3f 92       	push	r3
    3b7a:	4f 92       	push	r4
    3b7c:	5f 92       	push	r5
    3b7e:	6f 92       	push	r6
    3b80:	7f 92       	push	r7
    3b82:	8f 92       	push	r8
    3b84:	9f 92       	push	r9
    3b86:	af 92       	push	r10
    3b88:	bf 92       	push	r11
    3b8a:	cf 92       	push	r12
    3b8c:	df 92       	push	r13
    3b8e:	ef 92       	push	r14
    3b90:	ff 92       	push	r15
    3b92:	0f 93       	push	r16
    3b94:	1f 93       	push	r17
    3b96:	2f 93       	push	r18
    3b98:	3f 93       	push	r19
    3b9a:	4f 93       	push	r20
    3b9c:	5f 93       	push	r21
    3b9e:	6f 93       	push	r22
    3ba0:	7f 93       	push	r23
    3ba2:	8f 93       	push	r24
    3ba4:	9f 93       	push	r25
    3ba6:	af 93       	push	r26
    3ba8:	bf 93       	push	r27
    3baa:	cf 93       	push	r28
    3bac:	df 93       	push	r29
    3bae:	ef 93       	push	r30
    3bb0:	ff 93       	push	r31
    3bb2:	a0 91 1d 0e 	lds	r26, 0x0E1D	; 0x800e1d <pxCurrentTCB>
    3bb6:	b0 91 1e 0e 	lds	r27, 0x0E1E	; 0x800e1e <pxCurrentTCB+0x1>
    3bba:	0d b6       	in	r0, 0x3d	; 61
    3bbc:	0d 92       	st	X+, r0
    3bbe:	0e b6       	in	r0, 0x3e	; 62
	vTaskSwitchContext();
    3bc0:	0d 92       	st	X+, r0
	portRESTORE_CONTEXT();
    3bc2:	25 d6       	rcall	.+3146   	; 0x480e <vTaskSwitchContext>
    3bc4:	a0 91 1d 0e 	lds	r26, 0x0E1D	; 0x800e1d <pxCurrentTCB>
    3bc8:	b0 91 1e 0e 	lds	r27, 0x0E1E	; 0x800e1e <pxCurrentTCB+0x1>
    3bcc:	cd 91       	ld	r28, X+
    3bce:	cd bf       	out	0x3d, r28	; 61
    3bd0:	dd 91       	ld	r29, X+
    3bd2:	de bf       	out	0x3e, r29	; 62
    3bd4:	ff 91       	pop	r31
    3bd6:	ef 91       	pop	r30
    3bd8:	df 91       	pop	r29
    3bda:	cf 91       	pop	r28
    3bdc:	bf 91       	pop	r27
    3bde:	af 91       	pop	r26
    3be0:	9f 91       	pop	r25
    3be2:	8f 91       	pop	r24
    3be4:	7f 91       	pop	r23
    3be6:	6f 91       	pop	r22
    3be8:	5f 91       	pop	r21
    3bea:	4f 91       	pop	r20
    3bec:	3f 91       	pop	r19
    3bee:	2f 91       	pop	r18
    3bf0:	1f 91       	pop	r17
    3bf2:	0f 91       	pop	r16
    3bf4:	ff 90       	pop	r15
    3bf6:	ef 90       	pop	r14
    3bf8:	df 90       	pop	r13
    3bfa:	cf 90       	pop	r12
    3bfc:	bf 90       	pop	r11
    3bfe:	af 90       	pop	r10
    3c00:	9f 90       	pop	r9
    3c02:	8f 90       	pop	r8
    3c04:	7f 90       	pop	r7
    3c06:	6f 90       	pop	r6
    3c08:	5f 90       	pop	r5
    3c0a:	4f 90       	pop	r4
    3c0c:	3f 90       	pop	r3
    3c0e:	2f 90       	pop	r2
    3c10:	1f 90       	pop	r1
    3c12:	0f 90       	pop	r0
    3c14:	0f be       	out	0x3f, r0	; 63

	asm volatile ( "ret" );
    3c16:	0f 90       	pop	r0
    3c18:	08 95       	ret

00003c1a <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    3c1a:	0f 92       	push	r0
    3c1c:	0f b6       	in	r0, 0x3f	; 63
    3c1e:	f8 94       	cli
    3c20:	0f 92       	push	r0
    3c22:	1f 92       	push	r1
    3c24:	11 24       	eor	r1, r1
    3c26:	2f 92       	push	r2
    3c28:	3f 92       	push	r3
    3c2a:	4f 92       	push	r4
    3c2c:	5f 92       	push	r5
    3c2e:	6f 92       	push	r6
    3c30:	7f 92       	push	r7
    3c32:	8f 92       	push	r8
    3c34:	9f 92       	push	r9
    3c36:	af 92       	push	r10
    3c38:	bf 92       	push	r11
    3c3a:	cf 92       	push	r12
    3c3c:	df 92       	push	r13
    3c3e:	ef 92       	push	r14
    3c40:	ff 92       	push	r15
    3c42:	0f 93       	push	r16
    3c44:	1f 93       	push	r17
    3c46:	2f 93       	push	r18
    3c48:	3f 93       	push	r19
    3c4a:	4f 93       	push	r20
    3c4c:	5f 93       	push	r21
    3c4e:	6f 93       	push	r22
    3c50:	7f 93       	push	r23
    3c52:	8f 93       	push	r24
    3c54:	9f 93       	push	r25
    3c56:	af 93       	push	r26
    3c58:	bf 93       	push	r27
    3c5a:	cf 93       	push	r28
    3c5c:	df 93       	push	r29
    3c5e:	ef 93       	push	r30
    3c60:	ff 93       	push	r31
    3c62:	a0 91 1d 0e 	lds	r26, 0x0E1D	; 0x800e1d <pxCurrentTCB>
    3c66:	b0 91 1e 0e 	lds	r27, 0x0E1E	; 0x800e1e <pxCurrentTCB+0x1>
    3c6a:	0d b6       	in	r0, 0x3d	; 61
    3c6c:	0d 92       	st	X+, r0
    3c6e:	0e b6       	in	r0, 0x3e	; 62
	if( xTaskIncrementTick() != pdFALSE )
    3c70:	0d 92       	st	X+, r0
	{
		vTaskSwitchContext();
    3c72:	56 d4       	rcall	.+2220   	; 0x4520 <xTaskIncrementTick>
    3c74:	81 11       	cpse	r24, r1
	}
	portRESTORE_CONTEXT();
    3c76:	cb d5       	rcall	.+2966   	; 0x480e <vTaskSwitchContext>
    3c78:	a0 91 1d 0e 	lds	r26, 0x0E1D	; 0x800e1d <pxCurrentTCB>
    3c7c:	b0 91 1e 0e 	lds	r27, 0x0E1E	; 0x800e1e <pxCurrentTCB+0x1>
    3c80:	cd 91       	ld	r28, X+
    3c82:	cd bf       	out	0x3d, r28	; 61
    3c84:	dd 91       	ld	r29, X+
    3c86:	de bf       	out	0x3e, r29	; 62
    3c88:	ff 91       	pop	r31
    3c8a:	ef 91       	pop	r30
    3c8c:	df 91       	pop	r29
    3c8e:	cf 91       	pop	r28
    3c90:	bf 91       	pop	r27
    3c92:	af 91       	pop	r26
    3c94:	9f 91       	pop	r25
    3c96:	8f 91       	pop	r24
    3c98:	7f 91       	pop	r23
    3c9a:	6f 91       	pop	r22
    3c9c:	5f 91       	pop	r21
    3c9e:	4f 91       	pop	r20
    3ca0:	3f 91       	pop	r19
    3ca2:	2f 91       	pop	r18
    3ca4:	1f 91       	pop	r17
    3ca6:	0f 91       	pop	r16
    3ca8:	ff 90       	pop	r15
    3caa:	ef 90       	pop	r14
    3cac:	df 90       	pop	r13
    3cae:	cf 90       	pop	r12
    3cb0:	bf 90       	pop	r11
    3cb2:	af 90       	pop	r10
    3cb4:	9f 90       	pop	r9
    3cb6:	8f 90       	pop	r8
    3cb8:	7f 90       	pop	r7
    3cba:	6f 90       	pop	r6
    3cbc:	5f 90       	pop	r5
    3cbe:	4f 90       	pop	r4
    3cc0:	3f 90       	pop	r3
    3cc2:	2f 90       	pop	r2
    3cc4:	1f 90       	pop	r1
    3cc6:	0f 90       	pop	r0
    3cc8:	0f be       	out	0x3f, r0	; 63

	asm volatile ( "ret" );
    3cca:	0f 90       	pop	r0
    3ccc:	08 95       	ret

00003cce <__vector_12>:
    3cce:	a5 df       	rcall	.-182    	; 0x3c1a <vPortYieldFromTick>
    3cd0:	18 95       	reti

00003cd2 <prvCopyDataToQueue>:
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    3cd2:	0f 93       	push	r16
    3cd4:	1f 93       	push	r17
    3cd6:	cf 93       	push	r28
    3cd8:	df 93       	push	r29
    3cda:	ec 01       	movw	r28, r24
    3cdc:	04 2f       	mov	r16, r20
    3cde:	1a 8d       	ldd	r17, Y+26	; 0x1a
    3ce0:	4c 8d       	ldd	r20, Y+28	; 0x1c
    3ce2:	41 11       	cpse	r20, r1
    3ce4:	0b c0       	rjmp	.+22     	; 0x3cfc <prvCopyDataToQueue+0x2a>
    3ce6:	88 81       	ld	r24, Y
    3ce8:	99 81       	ldd	r25, Y+1	; 0x01
    3cea:	89 2b       	or	r24, r25
    3cec:	09 f0       	breq	.+2      	; 0x3cf0 <prvCopyDataToQueue+0x1e>
    3cee:	41 c0       	rjmp	.+130    	; 0x3d72 <prvCopyDataToQueue+0xa0>
    3cf0:	8a 81       	ldd	r24, Y+2	; 0x02
    3cf2:	9b 81       	ldd	r25, Y+3	; 0x03
    3cf4:	0b d7       	rcall	.+3606   	; 0x4b0c <xTaskPriorityDisinherit>
    3cf6:	1b 82       	std	Y+3, r1	; 0x03
    3cf8:	1a 82       	std	Y+2, r1	; 0x02
    3cfa:	42 c0       	rjmp	.+132    	; 0x3d80 <prvCopyDataToQueue+0xae>
    3cfc:	01 11       	cpse	r16, r1
    3cfe:	17 c0       	rjmp	.+46     	; 0x3d2e <prvCopyDataToQueue+0x5c>
    3d00:	50 e0       	ldi	r21, 0x00	; 0
    3d02:	8c 81       	ldd	r24, Y+4	; 0x04
    3d04:	9d 81       	ldd	r25, Y+5	; 0x05
    3d06:	0e 94 24 28 	call	0x5048	; 0x5048 <memcpy>
    3d0a:	2c 8d       	ldd	r18, Y+28	; 0x1c
    3d0c:	8c 81       	ldd	r24, Y+4	; 0x04
    3d0e:	9d 81       	ldd	r25, Y+5	; 0x05
    3d10:	82 0f       	add	r24, r18
    3d12:	91 1d       	adc	r25, r1
    3d14:	9d 83       	std	Y+5, r25	; 0x05
    3d16:	8c 83       	std	Y+4, r24	; 0x04
    3d18:	2a 81       	ldd	r18, Y+2	; 0x02
    3d1a:	3b 81       	ldd	r19, Y+3	; 0x03
    3d1c:	82 17       	cp	r24, r18
    3d1e:	93 07       	cpc	r25, r19
    3d20:	50 f1       	brcs	.+84     	; 0x3d76 <prvCopyDataToQueue+0xa4>
    3d22:	88 81       	ld	r24, Y
    3d24:	99 81       	ldd	r25, Y+1	; 0x01
    3d26:	9d 83       	std	Y+5, r25	; 0x05
    3d28:	8c 83       	std	Y+4, r24	; 0x04
    3d2a:	80 e0       	ldi	r24, 0x00	; 0
    3d2c:	29 c0       	rjmp	.+82     	; 0x3d80 <prvCopyDataToQueue+0xae>
    3d2e:	50 e0       	ldi	r21, 0x00	; 0
    3d30:	8e 81       	ldd	r24, Y+6	; 0x06
    3d32:	9f 81       	ldd	r25, Y+7	; 0x07
    3d34:	0e 94 24 28 	call	0x5048	; 0x5048 <memcpy>
    3d38:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3d3a:	90 e0       	ldi	r25, 0x00	; 0
    3d3c:	91 95       	neg	r25
    3d3e:	81 95       	neg	r24
    3d40:	91 09       	sbc	r25, r1
    3d42:	2e 81       	ldd	r18, Y+6	; 0x06
    3d44:	3f 81       	ldd	r19, Y+7	; 0x07
    3d46:	28 0f       	add	r18, r24
    3d48:	39 1f       	adc	r19, r25
    3d4a:	3f 83       	std	Y+7, r19	; 0x07
    3d4c:	2e 83       	std	Y+6, r18	; 0x06
    3d4e:	48 81       	ld	r20, Y
    3d50:	59 81       	ldd	r21, Y+1	; 0x01
    3d52:	24 17       	cp	r18, r20
    3d54:	35 07       	cpc	r19, r21
    3d56:	30 f4       	brcc	.+12     	; 0x3d64 <prvCopyDataToQueue+0x92>
    3d58:	2a 81       	ldd	r18, Y+2	; 0x02
    3d5a:	3b 81       	ldd	r19, Y+3	; 0x03
    3d5c:	82 0f       	add	r24, r18
    3d5e:	93 1f       	adc	r25, r19
    3d60:	9f 83       	std	Y+7, r25	; 0x07
    3d62:	8e 83       	std	Y+6, r24	; 0x06
    3d64:	02 30       	cpi	r16, 0x02	; 2
    3d66:	49 f4       	brne	.+18     	; 0x3d7a <prvCopyDataToQueue+0xa8>
    3d68:	11 23       	and	r17, r17
    3d6a:	49 f0       	breq	.+18     	; 0x3d7e <prvCopyDataToQueue+0xac>
    3d6c:	11 50       	subi	r17, 0x01	; 1
    3d6e:	80 e0       	ldi	r24, 0x00	; 0
    3d70:	07 c0       	rjmp	.+14     	; 0x3d80 <prvCopyDataToQueue+0xae>
    3d72:	80 e0       	ldi	r24, 0x00	; 0
    3d74:	05 c0       	rjmp	.+10     	; 0x3d80 <prvCopyDataToQueue+0xae>
    3d76:	80 e0       	ldi	r24, 0x00	; 0
    3d78:	03 c0       	rjmp	.+6      	; 0x3d80 <prvCopyDataToQueue+0xae>
    3d7a:	80 e0       	ldi	r24, 0x00	; 0
    3d7c:	01 c0       	rjmp	.+2      	; 0x3d80 <prvCopyDataToQueue+0xae>
    3d7e:	80 e0       	ldi	r24, 0x00	; 0
    3d80:	1f 5f       	subi	r17, 0xFF	; 255
    3d82:	1a 8f       	std	Y+26, r17	; 0x1a
    3d84:	df 91       	pop	r29
    3d86:	cf 91       	pop	r28
    3d88:	1f 91       	pop	r17
    3d8a:	0f 91       	pop	r16
    3d8c:	08 95       	ret

00003d8e <prvCopyDataFromQueue>:
    3d8e:	fc 01       	movw	r30, r24
    3d90:	44 8d       	ldd	r20, Z+28	; 0x1c
    3d92:	44 23       	and	r20, r20
    3d94:	a9 f0       	breq	.+42     	; 0x3dc0 <prvCopyDataFromQueue+0x32>
    3d96:	50 e0       	ldi	r21, 0x00	; 0
    3d98:	26 81       	ldd	r18, Z+6	; 0x06
    3d9a:	37 81       	ldd	r19, Z+7	; 0x07
    3d9c:	24 0f       	add	r18, r20
    3d9e:	35 1f       	adc	r19, r21
    3da0:	37 83       	std	Z+7, r19	; 0x07
    3da2:	26 83       	std	Z+6, r18	; 0x06
    3da4:	82 81       	ldd	r24, Z+2	; 0x02
    3da6:	93 81       	ldd	r25, Z+3	; 0x03
    3da8:	28 17       	cp	r18, r24
    3daa:	39 07       	cpc	r19, r25
    3dac:	20 f0       	brcs	.+8      	; 0x3db6 <prvCopyDataFromQueue+0x28>
    3dae:	80 81       	ld	r24, Z
    3db0:	91 81       	ldd	r25, Z+1	; 0x01
    3db2:	97 83       	std	Z+7, r25	; 0x07
    3db4:	86 83       	std	Z+6, r24	; 0x06
    3db6:	cb 01       	movw	r24, r22
    3db8:	66 81       	ldd	r22, Z+6	; 0x06
    3dba:	77 81       	ldd	r23, Z+7	; 0x07
    3dbc:	0c 94 24 28 	jmp	0x5048	; 0x5048 <memcpy>
    3dc0:	08 95       	ret

00003dc2 <prvUnlockQueue>:
    3dc2:	ef 92       	push	r14
    3dc4:	ff 92       	push	r15
    3dc6:	0f 93       	push	r16
    3dc8:	1f 93       	push	r17
    3dca:	cf 93       	push	r28
    3dcc:	8c 01       	movw	r16, r24
    3dce:	0f b6       	in	r0, 0x3f	; 63
    3dd0:	f8 94       	cli
    3dd2:	0f 92       	push	r0
    3dd4:	fc 01       	movw	r30, r24
    3dd6:	c6 8d       	ldd	r28, Z+30	; 0x1e
    3dd8:	1c 16       	cp	r1, r28
    3dda:	9c f4       	brge	.+38     	; 0x3e02 <prvUnlockQueue+0x40>
    3ddc:	81 89       	ldd	r24, Z+17	; 0x11
    3dde:	81 11       	cpse	r24, r1
    3de0:	06 c0       	rjmp	.+12     	; 0x3dee <prvUnlockQueue+0x2c>
    3de2:	0f c0       	rjmp	.+30     	; 0x3e02 <prvUnlockQueue+0x40>
    3de4:	f8 01       	movw	r30, r16
    3de6:	81 89       	ldd	r24, Z+17	; 0x11
    3de8:	81 11       	cpse	r24, r1
    3dea:	05 c0       	rjmp	.+10     	; 0x3df6 <prvUnlockQueue+0x34>
    3dec:	0a c0       	rjmp	.+20     	; 0x3e02 <prvUnlockQueue+0x40>
    3dee:	78 01       	movw	r14, r16
    3df0:	f1 e1       	ldi	r31, 0x11	; 17
    3df2:	ef 0e       	add	r14, r31
    3df4:	f1 1c       	adc	r15, r1
    3df6:	c7 01       	movw	r24, r14
    3df8:	9a d5       	rcall	.+2868   	; 0x492e <xTaskRemoveFromEventList>
    3dfa:	81 11       	cpse	r24, r1
    3dfc:	21 d6       	rcall	.+3138   	; 0x4a40 <vTaskMissedYield>
    3dfe:	c1 50       	subi	r28, 0x01	; 1
    3e00:	89 f7       	brne	.-30     	; 0x3de4 <prvUnlockQueue+0x22>
    3e02:	8f ef       	ldi	r24, 0xFF	; 255
    3e04:	f8 01       	movw	r30, r16
    3e06:	86 8f       	std	Z+30, r24	; 0x1e
    3e08:	0f 90       	pop	r0
    3e0a:	0f be       	out	0x3f, r0	; 63
    3e0c:	0f b6       	in	r0, 0x3f	; 63
    3e0e:	f8 94       	cli
    3e10:	0f 92       	push	r0
    3e12:	c5 8d       	ldd	r28, Z+29	; 0x1d
    3e14:	1c 16       	cp	r1, r28
    3e16:	9c f4       	brge	.+38     	; 0x3e3e <prvUnlockQueue+0x7c>
    3e18:	80 85       	ldd	r24, Z+8	; 0x08
    3e1a:	81 11       	cpse	r24, r1
    3e1c:	06 c0       	rjmp	.+12     	; 0x3e2a <prvUnlockQueue+0x68>
    3e1e:	0f c0       	rjmp	.+30     	; 0x3e3e <prvUnlockQueue+0x7c>
    3e20:	f8 01       	movw	r30, r16
    3e22:	80 85       	ldd	r24, Z+8	; 0x08
    3e24:	81 11       	cpse	r24, r1
    3e26:	05 c0       	rjmp	.+10     	; 0x3e32 <prvUnlockQueue+0x70>
    3e28:	0a c0       	rjmp	.+20     	; 0x3e3e <prvUnlockQueue+0x7c>
    3e2a:	78 01       	movw	r14, r16
    3e2c:	f8 e0       	ldi	r31, 0x08	; 8
    3e2e:	ef 0e       	add	r14, r31
    3e30:	f1 1c       	adc	r15, r1
    3e32:	c7 01       	movw	r24, r14
    3e34:	7c d5       	rcall	.+2808   	; 0x492e <xTaskRemoveFromEventList>
    3e36:	81 11       	cpse	r24, r1
    3e38:	03 d6       	rcall	.+3078   	; 0x4a40 <vTaskMissedYield>
    3e3a:	c1 50       	subi	r28, 0x01	; 1
    3e3c:	89 f7       	brne	.-30     	; 0x3e20 <prvUnlockQueue+0x5e>
    3e3e:	8f ef       	ldi	r24, 0xFF	; 255
    3e40:	f8 01       	movw	r30, r16
    3e42:	85 8f       	std	Z+29, r24	; 0x1d
    3e44:	0f 90       	pop	r0
    3e46:	0f be       	out	0x3f, r0	; 63
    3e48:	cf 91       	pop	r28
    3e4a:	1f 91       	pop	r17
    3e4c:	0f 91       	pop	r16
    3e4e:	ff 90       	pop	r15
    3e50:	ef 90       	pop	r14
    3e52:	08 95       	ret

00003e54 <xQueueGenericReset>:
    3e54:	cf 93       	push	r28
    3e56:	df 93       	push	r29
    3e58:	ec 01       	movw	r28, r24
    3e5a:	0f b6       	in	r0, 0x3f	; 63
    3e5c:	f8 94       	cli
    3e5e:	0f 92       	push	r0
    3e60:	48 81       	ld	r20, Y
    3e62:	59 81       	ldd	r21, Y+1	; 0x01
    3e64:	2c 8d       	ldd	r18, Y+28	; 0x1c
    3e66:	30 e0       	ldi	r19, 0x00	; 0
    3e68:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3e6a:	72 9f       	mul	r23, r18
    3e6c:	c0 01       	movw	r24, r0
    3e6e:	73 9f       	mul	r23, r19
    3e70:	90 0d       	add	r25, r0
    3e72:	11 24       	eor	r1, r1
    3e74:	fa 01       	movw	r30, r20
    3e76:	e8 0f       	add	r30, r24
    3e78:	f9 1f       	adc	r31, r25
    3e7a:	fb 83       	std	Y+3, r31	; 0x03
    3e7c:	ea 83       	std	Y+2, r30	; 0x02
    3e7e:	1a 8e       	std	Y+26, r1	; 0x1a
    3e80:	5d 83       	std	Y+5, r21	; 0x05
    3e82:	4c 83       	std	Y+4, r20	; 0x04
    3e84:	82 1b       	sub	r24, r18
    3e86:	93 0b       	sbc	r25, r19
    3e88:	84 0f       	add	r24, r20
    3e8a:	95 1f       	adc	r25, r21
    3e8c:	9f 83       	std	Y+7, r25	; 0x07
    3e8e:	8e 83       	std	Y+6, r24	; 0x06
    3e90:	8f ef       	ldi	r24, 0xFF	; 255
    3e92:	8d 8f       	std	Y+29, r24	; 0x1d
    3e94:	8e 8f       	std	Y+30, r24	; 0x1e
    3e96:	61 11       	cpse	r22, r1
    3e98:	0a c0       	rjmp	.+20     	; 0x3eae <xQueueGenericReset+0x5a>
    3e9a:	88 85       	ldd	r24, Y+8	; 0x08
    3e9c:	88 23       	and	r24, r24
    3e9e:	69 f0       	breq	.+26     	; 0x3eba <xQueueGenericReset+0x66>
    3ea0:	ce 01       	movw	r24, r28
    3ea2:	08 96       	adiw	r24, 0x08	; 8
    3ea4:	44 d5       	rcall	.+2696   	; 0x492e <xTaskRemoveFromEventList>
    3ea6:	88 23       	and	r24, r24
    3ea8:	41 f0       	breq	.+16     	; 0x3eba <xQueueGenericReset+0x66>
    3eaa:	5f de       	rcall	.-834    	; 0x3b6a <vPortYield>
    3eac:	06 c0       	rjmp	.+12     	; 0x3eba <xQueueGenericReset+0x66>
    3eae:	ce 01       	movw	r24, r28
    3eb0:	08 96       	adiw	r24, 0x08	; 8
    3eb2:	30 dd       	rcall	.-1440   	; 0x3914 <vListInitialise>
    3eb4:	ce 01       	movw	r24, r28
    3eb6:	41 96       	adiw	r24, 0x11	; 17
    3eb8:	2d dd       	rcall	.-1446   	; 0x3914 <vListInitialise>
    3eba:	0f 90       	pop	r0
    3ebc:	0f be       	out	0x3f, r0	; 63
    3ebe:	81 e0       	ldi	r24, 0x01	; 1
    3ec0:	df 91       	pop	r29
    3ec2:	cf 91       	pop	r28
    3ec4:	08 95       	ret

00003ec6 <xQueueGenericCreate>:
    3ec6:	0f 93       	push	r16
    3ec8:	1f 93       	push	r17
    3eca:	cf 93       	push	r28
    3ecc:	df 93       	push	r29
    3ece:	08 2f       	mov	r16, r24
    3ed0:	16 2f       	mov	r17, r22
    3ed2:	66 23       	and	r22, r22
    3ed4:	b1 f0       	breq	.+44     	; 0x3f02 <xQueueGenericCreate+0x3c>
    3ed6:	86 9f       	mul	r24, r22
    3ed8:	c0 01       	movw	r24, r0
    3eda:	11 24       	eor	r1, r1
    3edc:	4f 96       	adiw	r24, 0x1f	; 31
    3ede:	e6 dc       	rcall	.-1588   	; 0x38ac <pvPortMalloc>
    3ee0:	ec 01       	movw	r28, r24
    3ee2:	00 97       	sbiw	r24, 0x00	; 0
    3ee4:	39 f4       	brne	.+14     	; 0x3ef4 <xQueueGenericCreate+0x2e>
    3ee6:	13 c0       	rjmp	.+38     	; 0x3f0e <xQueueGenericCreate+0x48>
    3ee8:	0b 8f       	std	Y+27, r16	; 0x1b
    3eea:	1c 8f       	std	Y+28, r17	; 0x1c
    3eec:	61 e0       	ldi	r22, 0x01	; 1
    3eee:	ce 01       	movw	r24, r28
    3ef0:	b1 df       	rcall	.-158    	; 0x3e54 <xQueueGenericReset>
    3ef2:	0d c0       	rjmp	.+26     	; 0x3f0e <xQueueGenericCreate+0x48>
    3ef4:	4f 96       	adiw	r24, 0x1f	; 31
    3ef6:	99 83       	std	Y+1, r25	; 0x01
    3ef8:	88 83       	st	Y, r24
    3efa:	f6 cf       	rjmp	.-20     	; 0x3ee8 <xQueueGenericCreate+0x22>
    3efc:	d9 83       	std	Y+1, r29	; 0x01
    3efe:	c8 83       	st	Y, r28
    3f00:	f3 cf       	rjmp	.-26     	; 0x3ee8 <xQueueGenericCreate+0x22>
    3f02:	8f e1       	ldi	r24, 0x1F	; 31
    3f04:	90 e0       	ldi	r25, 0x00	; 0
    3f06:	d2 dc       	rcall	.-1628   	; 0x38ac <pvPortMalloc>
    3f08:	ec 01       	movw	r28, r24
    3f0a:	89 2b       	or	r24, r25
    3f0c:	b9 f7       	brne	.-18     	; 0x3efc <xQueueGenericCreate+0x36>
    3f0e:	ce 01       	movw	r24, r28
    3f10:	df 91       	pop	r29
    3f12:	cf 91       	pop	r28
    3f14:	1f 91       	pop	r17
    3f16:	0f 91       	pop	r16
    3f18:	08 95       	ret

00003f1a <xQueueGenericSend>:
    3f1a:	9f 92       	push	r9
    3f1c:	af 92       	push	r10
    3f1e:	bf 92       	push	r11
    3f20:	cf 92       	push	r12
    3f22:	df 92       	push	r13
    3f24:	ef 92       	push	r14
    3f26:	ff 92       	push	r15
    3f28:	0f 93       	push	r16
    3f2a:	1f 93       	push	r17
    3f2c:	cf 93       	push	r28
    3f2e:	df 93       	push	r29
    3f30:	00 d0       	rcall	.+0      	; 0x3f32 <xQueueGenericSend+0x18>
    3f32:	00 d0       	rcall	.+0      	; 0x3f34 <xQueueGenericSend+0x1a>
    3f34:	1f 92       	push	r1
    3f36:	cd b7       	in	r28, 0x3d	; 61
    3f38:	de b7       	in	r29, 0x3e	; 62
    3f3a:	8c 01       	movw	r16, r24
    3f3c:	6b 01       	movw	r12, r22
    3f3e:	5d 83       	std	Y+5, r21	; 0x05
    3f40:	4c 83       	std	Y+4, r20	; 0x04
    3f42:	a2 2e       	mov	r10, r18
    3f44:	b1 2c       	mov	r11, r1
    3f46:	99 24       	eor	r9, r9
    3f48:	93 94       	inc	r9
    3f4a:	7c 01       	movw	r14, r24
    3f4c:	88 e0       	ldi	r24, 0x08	; 8
    3f4e:	e8 0e       	add	r14, r24
    3f50:	f1 1c       	adc	r15, r1
    3f52:	0f b6       	in	r0, 0x3f	; 63
    3f54:	f8 94       	cli
    3f56:	0f 92       	push	r0
    3f58:	f8 01       	movw	r30, r16
    3f5a:	92 8d       	ldd	r25, Z+26	; 0x1a
    3f5c:	83 8d       	ldd	r24, Z+27	; 0x1b
    3f5e:	98 17       	cp	r25, r24
    3f60:	18 f0       	brcs	.+6      	; 0x3f68 <xQueueGenericSend+0x4e>
    3f62:	f2 e0       	ldi	r31, 0x02	; 2
    3f64:	af 12       	cpse	r10, r31
    3f66:	15 c0       	rjmp	.+42     	; 0x3f92 <xQueueGenericSend+0x78>
    3f68:	4a 2d       	mov	r20, r10
    3f6a:	b6 01       	movw	r22, r12
    3f6c:	c8 01       	movw	r24, r16
    3f6e:	b1 de       	rcall	.-670    	; 0x3cd2 <prvCopyDataToQueue>
    3f70:	f8 01       	movw	r30, r16
    3f72:	91 89       	ldd	r25, Z+17	; 0x11
    3f74:	99 23       	and	r25, r25
    3f76:	39 f0       	breq	.+14     	; 0x3f86 <xQueueGenericSend+0x6c>
    3f78:	c8 01       	movw	r24, r16
    3f7a:	41 96       	adiw	r24, 0x11	; 17
    3f7c:	d8 d4       	rcall	.+2480   	; 0x492e <xTaskRemoveFromEventList>
    3f7e:	88 23       	and	r24, r24
    3f80:	21 f0       	breq	.+8      	; 0x3f8a <xQueueGenericSend+0x70>
    3f82:	f3 dd       	rcall	.-1050   	; 0x3b6a <vPortYield>
    3f84:	02 c0       	rjmp	.+4      	; 0x3f8a <xQueueGenericSend+0x70>
    3f86:	81 11       	cpse	r24, r1
    3f88:	f0 dd       	rcall	.-1056   	; 0x3b6a <vPortYield>
    3f8a:	0f 90       	pop	r0
    3f8c:	0f be       	out	0x3f, r0	; 63
    3f8e:	81 e0       	ldi	r24, 0x01	; 1
    3f90:	45 c0       	rjmp	.+138    	; 0x401c <xQueueGenericSend+0x102>
    3f92:	8c 81       	ldd	r24, Y+4	; 0x04
    3f94:	9d 81       	ldd	r25, Y+5	; 0x05
    3f96:	89 2b       	or	r24, r25
    3f98:	21 f4       	brne	.+8      	; 0x3fa2 <xQueueGenericSend+0x88>
    3f9a:	0f 90       	pop	r0
    3f9c:	0f be       	out	0x3f, r0	; 63
    3f9e:	80 e0       	ldi	r24, 0x00	; 0
    3fa0:	3d c0       	rjmp	.+122    	; 0x401c <xQueueGenericSend+0x102>
    3fa2:	b1 10       	cpse	r11, r1
    3fa4:	04 c0       	rjmp	.+8      	; 0x3fae <xQueueGenericSend+0x94>
    3fa6:	ce 01       	movw	r24, r28
    3fa8:	01 96       	adiw	r24, 0x01	; 1
    3faa:	07 d5       	rcall	.+2574   	; 0x49ba <vTaskSetTimeOutState>
    3fac:	b9 2c       	mov	r11, r9
    3fae:	0f 90       	pop	r0
    3fb0:	0f be       	out	0x3f, r0	; 63
    3fb2:	b0 d2       	rcall	.+1376   	; 0x4514 <vTaskSuspendAll>
    3fb4:	0f b6       	in	r0, 0x3f	; 63
    3fb6:	f8 94       	cli
    3fb8:	0f 92       	push	r0
    3fba:	f8 01       	movw	r30, r16
    3fbc:	85 8d       	ldd	r24, Z+29	; 0x1d
    3fbe:	8f 3f       	cpi	r24, 0xFF	; 255
    3fc0:	09 f4       	brne	.+2      	; 0x3fc4 <xQueueGenericSend+0xaa>
    3fc2:	15 8e       	std	Z+29, r1	; 0x1d
    3fc4:	f8 01       	movw	r30, r16
    3fc6:	86 8d       	ldd	r24, Z+30	; 0x1e
    3fc8:	8f 3f       	cpi	r24, 0xFF	; 255
    3fca:	09 f4       	brne	.+2      	; 0x3fce <xQueueGenericSend+0xb4>
    3fcc:	16 8e       	std	Z+30, r1	; 0x1e
    3fce:	0f 90       	pop	r0
    3fd0:	0f be       	out	0x3f, r0	; 63
    3fd2:	be 01       	movw	r22, r28
    3fd4:	6c 5f       	subi	r22, 0xFC	; 252
    3fd6:	7f 4f       	sbci	r23, 0xFF	; 255
    3fd8:	ce 01       	movw	r24, r28
    3fda:	01 96       	adiw	r24, 0x01	; 1
    3fdc:	f9 d4       	rcall	.+2546   	; 0x49d0 <xTaskCheckForTimeOut>
    3fde:	81 11       	cpse	r24, r1
    3fe0:	19 c0       	rjmp	.+50     	; 0x4014 <xQueueGenericSend+0xfa>
    3fe2:	0f b6       	in	r0, 0x3f	; 63
    3fe4:	f8 94       	cli
    3fe6:	0f 92       	push	r0
    3fe8:	f8 01       	movw	r30, r16
    3fea:	92 8d       	ldd	r25, Z+26	; 0x1a
    3fec:	0f 90       	pop	r0
    3fee:	0f be       	out	0x3f, r0	; 63
    3ff0:	83 8d       	ldd	r24, Z+27	; 0x1b
    3ff2:	98 13       	cpse	r25, r24
    3ff4:	0b c0       	rjmp	.+22     	; 0x400c <xQueueGenericSend+0xf2>
    3ff6:	6c 81       	ldd	r22, Y+4	; 0x04
    3ff8:	7d 81       	ldd	r23, Y+5	; 0x05
    3ffa:	c7 01       	movw	r24, r14
    3ffc:	88 d4       	rcall	.+2320   	; 0x490e <vTaskPlaceOnEventList>
    3ffe:	c8 01       	movw	r24, r16
    4000:	e0 de       	rcall	.-576    	; 0x3dc2 <prvUnlockQueue>
    4002:	45 d3       	rcall	.+1674   	; 0x468e <xTaskResumeAll>
    4004:	81 11       	cpse	r24, r1
    4006:	a5 cf       	rjmp	.-182    	; 0x3f52 <xQueueGenericSend+0x38>
    4008:	b0 dd       	rcall	.-1184   	; 0x3b6a <vPortYield>
    400a:	a3 cf       	rjmp	.-186    	; 0x3f52 <xQueueGenericSend+0x38>
    400c:	c8 01       	movw	r24, r16
    400e:	d9 de       	rcall	.-590    	; 0x3dc2 <prvUnlockQueue>
    4010:	3e d3       	rcall	.+1660   	; 0x468e <xTaskResumeAll>
    4012:	9f cf       	rjmp	.-194    	; 0x3f52 <xQueueGenericSend+0x38>
    4014:	c8 01       	movw	r24, r16
    4016:	d5 de       	rcall	.-598    	; 0x3dc2 <prvUnlockQueue>
    4018:	3a d3       	rcall	.+1652   	; 0x468e <xTaskResumeAll>
    401a:	80 e0       	ldi	r24, 0x00	; 0
    401c:	0f 90       	pop	r0
    401e:	0f 90       	pop	r0
    4020:	0f 90       	pop	r0
    4022:	0f 90       	pop	r0
    4024:	0f 90       	pop	r0
    4026:	df 91       	pop	r29
    4028:	cf 91       	pop	r28
    402a:	1f 91       	pop	r17
    402c:	0f 91       	pop	r16
    402e:	ff 90       	pop	r15
    4030:	ef 90       	pop	r14
    4032:	df 90       	pop	r13
    4034:	cf 90       	pop	r12
    4036:	bf 90       	pop	r11
    4038:	af 90       	pop	r10
    403a:	9f 90       	pop	r9
    403c:	08 95       	ret

0000403e <xQueueCreateMutex>:
    403e:	cf 93       	push	r28
    4040:	df 93       	push	r29
    4042:	48 2f       	mov	r20, r24
    4044:	60 e0       	ldi	r22, 0x00	; 0
    4046:	81 e0       	ldi	r24, 0x01	; 1
    4048:	3e df       	rcall	.-388    	; 0x3ec6 <xQueueGenericCreate>
    404a:	ec 01       	movw	r28, r24
    404c:	00 97       	sbiw	r24, 0x00	; 0
    404e:	59 f0       	breq	.+22     	; 0x4066 <xQueueCreateMutex+0x28>
    4050:	1b 82       	std	Y+3, r1	; 0x03
    4052:	1a 82       	std	Y+2, r1	; 0x02
    4054:	19 82       	std	Y+1, r1	; 0x01
    4056:	18 82       	st	Y, r1
    4058:	1e 82       	std	Y+6, r1	; 0x06
    405a:	20 e0       	ldi	r18, 0x00	; 0
    405c:	40 e0       	ldi	r20, 0x00	; 0
    405e:	50 e0       	ldi	r21, 0x00	; 0
    4060:	60 e0       	ldi	r22, 0x00	; 0
    4062:	70 e0       	ldi	r23, 0x00	; 0
    4064:	5a df       	rcall	.-332    	; 0x3f1a <xQueueGenericSend>
    4066:	ce 01       	movw	r24, r28
    4068:	df 91       	pop	r29
    406a:	cf 91       	pop	r28
    406c:	08 95       	ret

0000406e <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    406e:	8f 92       	push	r8
    4070:	9f 92       	push	r9
    4072:	af 92       	push	r10
    4074:	bf 92       	push	r11
    4076:	cf 92       	push	r12
    4078:	df 92       	push	r13
    407a:	ef 92       	push	r14
    407c:	ff 92       	push	r15
    407e:	0f 93       	push	r16
    4080:	1f 93       	push	r17
    4082:	cf 93       	push	r28
    4084:	df 93       	push	r29
    4086:	00 d0       	rcall	.+0      	; 0x4088 <xQueueGenericReceive+0x1a>
    4088:	00 d0       	rcall	.+0      	; 0x408a <xQueueGenericReceive+0x1c>
    408a:	1f 92       	push	r1
    408c:	cd b7       	in	r28, 0x3d	; 61
    408e:	de b7       	in	r29, 0x3e	; 62
    4090:	8c 01       	movw	r16, r24
    4092:	5b 01       	movw	r10, r22
    4094:	5d 83       	std	Y+5, r21	; 0x05
    4096:	4c 83       	std	Y+4, r20	; 0x04
    4098:	82 2e       	mov	r8, r18
BaseType_t xEntryTimeSet = pdFALSE;
    409a:	e1 2c       	mov	r14, r1
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
    409c:	99 24       	eor	r9, r9
    409e:	93 94       	inc	r9
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    40a0:	6c 01       	movw	r12, r24
    40a2:	81 e1       	ldi	r24, 0x11	; 17
    40a4:	c8 0e       	add	r12, r24
    40a6:	d1 1c       	adc	r13, r1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    40a8:	0f b6       	in	r0, 0x3f	; 63
    40aa:	f8 94       	cli
    40ac:	0f 92       	push	r0
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    40ae:	f8 01       	movw	r30, r16
    40b0:	f2 8c       	ldd	r15, Z+26	; 0x1a

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    40b2:	ff 20       	and	r15, r15
    40b4:	61 f1       	breq	.+88     	; 0x410e <xQueueGenericReceive+0xa0>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    40b6:	c6 80       	ldd	r12, Z+6	; 0x06
    40b8:	d7 80       	ldd	r13, Z+7	; 0x07

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    40ba:	b5 01       	movw	r22, r10
    40bc:	c8 01       	movw	r24, r16
    40be:	67 de       	rcall	.-818    	; 0x3d8e <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    40c0:	81 10       	cpse	r8, r1
    40c2:	16 c0       	rjmp	.+44     	; 0x40f0 <xQueueGenericReceive+0x82>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
    40c4:	fa 94       	dec	r15
    40c6:	f8 01       	movw	r30, r16
    40c8:	f2 8e       	std	Z+26, r15	; 0x1a

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    40ca:	80 81       	ld	r24, Z
    40cc:	91 81       	ldd	r25, Z+1	; 0x01
    40ce:	89 2b       	or	r24, r25
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    40d0:	21 f4       	brne	.+8      	; 0x40da <xQueueGenericReceive+0x6c>
    40d2:	5c d5       	rcall	.+2744   	; 0x4b8c <pvTaskIncrementMutexHeldCount>
    40d4:	f8 01       	movw	r30, r16
    40d6:	93 83       	std	Z+3, r25	; 0x03
    40d8:	82 83       	std	Z+2, r24	; 0x02
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    40da:	f8 01       	movw	r30, r16
    40dc:	80 85       	ldd	r24, Z+8	; 0x08
    40de:	88 23       	and	r24, r24
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    40e0:	91 f0       	breq	.+36     	; 0x4106 <xQueueGenericReceive+0x98>
    40e2:	c8 01       	movw	r24, r16
    40e4:	08 96       	adiw	r24, 0x08	; 8
    40e6:	23 d4       	rcall	.+2118   	; 0x492e <xTaskRemoveFromEventList>
						{
							queueYIELD_IF_USING_PREEMPTION();
    40e8:	88 23       	and	r24, r24
    40ea:	69 f0       	breq	.+26     	; 0x4106 <xQueueGenericReceive+0x98>
    40ec:	3e dd       	rcall	.-1412   	; 0x3b6a <vPortYield>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    40ee:	0b c0       	rjmp	.+22     	; 0x4106 <xQueueGenericReceive+0x98>
    40f0:	f8 01       	movw	r30, r16
    40f2:	d7 82       	std	Z+7, r13	; 0x07

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    40f4:	c6 82       	std	Z+6, r12	; 0x06
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    40f6:	81 89       	ldd	r24, Z+17	; 0x11
    40f8:	88 23       	and	r24, r24
    40fa:	29 f0       	breq	.+10     	; 0x4106 <xQueueGenericReceive+0x98>
    40fc:	c8 01       	movw	r24, r16
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    40fe:	41 96       	adiw	r24, 0x11	; 17
    4100:	16 d4       	rcall	.+2092   	; 0x492e <xTaskRemoveFromEventList>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    4102:	81 11       	cpse	r24, r1
    4104:	32 dd       	rcall	.-1436   	; 0x3b6a <vPortYield>
				return pdPASS;
    4106:	0f 90       	pop	r0
    4108:	0f be       	out	0x3f, r0	; 63
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    410a:	81 e0       	ldi	r24, 0x01	; 1
    410c:	58 c0       	rjmp	.+176    	; 0x41be <xQueueGenericReceive+0x150>
    410e:	8c 81       	ldd	r24, Y+4	; 0x04
    4110:	9d 81       	ldd	r25, Y+5	; 0x05
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    4112:	89 2b       	or	r24, r25
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    4114:	21 f4       	brne	.+8      	; 0x411e <xQueueGenericReceive+0xb0>
				}
				else if( xEntryTimeSet == pdFALSE )
    4116:	0f 90       	pop	r0
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    4118:	0f be       	out	0x3f, r0	; 63
    411a:	80 e0       	ldi	r24, 0x00	; 0
    411c:	50 c0       	rjmp	.+160    	; 0x41be <xQueueGenericReceive+0x150>
					xEntryTimeSet = pdTRUE;
    411e:	e1 10       	cpse	r14, r1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    4120:	04 c0       	rjmp	.+8      	; 0x412a <xQueueGenericReceive+0xbc>
    4122:	ce 01       	movw	r24, r28

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    4124:	01 96       	adiw	r24, 0x01	; 1
    4126:	49 d4       	rcall	.+2194   	; 0x49ba <vTaskSetTimeOutState>
		prvLockQueue( pxQueue );
    4128:	e9 2c       	mov	r14, r9
    412a:	0f 90       	pop	r0
    412c:	0f be       	out	0x3f, r0	; 63
    412e:	f2 d1       	rcall	.+996    	; 0x4514 <vTaskSuspendAll>
    4130:	0f b6       	in	r0, 0x3f	; 63
    4132:	f8 94       	cli
    4134:	0f 92       	push	r0
    4136:	f8 01       	movw	r30, r16
    4138:	85 8d       	ldd	r24, Z+29	; 0x1d
    413a:	8f 3f       	cpi	r24, 0xFF	; 255
    413c:	09 f4       	brne	.+2      	; 0x4140 <xQueueGenericReceive+0xd2>
    413e:	15 8e       	std	Z+29, r1	; 0x1d
    4140:	f8 01       	movw	r30, r16

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    4142:	86 8d       	ldd	r24, Z+30	; 0x1e
    4144:	8f 3f       	cpi	r24, 0xFF	; 255
    4146:	09 f4       	brne	.+2      	; 0x414a <xQueueGenericReceive+0xdc>
    4148:	16 8e       	std	Z+30, r1	; 0x1e
    414a:	0f 90       	pop	r0
    414c:	0f be       	out	0x3f, r0	; 63
    414e:	be 01       	movw	r22, r28
    4150:	6c 5f       	subi	r22, 0xFC	; 252
    4152:	7f 4f       	sbci	r23, 0xFF	; 255

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    4154:	ce 01       	movw	r24, r28
    4156:	01 96       	adiw	r24, 0x01	; 1
    4158:	3b d4       	rcall	.+2166   	; 0x49d0 <xTaskCheckForTimeOut>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    415a:	81 11       	cpse	r24, r1
    415c:	24 c0       	rjmp	.+72     	; 0x41a6 <xQueueGenericReceive+0x138>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    415e:	0f b6       	in	r0, 0x3f	; 63
    4160:	f8 94       	cli
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    4162:	0f 92       	push	r0
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    4164:	f8 01       	movw	r30, r16
    4166:	82 8d       	ldd	r24, Z+26	; 0x1a
    4168:	0f 90       	pop	r0
					{
						taskENTER_CRITICAL();
    416a:	0f be       	out	0x3f, r0	; 63
    416c:	81 11       	cpse	r24, r1
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    416e:	17 c0       	rjmp	.+46     	; 0x419e <xQueueGenericReceive+0x130>
    4170:	80 81       	ld	r24, Z
						}
						taskEXIT_CRITICAL();
    4172:	91 81       	ldd	r25, Z+1	; 0x01
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    4174:	89 2b       	or	r24, r25
    4176:	41 f4       	brne	.+16     	; 0x4188 <xQueueGenericReceive+0x11a>
    4178:	0f b6       	in	r0, 0x3f	; 63
				prvUnlockQueue( pxQueue );
    417a:	f8 94       	cli
				if( xTaskResumeAll() == pdFALSE )
    417c:	0f 92       	push	r0
    417e:	82 81       	ldd	r24, Z+2	; 0x02
    4180:	93 81       	ldd	r25, Z+3	; 0x03
    4182:	62 d4       	rcall	.+2244   	; 0x4a48 <vTaskPriorityInherit>
				{
					portYIELD_WITHIN_API();
    4184:	0f 90       	pop	r0
    4186:	0f be       	out	0x3f, r0	; 63
    4188:	6c 81       	ldd	r22, Y+4	; 0x04
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    418a:	7d 81       	ldd	r23, Y+5	; 0x05
    418c:	c6 01       	movw	r24, r12
    418e:	bf d3       	rcall	.+1918   	; 0x490e <vTaskPlaceOnEventList>
				( void ) xTaskResumeAll();
    4190:	c8 01       	movw	r24, r16
    4192:	17 de       	rcall	.-978    	; 0x3dc2 <prvUnlockQueue>
    4194:	7c d2       	rcall	.+1272   	; 0x468e <xTaskResumeAll>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    4196:	81 11       	cpse	r24, r1
    4198:	87 cf       	rjmp	.-242    	; 0x40a8 <xQueueGenericReceive+0x3a>
    419a:	e7 dc       	rcall	.-1586   	; 0x3b6a <vPortYield>
			( void ) xTaskResumeAll();
    419c:	85 cf       	rjmp	.-246    	; 0x40a8 <xQueueGenericReceive+0x3a>
    419e:	c8 01       	movw	r24, r16

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    41a0:	10 de       	rcall	.-992    	; 0x3dc2 <prvUnlockQueue>
    41a2:	75 d2       	rcall	.+1258   	; 0x468e <xTaskResumeAll>
    41a4:	81 cf       	rjmp	.-254    	; 0x40a8 <xQueueGenericReceive+0x3a>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    41a6:	c8 01       	movw	r24, r16
    41a8:	0c de       	rcall	.-1000   	; 0x3dc2 <prvUnlockQueue>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    41aa:	71 d2       	rcall	.+1250   	; 0x468e <xTaskResumeAll>
    41ac:	0f b6       	in	r0, 0x3f	; 63
		else
		{
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    41ae:	f8 94       	cli
    41b0:	0f 92       	push	r0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    41b2:	f8 01       	movw	r30, r16
    41b4:	82 8d       	ldd	r24, Z+26	; 0x1a
    41b6:	0f 90       	pop	r0
    41b8:	0f be       	out	0x3f, r0	; 63
    41ba:	81 11       	cpse	r24, r1
    41bc:	75 cf       	rjmp	.-278    	; 0x40a8 <xQueueGenericReceive+0x3a>
    41be:	0f 90       	pop	r0
    41c0:	0f 90       	pop	r0
    41c2:	0f 90       	pop	r0
    41c4:	0f 90       	pop	r0
    41c6:	0f 90       	pop	r0
    41c8:	df 91       	pop	r29
    41ca:	cf 91       	pop	r28
    41cc:	1f 91       	pop	r17
    41ce:	0f 91       	pop	r16
    41d0:	ff 90       	pop	r15
    41d2:	ef 90       	pop	r14
    41d4:	df 90       	pop	r13
    41d6:	cf 90       	pop	r12
    41d8:	bf 90       	pop	r11
    41da:	af 90       	pop	r10
    41dc:	9f 90       	pop	r9
    41de:	8f 90       	pop	r8
    41e0:	08 95       	ret

000041e2 <prvResetNextTaskUnblockTime>:
	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

	return uxReturn;
}
    41e2:	e0 91 e5 0d 	lds	r30, 0x0DE5	; 0x800de5 <pxDelayedTaskList>
    41e6:	f0 91 e6 0d 	lds	r31, 0x0DE6	; 0x800de6 <pxDelayedTaskList+0x1>
    41ea:	80 81       	ld	r24, Z
    41ec:	81 11       	cpse	r24, r1
    41ee:	07 c0       	rjmp	.+14     	; 0x41fe <prvResetNextTaskUnblockTime+0x1c>
    41f0:	8f ef       	ldi	r24, 0xFF	; 255
    41f2:	9f ef       	ldi	r25, 0xFF	; 255
    41f4:	90 93 bd 0d 	sts	0x0DBD, r25	; 0x800dbd <xNextTaskUnblockTime+0x1>
    41f8:	80 93 bc 0d 	sts	0x0DBC, r24	; 0x800dbc <xNextTaskUnblockTime>
    41fc:	08 95       	ret
    41fe:	e0 91 e5 0d 	lds	r30, 0x0DE5	; 0x800de5 <pxDelayedTaskList>
    4202:	f0 91 e6 0d 	lds	r31, 0x0DE6	; 0x800de6 <pxDelayedTaskList+0x1>
    4206:	05 80       	ldd	r0, Z+5	; 0x05
    4208:	f6 81       	ldd	r31, Z+6	; 0x06
    420a:	e0 2d       	mov	r30, r0
    420c:	06 80       	ldd	r0, Z+6	; 0x06
    420e:	f7 81       	ldd	r31, Z+7	; 0x07
    4210:	e0 2d       	mov	r30, r0
    4212:	82 81       	ldd	r24, Z+2	; 0x02
    4214:	93 81       	ldd	r25, Z+3	; 0x03
    4216:	90 93 bd 0d 	sts	0x0DBD, r25	; 0x800dbd <xNextTaskUnblockTime+0x1>
    421a:	80 93 bc 0d 	sts	0x0DBC, r24	; 0x800dbc <xNextTaskUnblockTime>
    421e:	08 95       	ret

00004220 <prvAddCurrentTaskToDelayedList>:
    4220:	ff 92       	push	r15
    4222:	0f 93       	push	r16
    4224:	1f 93       	push	r17
    4226:	cf 93       	push	r28
    4228:	df 93       	push	r29
    422a:	ec 01       	movw	r28, r24
    422c:	f6 2e       	mov	r15, r22
    422e:	00 91 c4 0d 	lds	r16, 0x0DC4	; 0x800dc4 <xTickCount>
    4232:	10 91 c5 0d 	lds	r17, 0x0DC5	; 0x800dc5 <xTickCount+0x1>
    4236:	80 91 1d 0e 	lds	r24, 0x0E1D	; 0x800e1d <pxCurrentTCB>
    423a:	90 91 1e 0e 	lds	r25, 0x0E1E	; 0x800e1e <pxCurrentTCB+0x1>
    423e:	02 96       	adiw	r24, 0x02	; 2
    4240:	cd db       	rcall	.-2150   	; 0x39dc <uxListRemove>
    4242:	cf 3f       	cpi	r28, 0xFF	; 255
    4244:	8f ef       	ldi	r24, 0xFF	; 255
    4246:	d8 07       	cpc	r29, r24
    4248:	61 f4       	brne	.+24     	; 0x4262 <prvAddCurrentTaskToDelayedList+0x42>
    424a:	ff 20       	and	r15, r15
    424c:	51 f0       	breq	.+20     	; 0x4262 <prvAddCurrentTaskToDelayedList+0x42>
    424e:	60 91 1d 0e 	lds	r22, 0x0E1D	; 0x800e1d <pxCurrentTCB>
    4252:	70 91 1e 0e 	lds	r23, 0x0E1E	; 0x800e1e <pxCurrentTCB+0x1>
    4256:	6e 5f       	subi	r22, 0xFE	; 254
    4258:	7f 4f       	sbci	r23, 0xFF	; 255
    425a:	87 ec       	ldi	r24, 0xC7	; 199
    425c:	9d e0       	ldi	r25, 0x0D	; 13
    425e:	6c db       	rcall	.-2344   	; 0x3938 <vListInsertEnd>
    4260:	2d c0       	rjmp	.+90     	; 0x42bc <prvAddCurrentTaskToDelayedList+0x9c>
    4262:	c0 0f       	add	r28, r16
    4264:	d1 1f       	adc	r29, r17
    4266:	e0 91 1d 0e 	lds	r30, 0x0E1D	; 0x800e1d <pxCurrentTCB>
    426a:	f0 91 1e 0e 	lds	r31, 0x0E1E	; 0x800e1e <pxCurrentTCB+0x1>
    426e:	d3 83       	std	Z+3, r29	; 0x03
    4270:	c2 83       	std	Z+2, r28	; 0x02
    4272:	c0 17       	cp	r28, r16
    4274:	d1 07       	cpc	r29, r17
    4276:	60 f4       	brcc	.+24     	; 0x4290 <prvAddCurrentTaskToDelayedList+0x70>
    4278:	60 91 1d 0e 	lds	r22, 0x0E1D	; 0x800e1d <pxCurrentTCB>
    427c:	70 91 1e 0e 	lds	r23, 0x0E1E	; 0x800e1e <pxCurrentTCB+0x1>
    4280:	80 91 e3 0d 	lds	r24, 0x0DE3	; 0x800de3 <pxOverflowDelayedTaskList>
    4284:	90 91 e4 0d 	lds	r25, 0x0DE4	; 0x800de4 <pxOverflowDelayedTaskList+0x1>
    4288:	6e 5f       	subi	r22, 0xFE	; 254
    428a:	7f 4f       	sbci	r23, 0xFF	; 255
    428c:	76 db       	rcall	.-2324   	; 0x397a <vListInsert>
    428e:	16 c0       	rjmp	.+44     	; 0x42bc <prvAddCurrentTaskToDelayedList+0x9c>
    4290:	60 91 1d 0e 	lds	r22, 0x0E1D	; 0x800e1d <pxCurrentTCB>
    4294:	70 91 1e 0e 	lds	r23, 0x0E1E	; 0x800e1e <pxCurrentTCB+0x1>
    4298:	80 91 e5 0d 	lds	r24, 0x0DE5	; 0x800de5 <pxDelayedTaskList>
    429c:	90 91 e6 0d 	lds	r25, 0x0DE6	; 0x800de6 <pxDelayedTaskList+0x1>
    42a0:	6e 5f       	subi	r22, 0xFE	; 254
    42a2:	7f 4f       	sbci	r23, 0xFF	; 255
    42a4:	6a db       	rcall	.-2348   	; 0x397a <vListInsert>
    42a6:	80 91 bc 0d 	lds	r24, 0x0DBC	; 0x800dbc <xNextTaskUnblockTime>
    42aa:	90 91 bd 0d 	lds	r25, 0x0DBD	; 0x800dbd <xNextTaskUnblockTime+0x1>
    42ae:	c8 17       	cp	r28, r24
    42b0:	d9 07       	cpc	r29, r25
    42b2:	20 f4       	brcc	.+8      	; 0x42bc <prvAddCurrentTaskToDelayedList+0x9c>
    42b4:	d0 93 bd 0d 	sts	0x0DBD, r29	; 0x800dbd <xNextTaskUnblockTime+0x1>
    42b8:	c0 93 bc 0d 	sts	0x0DBC, r28	; 0x800dbc <xNextTaskUnblockTime>
    42bc:	df 91       	pop	r29
    42be:	cf 91       	pop	r28
    42c0:	1f 91       	pop	r17
    42c2:	0f 91       	pop	r16
    42c4:	ff 90       	pop	r15
    42c6:	08 95       	ret

000042c8 <xTaskCreate>:
    42c8:	4f 92       	push	r4
    42ca:	5f 92       	push	r5
    42cc:	6f 92       	push	r6
    42ce:	7f 92       	push	r7
    42d0:	8f 92       	push	r8
    42d2:	9f 92       	push	r9
    42d4:	af 92       	push	r10
    42d6:	bf 92       	push	r11
    42d8:	cf 92       	push	r12
    42da:	df 92       	push	r13
    42dc:	ef 92       	push	r14
    42de:	ff 92       	push	r15
    42e0:	0f 93       	push	r16
    42e2:	cf 93       	push	r28
    42e4:	df 93       	push	r29
    42e6:	4c 01       	movw	r8, r24
    42e8:	6b 01       	movw	r12, r22
    42ea:	5a 01       	movw	r10, r20
    42ec:	29 01       	movw	r4, r18
    42ee:	ca 01       	movw	r24, r20
    42f0:	dd da       	rcall	.-2630   	; 0x38ac <pvPortMalloc>
    42f2:	3c 01       	movw	r6, r24
    42f4:	89 2b       	or	r24, r25
    42f6:	09 f4       	brne	.+2      	; 0x42fa <xTaskCreate+0x32>
    42f8:	d4 c0       	rjmp	.+424    	; 0x44a2 <xTaskCreate+0x1da>
    42fa:	88 e2       	ldi	r24, 0x28	; 40
    42fc:	90 e0       	ldi	r25, 0x00	; 0
    42fe:	d6 da       	rcall	.-2644   	; 0x38ac <pvPortMalloc>
    4300:	ec 01       	movw	r28, r24
    4302:	89 2b       	or	r24, r25
    4304:	71 f0       	breq	.+28     	; 0x4322 <xTaskCreate+0x5a>
    4306:	78 8e       	std	Y+24, r7	; 0x18
    4308:	6f 8a       	std	Y+23, r6	; 0x17
    430a:	81 e0       	ldi	r24, 0x01	; 1
    430c:	a8 1a       	sub	r10, r24
    430e:	b1 08       	sbc	r11, r1
    4310:	6a 0c       	add	r6, r10
    4312:	7b 1c       	adc	r7, r11
    4314:	d6 01       	movw	r26, r12
    4316:	8c 91       	ld	r24, X
    4318:	89 8f       	std	Y+25, r24	; 0x19
    431a:	8c 91       	ld	r24, X
    431c:	81 11       	cpse	r24, r1
    431e:	04 c0       	rjmp	.+8      	; 0x4328 <xTaskCreate+0x60>
    4320:	17 c0       	rjmp	.+46     	; 0x4350 <xTaskCreate+0x88>
    4322:	c3 01       	movw	r24, r6
    4324:	f6 da       	rcall	.-2580   	; 0x3912 <vPortFree>
    4326:	bd c0       	rjmp	.+378    	; 0x44a2 <xTaskCreate+0x1da>
    4328:	ae 01       	movw	r20, r28
    432a:	46 5e       	subi	r20, 0xE6	; 230
    432c:	5f 4f       	sbci	r21, 0xFF	; 255
    432e:	f6 01       	movw	r30, r12
    4330:	31 96       	adiw	r30, 0x01	; 1
    4332:	b8 e0       	ldi	r27, 0x08	; 8
    4334:	cb 0e       	add	r12, r27
    4336:	d1 1c       	adc	r13, r1
    4338:	cf 01       	movw	r24, r30
    433a:	21 91       	ld	r18, Z+
    433c:	da 01       	movw	r26, r20
    433e:	2d 93       	st	X+, r18
    4340:	ad 01       	movw	r20, r26
    4342:	dc 01       	movw	r26, r24
    4344:	8c 91       	ld	r24, X
    4346:	88 23       	and	r24, r24
    4348:	19 f0       	breq	.+6      	; 0x4350 <xTaskCreate+0x88>
    434a:	ec 15       	cp	r30, r12
    434c:	fd 05       	cpc	r31, r13
    434e:	a1 f7       	brne	.-24     	; 0x4338 <xTaskCreate+0x70>
    4350:	18 a2       	std	Y+32, r1	; 0x20
    4352:	04 30       	cpi	r16, 0x04	; 4
    4354:	08 f0       	brcs	.+2      	; 0x4358 <xTaskCreate+0x90>
    4356:	03 e0       	ldi	r16, 0x03	; 3
    4358:	0e 8b       	std	Y+22, r16	; 0x16
    435a:	09 a3       	std	Y+33, r16	; 0x21
    435c:	1a a2       	std	Y+34, r1	; 0x22
    435e:	6e 01       	movw	r12, r28
    4360:	b2 e0       	ldi	r27, 0x02	; 2
    4362:	cb 0e       	add	r12, r27
    4364:	d1 1c       	adc	r13, r1
    4366:	c6 01       	movw	r24, r12
    4368:	e3 da       	rcall	.-2618   	; 0x3930 <vListInitialiseItem>
    436a:	ce 01       	movw	r24, r28
    436c:	0c 96       	adiw	r24, 0x0c	; 12
    436e:	e0 da       	rcall	.-2624   	; 0x3930 <vListInitialiseItem>
    4370:	d9 87       	std	Y+9, r29	; 0x09
    4372:	c8 87       	std	Y+8, r28	; 0x08
    4374:	84 e0       	ldi	r24, 0x04	; 4
    4376:	90 e0       	ldi	r25, 0x00	; 0
    4378:	80 1b       	sub	r24, r16
    437a:	91 09       	sbc	r25, r1
    437c:	9d 87       	std	Y+13, r25	; 0x0d
    437e:	8c 87       	std	Y+12, r24	; 0x0c
    4380:	db 8b       	std	Y+19, r29	; 0x13
    4382:	ca 8b       	std	Y+18, r28	; 0x12
    4384:	1b a2       	std	Y+35, r1	; 0x23
    4386:	1c a2       	std	Y+36, r1	; 0x24
    4388:	1d a2       	std	Y+37, r1	; 0x25
    438a:	1e a2       	std	Y+38, r1	; 0x26
    438c:	1f a2       	std	Y+39, r1	; 0x27
    438e:	a2 01       	movw	r20, r4
    4390:	b4 01       	movw	r22, r8
    4392:	c3 01       	movw	r24, r6
    4394:	49 db       	rcall	.-2414   	; 0x3a28 <pxPortInitialiseStack>
    4396:	99 83       	std	Y+1, r25	; 0x01
    4398:	88 83       	st	Y, r24
    439a:	e1 14       	cp	r14, r1
    439c:	f1 04       	cpc	r15, r1
    439e:	19 f0       	breq	.+6      	; 0x43a6 <xTaskCreate+0xde>
    43a0:	f7 01       	movw	r30, r14
    43a2:	d1 83       	std	Z+1, r29	; 0x01
    43a4:	c0 83       	st	Z, r28
    43a6:	0f b6       	in	r0, 0x3f	; 63
    43a8:	f8 94       	cli
    43aa:	0f 92       	push	r0
    43ac:	80 91 c6 0d 	lds	r24, 0x0DC6	; 0x800dc6 <uxCurrentNumberOfTasks>
    43b0:	8f 5f       	subi	r24, 0xFF	; 255
    43b2:	80 93 c6 0d 	sts	0x0DC6, r24	; 0x800dc6 <uxCurrentNumberOfTasks>
    43b6:	80 91 1d 0e 	lds	r24, 0x0E1D	; 0x800e1d <pxCurrentTCB>
    43ba:	90 91 1e 0e 	lds	r25, 0x0E1E	; 0x800e1e <pxCurrentTCB+0x1>
    43be:	89 2b       	or	r24, r25
    43c0:	89 f5       	brne	.+98     	; 0x4424 <xTaskCreate+0x15c>
    43c2:	d0 93 1e 0e 	sts	0x0E1E, r29	; 0x800e1e <pxCurrentTCB+0x1>
    43c6:	c0 93 1d 0e 	sts	0x0E1D, r28	; 0x800e1d <pxCurrentTCB>
    43ca:	80 91 c6 0d 	lds	r24, 0x0DC6	; 0x800dc6 <uxCurrentNumberOfTasks>
    43ce:	81 30       	cpi	r24, 0x01	; 1
    43d0:	09 f0       	breq	.+2      	; 0x43d4 <xTaskCreate+0x10c>
    43d2:	38 c0       	rjmp	.+112    	; 0x4444 <xTaskCreate+0x17c>
    43d4:	89 ef       	ldi	r24, 0xF9	; 249
    43d6:	9d e0       	ldi	r25, 0x0D	; 13
    43d8:	9d da       	rcall	.-2758   	; 0x3914 <vListInitialise>
    43da:	82 e0       	ldi	r24, 0x02	; 2
    43dc:	9e e0       	ldi	r25, 0x0E	; 14
    43de:	9a da       	rcall	.-2764   	; 0x3914 <vListInitialise>
    43e0:	8b e0       	ldi	r24, 0x0B	; 11
    43e2:	9e e0       	ldi	r25, 0x0E	; 14
    43e4:	97 da       	rcall	.-2770   	; 0x3914 <vListInitialise>
    43e6:	84 e1       	ldi	r24, 0x14	; 20
    43e8:	9e e0       	ldi	r25, 0x0E	; 14
    43ea:	94 da       	rcall	.-2776   	; 0x3914 <vListInitialise>
    43ec:	80 ef       	ldi	r24, 0xF0	; 240
    43ee:	9d e0       	ldi	r25, 0x0D	; 13
    43f0:	91 da       	rcall	.-2782   	; 0x3914 <vListInitialise>
    43f2:	87 ee       	ldi	r24, 0xE7	; 231
    43f4:	9d e0       	ldi	r25, 0x0D	; 13
    43f6:	8e da       	rcall	.-2788   	; 0x3914 <vListInitialise>
    43f8:	8a ed       	ldi	r24, 0xDA	; 218
    43fa:	9d e0       	ldi	r25, 0x0D	; 13
    43fc:	8b da       	rcall	.-2794   	; 0x3914 <vListInitialise>
    43fe:	81 ed       	ldi	r24, 0xD1	; 209
    4400:	9d e0       	ldi	r25, 0x0D	; 13
    4402:	88 da       	rcall	.-2800   	; 0x3914 <vListInitialise>
    4404:	87 ec       	ldi	r24, 0xC7	; 199
    4406:	9d e0       	ldi	r25, 0x0D	; 13
    4408:	85 da       	rcall	.-2806   	; 0x3914 <vListInitialise>
    440a:	80 ef       	ldi	r24, 0xF0	; 240
    440c:	9d e0       	ldi	r25, 0x0D	; 13
    440e:	90 93 e6 0d 	sts	0x0DE6, r25	; 0x800de6 <pxDelayedTaskList+0x1>
    4412:	80 93 e5 0d 	sts	0x0DE5, r24	; 0x800de5 <pxDelayedTaskList>
    4416:	87 ee       	ldi	r24, 0xE7	; 231
    4418:	9d e0       	ldi	r25, 0x0D	; 13
    441a:	90 93 e4 0d 	sts	0x0DE4, r25	; 0x800de4 <pxOverflowDelayedTaskList+0x1>
    441e:	80 93 e3 0d 	sts	0x0DE3, r24	; 0x800de3 <pxOverflowDelayedTaskList>
    4422:	10 c0       	rjmp	.+32     	; 0x4444 <xTaskCreate+0x17c>
    4424:	80 91 c2 0d 	lds	r24, 0x0DC2	; 0x800dc2 <xSchedulerRunning>
    4428:	81 11       	cpse	r24, r1
    442a:	0c c0       	rjmp	.+24     	; 0x4444 <xTaskCreate+0x17c>
    442c:	e0 91 1d 0e 	lds	r30, 0x0E1D	; 0x800e1d <pxCurrentTCB>
    4430:	f0 91 1e 0e 	lds	r31, 0x0E1E	; 0x800e1e <pxCurrentTCB+0x1>
    4434:	96 89       	ldd	r25, Z+22	; 0x16
    4436:	8e 89       	ldd	r24, Y+22	; 0x16
    4438:	89 17       	cp	r24, r25
    443a:	20 f0       	brcs	.+8      	; 0x4444 <xTaskCreate+0x17c>
    443c:	d0 93 1e 0e 	sts	0x0E1E, r29	; 0x800e1e <pxCurrentTCB+0x1>
    4440:	c0 93 1d 0e 	sts	0x0E1D, r28	; 0x800e1d <pxCurrentTCB>
    4444:	80 91 be 0d 	lds	r24, 0x0DBE	; 0x800dbe <uxTaskNumber>
    4448:	8f 5f       	subi	r24, 0xFF	; 255
    444a:	80 93 be 0d 	sts	0x0DBE, r24	; 0x800dbe <uxTaskNumber>
    444e:	8e 89       	ldd	r24, Y+22	; 0x16
    4450:	90 91 c3 0d 	lds	r25, 0x0DC3	; 0x800dc3 <uxTopReadyPriority>
    4454:	98 17       	cp	r25, r24
    4456:	10 f4       	brcc	.+4      	; 0x445c <xTaskCreate+0x194>
    4458:	80 93 c3 0d 	sts	0x0DC3, r24	; 0x800dc3 <uxTopReadyPriority>
    445c:	90 e0       	ldi	r25, 0x00	; 0
    445e:	9c 01       	movw	r18, r24
    4460:	22 0f       	add	r18, r18
    4462:	33 1f       	adc	r19, r19
    4464:	22 0f       	add	r18, r18
    4466:	33 1f       	adc	r19, r19
    4468:	22 0f       	add	r18, r18
    446a:	33 1f       	adc	r19, r19
    446c:	82 0f       	add	r24, r18
    446e:	93 1f       	adc	r25, r19
    4470:	b6 01       	movw	r22, r12
    4472:	87 50       	subi	r24, 0x07	; 7
    4474:	92 4f       	sbci	r25, 0xF2	; 242
    4476:	60 da       	rcall	.-2880   	; 0x3938 <vListInsertEnd>
    4478:	0f 90       	pop	r0
    447a:	0f be       	out	0x3f, r0	; 63
    447c:	80 91 c2 0d 	lds	r24, 0x0DC2	; 0x800dc2 <xSchedulerRunning>
    4480:	88 23       	and	r24, r24
    4482:	59 f0       	breq	.+22     	; 0x449a <xTaskCreate+0x1d2>
    4484:	e0 91 1d 0e 	lds	r30, 0x0E1D	; 0x800e1d <pxCurrentTCB>
    4488:	f0 91 1e 0e 	lds	r31, 0x0E1E	; 0x800e1e <pxCurrentTCB+0x1>
    448c:	96 89       	ldd	r25, Z+22	; 0x16
    448e:	8e 89       	ldd	r24, Y+22	; 0x16
    4490:	98 17       	cp	r25, r24
    4492:	28 f4       	brcc	.+10     	; 0x449e <xTaskCreate+0x1d6>
    4494:	6a db       	rcall	.-2348   	; 0x3b6a <vPortYield>
    4496:	81 e0       	ldi	r24, 0x01	; 1
    4498:	05 c0       	rjmp	.+10     	; 0x44a4 <xTaskCreate+0x1dc>
    449a:	81 e0       	ldi	r24, 0x01	; 1
    449c:	03 c0       	rjmp	.+6      	; 0x44a4 <xTaskCreate+0x1dc>
    449e:	81 e0       	ldi	r24, 0x01	; 1
    44a0:	01 c0       	rjmp	.+2      	; 0x44a4 <xTaskCreate+0x1dc>
    44a2:	8f ef       	ldi	r24, 0xFF	; 255
    44a4:	df 91       	pop	r29
    44a6:	cf 91       	pop	r28
    44a8:	0f 91       	pop	r16
    44aa:	ff 90       	pop	r15
    44ac:	ef 90       	pop	r14
    44ae:	df 90       	pop	r13
    44b0:	cf 90       	pop	r12
    44b2:	bf 90       	pop	r11
    44b4:	af 90       	pop	r10
    44b6:	9f 90       	pop	r9
    44b8:	8f 90       	pop	r8
    44ba:	7f 90       	pop	r7
    44bc:	6f 90       	pop	r6
    44be:	5f 90       	pop	r5
    44c0:	4f 90       	pop	r4
    44c2:	08 95       	ret

000044c4 <vTaskStartScheduler>:
    44c4:	ef 92       	push	r14
    44c6:	ff 92       	push	r15
    44c8:	0f 93       	push	r16
    44ca:	0f 2e       	mov	r0, r31
    44cc:	fa eb       	ldi	r31, 0xBA	; 186
    44ce:	ef 2e       	mov	r14, r31
    44d0:	fd e0       	ldi	r31, 0x0D	; 13
    44d2:	ff 2e       	mov	r15, r31
    44d4:	f0 2d       	mov	r31, r0
    44d6:	00 e0       	ldi	r16, 0x00	; 0
    44d8:	20 e0       	ldi	r18, 0x00	; 0
    44da:	30 e0       	ldi	r19, 0x00	; 0
    44dc:	45 e5       	ldi	r20, 0x55	; 85
    44de:	50 e0       	ldi	r21, 0x00	; 0
    44e0:	6d e3       	ldi	r22, 0x3D	; 61
    44e2:	72 e0       	ldi	r23, 0x02	; 2
    44e4:	80 ed       	ldi	r24, 0xD0	; 208
    44e6:	93 e2       	ldi	r25, 0x23	; 35
    44e8:	ef de       	rcall	.-546    	; 0x42c8 <xTaskCreate>
    44ea:	81 30       	cpi	r24, 0x01	; 1
    44ec:	79 f4       	brne	.+30     	; 0x450c <vTaskStartScheduler+0x48>
    44ee:	f8 94       	cli
    44f0:	8f ef       	ldi	r24, 0xFF	; 255
    44f2:	9f ef       	ldi	r25, 0xFF	; 255
    44f4:	90 93 bd 0d 	sts	0x0DBD, r25	; 0x800dbd <xNextTaskUnblockTime+0x1>
    44f8:	80 93 bc 0d 	sts	0x0DBC, r24	; 0x800dbc <xNextTaskUnblockTime>
    44fc:	81 e0       	ldi	r24, 0x01	; 1
    44fe:	80 93 c2 0d 	sts	0x0DC2, r24	; 0x800dc2 <xSchedulerRunning>
    4502:	10 92 c5 0d 	sts	0x0DC5, r1	; 0x800dc5 <xTickCount+0x1>
    4506:	10 92 c4 0d 	sts	0x0DC4, r1	; 0x800dc4 <xTickCount>
    450a:	fa da       	rcall	.-2572   	; 0x3b00 <xPortStartScheduler>
    450c:	0f 91       	pop	r16
    450e:	ff 90       	pop	r15
    4510:	ef 90       	pop	r14
    4512:	08 95       	ret

00004514 <vTaskSuspendAll>:
    4514:	80 91 b9 0d 	lds	r24, 0x0DB9	; 0x800db9 <uxSchedulerSuspended>
    4518:	8f 5f       	subi	r24, 0xFF	; 255
    451a:	80 93 b9 0d 	sts	0x0DB9, r24	; 0x800db9 <uxSchedulerSuspended>
    451e:	08 95       	ret

00004520 <xTaskIncrementTick>:
    4520:	cf 92       	push	r12
    4522:	df 92       	push	r13
    4524:	ef 92       	push	r14
    4526:	ff 92       	push	r15
    4528:	0f 93       	push	r16
    452a:	1f 93       	push	r17
    452c:	cf 93       	push	r28
    452e:	df 93       	push	r29
    4530:	80 91 b9 0d 	lds	r24, 0x0DB9	; 0x800db9 <uxSchedulerSuspended>
    4534:	81 11       	cpse	r24, r1
    4536:	95 c0       	rjmp	.+298    	; 0x4662 <xTaskIncrementTick+0x142>
    4538:	e0 90 c4 0d 	lds	r14, 0x0DC4	; 0x800dc4 <xTickCount>
    453c:	f0 90 c5 0d 	lds	r15, 0x0DC5	; 0x800dc5 <xTickCount+0x1>
    4540:	8f ef       	ldi	r24, 0xFF	; 255
    4542:	e8 1a       	sub	r14, r24
    4544:	f8 0a       	sbc	r15, r24
    4546:	f0 92 c5 0d 	sts	0x0DC5, r15	; 0x800dc5 <xTickCount+0x1>
    454a:	e0 92 c4 0d 	sts	0x0DC4, r14	; 0x800dc4 <xTickCount>
    454e:	e1 14       	cp	r14, r1
    4550:	f1 04       	cpc	r15, r1
    4552:	b1 f4       	brne	.+44     	; 0x4580 <xTaskIncrementTick+0x60>
    4554:	80 91 e5 0d 	lds	r24, 0x0DE5	; 0x800de5 <pxDelayedTaskList>
    4558:	90 91 e6 0d 	lds	r25, 0x0DE6	; 0x800de6 <pxDelayedTaskList+0x1>
    455c:	20 91 e3 0d 	lds	r18, 0x0DE3	; 0x800de3 <pxOverflowDelayedTaskList>
    4560:	30 91 e4 0d 	lds	r19, 0x0DE4	; 0x800de4 <pxOverflowDelayedTaskList+0x1>
    4564:	30 93 e6 0d 	sts	0x0DE6, r19	; 0x800de6 <pxDelayedTaskList+0x1>
    4568:	20 93 e5 0d 	sts	0x0DE5, r18	; 0x800de5 <pxDelayedTaskList>
    456c:	90 93 e4 0d 	sts	0x0DE4, r25	; 0x800de4 <pxOverflowDelayedTaskList+0x1>
    4570:	80 93 e3 0d 	sts	0x0DE3, r24	; 0x800de3 <pxOverflowDelayedTaskList>
    4574:	80 91 bf 0d 	lds	r24, 0x0DBF	; 0x800dbf <xNumOfOverflows>
    4578:	8f 5f       	subi	r24, 0xFF	; 255
    457a:	80 93 bf 0d 	sts	0x0DBF, r24	; 0x800dbf <xNumOfOverflows>
    457e:	31 de       	rcall	.-926    	; 0x41e2 <prvResetNextTaskUnblockTime>
    4580:	80 91 bc 0d 	lds	r24, 0x0DBC	; 0x800dbc <xNextTaskUnblockTime>
    4584:	90 91 bd 0d 	lds	r25, 0x0DBD	; 0x800dbd <xNextTaskUnblockTime+0x1>
    4588:	e8 16       	cp	r14, r24
    458a:	f9 06       	cpc	r15, r25
    458c:	10 f4       	brcc	.+4      	; 0x4592 <xTaskIncrementTick+0x72>
    458e:	d1 2c       	mov	r13, r1
    4590:	50 c0       	rjmp	.+160    	; 0x4632 <xTaskIncrementTick+0x112>
    4592:	d1 2c       	mov	r13, r1
    4594:	cc 24       	eor	r12, r12
    4596:	c3 94       	inc	r12
    4598:	e0 91 e5 0d 	lds	r30, 0x0DE5	; 0x800de5 <pxDelayedTaskList>
    459c:	f0 91 e6 0d 	lds	r31, 0x0DE6	; 0x800de6 <pxDelayedTaskList+0x1>
    45a0:	80 81       	ld	r24, Z
    45a2:	81 11       	cpse	r24, r1
    45a4:	07 c0       	rjmp	.+14     	; 0x45b4 <xTaskIncrementTick+0x94>
    45a6:	8f ef       	ldi	r24, 0xFF	; 255
    45a8:	9f ef       	ldi	r25, 0xFF	; 255
    45aa:	90 93 bd 0d 	sts	0x0DBD, r25	; 0x800dbd <xNextTaskUnblockTime+0x1>
    45ae:	80 93 bc 0d 	sts	0x0DBC, r24	; 0x800dbc <xNextTaskUnblockTime>
    45b2:	3f c0       	rjmp	.+126    	; 0x4632 <xTaskIncrementTick+0x112>
    45b4:	e0 91 e5 0d 	lds	r30, 0x0DE5	; 0x800de5 <pxDelayedTaskList>
    45b8:	f0 91 e6 0d 	lds	r31, 0x0DE6	; 0x800de6 <pxDelayedTaskList+0x1>
    45bc:	05 80       	ldd	r0, Z+5	; 0x05
    45be:	f6 81       	ldd	r31, Z+6	; 0x06
    45c0:	e0 2d       	mov	r30, r0
    45c2:	c6 81       	ldd	r28, Z+6	; 0x06
    45c4:	d7 81       	ldd	r29, Z+7	; 0x07
    45c6:	8a 81       	ldd	r24, Y+2	; 0x02
    45c8:	9b 81       	ldd	r25, Y+3	; 0x03
    45ca:	e8 16       	cp	r14, r24
    45cc:	f9 06       	cpc	r15, r25
    45ce:	28 f4       	brcc	.+10     	; 0x45da <xTaskIncrementTick+0xba>
    45d0:	90 93 bd 0d 	sts	0x0DBD, r25	; 0x800dbd <xNextTaskUnblockTime+0x1>
    45d4:	80 93 bc 0d 	sts	0x0DBC, r24	; 0x800dbc <xNextTaskUnblockTime>
    45d8:	2c c0       	rjmp	.+88     	; 0x4632 <xTaskIncrementTick+0x112>
    45da:	8e 01       	movw	r16, r28
    45dc:	0e 5f       	subi	r16, 0xFE	; 254
    45de:	1f 4f       	sbci	r17, 0xFF	; 255
    45e0:	c8 01       	movw	r24, r16
    45e2:	fc d9       	rcall	.-3080   	; 0x39dc <uxListRemove>
    45e4:	8c 89       	ldd	r24, Y+20	; 0x14
    45e6:	9d 89       	ldd	r25, Y+21	; 0x15
    45e8:	89 2b       	or	r24, r25
    45ea:	19 f0       	breq	.+6      	; 0x45f2 <xTaskIncrementTick+0xd2>
    45ec:	ce 01       	movw	r24, r28
    45ee:	0c 96       	adiw	r24, 0x0c	; 12
    45f0:	f5 d9       	rcall	.-3094   	; 0x39dc <uxListRemove>
    45f2:	8e 89       	ldd	r24, Y+22	; 0x16
    45f4:	90 91 c3 0d 	lds	r25, 0x0DC3	; 0x800dc3 <uxTopReadyPriority>
    45f8:	98 17       	cp	r25, r24
    45fa:	10 f4       	brcc	.+4      	; 0x4600 <xTaskIncrementTick+0xe0>
    45fc:	80 93 c3 0d 	sts	0x0DC3, r24	; 0x800dc3 <uxTopReadyPriority>
    4600:	90 e0       	ldi	r25, 0x00	; 0
    4602:	9c 01       	movw	r18, r24
    4604:	22 0f       	add	r18, r18
    4606:	33 1f       	adc	r19, r19
    4608:	22 0f       	add	r18, r18
    460a:	33 1f       	adc	r19, r19
    460c:	22 0f       	add	r18, r18
    460e:	33 1f       	adc	r19, r19
    4610:	82 0f       	add	r24, r18
    4612:	93 1f       	adc	r25, r19
    4614:	b8 01       	movw	r22, r16
    4616:	87 50       	subi	r24, 0x07	; 7
    4618:	92 4f       	sbci	r25, 0xF2	; 242
    461a:	8e d9       	rcall	.-3300   	; 0x3938 <vListInsertEnd>
    461c:	e0 91 1d 0e 	lds	r30, 0x0E1D	; 0x800e1d <pxCurrentTCB>
    4620:	f0 91 1e 0e 	lds	r31, 0x0E1E	; 0x800e1e <pxCurrentTCB+0x1>
    4624:	9e 89       	ldd	r25, Y+22	; 0x16
    4626:	86 89       	ldd	r24, Z+22	; 0x16
    4628:	98 17       	cp	r25, r24
    462a:	08 f4       	brcc	.+2      	; 0x462e <xTaskIncrementTick+0x10e>
    462c:	b5 cf       	rjmp	.-150    	; 0x4598 <xTaskIncrementTick+0x78>
    462e:	dc 2c       	mov	r13, r12
    4630:	b3 cf       	rjmp	.-154    	; 0x4598 <xTaskIncrementTick+0x78>
    4632:	e0 91 1d 0e 	lds	r30, 0x0E1D	; 0x800e1d <pxCurrentTCB>
    4636:	f0 91 1e 0e 	lds	r31, 0x0E1E	; 0x800e1e <pxCurrentTCB+0x1>
    463a:	86 89       	ldd	r24, Z+22	; 0x16
    463c:	90 e0       	ldi	r25, 0x00	; 0
    463e:	fc 01       	movw	r30, r24
    4640:	ee 0f       	add	r30, r30
    4642:	ff 1f       	adc	r31, r31
    4644:	ee 0f       	add	r30, r30
    4646:	ff 1f       	adc	r31, r31
    4648:	ee 0f       	add	r30, r30
    464a:	ff 1f       	adc	r31, r31
    464c:	8e 0f       	add	r24, r30
    464e:	9f 1f       	adc	r25, r31
    4650:	fc 01       	movw	r30, r24
    4652:	e7 50       	subi	r30, 0x07	; 7
    4654:	f2 4f       	sbci	r31, 0xF2	; 242
    4656:	80 81       	ld	r24, Z
    4658:	82 30       	cpi	r24, 0x02	; 2
    465a:	48 f0       	brcs	.+18     	; 0x466e <xTaskIncrementTick+0x14e>
    465c:	dd 24       	eor	r13, r13
    465e:	d3 94       	inc	r13
    4660:	06 c0       	rjmp	.+12     	; 0x466e <xTaskIncrementTick+0x14e>
    4662:	80 91 c1 0d 	lds	r24, 0x0DC1	; 0x800dc1 <uxPendedTicks>
    4666:	8f 5f       	subi	r24, 0xFF	; 255
    4668:	80 93 c1 0d 	sts	0x0DC1, r24	; 0x800dc1 <uxPendedTicks>
    466c:	d1 2c       	mov	r13, r1
    466e:	80 91 c0 0d 	lds	r24, 0x0DC0	; 0x800dc0 <xYieldPending>
    4672:	88 23       	and	r24, r24
    4674:	11 f0       	breq	.+4      	; 0x467a <xTaskIncrementTick+0x15a>
    4676:	dd 24       	eor	r13, r13
    4678:	d3 94       	inc	r13
    467a:	8d 2d       	mov	r24, r13
    467c:	df 91       	pop	r29
    467e:	cf 91       	pop	r28
    4680:	1f 91       	pop	r17
    4682:	0f 91       	pop	r16
    4684:	ff 90       	pop	r15
    4686:	ef 90       	pop	r14
    4688:	df 90       	pop	r13
    468a:	cf 90       	pop	r12
    468c:	08 95       	ret

0000468e <xTaskResumeAll>:
    468e:	df 92       	push	r13
    4690:	ef 92       	push	r14
    4692:	ff 92       	push	r15
    4694:	0f 93       	push	r16
    4696:	1f 93       	push	r17
    4698:	cf 93       	push	r28
    469a:	df 93       	push	r29
    469c:	0f b6       	in	r0, 0x3f	; 63
    469e:	f8 94       	cli
    46a0:	0f 92       	push	r0
    46a2:	80 91 b9 0d 	lds	r24, 0x0DB9	; 0x800db9 <uxSchedulerSuspended>
    46a6:	81 50       	subi	r24, 0x01	; 1
    46a8:	80 93 b9 0d 	sts	0x0DB9, r24	; 0x800db9 <uxSchedulerSuspended>
    46ac:	80 91 b9 0d 	lds	r24, 0x0DB9	; 0x800db9 <uxSchedulerSuspended>
    46b0:	81 11       	cpse	r24, r1
    46b2:	59 c0       	rjmp	.+178    	; 0x4766 <xTaskResumeAll+0xd8>
    46b4:	80 91 c6 0d 	lds	r24, 0x0DC6	; 0x800dc6 <uxCurrentNumberOfTasks>
    46b8:	81 11       	cpse	r24, r1
    46ba:	30 c0       	rjmp	.+96     	; 0x471c <xTaskResumeAll+0x8e>
    46bc:	57 c0       	rjmp	.+174    	; 0x476c <xTaskResumeAll+0xde>
    46be:	d7 01       	movw	r26, r14
    46c0:	15 96       	adiw	r26, 0x05	; 5
    46c2:	ed 91       	ld	r30, X+
    46c4:	fc 91       	ld	r31, X
    46c6:	16 97       	sbiw	r26, 0x06	; 6
    46c8:	c6 81       	ldd	r28, Z+6	; 0x06
    46ca:	d7 81       	ldd	r29, Z+7	; 0x07
    46cc:	ce 01       	movw	r24, r28
    46ce:	0c 96       	adiw	r24, 0x0c	; 12
    46d0:	85 d9       	rcall	.-3318   	; 0x39dc <uxListRemove>
    46d2:	8e 01       	movw	r16, r28
    46d4:	0e 5f       	subi	r16, 0xFE	; 254
    46d6:	1f 4f       	sbci	r17, 0xFF	; 255
    46d8:	c8 01       	movw	r24, r16
    46da:	80 d9       	rcall	.-3328   	; 0x39dc <uxListRemove>
    46dc:	8e 89       	ldd	r24, Y+22	; 0x16
    46de:	90 91 c3 0d 	lds	r25, 0x0DC3	; 0x800dc3 <uxTopReadyPriority>
    46e2:	98 17       	cp	r25, r24
    46e4:	10 f4       	brcc	.+4      	; 0x46ea <xTaskResumeAll+0x5c>
    46e6:	80 93 c3 0d 	sts	0x0DC3, r24	; 0x800dc3 <uxTopReadyPriority>
    46ea:	90 e0       	ldi	r25, 0x00	; 0
    46ec:	9c 01       	movw	r18, r24
    46ee:	22 0f       	add	r18, r18
    46f0:	33 1f       	adc	r19, r19
    46f2:	22 0f       	add	r18, r18
    46f4:	33 1f       	adc	r19, r19
    46f6:	22 0f       	add	r18, r18
    46f8:	33 1f       	adc	r19, r19
    46fa:	82 0f       	add	r24, r18
    46fc:	93 1f       	adc	r25, r19
    46fe:	b8 01       	movw	r22, r16
    4700:	87 50       	subi	r24, 0x07	; 7
    4702:	92 4f       	sbci	r25, 0xF2	; 242
    4704:	19 d9       	rcall	.-3534   	; 0x3938 <vListInsertEnd>
    4706:	e0 91 1d 0e 	lds	r30, 0x0E1D	; 0x800e1d <pxCurrentTCB>
    470a:	f0 91 1e 0e 	lds	r31, 0x0E1E	; 0x800e1e <pxCurrentTCB+0x1>
    470e:	9e 89       	ldd	r25, Y+22	; 0x16
    4710:	86 89       	ldd	r24, Z+22	; 0x16
    4712:	98 17       	cp	r25, r24
    4714:	68 f0       	brcs	.+26     	; 0x4730 <xTaskResumeAll+0xa2>
    4716:	d0 92 c0 0d 	sts	0x0DC0, r13	; 0x800dc0 <xYieldPending>
    471a:	0a c0       	rjmp	.+20     	; 0x4730 <xTaskResumeAll+0xa2>
    471c:	c0 e0       	ldi	r28, 0x00	; 0
    471e:	d0 e0       	ldi	r29, 0x00	; 0
    4720:	0f 2e       	mov	r0, r31
    4722:	fa ed       	ldi	r31, 0xDA	; 218
    4724:	ef 2e       	mov	r14, r31
    4726:	fd e0       	ldi	r31, 0x0D	; 13
    4728:	ff 2e       	mov	r15, r31
    472a:	f0 2d       	mov	r31, r0
    472c:	dd 24       	eor	r13, r13
    472e:	d3 94       	inc	r13
    4730:	f7 01       	movw	r30, r14
    4732:	80 81       	ld	r24, Z
    4734:	81 11       	cpse	r24, r1
    4736:	c3 cf       	rjmp	.-122    	; 0x46be <xTaskResumeAll+0x30>
    4738:	cd 2b       	or	r28, r29
    473a:	09 f0       	breq	.+2      	; 0x473e <xTaskResumeAll+0xb0>
    473c:	52 dd       	rcall	.-1372   	; 0x41e2 <prvResetNextTaskUnblockTime>
    473e:	c0 91 c1 0d 	lds	r28, 0x0DC1	; 0x800dc1 <uxPendedTicks>
    4742:	cc 23       	and	r28, r28
    4744:	49 f0       	breq	.+18     	; 0x4758 <xTaskResumeAll+0xca>
    4746:	d1 e0       	ldi	r29, 0x01	; 1
    4748:	eb de       	rcall	.-554    	; 0x4520 <xTaskIncrementTick>
    474a:	81 11       	cpse	r24, r1
    474c:	d0 93 c0 0d 	sts	0x0DC0, r29	; 0x800dc0 <xYieldPending>
    4750:	c1 50       	subi	r28, 0x01	; 1
    4752:	d1 f7       	brne	.-12     	; 0x4748 <xTaskResumeAll+0xba>
    4754:	10 92 c1 0d 	sts	0x0DC1, r1	; 0x800dc1 <uxPendedTicks>
    4758:	80 91 c0 0d 	lds	r24, 0x0DC0	; 0x800dc0 <xYieldPending>
    475c:	88 23       	and	r24, r24
    475e:	29 f0       	breq	.+10     	; 0x476a <xTaskResumeAll+0xdc>
    4760:	04 da       	rcall	.-3064   	; 0x3b6a <vPortYield>
    4762:	81 e0       	ldi	r24, 0x01	; 1
    4764:	03 c0       	rjmp	.+6      	; 0x476c <xTaskResumeAll+0xde>
    4766:	80 e0       	ldi	r24, 0x00	; 0
    4768:	01 c0       	rjmp	.+2      	; 0x476c <xTaskResumeAll+0xde>
    476a:	80 e0       	ldi	r24, 0x00	; 0
    476c:	0f 90       	pop	r0
    476e:	0f be       	out	0x3f, r0	; 63
    4770:	df 91       	pop	r29
    4772:	cf 91       	pop	r28
    4774:	1f 91       	pop	r17
    4776:	0f 91       	pop	r16
    4778:	ff 90       	pop	r15
    477a:	ef 90       	pop	r14
    477c:	df 90       	pop	r13
    477e:	08 95       	ret

00004780 <vTaskDelay>:
    4780:	cf 93       	push	r28
    4782:	df 93       	push	r29
    4784:	ec 01       	movw	r28, r24
    4786:	89 2b       	or	r24, r25
    4788:	39 f0       	breq	.+14     	; 0x4798 <vTaskDelay+0x18>
    478a:	c4 de       	rcall	.-632    	; 0x4514 <vTaskSuspendAll>
    478c:	60 e0       	ldi	r22, 0x00	; 0
    478e:	ce 01       	movw	r24, r28
    4790:	47 dd       	rcall	.-1394   	; 0x4220 <prvAddCurrentTaskToDelayedList>
    4792:	7d df       	rcall	.-262    	; 0x468e <xTaskResumeAll>
    4794:	81 11       	cpse	r24, r1
    4796:	01 c0       	rjmp	.+2      	; 0x479a <vTaskDelay+0x1a>
    4798:	e8 d9       	rcall	.-3120   	; 0x3b6a <vPortYield>
    479a:	df 91       	pop	r29
    479c:	cf 91       	pop	r28
    479e:	08 95       	ret

000047a0 <prvIdleTask>:
    47a0:	01 ed       	ldi	r16, 0xD1	; 209
    47a2:	1d e0       	ldi	r17, 0x0D	; 13
    47a4:	0f 2e       	mov	r0, r31
    47a6:	f9 ef       	ldi	r31, 0xF9	; 249
    47a8:	ef 2e       	mov	r14, r31
    47aa:	fd e0       	ldi	r31, 0x0D	; 13
    47ac:	ff 2e       	mov	r15, r31
    47ae:	f0 2d       	mov	r31, r0
    47b0:	24 c0       	rjmp	.+72     	; 0x47fa <prvIdleTask+0x5a>
    47b2:	b0 de       	rcall	.-672    	; 0x4514 <vTaskSuspendAll>
    47b4:	d8 01       	movw	r26, r16
    47b6:	cc 91       	ld	r28, X
    47b8:	6a df       	rcall	.-300    	; 0x468e <xTaskResumeAll>
    47ba:	cc 23       	and	r28, r28
    47bc:	f1 f0       	breq	.+60     	; 0x47fa <prvIdleTask+0x5a>
    47be:	0f b6       	in	r0, 0x3f	; 63
    47c0:	f8 94       	cli
    47c2:	0f 92       	push	r0
    47c4:	d8 01       	movw	r26, r16
    47c6:	15 96       	adiw	r26, 0x05	; 5
    47c8:	ed 91       	ld	r30, X+
    47ca:	fc 91       	ld	r31, X
    47cc:	16 97       	sbiw	r26, 0x06	; 6
    47ce:	c6 81       	ldd	r28, Z+6	; 0x06
    47d0:	d7 81       	ldd	r29, Z+7	; 0x07
    47d2:	ce 01       	movw	r24, r28
    47d4:	02 96       	adiw	r24, 0x02	; 2
    47d6:	02 d9       	rcall	.-3580   	; 0x39dc <uxListRemove>
    47d8:	80 91 c6 0d 	lds	r24, 0x0DC6	; 0x800dc6 <uxCurrentNumberOfTasks>
    47dc:	81 50       	subi	r24, 0x01	; 1
    47de:	80 93 c6 0d 	sts	0x0DC6, r24	; 0x800dc6 <uxCurrentNumberOfTasks>
    47e2:	80 91 d0 0d 	lds	r24, 0x0DD0	; 0x800dd0 <uxDeletedTasksWaitingCleanUp>
    47e6:	81 50       	subi	r24, 0x01	; 1
    47e8:	80 93 d0 0d 	sts	0x0DD0, r24	; 0x800dd0 <uxDeletedTasksWaitingCleanUp>
    47ec:	0f 90       	pop	r0
    47ee:	0f be       	out	0x3f, r0	; 63
    47f0:	8f 89       	ldd	r24, Y+23	; 0x17
    47f2:	98 8d       	ldd	r25, Y+24	; 0x18
    47f4:	8e d8       	rcall	.-3812   	; 0x3912 <vPortFree>
    47f6:	ce 01       	movw	r24, r28
    47f8:	8c d8       	rcall	.-3816   	; 0x3912 <vPortFree>
    47fa:	80 91 d0 0d 	lds	r24, 0x0DD0	; 0x800dd0 <uxDeletedTasksWaitingCleanUp>
    47fe:	81 11       	cpse	r24, r1
    4800:	d8 cf       	rjmp	.-80     	; 0x47b2 <prvIdleTask+0x12>
    4802:	f7 01       	movw	r30, r14
    4804:	80 81       	ld	r24, Z
    4806:	82 30       	cpi	r24, 0x02	; 2
    4808:	c0 f3       	brcs	.-16     	; 0x47fa <prvIdleTask+0x5a>
    480a:	af d9       	rcall	.-3234   	; 0x3b6a <vPortYield>
    480c:	f6 cf       	rjmp	.-20     	; 0x47fa <prvIdleTask+0x5a>

0000480e <vTaskSwitchContext>:
    480e:	80 91 b9 0d 	lds	r24, 0x0DB9	; 0x800db9 <uxSchedulerSuspended>
    4812:	88 23       	and	r24, r24
    4814:	21 f0       	breq	.+8      	; 0x481e <vTaskSwitchContext+0x10>
    4816:	81 e0       	ldi	r24, 0x01	; 1
    4818:	80 93 c0 0d 	sts	0x0DC0, r24	; 0x800dc0 <xYieldPending>
    481c:	08 95       	ret
    481e:	10 92 c0 0d 	sts	0x0DC0, r1	; 0x800dc0 <xYieldPending>
    4822:	a0 91 1d 0e 	lds	r26, 0x0E1D	; 0x800e1d <pxCurrentTCB>
    4826:	b0 91 1e 0e 	lds	r27, 0x0E1E	; 0x800e1e <pxCurrentTCB+0x1>
    482a:	e0 91 1d 0e 	lds	r30, 0x0E1D	; 0x800e1d <pxCurrentTCB>
    482e:	f0 91 1e 0e 	lds	r31, 0x0E1E	; 0x800e1e <pxCurrentTCB+0x1>
    4832:	2d 91       	ld	r18, X+
    4834:	3c 91       	ld	r19, X
    4836:	87 89       	ldd	r24, Z+23	; 0x17
    4838:	90 8d       	ldd	r25, Z+24	; 0x18
    483a:	82 17       	cp	r24, r18
    483c:	93 07       	cpc	r25, r19
    483e:	58 f0       	brcs	.+22     	; 0x4856 <vTaskSwitchContext+0x48>
    4840:	60 91 1d 0e 	lds	r22, 0x0E1D	; 0x800e1d <pxCurrentTCB>
    4844:	70 91 1e 0e 	lds	r23, 0x0E1E	; 0x800e1e <pxCurrentTCB+0x1>
    4848:	80 91 1d 0e 	lds	r24, 0x0E1D	; 0x800e1d <pxCurrentTCB>
    484c:	90 91 1e 0e 	lds	r25, 0x0E1E	; 0x800e1e <pxCurrentTCB+0x1>
    4850:	67 5e       	subi	r22, 0xE7	; 231
    4852:	7f 4f       	sbci	r23, 0xFF	; 255
    4854:	2a d8       	rcall	.-4012   	; 0x38aa <vApplicationStackOverflowHook>
    4856:	20 91 c3 0d 	lds	r18, 0x0DC3	; 0x800dc3 <uxTopReadyPriority>
    485a:	82 2f       	mov	r24, r18
    485c:	90 e0       	ldi	r25, 0x00	; 0
    485e:	fc 01       	movw	r30, r24
    4860:	ee 0f       	add	r30, r30
    4862:	ff 1f       	adc	r31, r31
    4864:	ee 0f       	add	r30, r30
    4866:	ff 1f       	adc	r31, r31
    4868:	ee 0f       	add	r30, r30
    486a:	ff 1f       	adc	r31, r31
    486c:	e8 0f       	add	r30, r24
    486e:	f9 1f       	adc	r31, r25
    4870:	e7 50       	subi	r30, 0x07	; 7
    4872:	f2 4f       	sbci	r31, 0xF2	; 242
    4874:	30 81       	ld	r19, Z
    4876:	31 11       	cpse	r19, r1
    4878:	11 c0       	rjmp	.+34     	; 0x489c <vTaskSwitchContext+0x8e>
    487a:	21 50       	subi	r18, 0x01	; 1
    487c:	82 2f       	mov	r24, r18
    487e:	90 e0       	ldi	r25, 0x00	; 0
    4880:	fc 01       	movw	r30, r24
    4882:	ee 0f       	add	r30, r30
    4884:	ff 1f       	adc	r31, r31
    4886:	ee 0f       	add	r30, r30
    4888:	ff 1f       	adc	r31, r31
    488a:	ee 0f       	add	r30, r30
    488c:	ff 1f       	adc	r31, r31
    488e:	e8 0f       	add	r30, r24
    4890:	f9 1f       	adc	r31, r25
    4892:	e7 50       	subi	r30, 0x07	; 7
    4894:	f2 4f       	sbci	r31, 0xF2	; 242
    4896:	30 81       	ld	r19, Z
    4898:	33 23       	and	r19, r19
    489a:	79 f3       	breq	.-34     	; 0x487a <vTaskSwitchContext+0x6c>
    489c:	ac 01       	movw	r20, r24
    489e:	44 0f       	add	r20, r20
    48a0:	55 1f       	adc	r21, r21
    48a2:	44 0f       	add	r20, r20
    48a4:	55 1f       	adc	r21, r21
    48a6:	44 0f       	add	r20, r20
    48a8:	55 1f       	adc	r21, r21
    48aa:	48 0f       	add	r20, r24
    48ac:	59 1f       	adc	r21, r25
    48ae:	da 01       	movw	r26, r20
    48b0:	a7 50       	subi	r26, 0x07	; 7
    48b2:	b2 4f       	sbci	r27, 0xF2	; 242
    48b4:	11 96       	adiw	r26, 0x01	; 1
    48b6:	ed 91       	ld	r30, X+
    48b8:	fc 91       	ld	r31, X
    48ba:	12 97       	sbiw	r26, 0x02	; 2
    48bc:	02 80       	ldd	r0, Z+2	; 0x02
    48be:	f3 81       	ldd	r31, Z+3	; 0x03
    48c0:	e0 2d       	mov	r30, r0
    48c2:	12 96       	adiw	r26, 0x02	; 2
    48c4:	fc 93       	st	X, r31
    48c6:	ee 93       	st	-X, r30
    48c8:	11 97       	sbiw	r26, 0x01	; 1
    48ca:	44 50       	subi	r20, 0x04	; 4
    48cc:	52 4f       	sbci	r21, 0xF2	; 242
    48ce:	e4 17       	cp	r30, r20
    48d0:	f5 07       	cpc	r31, r21
    48d2:	29 f4       	brne	.+10     	; 0x48de <vTaskSwitchContext+0xd0>
    48d4:	42 81       	ldd	r20, Z+2	; 0x02
    48d6:	53 81       	ldd	r21, Z+3	; 0x03
    48d8:	fd 01       	movw	r30, r26
    48da:	52 83       	std	Z+2, r21	; 0x02
    48dc:	41 83       	std	Z+1, r20	; 0x01
    48de:	fc 01       	movw	r30, r24
    48e0:	ee 0f       	add	r30, r30
    48e2:	ff 1f       	adc	r31, r31
    48e4:	ee 0f       	add	r30, r30
    48e6:	ff 1f       	adc	r31, r31
    48e8:	ee 0f       	add	r30, r30
    48ea:	ff 1f       	adc	r31, r31
    48ec:	8e 0f       	add	r24, r30
    48ee:	9f 1f       	adc	r25, r31
    48f0:	fc 01       	movw	r30, r24
    48f2:	e7 50       	subi	r30, 0x07	; 7
    48f4:	f2 4f       	sbci	r31, 0xF2	; 242
    48f6:	01 80       	ldd	r0, Z+1	; 0x01
    48f8:	f2 81       	ldd	r31, Z+2	; 0x02
    48fa:	e0 2d       	mov	r30, r0
    48fc:	86 81       	ldd	r24, Z+6	; 0x06
    48fe:	97 81       	ldd	r25, Z+7	; 0x07
    4900:	90 93 1e 0e 	sts	0x0E1E, r25	; 0x800e1e <pxCurrentTCB+0x1>
    4904:	80 93 1d 0e 	sts	0x0E1D, r24	; 0x800e1d <pxCurrentTCB>
    4908:	20 93 c3 0d 	sts	0x0DC3, r18	; 0x800dc3 <uxTopReadyPriority>
    490c:	08 95       	ret

0000490e <vTaskPlaceOnEventList>:
    490e:	cf 93       	push	r28
    4910:	df 93       	push	r29
    4912:	eb 01       	movw	r28, r22
    4914:	60 91 1d 0e 	lds	r22, 0x0E1D	; 0x800e1d <pxCurrentTCB>
    4918:	70 91 1e 0e 	lds	r23, 0x0E1E	; 0x800e1e <pxCurrentTCB+0x1>
    491c:	64 5f       	subi	r22, 0xF4	; 244
    491e:	7f 4f       	sbci	r23, 0xFF	; 255
    4920:	2c d8       	rcall	.-4008   	; 0x397a <vListInsert>
    4922:	61 e0       	ldi	r22, 0x01	; 1
    4924:	ce 01       	movw	r24, r28
    4926:	7c dc       	rcall	.-1800   	; 0x4220 <prvAddCurrentTaskToDelayedList>
    4928:	df 91       	pop	r29
    492a:	cf 91       	pop	r28
    492c:	08 95       	ret

0000492e <xTaskRemoveFromEventList>:
    492e:	0f 93       	push	r16
    4930:	1f 93       	push	r17
    4932:	cf 93       	push	r28
    4934:	df 93       	push	r29
    4936:	dc 01       	movw	r26, r24
    4938:	15 96       	adiw	r26, 0x05	; 5
    493a:	ed 91       	ld	r30, X+
    493c:	fc 91       	ld	r31, X
    493e:	16 97       	sbiw	r26, 0x06	; 6
    4940:	c6 81       	ldd	r28, Z+6	; 0x06
    4942:	d7 81       	ldd	r29, Z+7	; 0x07
    4944:	8e 01       	movw	r16, r28
    4946:	04 5f       	subi	r16, 0xF4	; 244
    4948:	1f 4f       	sbci	r17, 0xFF	; 255
    494a:	c8 01       	movw	r24, r16
    494c:	47 d8       	rcall	.-3954   	; 0x39dc <uxListRemove>
    494e:	80 91 b9 0d 	lds	r24, 0x0DB9	; 0x800db9 <uxSchedulerSuspended>
    4952:	81 11       	cpse	r24, r1
    4954:	1b c0       	rjmp	.+54     	; 0x498c <xTaskRemoveFromEventList+0x5e>
    4956:	0a 50       	subi	r16, 0x0A	; 10
    4958:	11 09       	sbc	r17, r1
    495a:	c8 01       	movw	r24, r16
    495c:	3f d8       	rcall	.-3970   	; 0x39dc <uxListRemove>
    495e:	8e 89       	ldd	r24, Y+22	; 0x16
    4960:	90 91 c3 0d 	lds	r25, 0x0DC3	; 0x800dc3 <uxTopReadyPriority>
    4964:	98 17       	cp	r25, r24
    4966:	10 f4       	brcc	.+4      	; 0x496c <xTaskRemoveFromEventList+0x3e>
    4968:	80 93 c3 0d 	sts	0x0DC3, r24	; 0x800dc3 <uxTopReadyPriority>
    496c:	90 e0       	ldi	r25, 0x00	; 0
    496e:	9c 01       	movw	r18, r24
    4970:	22 0f       	add	r18, r18
    4972:	33 1f       	adc	r19, r19
    4974:	22 0f       	add	r18, r18
    4976:	33 1f       	adc	r19, r19
    4978:	22 0f       	add	r18, r18
    497a:	33 1f       	adc	r19, r19
    497c:	82 0f       	add	r24, r18
    497e:	93 1f       	adc	r25, r19
    4980:	b8 01       	movw	r22, r16
    4982:	87 50       	subi	r24, 0x07	; 7
    4984:	92 4f       	sbci	r25, 0xF2	; 242
    4986:	0e 94 9c 1c 	call	0x3938	; 0x3938 <vListInsertEnd>
    498a:	05 c0       	rjmp	.+10     	; 0x4996 <xTaskRemoveFromEventList+0x68>
    498c:	b8 01       	movw	r22, r16
    498e:	8a ed       	ldi	r24, 0xDA	; 218
    4990:	9d e0       	ldi	r25, 0x0D	; 13
    4992:	0e 94 9c 1c 	call	0x3938	; 0x3938 <vListInsertEnd>
    4996:	e0 91 1d 0e 	lds	r30, 0x0E1D	; 0x800e1d <pxCurrentTCB>
    499a:	f0 91 1e 0e 	lds	r31, 0x0E1E	; 0x800e1e <pxCurrentTCB+0x1>
    499e:	9e 89       	ldd	r25, Y+22	; 0x16
    49a0:	86 89       	ldd	r24, Z+22	; 0x16
    49a2:	89 17       	cp	r24, r25
    49a4:	20 f4       	brcc	.+8      	; 0x49ae <xTaskRemoveFromEventList+0x80>
    49a6:	81 e0       	ldi	r24, 0x01	; 1
    49a8:	80 93 c0 0d 	sts	0x0DC0, r24	; 0x800dc0 <xYieldPending>
    49ac:	01 c0       	rjmp	.+2      	; 0x49b0 <xTaskRemoveFromEventList+0x82>
    49ae:	80 e0       	ldi	r24, 0x00	; 0
    49b0:	df 91       	pop	r29
    49b2:	cf 91       	pop	r28
    49b4:	1f 91       	pop	r17
    49b6:	0f 91       	pop	r16
    49b8:	08 95       	ret

000049ba <vTaskSetTimeOutState>:
    49ba:	20 91 bf 0d 	lds	r18, 0x0DBF	; 0x800dbf <xNumOfOverflows>
    49be:	fc 01       	movw	r30, r24
    49c0:	20 83       	st	Z, r18
    49c2:	20 91 c4 0d 	lds	r18, 0x0DC4	; 0x800dc4 <xTickCount>
    49c6:	30 91 c5 0d 	lds	r19, 0x0DC5	; 0x800dc5 <xTickCount+0x1>
    49ca:	32 83       	std	Z+2, r19	; 0x02
    49cc:	21 83       	std	Z+1, r18	; 0x01
    49ce:	08 95       	ret

000049d0 <xTaskCheckForTimeOut>:
    49d0:	0f b6       	in	r0, 0x3f	; 63
    49d2:	f8 94       	cli
    49d4:	0f 92       	push	r0
    49d6:	40 91 c4 0d 	lds	r20, 0x0DC4	; 0x800dc4 <xTickCount>
    49da:	50 91 c5 0d 	lds	r21, 0x0DC5	; 0x800dc5 <xTickCount+0x1>
    49de:	db 01       	movw	r26, r22
    49e0:	2d 91       	ld	r18, X+
    49e2:	3c 91       	ld	r19, X
    49e4:	2f 3f       	cpi	r18, 0xFF	; 255
    49e6:	bf ef       	ldi	r27, 0xFF	; 255
    49e8:	3b 07       	cpc	r19, r27
    49ea:	11 f1       	breq	.+68     	; 0x4a30 <xTaskCheckForTimeOut+0x60>
    49ec:	e0 91 bf 0d 	lds	r30, 0x0DBF	; 0x800dbf <xNumOfOverflows>
    49f0:	dc 01       	movw	r26, r24
    49f2:	fc 91       	ld	r31, X
    49f4:	fe 17       	cp	r31, r30
    49f6:	39 f0       	breq	.+14     	; 0x4a06 <xTaskCheckForTimeOut+0x36>
    49f8:	11 96       	adiw	r26, 0x01	; 1
    49fa:	ed 91       	ld	r30, X+
    49fc:	fc 91       	ld	r31, X
    49fe:	12 97       	sbiw	r26, 0x02	; 2
    4a00:	4e 17       	cp	r20, r30
    4a02:	5f 07       	cpc	r21, r31
    4a04:	b8 f4       	brcc	.+46     	; 0x4a34 <xTaskCheckForTimeOut+0x64>
    4a06:	dc 01       	movw	r26, r24
    4a08:	11 96       	adiw	r26, 0x01	; 1
    4a0a:	ed 91       	ld	r30, X+
    4a0c:	fc 91       	ld	r31, X
    4a0e:	12 97       	sbiw	r26, 0x02	; 2
    4a10:	da 01       	movw	r26, r20
    4a12:	ae 1b       	sub	r26, r30
    4a14:	bf 0b       	sbc	r27, r31
    4a16:	a2 17       	cp	r26, r18
    4a18:	b3 07       	cpc	r27, r19
    4a1a:	70 f4       	brcc	.+28     	; 0x4a38 <xTaskCheckForTimeOut+0x68>
    4a1c:	db 01       	movw	r26, r22
    4a1e:	e4 1b       	sub	r30, r20
    4a20:	f5 0b       	sbc	r31, r21
    4a22:	2e 0f       	add	r18, r30
    4a24:	3f 1f       	adc	r19, r31
    4a26:	2d 93       	st	X+, r18
    4a28:	3c 93       	st	X, r19
    4a2a:	c7 df       	rcall	.-114    	; 0x49ba <vTaskSetTimeOutState>
    4a2c:	80 e0       	ldi	r24, 0x00	; 0
    4a2e:	05 c0       	rjmp	.+10     	; 0x4a3a <xTaskCheckForTimeOut+0x6a>
    4a30:	80 e0       	ldi	r24, 0x00	; 0
    4a32:	03 c0       	rjmp	.+6      	; 0x4a3a <xTaskCheckForTimeOut+0x6a>
    4a34:	81 e0       	ldi	r24, 0x01	; 1
    4a36:	01 c0       	rjmp	.+2      	; 0x4a3a <xTaskCheckForTimeOut+0x6a>
    4a38:	81 e0       	ldi	r24, 0x01	; 1
    4a3a:	0f 90       	pop	r0
    4a3c:	0f be       	out	0x3f, r0	; 63
    4a3e:	08 95       	ret

00004a40 <vTaskMissedYield>:
    4a40:	81 e0       	ldi	r24, 0x01	; 1
    4a42:	80 93 c0 0d 	sts	0x0DC0, r24	; 0x800dc0 <xYieldPending>
    4a46:	08 95       	ret

00004a48 <vTaskPriorityInherit>:
    4a48:	0f 93       	push	r16
    4a4a:	1f 93       	push	r17
    4a4c:	cf 93       	push	r28
    4a4e:	df 93       	push	r29
    4a50:	fc 01       	movw	r30, r24
    4a52:	89 2b       	or	r24, r25
    4a54:	09 f4       	brne	.+2      	; 0x4a58 <vTaskPriorityInherit+0x10>
    4a56:	55 c0       	rjmp	.+170    	; 0x4b02 <vTaskPriorityInherit+0xba>
    4a58:	26 89       	ldd	r18, Z+22	; 0x16
    4a5a:	a0 91 1d 0e 	lds	r26, 0x0E1D	; 0x800e1d <pxCurrentTCB>
    4a5e:	b0 91 1e 0e 	lds	r27, 0x0E1E	; 0x800e1e <pxCurrentTCB+0x1>
    4a62:	56 96       	adiw	r26, 0x16	; 22
    4a64:	8c 91       	ld	r24, X
    4a66:	28 17       	cp	r18, r24
    4a68:	08 f0       	brcs	.+2      	; 0x4a6c <vTaskPriorityInherit+0x24>
    4a6a:	4b c0       	rjmp	.+150    	; 0x4b02 <vTaskPriorityInherit+0xba>
    4a6c:	84 85       	ldd	r24, Z+12	; 0x0c
    4a6e:	95 85       	ldd	r25, Z+13	; 0x0d
    4a70:	99 23       	and	r25, r25
    4a72:	64 f0       	brlt	.+24     	; 0x4a8c <vTaskPriorityInherit+0x44>
    4a74:	a0 91 1d 0e 	lds	r26, 0x0E1D	; 0x800e1d <pxCurrentTCB>
    4a78:	b0 91 1e 0e 	lds	r27, 0x0E1E	; 0x800e1e <pxCurrentTCB+0x1>
    4a7c:	56 96       	adiw	r26, 0x16	; 22
    4a7e:	3c 91       	ld	r19, X
    4a80:	84 e0       	ldi	r24, 0x04	; 4
    4a82:	90 e0       	ldi	r25, 0x00	; 0
    4a84:	83 1b       	sub	r24, r19
    4a86:	91 09       	sbc	r25, r1
    4a88:	95 87       	std	Z+13, r25	; 0x0d
    4a8a:	84 87       	std	Z+12, r24	; 0x0c
    4a8c:	30 e0       	ldi	r19, 0x00	; 0
    4a8e:	c9 01       	movw	r24, r18
    4a90:	88 0f       	add	r24, r24
    4a92:	99 1f       	adc	r25, r25
    4a94:	88 0f       	add	r24, r24
    4a96:	99 1f       	adc	r25, r25
    4a98:	88 0f       	add	r24, r24
    4a9a:	99 1f       	adc	r25, r25
    4a9c:	28 0f       	add	r18, r24
    4a9e:	39 1f       	adc	r19, r25
    4aa0:	27 50       	subi	r18, 0x07	; 7
    4aa2:	32 4f       	sbci	r19, 0xF2	; 242
    4aa4:	82 85       	ldd	r24, Z+10	; 0x0a
    4aa6:	93 85       	ldd	r25, Z+11	; 0x0b
    4aa8:	82 17       	cp	r24, r18
    4aaa:	93 07       	cpc	r25, r19
    4aac:	19 f5       	brne	.+70     	; 0x4af4 <vTaskPriorityInherit+0xac>
    4aae:	8f 01       	movw	r16, r30
    4ab0:	ef 01       	movw	r28, r30
    4ab2:	22 96       	adiw	r28, 0x02	; 2
    4ab4:	ce 01       	movw	r24, r28
    4ab6:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <uxListRemove>
    4aba:	e0 91 1d 0e 	lds	r30, 0x0E1D	; 0x800e1d <pxCurrentTCB>
    4abe:	f0 91 1e 0e 	lds	r31, 0x0E1E	; 0x800e1e <pxCurrentTCB+0x1>
    4ac2:	86 89       	ldd	r24, Z+22	; 0x16
    4ac4:	f8 01       	movw	r30, r16
    4ac6:	86 8b       	std	Z+22, r24	; 0x16
    4ac8:	90 91 c3 0d 	lds	r25, 0x0DC3	; 0x800dc3 <uxTopReadyPriority>
    4acc:	98 17       	cp	r25, r24
    4ace:	10 f4       	brcc	.+4      	; 0x4ad4 <vTaskPriorityInherit+0x8c>
    4ad0:	80 93 c3 0d 	sts	0x0DC3, r24	; 0x800dc3 <uxTopReadyPriority>
    4ad4:	90 e0       	ldi	r25, 0x00	; 0
    4ad6:	9c 01       	movw	r18, r24
    4ad8:	22 0f       	add	r18, r18
    4ada:	33 1f       	adc	r19, r19
    4adc:	22 0f       	add	r18, r18
    4ade:	33 1f       	adc	r19, r19
    4ae0:	22 0f       	add	r18, r18
    4ae2:	33 1f       	adc	r19, r19
    4ae4:	82 0f       	add	r24, r18
    4ae6:	93 1f       	adc	r25, r19
    4ae8:	be 01       	movw	r22, r28
    4aea:	87 50       	subi	r24, 0x07	; 7
    4aec:	92 4f       	sbci	r25, 0xF2	; 242
    4aee:	0e 94 9c 1c 	call	0x3938	; 0x3938 <vListInsertEnd>
    4af2:	07 c0       	rjmp	.+14     	; 0x4b02 <vTaskPriorityInherit+0xba>
    4af4:	a0 91 1d 0e 	lds	r26, 0x0E1D	; 0x800e1d <pxCurrentTCB>
    4af8:	b0 91 1e 0e 	lds	r27, 0x0E1E	; 0x800e1e <pxCurrentTCB+0x1>
    4afc:	56 96       	adiw	r26, 0x16	; 22
    4afe:	8c 91       	ld	r24, X
    4b00:	86 8b       	std	Z+22, r24	; 0x16
    4b02:	df 91       	pop	r29
    4b04:	cf 91       	pop	r28
    4b06:	1f 91       	pop	r17
    4b08:	0f 91       	pop	r16
    4b0a:	08 95       	ret

00004b0c <xTaskPriorityDisinherit>:
    4b0c:	0f 93       	push	r16
    4b0e:	1f 93       	push	r17
    4b10:	cf 93       	push	r28
    4b12:	df 93       	push	r29
    4b14:	fc 01       	movw	r30, r24
    4b16:	89 2b       	or	r24, r25
    4b18:	79 f1       	breq	.+94     	; 0x4b78 <xTaskPriorityDisinherit+0x6c>
    4b1a:	82 a1       	ldd	r24, Z+34	; 0x22
    4b1c:	81 50       	subi	r24, 0x01	; 1
    4b1e:	82 a3       	std	Z+34, r24	; 0x22
    4b20:	26 89       	ldd	r18, Z+22	; 0x16
    4b22:	91 a1       	ldd	r25, Z+33	; 0x21
    4b24:	29 17       	cp	r18, r25
    4b26:	51 f1       	breq	.+84     	; 0x4b7c <xTaskPriorityDisinherit+0x70>
    4b28:	81 11       	cpse	r24, r1
    4b2a:	2a c0       	rjmp	.+84     	; 0x4b80 <xTaskPriorityDisinherit+0x74>
    4b2c:	ef 01       	movw	r28, r30
    4b2e:	8f 01       	movw	r16, r30
    4b30:	0e 5f       	subi	r16, 0xFE	; 254
    4b32:	1f 4f       	sbci	r17, 0xFF	; 255
    4b34:	c8 01       	movw	r24, r16
    4b36:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <uxListRemove>
    4b3a:	89 a1       	ldd	r24, Y+33	; 0x21
    4b3c:	8e 8b       	std	Y+22, r24	; 0x16
    4b3e:	24 e0       	ldi	r18, 0x04	; 4
    4b40:	30 e0       	ldi	r19, 0x00	; 0
    4b42:	28 1b       	sub	r18, r24
    4b44:	31 09       	sbc	r19, r1
    4b46:	3d 87       	std	Y+13, r19	; 0x0d
    4b48:	2c 87       	std	Y+12, r18	; 0x0c
    4b4a:	90 91 c3 0d 	lds	r25, 0x0DC3	; 0x800dc3 <uxTopReadyPriority>
    4b4e:	98 17       	cp	r25, r24
    4b50:	10 f4       	brcc	.+4      	; 0x4b56 <xTaskPriorityDisinherit+0x4a>
    4b52:	80 93 c3 0d 	sts	0x0DC3, r24	; 0x800dc3 <uxTopReadyPriority>
    4b56:	90 e0       	ldi	r25, 0x00	; 0
    4b58:	9c 01       	movw	r18, r24
    4b5a:	22 0f       	add	r18, r18
    4b5c:	33 1f       	adc	r19, r19
    4b5e:	22 0f       	add	r18, r18
    4b60:	33 1f       	adc	r19, r19
    4b62:	22 0f       	add	r18, r18
    4b64:	33 1f       	adc	r19, r19
    4b66:	82 0f       	add	r24, r18
    4b68:	93 1f       	adc	r25, r19
    4b6a:	b8 01       	movw	r22, r16
    4b6c:	87 50       	subi	r24, 0x07	; 7
    4b6e:	92 4f       	sbci	r25, 0xF2	; 242
    4b70:	0e 94 9c 1c 	call	0x3938	; 0x3938 <vListInsertEnd>
    4b74:	81 e0       	ldi	r24, 0x01	; 1
    4b76:	05 c0       	rjmp	.+10     	; 0x4b82 <xTaskPriorityDisinherit+0x76>
    4b78:	80 e0       	ldi	r24, 0x00	; 0
    4b7a:	03 c0       	rjmp	.+6      	; 0x4b82 <xTaskPriorityDisinherit+0x76>
    4b7c:	80 e0       	ldi	r24, 0x00	; 0
    4b7e:	01 c0       	rjmp	.+2      	; 0x4b82 <xTaskPriorityDisinherit+0x76>
    4b80:	80 e0       	ldi	r24, 0x00	; 0
    4b82:	df 91       	pop	r29
    4b84:	cf 91       	pop	r28
    4b86:	1f 91       	pop	r17
    4b88:	0f 91       	pop	r16
    4b8a:	08 95       	ret

00004b8c <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    4b8c:	80 91 1d 0e 	lds	r24, 0x0E1D	; 0x800e1d <pxCurrentTCB>
    4b90:	90 91 1e 0e 	lds	r25, 0x0E1E	; 0x800e1e <pxCurrentTCB+0x1>
    4b94:	89 2b       	or	r24, r25
    4b96:	39 f0       	breq	.+14     	; 0x4ba6 <pvTaskIncrementMutexHeldCount+0x1a>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    4b98:	e0 91 1d 0e 	lds	r30, 0x0E1D	; 0x800e1d <pxCurrentTCB>
    4b9c:	f0 91 1e 0e 	lds	r31, 0x0E1E	; 0x800e1e <pxCurrentTCB+0x1>
    4ba0:	82 a1       	ldd	r24, Z+34	; 0x22
    4ba2:	8f 5f       	subi	r24, 0xFF	; 255
    4ba4:	82 a3       	std	Z+34, r24	; 0x22
		}

		return pxCurrentTCB;
    4ba6:	80 91 1d 0e 	lds	r24, 0x0E1D	; 0x800e1d <pxCurrentTCB>
    4baa:	90 91 1e 0e 	lds	r25, 0x0E1E	; 0x800e1e <pxCurrentTCB+0x1>
	}
    4bae:	08 95       	ret

00004bb0 <__subsf3>:
    4bb0:	50 58       	subi	r21, 0x80	; 128

00004bb2 <__addsf3>:
    4bb2:	bb 27       	eor	r27, r27
    4bb4:	aa 27       	eor	r26, r26
    4bb6:	0e d0       	rcall	.+28     	; 0x4bd4 <__addsf3x>
    4bb8:	75 c1       	rjmp	.+746    	; 0x4ea4 <__fp_round>
    4bba:	66 d1       	rcall	.+716    	; 0x4e88 <__fp_pscA>
    4bbc:	30 f0       	brcs	.+12     	; 0x4bca <__addsf3+0x18>
    4bbe:	6b d1       	rcall	.+726    	; 0x4e96 <__fp_pscB>
    4bc0:	20 f0       	brcs	.+8      	; 0x4bca <__addsf3+0x18>
    4bc2:	31 f4       	brne	.+12     	; 0x4bd0 <__addsf3+0x1e>
    4bc4:	9f 3f       	cpi	r25, 0xFF	; 255
    4bc6:	11 f4       	brne	.+4      	; 0x4bcc <__addsf3+0x1a>
    4bc8:	1e f4       	brtc	.+6      	; 0x4bd0 <__addsf3+0x1e>
    4bca:	5b c1       	rjmp	.+694    	; 0x4e82 <__fp_nan>
    4bcc:	0e f4       	brtc	.+2      	; 0x4bd0 <__addsf3+0x1e>
    4bce:	e0 95       	com	r30
    4bd0:	e7 fb       	bst	r30, 7
    4bd2:	51 c1       	rjmp	.+674    	; 0x4e76 <__fp_inf>

00004bd4 <__addsf3x>:
    4bd4:	e9 2f       	mov	r30, r25
    4bd6:	77 d1       	rcall	.+750    	; 0x4ec6 <__fp_split3>
    4bd8:	80 f3       	brcs	.-32     	; 0x4bba <__addsf3+0x8>
    4bda:	ba 17       	cp	r27, r26
    4bdc:	62 07       	cpc	r22, r18
    4bde:	73 07       	cpc	r23, r19
    4be0:	84 07       	cpc	r24, r20
    4be2:	95 07       	cpc	r25, r21
    4be4:	18 f0       	brcs	.+6      	; 0x4bec <__addsf3x+0x18>
    4be6:	71 f4       	brne	.+28     	; 0x4c04 <__addsf3x+0x30>
    4be8:	9e f5       	brtc	.+102    	; 0x4c50 <__addsf3x+0x7c>
    4bea:	8f c1       	rjmp	.+798    	; 0x4f0a <__fp_zero>
    4bec:	0e f4       	brtc	.+2      	; 0x4bf0 <__addsf3x+0x1c>
    4bee:	e0 95       	com	r30
    4bf0:	0b 2e       	mov	r0, r27
    4bf2:	ba 2f       	mov	r27, r26
    4bf4:	a0 2d       	mov	r26, r0
    4bf6:	0b 01       	movw	r0, r22
    4bf8:	b9 01       	movw	r22, r18
    4bfa:	90 01       	movw	r18, r0
    4bfc:	0c 01       	movw	r0, r24
    4bfe:	ca 01       	movw	r24, r20
    4c00:	a0 01       	movw	r20, r0
    4c02:	11 24       	eor	r1, r1
    4c04:	ff 27       	eor	r31, r31
    4c06:	59 1b       	sub	r21, r25
    4c08:	99 f0       	breq	.+38     	; 0x4c30 <__addsf3x+0x5c>
    4c0a:	59 3f       	cpi	r21, 0xF9	; 249
    4c0c:	50 f4       	brcc	.+20     	; 0x4c22 <__addsf3x+0x4e>
    4c0e:	50 3e       	cpi	r21, 0xE0	; 224
    4c10:	68 f1       	brcs	.+90     	; 0x4c6c <__addsf3x+0x98>
    4c12:	1a 16       	cp	r1, r26
    4c14:	f0 40       	sbci	r31, 0x00	; 0
    4c16:	a2 2f       	mov	r26, r18
    4c18:	23 2f       	mov	r18, r19
    4c1a:	34 2f       	mov	r19, r20
    4c1c:	44 27       	eor	r20, r20
    4c1e:	58 5f       	subi	r21, 0xF8	; 248
    4c20:	f3 cf       	rjmp	.-26     	; 0x4c08 <__addsf3x+0x34>
    4c22:	46 95       	lsr	r20
    4c24:	37 95       	ror	r19
    4c26:	27 95       	ror	r18
    4c28:	a7 95       	ror	r26
    4c2a:	f0 40       	sbci	r31, 0x00	; 0
    4c2c:	53 95       	inc	r21
    4c2e:	c9 f7       	brne	.-14     	; 0x4c22 <__addsf3x+0x4e>
    4c30:	7e f4       	brtc	.+30     	; 0x4c50 <__addsf3x+0x7c>
    4c32:	1f 16       	cp	r1, r31
    4c34:	ba 0b       	sbc	r27, r26
    4c36:	62 0b       	sbc	r22, r18
    4c38:	73 0b       	sbc	r23, r19
    4c3a:	84 0b       	sbc	r24, r20
    4c3c:	ba f0       	brmi	.+46     	; 0x4c6c <__addsf3x+0x98>
    4c3e:	91 50       	subi	r25, 0x01	; 1
    4c40:	a1 f0       	breq	.+40     	; 0x4c6a <__addsf3x+0x96>
    4c42:	ff 0f       	add	r31, r31
    4c44:	bb 1f       	adc	r27, r27
    4c46:	66 1f       	adc	r22, r22
    4c48:	77 1f       	adc	r23, r23
    4c4a:	88 1f       	adc	r24, r24
    4c4c:	c2 f7       	brpl	.-16     	; 0x4c3e <__addsf3x+0x6a>
    4c4e:	0e c0       	rjmp	.+28     	; 0x4c6c <__addsf3x+0x98>
    4c50:	ba 0f       	add	r27, r26
    4c52:	62 1f       	adc	r22, r18
    4c54:	73 1f       	adc	r23, r19
    4c56:	84 1f       	adc	r24, r20
    4c58:	48 f4       	brcc	.+18     	; 0x4c6c <__addsf3x+0x98>
    4c5a:	87 95       	ror	r24
    4c5c:	77 95       	ror	r23
    4c5e:	67 95       	ror	r22
    4c60:	b7 95       	ror	r27
    4c62:	f7 95       	ror	r31
    4c64:	9e 3f       	cpi	r25, 0xFE	; 254
    4c66:	08 f0       	brcs	.+2      	; 0x4c6a <__addsf3x+0x96>
    4c68:	b3 cf       	rjmp	.-154    	; 0x4bd0 <__addsf3+0x1e>
    4c6a:	93 95       	inc	r25
    4c6c:	88 0f       	add	r24, r24
    4c6e:	08 f0       	brcs	.+2      	; 0x4c72 <__addsf3x+0x9e>
    4c70:	99 27       	eor	r25, r25
    4c72:	ee 0f       	add	r30, r30
    4c74:	97 95       	ror	r25
    4c76:	87 95       	ror	r24
    4c78:	08 95       	ret

00004c7a <__cmpsf2>:
    4c7a:	d9 d0       	rcall	.+434    	; 0x4e2e <__fp_cmp>
    4c7c:	08 f4       	brcc	.+2      	; 0x4c80 <__cmpsf2+0x6>
    4c7e:	81 e0       	ldi	r24, 0x01	; 1
    4c80:	08 95       	ret

00004c82 <__divsf3>:
    4c82:	0c d0       	rcall	.+24     	; 0x4c9c <__divsf3x>
    4c84:	0f c1       	rjmp	.+542    	; 0x4ea4 <__fp_round>
    4c86:	07 d1       	rcall	.+526    	; 0x4e96 <__fp_pscB>
    4c88:	40 f0       	brcs	.+16     	; 0x4c9a <__divsf3+0x18>
    4c8a:	fe d0       	rcall	.+508    	; 0x4e88 <__fp_pscA>
    4c8c:	30 f0       	brcs	.+12     	; 0x4c9a <__divsf3+0x18>
    4c8e:	21 f4       	brne	.+8      	; 0x4c98 <__divsf3+0x16>
    4c90:	5f 3f       	cpi	r21, 0xFF	; 255
    4c92:	19 f0       	breq	.+6      	; 0x4c9a <__divsf3+0x18>
    4c94:	f0 c0       	rjmp	.+480    	; 0x4e76 <__fp_inf>
    4c96:	51 11       	cpse	r21, r1
    4c98:	39 c1       	rjmp	.+626    	; 0x4f0c <__fp_szero>
    4c9a:	f3 c0       	rjmp	.+486    	; 0x4e82 <__fp_nan>

00004c9c <__divsf3x>:
    4c9c:	14 d1       	rcall	.+552    	; 0x4ec6 <__fp_split3>
    4c9e:	98 f3       	brcs	.-26     	; 0x4c86 <__divsf3+0x4>

00004ca0 <__divsf3_pse>:
    4ca0:	99 23       	and	r25, r25
    4ca2:	c9 f3       	breq	.-14     	; 0x4c96 <__divsf3+0x14>
    4ca4:	55 23       	and	r21, r21
    4ca6:	b1 f3       	breq	.-20     	; 0x4c94 <__divsf3+0x12>
    4ca8:	95 1b       	sub	r25, r21
    4caa:	55 0b       	sbc	r21, r21
    4cac:	bb 27       	eor	r27, r27
    4cae:	aa 27       	eor	r26, r26
    4cb0:	62 17       	cp	r22, r18
    4cb2:	73 07       	cpc	r23, r19
    4cb4:	84 07       	cpc	r24, r20
    4cb6:	38 f0       	brcs	.+14     	; 0x4cc6 <__divsf3_pse+0x26>
    4cb8:	9f 5f       	subi	r25, 0xFF	; 255
    4cba:	5f 4f       	sbci	r21, 0xFF	; 255
    4cbc:	22 0f       	add	r18, r18
    4cbe:	33 1f       	adc	r19, r19
    4cc0:	44 1f       	adc	r20, r20
    4cc2:	aa 1f       	adc	r26, r26
    4cc4:	a9 f3       	breq	.-22     	; 0x4cb0 <__divsf3_pse+0x10>
    4cc6:	33 d0       	rcall	.+102    	; 0x4d2e <__divsf3_pse+0x8e>
    4cc8:	0e 2e       	mov	r0, r30
    4cca:	3a f0       	brmi	.+14     	; 0x4cda <__divsf3_pse+0x3a>
    4ccc:	e0 e8       	ldi	r30, 0x80	; 128
    4cce:	30 d0       	rcall	.+96     	; 0x4d30 <__divsf3_pse+0x90>
    4cd0:	91 50       	subi	r25, 0x01	; 1
    4cd2:	50 40       	sbci	r21, 0x00	; 0
    4cd4:	e6 95       	lsr	r30
    4cd6:	00 1c       	adc	r0, r0
    4cd8:	ca f7       	brpl	.-14     	; 0x4ccc <__divsf3_pse+0x2c>
    4cda:	29 d0       	rcall	.+82     	; 0x4d2e <__divsf3_pse+0x8e>
    4cdc:	fe 2f       	mov	r31, r30
    4cde:	27 d0       	rcall	.+78     	; 0x4d2e <__divsf3_pse+0x8e>
    4ce0:	66 0f       	add	r22, r22
    4ce2:	77 1f       	adc	r23, r23
    4ce4:	88 1f       	adc	r24, r24
    4ce6:	bb 1f       	adc	r27, r27
    4ce8:	26 17       	cp	r18, r22
    4cea:	37 07       	cpc	r19, r23
    4cec:	48 07       	cpc	r20, r24
    4cee:	ab 07       	cpc	r26, r27
    4cf0:	b0 e8       	ldi	r27, 0x80	; 128
    4cf2:	09 f0       	breq	.+2      	; 0x4cf6 <__divsf3_pse+0x56>
    4cf4:	bb 0b       	sbc	r27, r27
    4cf6:	80 2d       	mov	r24, r0
    4cf8:	bf 01       	movw	r22, r30
    4cfa:	ff 27       	eor	r31, r31
    4cfc:	93 58       	subi	r25, 0x83	; 131
    4cfe:	5f 4f       	sbci	r21, 0xFF	; 255
    4d00:	2a f0       	brmi	.+10     	; 0x4d0c <__divsf3_pse+0x6c>
    4d02:	9e 3f       	cpi	r25, 0xFE	; 254
    4d04:	51 05       	cpc	r21, r1
    4d06:	68 f0       	brcs	.+26     	; 0x4d22 <__divsf3_pse+0x82>
    4d08:	b6 c0       	rjmp	.+364    	; 0x4e76 <__fp_inf>
    4d0a:	00 c1       	rjmp	.+512    	; 0x4f0c <__fp_szero>
    4d0c:	5f 3f       	cpi	r21, 0xFF	; 255
    4d0e:	ec f3       	brlt	.-6      	; 0x4d0a <__divsf3_pse+0x6a>
    4d10:	98 3e       	cpi	r25, 0xE8	; 232
    4d12:	dc f3       	brlt	.-10     	; 0x4d0a <__divsf3_pse+0x6a>
    4d14:	86 95       	lsr	r24
    4d16:	77 95       	ror	r23
    4d18:	67 95       	ror	r22
    4d1a:	b7 95       	ror	r27
    4d1c:	f7 95       	ror	r31
    4d1e:	9f 5f       	subi	r25, 0xFF	; 255
    4d20:	c9 f7       	brne	.-14     	; 0x4d14 <__divsf3_pse+0x74>
    4d22:	88 0f       	add	r24, r24
    4d24:	91 1d       	adc	r25, r1
    4d26:	96 95       	lsr	r25
    4d28:	87 95       	ror	r24
    4d2a:	97 f9       	bld	r25, 7
    4d2c:	08 95       	ret
    4d2e:	e1 e0       	ldi	r30, 0x01	; 1
    4d30:	66 0f       	add	r22, r22
    4d32:	77 1f       	adc	r23, r23
    4d34:	88 1f       	adc	r24, r24
    4d36:	bb 1f       	adc	r27, r27
    4d38:	62 17       	cp	r22, r18
    4d3a:	73 07       	cpc	r23, r19
    4d3c:	84 07       	cpc	r24, r20
    4d3e:	ba 07       	cpc	r27, r26
    4d40:	20 f0       	brcs	.+8      	; 0x4d4a <__divsf3_pse+0xaa>
    4d42:	62 1b       	sub	r22, r18
    4d44:	73 0b       	sbc	r23, r19
    4d46:	84 0b       	sbc	r24, r20
    4d48:	ba 0b       	sbc	r27, r26
    4d4a:	ee 1f       	adc	r30, r30
    4d4c:	88 f7       	brcc	.-30     	; 0x4d30 <__divsf3_pse+0x90>
    4d4e:	e0 95       	com	r30
    4d50:	08 95       	ret

00004d52 <__fixsfsi>:
    4d52:	04 d0       	rcall	.+8      	; 0x4d5c <__fixunssfsi>
    4d54:	68 94       	set
    4d56:	b1 11       	cpse	r27, r1
    4d58:	d9 c0       	rjmp	.+434    	; 0x4f0c <__fp_szero>
    4d5a:	08 95       	ret

00004d5c <__fixunssfsi>:
    4d5c:	bc d0       	rcall	.+376    	; 0x4ed6 <__fp_splitA>
    4d5e:	88 f0       	brcs	.+34     	; 0x4d82 <__fixunssfsi+0x26>
    4d60:	9f 57       	subi	r25, 0x7F	; 127
    4d62:	90 f0       	brcs	.+36     	; 0x4d88 <__fixunssfsi+0x2c>
    4d64:	b9 2f       	mov	r27, r25
    4d66:	99 27       	eor	r25, r25
    4d68:	b7 51       	subi	r27, 0x17	; 23
    4d6a:	a0 f0       	brcs	.+40     	; 0x4d94 <__fixunssfsi+0x38>
    4d6c:	d1 f0       	breq	.+52     	; 0x4da2 <__fixunssfsi+0x46>
    4d6e:	66 0f       	add	r22, r22
    4d70:	77 1f       	adc	r23, r23
    4d72:	88 1f       	adc	r24, r24
    4d74:	99 1f       	adc	r25, r25
    4d76:	1a f0       	brmi	.+6      	; 0x4d7e <__fixunssfsi+0x22>
    4d78:	ba 95       	dec	r27
    4d7a:	c9 f7       	brne	.-14     	; 0x4d6e <__fixunssfsi+0x12>
    4d7c:	12 c0       	rjmp	.+36     	; 0x4da2 <__fixunssfsi+0x46>
    4d7e:	b1 30       	cpi	r27, 0x01	; 1
    4d80:	81 f0       	breq	.+32     	; 0x4da2 <__fixunssfsi+0x46>
    4d82:	c3 d0       	rcall	.+390    	; 0x4f0a <__fp_zero>
    4d84:	b1 e0       	ldi	r27, 0x01	; 1
    4d86:	08 95       	ret
    4d88:	c0 c0       	rjmp	.+384    	; 0x4f0a <__fp_zero>
    4d8a:	67 2f       	mov	r22, r23
    4d8c:	78 2f       	mov	r23, r24
    4d8e:	88 27       	eor	r24, r24
    4d90:	b8 5f       	subi	r27, 0xF8	; 248
    4d92:	39 f0       	breq	.+14     	; 0x4da2 <__fixunssfsi+0x46>
    4d94:	b9 3f       	cpi	r27, 0xF9	; 249
    4d96:	cc f3       	brlt	.-14     	; 0x4d8a <__fixunssfsi+0x2e>
    4d98:	86 95       	lsr	r24
    4d9a:	77 95       	ror	r23
    4d9c:	67 95       	ror	r22
    4d9e:	b3 95       	inc	r27
    4da0:	d9 f7       	brne	.-10     	; 0x4d98 <__fixunssfsi+0x3c>
    4da2:	3e f4       	brtc	.+14     	; 0x4db2 <__fixunssfsi+0x56>
    4da4:	90 95       	com	r25
    4da6:	80 95       	com	r24
    4da8:	70 95       	com	r23
    4daa:	61 95       	neg	r22
    4dac:	7f 4f       	sbci	r23, 0xFF	; 255
    4dae:	8f 4f       	sbci	r24, 0xFF	; 255
    4db0:	9f 4f       	sbci	r25, 0xFF	; 255
    4db2:	08 95       	ret

00004db4 <__floatunsisf>:
    4db4:	e8 94       	clt
    4db6:	09 c0       	rjmp	.+18     	; 0x4dca <__floatsisf+0x12>

00004db8 <__floatsisf>:
    4db8:	97 fb       	bst	r25, 7
    4dba:	3e f4       	brtc	.+14     	; 0x4dca <__floatsisf+0x12>
    4dbc:	90 95       	com	r25
    4dbe:	80 95       	com	r24
    4dc0:	70 95       	com	r23
    4dc2:	61 95       	neg	r22
    4dc4:	7f 4f       	sbci	r23, 0xFF	; 255
    4dc6:	8f 4f       	sbci	r24, 0xFF	; 255
    4dc8:	9f 4f       	sbci	r25, 0xFF	; 255
    4dca:	99 23       	and	r25, r25
    4dcc:	a9 f0       	breq	.+42     	; 0x4df8 <__floatsisf+0x40>
    4dce:	f9 2f       	mov	r31, r25
    4dd0:	96 e9       	ldi	r25, 0x96	; 150
    4dd2:	bb 27       	eor	r27, r27
    4dd4:	93 95       	inc	r25
    4dd6:	f6 95       	lsr	r31
    4dd8:	87 95       	ror	r24
    4dda:	77 95       	ror	r23
    4ddc:	67 95       	ror	r22
    4dde:	b7 95       	ror	r27
    4de0:	f1 11       	cpse	r31, r1
    4de2:	f8 cf       	rjmp	.-16     	; 0x4dd4 <__floatsisf+0x1c>
    4de4:	fa f4       	brpl	.+62     	; 0x4e24 <__floatsisf+0x6c>
    4de6:	bb 0f       	add	r27, r27
    4de8:	11 f4       	brne	.+4      	; 0x4dee <__floatsisf+0x36>
    4dea:	60 ff       	sbrs	r22, 0
    4dec:	1b c0       	rjmp	.+54     	; 0x4e24 <__floatsisf+0x6c>
    4dee:	6f 5f       	subi	r22, 0xFF	; 255
    4df0:	7f 4f       	sbci	r23, 0xFF	; 255
    4df2:	8f 4f       	sbci	r24, 0xFF	; 255
    4df4:	9f 4f       	sbci	r25, 0xFF	; 255
    4df6:	16 c0       	rjmp	.+44     	; 0x4e24 <__floatsisf+0x6c>
    4df8:	88 23       	and	r24, r24
    4dfa:	11 f0       	breq	.+4      	; 0x4e00 <__floatsisf+0x48>
    4dfc:	96 e9       	ldi	r25, 0x96	; 150
    4dfe:	11 c0       	rjmp	.+34     	; 0x4e22 <__floatsisf+0x6a>
    4e00:	77 23       	and	r23, r23
    4e02:	21 f0       	breq	.+8      	; 0x4e0c <__floatsisf+0x54>
    4e04:	9e e8       	ldi	r25, 0x8E	; 142
    4e06:	87 2f       	mov	r24, r23
    4e08:	76 2f       	mov	r23, r22
    4e0a:	05 c0       	rjmp	.+10     	; 0x4e16 <__floatsisf+0x5e>
    4e0c:	66 23       	and	r22, r22
    4e0e:	71 f0       	breq	.+28     	; 0x4e2c <__floatsisf+0x74>
    4e10:	96 e8       	ldi	r25, 0x86	; 134
    4e12:	86 2f       	mov	r24, r22
    4e14:	70 e0       	ldi	r23, 0x00	; 0
    4e16:	60 e0       	ldi	r22, 0x00	; 0
    4e18:	2a f0       	brmi	.+10     	; 0x4e24 <__floatsisf+0x6c>
    4e1a:	9a 95       	dec	r25
    4e1c:	66 0f       	add	r22, r22
    4e1e:	77 1f       	adc	r23, r23
    4e20:	88 1f       	adc	r24, r24
    4e22:	da f7       	brpl	.-10     	; 0x4e1a <__floatsisf+0x62>
    4e24:	88 0f       	add	r24, r24
    4e26:	96 95       	lsr	r25
    4e28:	87 95       	ror	r24
    4e2a:	97 f9       	bld	r25, 7
    4e2c:	08 95       	ret

00004e2e <__fp_cmp>:
    4e2e:	99 0f       	add	r25, r25
    4e30:	00 08       	sbc	r0, r0
    4e32:	55 0f       	add	r21, r21
    4e34:	aa 0b       	sbc	r26, r26
    4e36:	e0 e8       	ldi	r30, 0x80	; 128
    4e38:	fe ef       	ldi	r31, 0xFE	; 254
    4e3a:	16 16       	cp	r1, r22
    4e3c:	17 06       	cpc	r1, r23
    4e3e:	e8 07       	cpc	r30, r24
    4e40:	f9 07       	cpc	r31, r25
    4e42:	c0 f0       	brcs	.+48     	; 0x4e74 <__fp_cmp+0x46>
    4e44:	12 16       	cp	r1, r18
    4e46:	13 06       	cpc	r1, r19
    4e48:	e4 07       	cpc	r30, r20
    4e4a:	f5 07       	cpc	r31, r21
    4e4c:	98 f0       	brcs	.+38     	; 0x4e74 <__fp_cmp+0x46>
    4e4e:	62 1b       	sub	r22, r18
    4e50:	73 0b       	sbc	r23, r19
    4e52:	84 0b       	sbc	r24, r20
    4e54:	95 0b       	sbc	r25, r21
    4e56:	39 f4       	brne	.+14     	; 0x4e66 <__fp_cmp+0x38>
    4e58:	0a 26       	eor	r0, r26
    4e5a:	61 f0       	breq	.+24     	; 0x4e74 <__fp_cmp+0x46>
    4e5c:	23 2b       	or	r18, r19
    4e5e:	24 2b       	or	r18, r20
    4e60:	25 2b       	or	r18, r21
    4e62:	21 f4       	brne	.+8      	; 0x4e6c <__fp_cmp+0x3e>
    4e64:	08 95       	ret
    4e66:	0a 26       	eor	r0, r26
    4e68:	09 f4       	brne	.+2      	; 0x4e6c <__fp_cmp+0x3e>
    4e6a:	a1 40       	sbci	r26, 0x01	; 1
    4e6c:	a6 95       	lsr	r26
    4e6e:	8f ef       	ldi	r24, 0xFF	; 255
    4e70:	81 1d       	adc	r24, r1
    4e72:	81 1d       	adc	r24, r1
    4e74:	08 95       	ret

00004e76 <__fp_inf>:
    4e76:	97 f9       	bld	r25, 7
    4e78:	9f 67       	ori	r25, 0x7F	; 127
    4e7a:	80 e8       	ldi	r24, 0x80	; 128
    4e7c:	70 e0       	ldi	r23, 0x00	; 0
    4e7e:	60 e0       	ldi	r22, 0x00	; 0
    4e80:	08 95       	ret

00004e82 <__fp_nan>:
    4e82:	9f ef       	ldi	r25, 0xFF	; 255
    4e84:	80 ec       	ldi	r24, 0xC0	; 192
    4e86:	08 95       	ret

00004e88 <__fp_pscA>:
    4e88:	00 24       	eor	r0, r0
    4e8a:	0a 94       	dec	r0
    4e8c:	16 16       	cp	r1, r22
    4e8e:	17 06       	cpc	r1, r23
    4e90:	18 06       	cpc	r1, r24
    4e92:	09 06       	cpc	r0, r25
    4e94:	08 95       	ret

00004e96 <__fp_pscB>:
    4e96:	00 24       	eor	r0, r0
    4e98:	0a 94       	dec	r0
    4e9a:	12 16       	cp	r1, r18
    4e9c:	13 06       	cpc	r1, r19
    4e9e:	14 06       	cpc	r1, r20
    4ea0:	05 06       	cpc	r0, r21
    4ea2:	08 95       	ret

00004ea4 <__fp_round>:
    4ea4:	09 2e       	mov	r0, r25
    4ea6:	03 94       	inc	r0
    4ea8:	00 0c       	add	r0, r0
    4eaa:	11 f4       	brne	.+4      	; 0x4eb0 <__fp_round+0xc>
    4eac:	88 23       	and	r24, r24
    4eae:	52 f0       	brmi	.+20     	; 0x4ec4 <__fp_round+0x20>
    4eb0:	bb 0f       	add	r27, r27
    4eb2:	40 f4       	brcc	.+16     	; 0x4ec4 <__fp_round+0x20>
    4eb4:	bf 2b       	or	r27, r31
    4eb6:	11 f4       	brne	.+4      	; 0x4ebc <__fp_round+0x18>
    4eb8:	60 ff       	sbrs	r22, 0
    4eba:	04 c0       	rjmp	.+8      	; 0x4ec4 <__fp_round+0x20>
    4ebc:	6f 5f       	subi	r22, 0xFF	; 255
    4ebe:	7f 4f       	sbci	r23, 0xFF	; 255
    4ec0:	8f 4f       	sbci	r24, 0xFF	; 255
    4ec2:	9f 4f       	sbci	r25, 0xFF	; 255
    4ec4:	08 95       	ret

00004ec6 <__fp_split3>:
    4ec6:	57 fd       	sbrc	r21, 7
    4ec8:	90 58       	subi	r25, 0x80	; 128
    4eca:	44 0f       	add	r20, r20
    4ecc:	55 1f       	adc	r21, r21
    4ece:	59 f0       	breq	.+22     	; 0x4ee6 <__fp_splitA+0x10>
    4ed0:	5f 3f       	cpi	r21, 0xFF	; 255
    4ed2:	71 f0       	breq	.+28     	; 0x4ef0 <__fp_splitA+0x1a>
    4ed4:	47 95       	ror	r20

00004ed6 <__fp_splitA>:
    4ed6:	88 0f       	add	r24, r24
    4ed8:	97 fb       	bst	r25, 7
    4eda:	99 1f       	adc	r25, r25
    4edc:	61 f0       	breq	.+24     	; 0x4ef6 <__fp_splitA+0x20>
    4ede:	9f 3f       	cpi	r25, 0xFF	; 255
    4ee0:	79 f0       	breq	.+30     	; 0x4f00 <__fp_splitA+0x2a>
    4ee2:	87 95       	ror	r24
    4ee4:	08 95       	ret
    4ee6:	12 16       	cp	r1, r18
    4ee8:	13 06       	cpc	r1, r19
    4eea:	14 06       	cpc	r1, r20
    4eec:	55 1f       	adc	r21, r21
    4eee:	f2 cf       	rjmp	.-28     	; 0x4ed4 <__fp_split3+0xe>
    4ef0:	46 95       	lsr	r20
    4ef2:	f1 df       	rcall	.-30     	; 0x4ed6 <__fp_splitA>
    4ef4:	08 c0       	rjmp	.+16     	; 0x4f06 <__fp_splitA+0x30>
    4ef6:	16 16       	cp	r1, r22
    4ef8:	17 06       	cpc	r1, r23
    4efa:	18 06       	cpc	r1, r24
    4efc:	99 1f       	adc	r25, r25
    4efe:	f1 cf       	rjmp	.-30     	; 0x4ee2 <__fp_splitA+0xc>
    4f00:	86 95       	lsr	r24
    4f02:	71 05       	cpc	r23, r1
    4f04:	61 05       	cpc	r22, r1
    4f06:	08 94       	sec
    4f08:	08 95       	ret

00004f0a <__fp_zero>:
    4f0a:	e8 94       	clt

00004f0c <__fp_szero>:
    4f0c:	bb 27       	eor	r27, r27
    4f0e:	66 27       	eor	r22, r22
    4f10:	77 27       	eor	r23, r23
    4f12:	cb 01       	movw	r24, r22
    4f14:	97 f9       	bld	r25, 7
    4f16:	08 95       	ret

00004f18 <__gesf2>:
    4f18:	8a df       	rcall	.-236    	; 0x4e2e <__fp_cmp>
    4f1a:	08 f4       	brcc	.+2      	; 0x4f1e <__gesf2+0x6>
    4f1c:	8f ef       	ldi	r24, 0xFF	; 255
    4f1e:	08 95       	ret

00004f20 <__mulsf3>:
    4f20:	0b d0       	rcall	.+22     	; 0x4f38 <__mulsf3x>
    4f22:	c0 cf       	rjmp	.-128    	; 0x4ea4 <__fp_round>
    4f24:	b1 df       	rcall	.-158    	; 0x4e88 <__fp_pscA>
    4f26:	28 f0       	brcs	.+10     	; 0x4f32 <__mulsf3+0x12>
    4f28:	b6 df       	rcall	.-148    	; 0x4e96 <__fp_pscB>
    4f2a:	18 f0       	brcs	.+6      	; 0x4f32 <__mulsf3+0x12>
    4f2c:	95 23       	and	r25, r21
    4f2e:	09 f0       	breq	.+2      	; 0x4f32 <__mulsf3+0x12>
    4f30:	a2 cf       	rjmp	.-188    	; 0x4e76 <__fp_inf>
    4f32:	a7 cf       	rjmp	.-178    	; 0x4e82 <__fp_nan>
    4f34:	11 24       	eor	r1, r1
    4f36:	ea cf       	rjmp	.-44     	; 0x4f0c <__fp_szero>

00004f38 <__mulsf3x>:
    4f38:	c6 df       	rcall	.-116    	; 0x4ec6 <__fp_split3>
    4f3a:	a0 f3       	brcs	.-24     	; 0x4f24 <__mulsf3+0x4>

00004f3c <__mulsf3_pse>:
    4f3c:	95 9f       	mul	r25, r21
    4f3e:	d1 f3       	breq	.-12     	; 0x4f34 <__mulsf3+0x14>
    4f40:	95 0f       	add	r25, r21
    4f42:	50 e0       	ldi	r21, 0x00	; 0
    4f44:	55 1f       	adc	r21, r21
    4f46:	62 9f       	mul	r22, r18
    4f48:	f0 01       	movw	r30, r0
    4f4a:	72 9f       	mul	r23, r18
    4f4c:	bb 27       	eor	r27, r27
    4f4e:	f0 0d       	add	r31, r0
    4f50:	b1 1d       	adc	r27, r1
    4f52:	63 9f       	mul	r22, r19
    4f54:	aa 27       	eor	r26, r26
    4f56:	f0 0d       	add	r31, r0
    4f58:	b1 1d       	adc	r27, r1
    4f5a:	aa 1f       	adc	r26, r26
    4f5c:	64 9f       	mul	r22, r20
    4f5e:	66 27       	eor	r22, r22
    4f60:	b0 0d       	add	r27, r0
    4f62:	a1 1d       	adc	r26, r1
    4f64:	66 1f       	adc	r22, r22
    4f66:	82 9f       	mul	r24, r18
    4f68:	22 27       	eor	r18, r18
    4f6a:	b0 0d       	add	r27, r0
    4f6c:	a1 1d       	adc	r26, r1
    4f6e:	62 1f       	adc	r22, r18
    4f70:	73 9f       	mul	r23, r19
    4f72:	b0 0d       	add	r27, r0
    4f74:	a1 1d       	adc	r26, r1
    4f76:	62 1f       	adc	r22, r18
    4f78:	83 9f       	mul	r24, r19
    4f7a:	a0 0d       	add	r26, r0
    4f7c:	61 1d       	adc	r22, r1
    4f7e:	22 1f       	adc	r18, r18
    4f80:	74 9f       	mul	r23, r20
    4f82:	33 27       	eor	r19, r19
    4f84:	a0 0d       	add	r26, r0
    4f86:	61 1d       	adc	r22, r1
    4f88:	23 1f       	adc	r18, r19
    4f8a:	84 9f       	mul	r24, r20
    4f8c:	60 0d       	add	r22, r0
    4f8e:	21 1d       	adc	r18, r1
    4f90:	82 2f       	mov	r24, r18
    4f92:	76 2f       	mov	r23, r22
    4f94:	6a 2f       	mov	r22, r26
    4f96:	11 24       	eor	r1, r1
    4f98:	9f 57       	subi	r25, 0x7F	; 127
    4f9a:	50 40       	sbci	r21, 0x00	; 0
    4f9c:	8a f0       	brmi	.+34     	; 0x4fc0 <__mulsf3_pse+0x84>
    4f9e:	e1 f0       	breq	.+56     	; 0x4fd8 <__mulsf3_pse+0x9c>
    4fa0:	88 23       	and	r24, r24
    4fa2:	4a f0       	brmi	.+18     	; 0x4fb6 <__mulsf3_pse+0x7a>
    4fa4:	ee 0f       	add	r30, r30
    4fa6:	ff 1f       	adc	r31, r31
    4fa8:	bb 1f       	adc	r27, r27
    4faa:	66 1f       	adc	r22, r22
    4fac:	77 1f       	adc	r23, r23
    4fae:	88 1f       	adc	r24, r24
    4fb0:	91 50       	subi	r25, 0x01	; 1
    4fb2:	50 40       	sbci	r21, 0x00	; 0
    4fb4:	a9 f7       	brne	.-22     	; 0x4fa0 <__mulsf3_pse+0x64>
    4fb6:	9e 3f       	cpi	r25, 0xFE	; 254
    4fb8:	51 05       	cpc	r21, r1
    4fba:	70 f0       	brcs	.+28     	; 0x4fd8 <__mulsf3_pse+0x9c>
    4fbc:	5c cf       	rjmp	.-328    	; 0x4e76 <__fp_inf>
    4fbe:	a6 cf       	rjmp	.-180    	; 0x4f0c <__fp_szero>
    4fc0:	5f 3f       	cpi	r21, 0xFF	; 255
    4fc2:	ec f3       	brlt	.-6      	; 0x4fbe <__mulsf3_pse+0x82>
    4fc4:	98 3e       	cpi	r25, 0xE8	; 232
    4fc6:	dc f3       	brlt	.-10     	; 0x4fbe <__mulsf3_pse+0x82>
    4fc8:	86 95       	lsr	r24
    4fca:	77 95       	ror	r23
    4fcc:	67 95       	ror	r22
    4fce:	b7 95       	ror	r27
    4fd0:	f7 95       	ror	r31
    4fd2:	e7 95       	ror	r30
    4fd4:	9f 5f       	subi	r25, 0xFF	; 255
    4fd6:	c1 f7       	brne	.-16     	; 0x4fc8 <__mulsf3_pse+0x8c>
    4fd8:	fe 2b       	or	r31, r30
    4fda:	88 0f       	add	r24, r24
    4fdc:	91 1d       	adc	r25, r1
    4fde:	96 95       	lsr	r25
    4fe0:	87 95       	ror	r24
    4fe2:	97 f9       	bld	r25, 7
    4fe4:	08 95       	ret

00004fe6 <__udivmodsi4>:
    4fe6:	a1 e2       	ldi	r26, 0x21	; 33
    4fe8:	1a 2e       	mov	r1, r26
    4fea:	aa 1b       	sub	r26, r26
    4fec:	bb 1b       	sub	r27, r27
    4fee:	fd 01       	movw	r30, r26
    4ff0:	0d c0       	rjmp	.+26     	; 0x500c <__udivmodsi4_ep>

00004ff2 <__udivmodsi4_loop>:
    4ff2:	aa 1f       	adc	r26, r26
    4ff4:	bb 1f       	adc	r27, r27
    4ff6:	ee 1f       	adc	r30, r30
    4ff8:	ff 1f       	adc	r31, r31
    4ffa:	a2 17       	cp	r26, r18
    4ffc:	b3 07       	cpc	r27, r19
    4ffe:	e4 07       	cpc	r30, r20
    5000:	f5 07       	cpc	r31, r21
    5002:	20 f0       	brcs	.+8      	; 0x500c <__udivmodsi4_ep>
    5004:	a2 1b       	sub	r26, r18
    5006:	b3 0b       	sbc	r27, r19
    5008:	e4 0b       	sbc	r30, r20
    500a:	f5 0b       	sbc	r31, r21

0000500c <__udivmodsi4_ep>:
    500c:	66 1f       	adc	r22, r22
    500e:	77 1f       	adc	r23, r23
    5010:	88 1f       	adc	r24, r24
    5012:	99 1f       	adc	r25, r25
    5014:	1a 94       	dec	r1
    5016:	69 f7       	brne	.-38     	; 0x4ff2 <__udivmodsi4_loop>
    5018:	60 95       	com	r22
    501a:	70 95       	com	r23
    501c:	80 95       	com	r24
    501e:	90 95       	com	r25
    5020:	9b 01       	movw	r18, r22
    5022:	ac 01       	movw	r20, r24
    5024:	bd 01       	movw	r22, r26
    5026:	cf 01       	movw	r24, r30
    5028:	08 95       	ret

0000502a <__umulhisi3>:
    502a:	a2 9f       	mul	r26, r18
    502c:	b0 01       	movw	r22, r0
    502e:	b3 9f       	mul	r27, r19
    5030:	c0 01       	movw	r24, r0
    5032:	a3 9f       	mul	r26, r19
    5034:	70 0d       	add	r23, r0
    5036:	81 1d       	adc	r24, r1
    5038:	11 24       	eor	r1, r1
    503a:	91 1d       	adc	r25, r1
    503c:	b2 9f       	mul	r27, r18
    503e:	70 0d       	add	r23, r0
    5040:	81 1d       	adc	r24, r1
    5042:	11 24       	eor	r1, r1
    5044:	91 1d       	adc	r25, r1
    5046:	08 95       	ret

00005048 <memcpy>:
    5048:	fb 01       	movw	r30, r22
    504a:	dc 01       	movw	r26, r24
    504c:	02 c0       	rjmp	.+4      	; 0x5052 <memcpy+0xa>
    504e:	01 90       	ld	r0, Z+
    5050:	0d 92       	st	X+, r0
    5052:	41 50       	subi	r20, 0x01	; 1
    5054:	50 40       	sbci	r21, 0x00	; 0
    5056:	d8 f7       	brcc	.-10     	; 0x504e <memcpy+0x6>
    5058:	08 95       	ret

0000505a <sprintf>:
    505a:	0f 93       	push	r16
    505c:	1f 93       	push	r17
    505e:	cf 93       	push	r28
    5060:	df 93       	push	r29
    5062:	cd b7       	in	r28, 0x3d	; 61
    5064:	de b7       	in	r29, 0x3e	; 62
    5066:	2e 97       	sbiw	r28, 0x0e	; 14
    5068:	0f b6       	in	r0, 0x3f	; 63
    506a:	f8 94       	cli
    506c:	de bf       	out	0x3e, r29	; 62
    506e:	0f be       	out	0x3f, r0	; 63
    5070:	cd bf       	out	0x3d, r28	; 61
    5072:	0d 89       	ldd	r16, Y+21	; 0x15
    5074:	1e 89       	ldd	r17, Y+22	; 0x16
    5076:	86 e0       	ldi	r24, 0x06	; 6
    5078:	8c 83       	std	Y+4, r24	; 0x04
    507a:	1a 83       	std	Y+2, r17	; 0x02
    507c:	09 83       	std	Y+1, r16	; 0x01
    507e:	8f ef       	ldi	r24, 0xFF	; 255
    5080:	9f e7       	ldi	r25, 0x7F	; 127
    5082:	9e 83       	std	Y+6, r25	; 0x06
    5084:	8d 83       	std	Y+5, r24	; 0x05
    5086:	ae 01       	movw	r20, r28
    5088:	47 5e       	subi	r20, 0xE7	; 231
    508a:	5f 4f       	sbci	r21, 0xFF	; 255
    508c:	6f 89       	ldd	r22, Y+23	; 0x17
    508e:	78 8d       	ldd	r23, Y+24	; 0x18
    5090:	ce 01       	movw	r24, r28
    5092:	01 96       	adiw	r24, 0x01	; 1
    5094:	10 d0       	rcall	.+32     	; 0x50b6 <vfprintf>
    5096:	ef 81       	ldd	r30, Y+7	; 0x07
    5098:	f8 85       	ldd	r31, Y+8	; 0x08
    509a:	e0 0f       	add	r30, r16
    509c:	f1 1f       	adc	r31, r17
    509e:	10 82       	st	Z, r1
    50a0:	2e 96       	adiw	r28, 0x0e	; 14
    50a2:	0f b6       	in	r0, 0x3f	; 63
    50a4:	f8 94       	cli
    50a6:	de bf       	out	0x3e, r29	; 62
    50a8:	0f be       	out	0x3f, r0	; 63
    50aa:	cd bf       	out	0x3d, r28	; 61
    50ac:	df 91       	pop	r29
    50ae:	cf 91       	pop	r28
    50b0:	1f 91       	pop	r17
    50b2:	0f 91       	pop	r16
    50b4:	08 95       	ret

000050b6 <vfprintf>:
    50b6:	2f 92       	push	r2
    50b8:	3f 92       	push	r3
    50ba:	4f 92       	push	r4
    50bc:	5f 92       	push	r5
    50be:	6f 92       	push	r6
    50c0:	7f 92       	push	r7
    50c2:	8f 92       	push	r8
    50c4:	9f 92       	push	r9
    50c6:	af 92       	push	r10
    50c8:	bf 92       	push	r11
    50ca:	cf 92       	push	r12
    50cc:	df 92       	push	r13
    50ce:	ef 92       	push	r14
    50d0:	ff 92       	push	r15
    50d2:	0f 93       	push	r16
    50d4:	1f 93       	push	r17
    50d6:	cf 93       	push	r28
    50d8:	df 93       	push	r29
    50da:	cd b7       	in	r28, 0x3d	; 61
    50dc:	de b7       	in	r29, 0x3e	; 62
    50de:	2b 97       	sbiw	r28, 0x0b	; 11
    50e0:	0f b6       	in	r0, 0x3f	; 63
    50e2:	f8 94       	cli
    50e4:	de bf       	out	0x3e, r29	; 62
    50e6:	0f be       	out	0x3f, r0	; 63
    50e8:	cd bf       	out	0x3d, r28	; 61
    50ea:	6c 01       	movw	r12, r24
    50ec:	7b 01       	movw	r14, r22
    50ee:	8a 01       	movw	r16, r20
    50f0:	fc 01       	movw	r30, r24
    50f2:	17 82       	std	Z+7, r1	; 0x07
    50f4:	16 82       	std	Z+6, r1	; 0x06
    50f6:	83 81       	ldd	r24, Z+3	; 0x03
    50f8:	81 ff       	sbrs	r24, 1
    50fa:	bf c1       	rjmp	.+894    	; 0x547a <vfprintf+0x3c4>
    50fc:	ce 01       	movw	r24, r28
    50fe:	01 96       	adiw	r24, 0x01	; 1
    5100:	3c 01       	movw	r6, r24
    5102:	f6 01       	movw	r30, r12
    5104:	93 81       	ldd	r25, Z+3	; 0x03
    5106:	f7 01       	movw	r30, r14
    5108:	93 fd       	sbrc	r25, 3
    510a:	85 91       	lpm	r24, Z+
    510c:	93 ff       	sbrs	r25, 3
    510e:	81 91       	ld	r24, Z+
    5110:	7f 01       	movw	r14, r30
    5112:	88 23       	and	r24, r24
    5114:	09 f4       	brne	.+2      	; 0x5118 <vfprintf+0x62>
    5116:	ad c1       	rjmp	.+858    	; 0x5472 <vfprintf+0x3bc>
    5118:	85 32       	cpi	r24, 0x25	; 37
    511a:	39 f4       	brne	.+14     	; 0x512a <vfprintf+0x74>
    511c:	93 fd       	sbrc	r25, 3
    511e:	85 91       	lpm	r24, Z+
    5120:	93 ff       	sbrs	r25, 3
    5122:	81 91       	ld	r24, Z+
    5124:	7f 01       	movw	r14, r30
    5126:	85 32       	cpi	r24, 0x25	; 37
    5128:	21 f4       	brne	.+8      	; 0x5132 <vfprintf+0x7c>
    512a:	b6 01       	movw	r22, r12
    512c:	90 e0       	ldi	r25, 0x00	; 0
    512e:	d6 d1       	rcall	.+940    	; 0x54dc <fputc>
    5130:	e8 cf       	rjmp	.-48     	; 0x5102 <vfprintf+0x4c>
    5132:	91 2c       	mov	r9, r1
    5134:	21 2c       	mov	r2, r1
    5136:	31 2c       	mov	r3, r1
    5138:	ff e1       	ldi	r31, 0x1F	; 31
    513a:	f3 15       	cp	r31, r3
    513c:	d8 f0       	brcs	.+54     	; 0x5174 <vfprintf+0xbe>
    513e:	8b 32       	cpi	r24, 0x2B	; 43
    5140:	79 f0       	breq	.+30     	; 0x5160 <vfprintf+0xaa>
    5142:	38 f4       	brcc	.+14     	; 0x5152 <vfprintf+0x9c>
    5144:	80 32       	cpi	r24, 0x20	; 32
    5146:	79 f0       	breq	.+30     	; 0x5166 <vfprintf+0xb0>
    5148:	83 32       	cpi	r24, 0x23	; 35
    514a:	a1 f4       	brne	.+40     	; 0x5174 <vfprintf+0xbe>
    514c:	23 2d       	mov	r18, r3
    514e:	20 61       	ori	r18, 0x10	; 16
    5150:	1d c0       	rjmp	.+58     	; 0x518c <vfprintf+0xd6>
    5152:	8d 32       	cpi	r24, 0x2D	; 45
    5154:	61 f0       	breq	.+24     	; 0x516e <vfprintf+0xb8>
    5156:	80 33       	cpi	r24, 0x30	; 48
    5158:	69 f4       	brne	.+26     	; 0x5174 <vfprintf+0xbe>
    515a:	23 2d       	mov	r18, r3
    515c:	21 60       	ori	r18, 0x01	; 1
    515e:	16 c0       	rjmp	.+44     	; 0x518c <vfprintf+0xd6>
    5160:	83 2d       	mov	r24, r3
    5162:	82 60       	ori	r24, 0x02	; 2
    5164:	38 2e       	mov	r3, r24
    5166:	e3 2d       	mov	r30, r3
    5168:	e4 60       	ori	r30, 0x04	; 4
    516a:	3e 2e       	mov	r3, r30
    516c:	2a c0       	rjmp	.+84     	; 0x51c2 <vfprintf+0x10c>
    516e:	f3 2d       	mov	r31, r3
    5170:	f8 60       	ori	r31, 0x08	; 8
    5172:	1d c0       	rjmp	.+58     	; 0x51ae <vfprintf+0xf8>
    5174:	37 fc       	sbrc	r3, 7
    5176:	2d c0       	rjmp	.+90     	; 0x51d2 <vfprintf+0x11c>
    5178:	20 ed       	ldi	r18, 0xD0	; 208
    517a:	28 0f       	add	r18, r24
    517c:	2a 30       	cpi	r18, 0x0A	; 10
    517e:	40 f0       	brcs	.+16     	; 0x5190 <vfprintf+0xda>
    5180:	8e 32       	cpi	r24, 0x2E	; 46
    5182:	b9 f4       	brne	.+46     	; 0x51b2 <vfprintf+0xfc>
    5184:	36 fc       	sbrc	r3, 6
    5186:	75 c1       	rjmp	.+746    	; 0x5472 <vfprintf+0x3bc>
    5188:	23 2d       	mov	r18, r3
    518a:	20 64       	ori	r18, 0x40	; 64
    518c:	32 2e       	mov	r3, r18
    518e:	19 c0       	rjmp	.+50     	; 0x51c2 <vfprintf+0x10c>
    5190:	36 fe       	sbrs	r3, 6
    5192:	06 c0       	rjmp	.+12     	; 0x51a0 <vfprintf+0xea>
    5194:	8a e0       	ldi	r24, 0x0A	; 10
    5196:	98 9e       	mul	r9, r24
    5198:	20 0d       	add	r18, r0
    519a:	11 24       	eor	r1, r1
    519c:	92 2e       	mov	r9, r18
    519e:	11 c0       	rjmp	.+34     	; 0x51c2 <vfprintf+0x10c>
    51a0:	ea e0       	ldi	r30, 0x0A	; 10
    51a2:	2e 9e       	mul	r2, r30
    51a4:	20 0d       	add	r18, r0
    51a6:	11 24       	eor	r1, r1
    51a8:	22 2e       	mov	r2, r18
    51aa:	f3 2d       	mov	r31, r3
    51ac:	f0 62       	ori	r31, 0x20	; 32
    51ae:	3f 2e       	mov	r3, r31
    51b0:	08 c0       	rjmp	.+16     	; 0x51c2 <vfprintf+0x10c>
    51b2:	8c 36       	cpi	r24, 0x6C	; 108
    51b4:	21 f4       	brne	.+8      	; 0x51be <vfprintf+0x108>
    51b6:	83 2d       	mov	r24, r3
    51b8:	80 68       	ori	r24, 0x80	; 128
    51ba:	38 2e       	mov	r3, r24
    51bc:	02 c0       	rjmp	.+4      	; 0x51c2 <vfprintf+0x10c>
    51be:	88 36       	cpi	r24, 0x68	; 104
    51c0:	41 f4       	brne	.+16     	; 0x51d2 <vfprintf+0x11c>
    51c2:	f7 01       	movw	r30, r14
    51c4:	93 fd       	sbrc	r25, 3
    51c6:	85 91       	lpm	r24, Z+
    51c8:	93 ff       	sbrs	r25, 3
    51ca:	81 91       	ld	r24, Z+
    51cc:	7f 01       	movw	r14, r30
    51ce:	81 11       	cpse	r24, r1
    51d0:	b3 cf       	rjmp	.-154    	; 0x5138 <vfprintf+0x82>
    51d2:	98 2f       	mov	r25, r24
    51d4:	9f 7d       	andi	r25, 0xDF	; 223
    51d6:	95 54       	subi	r25, 0x45	; 69
    51d8:	93 30       	cpi	r25, 0x03	; 3
    51da:	28 f4       	brcc	.+10     	; 0x51e6 <vfprintf+0x130>
    51dc:	0c 5f       	subi	r16, 0xFC	; 252
    51de:	1f 4f       	sbci	r17, 0xFF	; 255
    51e0:	9f e3       	ldi	r25, 0x3F	; 63
    51e2:	99 83       	std	Y+1, r25	; 0x01
    51e4:	0d c0       	rjmp	.+26     	; 0x5200 <vfprintf+0x14a>
    51e6:	83 36       	cpi	r24, 0x63	; 99
    51e8:	31 f0       	breq	.+12     	; 0x51f6 <vfprintf+0x140>
    51ea:	83 37       	cpi	r24, 0x73	; 115
    51ec:	71 f0       	breq	.+28     	; 0x520a <vfprintf+0x154>
    51ee:	83 35       	cpi	r24, 0x53	; 83
    51f0:	09 f0       	breq	.+2      	; 0x51f4 <vfprintf+0x13e>
    51f2:	55 c0       	rjmp	.+170    	; 0x529e <vfprintf+0x1e8>
    51f4:	20 c0       	rjmp	.+64     	; 0x5236 <vfprintf+0x180>
    51f6:	f8 01       	movw	r30, r16
    51f8:	80 81       	ld	r24, Z
    51fa:	89 83       	std	Y+1, r24	; 0x01
    51fc:	0e 5f       	subi	r16, 0xFE	; 254
    51fe:	1f 4f       	sbci	r17, 0xFF	; 255
    5200:	88 24       	eor	r8, r8
    5202:	83 94       	inc	r8
    5204:	91 2c       	mov	r9, r1
    5206:	53 01       	movw	r10, r6
    5208:	12 c0       	rjmp	.+36     	; 0x522e <vfprintf+0x178>
    520a:	28 01       	movw	r4, r16
    520c:	f2 e0       	ldi	r31, 0x02	; 2
    520e:	4f 0e       	add	r4, r31
    5210:	51 1c       	adc	r5, r1
    5212:	f8 01       	movw	r30, r16
    5214:	a0 80       	ld	r10, Z
    5216:	b1 80       	ldd	r11, Z+1	; 0x01
    5218:	36 fe       	sbrs	r3, 6
    521a:	03 c0       	rjmp	.+6      	; 0x5222 <vfprintf+0x16c>
    521c:	69 2d       	mov	r22, r9
    521e:	70 e0       	ldi	r23, 0x00	; 0
    5220:	02 c0       	rjmp	.+4      	; 0x5226 <vfprintf+0x170>
    5222:	6f ef       	ldi	r22, 0xFF	; 255
    5224:	7f ef       	ldi	r23, 0xFF	; 255
    5226:	c5 01       	movw	r24, r10
    5228:	4e d1       	rcall	.+668    	; 0x54c6 <strnlen>
    522a:	4c 01       	movw	r8, r24
    522c:	82 01       	movw	r16, r4
    522e:	f3 2d       	mov	r31, r3
    5230:	ff 77       	andi	r31, 0x7F	; 127
    5232:	3f 2e       	mov	r3, r31
    5234:	15 c0       	rjmp	.+42     	; 0x5260 <vfprintf+0x1aa>
    5236:	28 01       	movw	r4, r16
    5238:	22 e0       	ldi	r18, 0x02	; 2
    523a:	42 0e       	add	r4, r18
    523c:	51 1c       	adc	r5, r1
    523e:	f8 01       	movw	r30, r16
    5240:	a0 80       	ld	r10, Z
    5242:	b1 80       	ldd	r11, Z+1	; 0x01
    5244:	36 fe       	sbrs	r3, 6
    5246:	03 c0       	rjmp	.+6      	; 0x524e <vfprintf+0x198>
    5248:	69 2d       	mov	r22, r9
    524a:	70 e0       	ldi	r23, 0x00	; 0
    524c:	02 c0       	rjmp	.+4      	; 0x5252 <vfprintf+0x19c>
    524e:	6f ef       	ldi	r22, 0xFF	; 255
    5250:	7f ef       	ldi	r23, 0xFF	; 255
    5252:	c5 01       	movw	r24, r10
    5254:	2d d1       	rcall	.+602    	; 0x54b0 <strnlen_P>
    5256:	4c 01       	movw	r8, r24
    5258:	f3 2d       	mov	r31, r3
    525a:	f0 68       	ori	r31, 0x80	; 128
    525c:	3f 2e       	mov	r3, r31
    525e:	82 01       	movw	r16, r4
    5260:	33 fc       	sbrc	r3, 3
    5262:	19 c0       	rjmp	.+50     	; 0x5296 <vfprintf+0x1e0>
    5264:	82 2d       	mov	r24, r2
    5266:	90 e0       	ldi	r25, 0x00	; 0
    5268:	88 16       	cp	r8, r24
    526a:	99 06       	cpc	r9, r25
    526c:	a0 f4       	brcc	.+40     	; 0x5296 <vfprintf+0x1e0>
    526e:	b6 01       	movw	r22, r12
    5270:	80 e2       	ldi	r24, 0x20	; 32
    5272:	90 e0       	ldi	r25, 0x00	; 0
    5274:	33 d1       	rcall	.+614    	; 0x54dc <fputc>
    5276:	2a 94       	dec	r2
    5278:	f5 cf       	rjmp	.-22     	; 0x5264 <vfprintf+0x1ae>
    527a:	f5 01       	movw	r30, r10
    527c:	37 fc       	sbrc	r3, 7
    527e:	85 91       	lpm	r24, Z+
    5280:	37 fe       	sbrs	r3, 7
    5282:	81 91       	ld	r24, Z+
    5284:	5f 01       	movw	r10, r30
    5286:	b6 01       	movw	r22, r12
    5288:	90 e0       	ldi	r25, 0x00	; 0
    528a:	28 d1       	rcall	.+592    	; 0x54dc <fputc>
    528c:	21 10       	cpse	r2, r1
    528e:	2a 94       	dec	r2
    5290:	21 e0       	ldi	r18, 0x01	; 1
    5292:	82 1a       	sub	r8, r18
    5294:	91 08       	sbc	r9, r1
    5296:	81 14       	cp	r8, r1
    5298:	91 04       	cpc	r9, r1
    529a:	79 f7       	brne	.-34     	; 0x527a <vfprintf+0x1c4>
    529c:	e1 c0       	rjmp	.+450    	; 0x5460 <vfprintf+0x3aa>
    529e:	84 36       	cpi	r24, 0x64	; 100
    52a0:	11 f0       	breq	.+4      	; 0x52a6 <vfprintf+0x1f0>
    52a2:	89 36       	cpi	r24, 0x69	; 105
    52a4:	39 f5       	brne	.+78     	; 0x52f4 <vfprintf+0x23e>
    52a6:	f8 01       	movw	r30, r16
    52a8:	37 fe       	sbrs	r3, 7
    52aa:	07 c0       	rjmp	.+14     	; 0x52ba <vfprintf+0x204>
    52ac:	60 81       	ld	r22, Z
    52ae:	71 81       	ldd	r23, Z+1	; 0x01
    52b0:	82 81       	ldd	r24, Z+2	; 0x02
    52b2:	93 81       	ldd	r25, Z+3	; 0x03
    52b4:	0c 5f       	subi	r16, 0xFC	; 252
    52b6:	1f 4f       	sbci	r17, 0xFF	; 255
    52b8:	08 c0       	rjmp	.+16     	; 0x52ca <vfprintf+0x214>
    52ba:	60 81       	ld	r22, Z
    52bc:	71 81       	ldd	r23, Z+1	; 0x01
    52be:	07 2e       	mov	r0, r23
    52c0:	00 0c       	add	r0, r0
    52c2:	88 0b       	sbc	r24, r24
    52c4:	99 0b       	sbc	r25, r25
    52c6:	0e 5f       	subi	r16, 0xFE	; 254
    52c8:	1f 4f       	sbci	r17, 0xFF	; 255
    52ca:	f3 2d       	mov	r31, r3
    52cc:	ff 76       	andi	r31, 0x6F	; 111
    52ce:	3f 2e       	mov	r3, r31
    52d0:	97 ff       	sbrs	r25, 7
    52d2:	09 c0       	rjmp	.+18     	; 0x52e6 <vfprintf+0x230>
    52d4:	90 95       	com	r25
    52d6:	80 95       	com	r24
    52d8:	70 95       	com	r23
    52da:	61 95       	neg	r22
    52dc:	7f 4f       	sbci	r23, 0xFF	; 255
    52de:	8f 4f       	sbci	r24, 0xFF	; 255
    52e0:	9f 4f       	sbci	r25, 0xFF	; 255
    52e2:	f0 68       	ori	r31, 0x80	; 128
    52e4:	3f 2e       	mov	r3, r31
    52e6:	2a e0       	ldi	r18, 0x0A	; 10
    52e8:	30 e0       	ldi	r19, 0x00	; 0
    52ea:	a3 01       	movw	r20, r6
    52ec:	33 d1       	rcall	.+614    	; 0x5554 <__ultoa_invert>
    52ee:	88 2e       	mov	r8, r24
    52f0:	86 18       	sub	r8, r6
    52f2:	44 c0       	rjmp	.+136    	; 0x537c <vfprintf+0x2c6>
    52f4:	85 37       	cpi	r24, 0x75	; 117
    52f6:	31 f4       	brne	.+12     	; 0x5304 <vfprintf+0x24e>
    52f8:	23 2d       	mov	r18, r3
    52fa:	2f 7e       	andi	r18, 0xEF	; 239
    52fc:	b2 2e       	mov	r11, r18
    52fe:	2a e0       	ldi	r18, 0x0A	; 10
    5300:	30 e0       	ldi	r19, 0x00	; 0
    5302:	25 c0       	rjmp	.+74     	; 0x534e <vfprintf+0x298>
    5304:	93 2d       	mov	r25, r3
    5306:	99 7f       	andi	r25, 0xF9	; 249
    5308:	b9 2e       	mov	r11, r25
    530a:	8f 36       	cpi	r24, 0x6F	; 111
    530c:	c1 f0       	breq	.+48     	; 0x533e <vfprintf+0x288>
    530e:	18 f4       	brcc	.+6      	; 0x5316 <vfprintf+0x260>
    5310:	88 35       	cpi	r24, 0x58	; 88
    5312:	79 f0       	breq	.+30     	; 0x5332 <vfprintf+0x27c>
    5314:	ae c0       	rjmp	.+348    	; 0x5472 <vfprintf+0x3bc>
    5316:	80 37       	cpi	r24, 0x70	; 112
    5318:	19 f0       	breq	.+6      	; 0x5320 <vfprintf+0x26a>
    531a:	88 37       	cpi	r24, 0x78	; 120
    531c:	21 f0       	breq	.+8      	; 0x5326 <vfprintf+0x270>
    531e:	a9 c0       	rjmp	.+338    	; 0x5472 <vfprintf+0x3bc>
    5320:	e9 2f       	mov	r30, r25
    5322:	e0 61       	ori	r30, 0x10	; 16
    5324:	be 2e       	mov	r11, r30
    5326:	b4 fe       	sbrs	r11, 4
    5328:	0d c0       	rjmp	.+26     	; 0x5344 <vfprintf+0x28e>
    532a:	fb 2d       	mov	r31, r11
    532c:	f4 60       	ori	r31, 0x04	; 4
    532e:	bf 2e       	mov	r11, r31
    5330:	09 c0       	rjmp	.+18     	; 0x5344 <vfprintf+0x28e>
    5332:	34 fe       	sbrs	r3, 4
    5334:	0a c0       	rjmp	.+20     	; 0x534a <vfprintf+0x294>
    5336:	29 2f       	mov	r18, r25
    5338:	26 60       	ori	r18, 0x06	; 6
    533a:	b2 2e       	mov	r11, r18
    533c:	06 c0       	rjmp	.+12     	; 0x534a <vfprintf+0x294>
    533e:	28 e0       	ldi	r18, 0x08	; 8
    5340:	30 e0       	ldi	r19, 0x00	; 0
    5342:	05 c0       	rjmp	.+10     	; 0x534e <vfprintf+0x298>
    5344:	20 e1       	ldi	r18, 0x10	; 16
    5346:	30 e0       	ldi	r19, 0x00	; 0
    5348:	02 c0       	rjmp	.+4      	; 0x534e <vfprintf+0x298>
    534a:	20 e1       	ldi	r18, 0x10	; 16
    534c:	32 e0       	ldi	r19, 0x02	; 2
    534e:	f8 01       	movw	r30, r16
    5350:	b7 fe       	sbrs	r11, 7
    5352:	07 c0       	rjmp	.+14     	; 0x5362 <vfprintf+0x2ac>
    5354:	60 81       	ld	r22, Z
    5356:	71 81       	ldd	r23, Z+1	; 0x01
    5358:	82 81       	ldd	r24, Z+2	; 0x02
    535a:	93 81       	ldd	r25, Z+3	; 0x03
    535c:	0c 5f       	subi	r16, 0xFC	; 252
    535e:	1f 4f       	sbci	r17, 0xFF	; 255
    5360:	06 c0       	rjmp	.+12     	; 0x536e <vfprintf+0x2b8>
    5362:	60 81       	ld	r22, Z
    5364:	71 81       	ldd	r23, Z+1	; 0x01
    5366:	80 e0       	ldi	r24, 0x00	; 0
    5368:	90 e0       	ldi	r25, 0x00	; 0
    536a:	0e 5f       	subi	r16, 0xFE	; 254
    536c:	1f 4f       	sbci	r17, 0xFF	; 255
    536e:	a3 01       	movw	r20, r6
    5370:	f1 d0       	rcall	.+482    	; 0x5554 <__ultoa_invert>
    5372:	88 2e       	mov	r8, r24
    5374:	86 18       	sub	r8, r6
    5376:	fb 2d       	mov	r31, r11
    5378:	ff 77       	andi	r31, 0x7F	; 127
    537a:	3f 2e       	mov	r3, r31
    537c:	36 fe       	sbrs	r3, 6
    537e:	0d c0       	rjmp	.+26     	; 0x539a <vfprintf+0x2e4>
    5380:	23 2d       	mov	r18, r3
    5382:	2e 7f       	andi	r18, 0xFE	; 254
    5384:	a2 2e       	mov	r10, r18
    5386:	89 14       	cp	r8, r9
    5388:	58 f4       	brcc	.+22     	; 0x53a0 <vfprintf+0x2ea>
    538a:	34 fe       	sbrs	r3, 4
    538c:	0b c0       	rjmp	.+22     	; 0x53a4 <vfprintf+0x2ee>
    538e:	32 fc       	sbrc	r3, 2
    5390:	09 c0       	rjmp	.+18     	; 0x53a4 <vfprintf+0x2ee>
    5392:	83 2d       	mov	r24, r3
    5394:	8e 7e       	andi	r24, 0xEE	; 238
    5396:	a8 2e       	mov	r10, r24
    5398:	05 c0       	rjmp	.+10     	; 0x53a4 <vfprintf+0x2ee>
    539a:	b8 2c       	mov	r11, r8
    539c:	a3 2c       	mov	r10, r3
    539e:	03 c0       	rjmp	.+6      	; 0x53a6 <vfprintf+0x2f0>
    53a0:	b8 2c       	mov	r11, r8
    53a2:	01 c0       	rjmp	.+2      	; 0x53a6 <vfprintf+0x2f0>
    53a4:	b9 2c       	mov	r11, r9
    53a6:	a4 fe       	sbrs	r10, 4
    53a8:	0f c0       	rjmp	.+30     	; 0x53c8 <vfprintf+0x312>
    53aa:	fe 01       	movw	r30, r28
    53ac:	e8 0d       	add	r30, r8
    53ae:	f1 1d       	adc	r31, r1
    53b0:	80 81       	ld	r24, Z
    53b2:	80 33       	cpi	r24, 0x30	; 48
    53b4:	21 f4       	brne	.+8      	; 0x53be <vfprintf+0x308>
    53b6:	9a 2d       	mov	r25, r10
    53b8:	99 7e       	andi	r25, 0xE9	; 233
    53ba:	a9 2e       	mov	r10, r25
    53bc:	09 c0       	rjmp	.+18     	; 0x53d0 <vfprintf+0x31a>
    53be:	a2 fe       	sbrs	r10, 2
    53c0:	06 c0       	rjmp	.+12     	; 0x53ce <vfprintf+0x318>
    53c2:	b3 94       	inc	r11
    53c4:	b3 94       	inc	r11
    53c6:	04 c0       	rjmp	.+8      	; 0x53d0 <vfprintf+0x31a>
    53c8:	8a 2d       	mov	r24, r10
    53ca:	86 78       	andi	r24, 0x86	; 134
    53cc:	09 f0       	breq	.+2      	; 0x53d0 <vfprintf+0x31a>
    53ce:	b3 94       	inc	r11
    53d0:	a3 fc       	sbrc	r10, 3
    53d2:	10 c0       	rjmp	.+32     	; 0x53f4 <vfprintf+0x33e>
    53d4:	a0 fe       	sbrs	r10, 0
    53d6:	06 c0       	rjmp	.+12     	; 0x53e4 <vfprintf+0x32e>
    53d8:	b2 14       	cp	r11, r2
    53da:	80 f4       	brcc	.+32     	; 0x53fc <vfprintf+0x346>
    53dc:	28 0c       	add	r2, r8
    53de:	92 2c       	mov	r9, r2
    53e0:	9b 18       	sub	r9, r11
    53e2:	0d c0       	rjmp	.+26     	; 0x53fe <vfprintf+0x348>
    53e4:	b2 14       	cp	r11, r2
    53e6:	58 f4       	brcc	.+22     	; 0x53fe <vfprintf+0x348>
    53e8:	b6 01       	movw	r22, r12
    53ea:	80 e2       	ldi	r24, 0x20	; 32
    53ec:	90 e0       	ldi	r25, 0x00	; 0
    53ee:	76 d0       	rcall	.+236    	; 0x54dc <fputc>
    53f0:	b3 94       	inc	r11
    53f2:	f8 cf       	rjmp	.-16     	; 0x53e4 <vfprintf+0x32e>
    53f4:	b2 14       	cp	r11, r2
    53f6:	18 f4       	brcc	.+6      	; 0x53fe <vfprintf+0x348>
    53f8:	2b 18       	sub	r2, r11
    53fa:	02 c0       	rjmp	.+4      	; 0x5400 <vfprintf+0x34a>
    53fc:	98 2c       	mov	r9, r8
    53fe:	21 2c       	mov	r2, r1
    5400:	a4 fe       	sbrs	r10, 4
    5402:	0f c0       	rjmp	.+30     	; 0x5422 <vfprintf+0x36c>
    5404:	b6 01       	movw	r22, r12
    5406:	80 e3       	ldi	r24, 0x30	; 48
    5408:	90 e0       	ldi	r25, 0x00	; 0
    540a:	68 d0       	rcall	.+208    	; 0x54dc <fputc>
    540c:	a2 fe       	sbrs	r10, 2
    540e:	16 c0       	rjmp	.+44     	; 0x543c <vfprintf+0x386>
    5410:	a1 fc       	sbrc	r10, 1
    5412:	03 c0       	rjmp	.+6      	; 0x541a <vfprintf+0x364>
    5414:	88 e7       	ldi	r24, 0x78	; 120
    5416:	90 e0       	ldi	r25, 0x00	; 0
    5418:	02 c0       	rjmp	.+4      	; 0x541e <vfprintf+0x368>
    541a:	88 e5       	ldi	r24, 0x58	; 88
    541c:	90 e0       	ldi	r25, 0x00	; 0
    541e:	b6 01       	movw	r22, r12
    5420:	0c c0       	rjmp	.+24     	; 0x543a <vfprintf+0x384>
    5422:	8a 2d       	mov	r24, r10
    5424:	86 78       	andi	r24, 0x86	; 134
    5426:	51 f0       	breq	.+20     	; 0x543c <vfprintf+0x386>
    5428:	a1 fe       	sbrs	r10, 1
    542a:	02 c0       	rjmp	.+4      	; 0x5430 <vfprintf+0x37a>
    542c:	8b e2       	ldi	r24, 0x2B	; 43
    542e:	01 c0       	rjmp	.+2      	; 0x5432 <vfprintf+0x37c>
    5430:	80 e2       	ldi	r24, 0x20	; 32
    5432:	a7 fc       	sbrc	r10, 7
    5434:	8d e2       	ldi	r24, 0x2D	; 45
    5436:	b6 01       	movw	r22, r12
    5438:	90 e0       	ldi	r25, 0x00	; 0
    543a:	50 d0       	rcall	.+160    	; 0x54dc <fputc>
    543c:	89 14       	cp	r8, r9
    543e:	30 f4       	brcc	.+12     	; 0x544c <vfprintf+0x396>
    5440:	b6 01       	movw	r22, r12
    5442:	80 e3       	ldi	r24, 0x30	; 48
    5444:	90 e0       	ldi	r25, 0x00	; 0
    5446:	4a d0       	rcall	.+148    	; 0x54dc <fputc>
    5448:	9a 94       	dec	r9
    544a:	f8 cf       	rjmp	.-16     	; 0x543c <vfprintf+0x386>
    544c:	8a 94       	dec	r8
    544e:	f3 01       	movw	r30, r6
    5450:	e8 0d       	add	r30, r8
    5452:	f1 1d       	adc	r31, r1
    5454:	80 81       	ld	r24, Z
    5456:	b6 01       	movw	r22, r12
    5458:	90 e0       	ldi	r25, 0x00	; 0
    545a:	40 d0       	rcall	.+128    	; 0x54dc <fputc>
    545c:	81 10       	cpse	r8, r1
    545e:	f6 cf       	rjmp	.-20     	; 0x544c <vfprintf+0x396>
    5460:	22 20       	and	r2, r2
    5462:	09 f4       	brne	.+2      	; 0x5466 <vfprintf+0x3b0>
    5464:	4e ce       	rjmp	.-868    	; 0x5102 <vfprintf+0x4c>
    5466:	b6 01       	movw	r22, r12
    5468:	80 e2       	ldi	r24, 0x20	; 32
    546a:	90 e0       	ldi	r25, 0x00	; 0
    546c:	37 d0       	rcall	.+110    	; 0x54dc <fputc>
    546e:	2a 94       	dec	r2
    5470:	f7 cf       	rjmp	.-18     	; 0x5460 <vfprintf+0x3aa>
    5472:	f6 01       	movw	r30, r12
    5474:	86 81       	ldd	r24, Z+6	; 0x06
    5476:	97 81       	ldd	r25, Z+7	; 0x07
    5478:	02 c0       	rjmp	.+4      	; 0x547e <vfprintf+0x3c8>
    547a:	8f ef       	ldi	r24, 0xFF	; 255
    547c:	9f ef       	ldi	r25, 0xFF	; 255
    547e:	2b 96       	adiw	r28, 0x0b	; 11
    5480:	0f b6       	in	r0, 0x3f	; 63
    5482:	f8 94       	cli
    5484:	de bf       	out	0x3e, r29	; 62
    5486:	0f be       	out	0x3f, r0	; 63
    5488:	cd bf       	out	0x3d, r28	; 61
    548a:	df 91       	pop	r29
    548c:	cf 91       	pop	r28
    548e:	1f 91       	pop	r17
    5490:	0f 91       	pop	r16
    5492:	ff 90       	pop	r15
    5494:	ef 90       	pop	r14
    5496:	df 90       	pop	r13
    5498:	cf 90       	pop	r12
    549a:	bf 90       	pop	r11
    549c:	af 90       	pop	r10
    549e:	9f 90       	pop	r9
    54a0:	8f 90       	pop	r8
    54a2:	7f 90       	pop	r7
    54a4:	6f 90       	pop	r6
    54a6:	5f 90       	pop	r5
    54a8:	4f 90       	pop	r4
    54aa:	3f 90       	pop	r3
    54ac:	2f 90       	pop	r2
    54ae:	08 95       	ret

000054b0 <strnlen_P>:
    54b0:	fc 01       	movw	r30, r24
    54b2:	05 90       	lpm	r0, Z+
    54b4:	61 50       	subi	r22, 0x01	; 1
    54b6:	70 40       	sbci	r23, 0x00	; 0
    54b8:	01 10       	cpse	r0, r1
    54ba:	d8 f7       	brcc	.-10     	; 0x54b2 <strnlen_P+0x2>
    54bc:	80 95       	com	r24
    54be:	90 95       	com	r25
    54c0:	8e 0f       	add	r24, r30
    54c2:	9f 1f       	adc	r25, r31
    54c4:	08 95       	ret

000054c6 <strnlen>:
    54c6:	fc 01       	movw	r30, r24
    54c8:	61 50       	subi	r22, 0x01	; 1
    54ca:	70 40       	sbci	r23, 0x00	; 0
    54cc:	01 90       	ld	r0, Z+
    54ce:	01 10       	cpse	r0, r1
    54d0:	d8 f7       	brcc	.-10     	; 0x54c8 <strnlen+0x2>
    54d2:	80 95       	com	r24
    54d4:	90 95       	com	r25
    54d6:	8e 0f       	add	r24, r30
    54d8:	9f 1f       	adc	r25, r31
    54da:	08 95       	ret

000054dc <fputc>:
    54dc:	0f 93       	push	r16
    54de:	1f 93       	push	r17
    54e0:	cf 93       	push	r28
    54e2:	df 93       	push	r29
    54e4:	fb 01       	movw	r30, r22
    54e6:	23 81       	ldd	r18, Z+3	; 0x03
    54e8:	21 fd       	sbrc	r18, 1
    54ea:	03 c0       	rjmp	.+6      	; 0x54f2 <fputc+0x16>
    54ec:	8f ef       	ldi	r24, 0xFF	; 255
    54ee:	9f ef       	ldi	r25, 0xFF	; 255
    54f0:	2c c0       	rjmp	.+88     	; 0x554a <fputc+0x6e>
    54f2:	22 ff       	sbrs	r18, 2
    54f4:	16 c0       	rjmp	.+44     	; 0x5522 <fputc+0x46>
    54f6:	46 81       	ldd	r20, Z+6	; 0x06
    54f8:	57 81       	ldd	r21, Z+7	; 0x07
    54fa:	24 81       	ldd	r18, Z+4	; 0x04
    54fc:	35 81       	ldd	r19, Z+5	; 0x05
    54fe:	42 17       	cp	r20, r18
    5500:	53 07       	cpc	r21, r19
    5502:	44 f4       	brge	.+16     	; 0x5514 <fputc+0x38>
    5504:	a0 81       	ld	r26, Z
    5506:	b1 81       	ldd	r27, Z+1	; 0x01
    5508:	9d 01       	movw	r18, r26
    550a:	2f 5f       	subi	r18, 0xFF	; 255
    550c:	3f 4f       	sbci	r19, 0xFF	; 255
    550e:	31 83       	std	Z+1, r19	; 0x01
    5510:	20 83       	st	Z, r18
    5512:	8c 93       	st	X, r24
    5514:	26 81       	ldd	r18, Z+6	; 0x06
    5516:	37 81       	ldd	r19, Z+7	; 0x07
    5518:	2f 5f       	subi	r18, 0xFF	; 255
    551a:	3f 4f       	sbci	r19, 0xFF	; 255
    551c:	37 83       	std	Z+7, r19	; 0x07
    551e:	26 83       	std	Z+6, r18	; 0x06
    5520:	14 c0       	rjmp	.+40     	; 0x554a <fputc+0x6e>
    5522:	8b 01       	movw	r16, r22
    5524:	ec 01       	movw	r28, r24
    5526:	fb 01       	movw	r30, r22
    5528:	00 84       	ldd	r0, Z+8	; 0x08
    552a:	f1 85       	ldd	r31, Z+9	; 0x09
    552c:	e0 2d       	mov	r30, r0
    552e:	09 95       	icall
    5530:	89 2b       	or	r24, r25
    5532:	e1 f6       	brne	.-72     	; 0x54ec <fputc+0x10>
    5534:	d8 01       	movw	r26, r16
    5536:	16 96       	adiw	r26, 0x06	; 6
    5538:	8d 91       	ld	r24, X+
    553a:	9c 91       	ld	r25, X
    553c:	17 97       	sbiw	r26, 0x07	; 7
    553e:	01 96       	adiw	r24, 0x01	; 1
    5540:	17 96       	adiw	r26, 0x07	; 7
    5542:	9c 93       	st	X, r25
    5544:	8e 93       	st	-X, r24
    5546:	16 97       	sbiw	r26, 0x06	; 6
    5548:	ce 01       	movw	r24, r28
    554a:	df 91       	pop	r29
    554c:	cf 91       	pop	r28
    554e:	1f 91       	pop	r17
    5550:	0f 91       	pop	r16
    5552:	08 95       	ret

00005554 <__ultoa_invert>:
    5554:	fa 01       	movw	r30, r20
    5556:	aa 27       	eor	r26, r26
    5558:	28 30       	cpi	r18, 0x08	; 8
    555a:	51 f1       	breq	.+84     	; 0x55b0 <__ultoa_invert+0x5c>
    555c:	20 31       	cpi	r18, 0x10	; 16
    555e:	81 f1       	breq	.+96     	; 0x55c0 <__ultoa_invert+0x6c>
    5560:	e8 94       	clt
    5562:	6f 93       	push	r22
    5564:	6e 7f       	andi	r22, 0xFE	; 254
    5566:	6e 5f       	subi	r22, 0xFE	; 254
    5568:	7f 4f       	sbci	r23, 0xFF	; 255
    556a:	8f 4f       	sbci	r24, 0xFF	; 255
    556c:	9f 4f       	sbci	r25, 0xFF	; 255
    556e:	af 4f       	sbci	r26, 0xFF	; 255
    5570:	b1 e0       	ldi	r27, 0x01	; 1
    5572:	3e d0       	rcall	.+124    	; 0x55f0 <__ultoa_invert+0x9c>
    5574:	b4 e0       	ldi	r27, 0x04	; 4
    5576:	3c d0       	rcall	.+120    	; 0x55f0 <__ultoa_invert+0x9c>
    5578:	67 0f       	add	r22, r23
    557a:	78 1f       	adc	r23, r24
    557c:	89 1f       	adc	r24, r25
    557e:	9a 1f       	adc	r25, r26
    5580:	a1 1d       	adc	r26, r1
    5582:	68 0f       	add	r22, r24
    5584:	79 1f       	adc	r23, r25
    5586:	8a 1f       	adc	r24, r26
    5588:	91 1d       	adc	r25, r1
    558a:	a1 1d       	adc	r26, r1
    558c:	6a 0f       	add	r22, r26
    558e:	71 1d       	adc	r23, r1
    5590:	81 1d       	adc	r24, r1
    5592:	91 1d       	adc	r25, r1
    5594:	a1 1d       	adc	r26, r1
    5596:	20 d0       	rcall	.+64     	; 0x55d8 <__ultoa_invert+0x84>
    5598:	09 f4       	brne	.+2      	; 0x559c <__ultoa_invert+0x48>
    559a:	68 94       	set
    559c:	3f 91       	pop	r19
    559e:	2a e0       	ldi	r18, 0x0A	; 10
    55a0:	26 9f       	mul	r18, r22
    55a2:	11 24       	eor	r1, r1
    55a4:	30 19       	sub	r19, r0
    55a6:	30 5d       	subi	r19, 0xD0	; 208
    55a8:	31 93       	st	Z+, r19
    55aa:	de f6       	brtc	.-74     	; 0x5562 <__ultoa_invert+0xe>
    55ac:	cf 01       	movw	r24, r30
    55ae:	08 95       	ret
    55b0:	46 2f       	mov	r20, r22
    55b2:	47 70       	andi	r20, 0x07	; 7
    55b4:	40 5d       	subi	r20, 0xD0	; 208
    55b6:	41 93       	st	Z+, r20
    55b8:	b3 e0       	ldi	r27, 0x03	; 3
    55ba:	0f d0       	rcall	.+30     	; 0x55da <__ultoa_invert+0x86>
    55bc:	c9 f7       	brne	.-14     	; 0x55b0 <__ultoa_invert+0x5c>
    55be:	f6 cf       	rjmp	.-20     	; 0x55ac <__ultoa_invert+0x58>
    55c0:	46 2f       	mov	r20, r22
    55c2:	4f 70       	andi	r20, 0x0F	; 15
    55c4:	40 5d       	subi	r20, 0xD0	; 208
    55c6:	4a 33       	cpi	r20, 0x3A	; 58
    55c8:	18 f0       	brcs	.+6      	; 0x55d0 <__ultoa_invert+0x7c>
    55ca:	49 5d       	subi	r20, 0xD9	; 217
    55cc:	31 fd       	sbrc	r19, 1
    55ce:	40 52       	subi	r20, 0x20	; 32
    55d0:	41 93       	st	Z+, r20
    55d2:	02 d0       	rcall	.+4      	; 0x55d8 <__ultoa_invert+0x84>
    55d4:	a9 f7       	brne	.-22     	; 0x55c0 <__ultoa_invert+0x6c>
    55d6:	ea cf       	rjmp	.-44     	; 0x55ac <__ultoa_invert+0x58>
    55d8:	b4 e0       	ldi	r27, 0x04	; 4
    55da:	a6 95       	lsr	r26
    55dc:	97 95       	ror	r25
    55de:	87 95       	ror	r24
    55e0:	77 95       	ror	r23
    55e2:	67 95       	ror	r22
    55e4:	ba 95       	dec	r27
    55e6:	c9 f7       	brne	.-14     	; 0x55da <__ultoa_invert+0x86>
    55e8:	00 97       	sbiw	r24, 0x00	; 0
    55ea:	61 05       	cpc	r22, r1
    55ec:	71 05       	cpc	r23, r1
    55ee:	08 95       	ret
    55f0:	9b 01       	movw	r18, r22
    55f2:	ac 01       	movw	r20, r24
    55f4:	0a 2e       	mov	r0, r26
    55f6:	06 94       	lsr	r0
    55f8:	57 95       	ror	r21
    55fa:	47 95       	ror	r20
    55fc:	37 95       	ror	r19
    55fe:	27 95       	ror	r18
    5600:	ba 95       	dec	r27
    5602:	c9 f7       	brne	.-14     	; 0x55f6 <__ultoa_invert+0xa2>
    5604:	62 0f       	add	r22, r18
    5606:	73 1f       	adc	r23, r19
    5608:	84 1f       	adc	r24, r20
    560a:	95 1f       	adc	r25, r21
    560c:	a0 1d       	adc	r26, r0
    560e:	08 95       	ret

00005610 <eeprom_read_byte>:
    5610:	e1 99       	sbic	0x1c, 1	; 28
    5612:	fe cf       	rjmp	.-4      	; 0x5610 <eeprom_read_byte>
    5614:	9f bb       	out	0x1f, r25	; 31
    5616:	8e bb       	out	0x1e, r24	; 30
    5618:	e0 9a       	sbi	0x1c, 0	; 28
    561a:	99 27       	eor	r25, r25
    561c:	8d b3       	in	r24, 0x1d	; 29
    561e:	08 95       	ret

00005620 <eeprom_update_byte>:
    5620:	26 2f       	mov	r18, r22

00005622 <eeprom_update_r18>:
    5622:	e1 99       	sbic	0x1c, 1	; 28
    5624:	fe cf       	rjmp	.-4      	; 0x5622 <eeprom_update_r18>
    5626:	9f bb       	out	0x1f, r25	; 31
    5628:	8e bb       	out	0x1e, r24	; 30
    562a:	e0 9a       	sbi	0x1c, 0	; 28
    562c:	01 97       	sbiw	r24, 0x01	; 1
    562e:	0d b2       	in	r0, 0x1d	; 29
    5630:	02 16       	cp	r0, r18
    5632:	31 f0       	breq	.+12     	; 0x5640 <eeprom_update_r18+0x1e>
    5634:	2d bb       	out	0x1d, r18	; 29
    5636:	0f b6       	in	r0, 0x3f	; 63
    5638:	f8 94       	cli
    563a:	e2 9a       	sbi	0x1c, 2	; 28
    563c:	e1 9a       	sbi	0x1c, 1	; 28
    563e:	0f be       	out	0x3f, r0	; 63
    5640:	08 95       	ret

00005642 <_exit>:
    5642:	f8 94       	cli

00005644 <__stop_program>:
    5644:	ff cf       	rjmp	.-2      	; 0x5644 <__stop_program>
