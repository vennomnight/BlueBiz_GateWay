
RTOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000142  00800100  00005546  000055da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005546  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000bcf  00800242  00800242  0000571c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000571c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005778  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ae0  00000000  00000000  000057b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ec57  00000000  00000000  00006298  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003a50  00000000  00000000  00014eef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000062e7  00000000  00000000  0001893f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001d80  00000000  00000000  0001ec28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003df4  00000000  00000000  000209a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009c1e  00000000  00000000  0002479c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000bb8  00000000  00000000  0002e3ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	48 c5       	rjmp	.+2704   	; 0xa92 <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 bc 0a 	jmp	0x1578	; 0x1578 <__vector_1>
       8:	63 c5       	rjmp	.+2758   	; 0xad0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c5       	rjmp	.+2754   	; 0xad0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c5       	rjmp	.+2750   	; 0xad0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c5       	rjmp	.+2746   	; 0xad0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c5       	rjmp	.+2742   	; 0xad0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c5       	rjmp	.+2738   	; 0xad0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c5       	rjmp	.+2734   	; 0xad0 <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 c4 0b 	jmp	0x1788	; 0x1788 <__vector_9>
      28:	53 c5       	rjmp	.+2726   	; 0xad0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c5       	rjmp	.+2722   	; 0xad0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 e7 1d 	jmp	0x3bce	; 0x3bce <__vector_12>
      34:	4d c5       	rjmp	.+2714   	; 0xad0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c5       	rjmp	.+2710   	; 0xad0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__vector_15>
      40:	47 c5       	rjmp	.+2702   	; 0xad0 <__bad_interrupt>
      42:	00 00       	nop
      44:	45 c5       	rjmp	.+2698   	; 0xad0 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 2b 0a 	jmp	0x1456	; 0x1456 <__vector_18>
      4c:	41 c5       	rjmp	.+2690   	; 0xad0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c5       	rjmp	.+2686   	; 0xad0 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 ec 0a 	jmp	0x15d8	; 0x15d8 <__vector_21>
      58:	3b c5       	rjmp	.+2678   	; 0xad0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	39 c5       	rjmp	.+2674   	; 0xad0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	37 c5       	rjmp	.+2670   	; 0xad0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c5       	rjmp	.+2666   	; 0xad0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c5       	rjmp	.+2662   	; 0xad0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c5       	rjmp	.+2658   	; 0xad0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	0c 94 8c 0a 	jmp	0x1518	; 0x1518 <__vector_28>
      74:	2d c5       	rjmp	.+2650   	; 0xad0 <__bad_interrupt>
      76:	00 00       	nop
      78:	0c 94 5b 0a 	jmp	0x14b6	; 0x14b6 <__vector_30>
      7c:	29 c5       	rjmp	.+2642   	; 0xad0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	27 c5       	rjmp	.+2638   	; 0xad0 <__bad_interrupt>
      82:	00 00       	nop
      84:	25 c5       	rjmp	.+2634   	; 0xad0 <__bad_interrupt>
      86:	00 00       	nop
      88:	23 c5       	rjmp	.+2630   	; 0xad0 <__bad_interrupt>
	...

0000008c <__trampolines_end>:
      8c:	00 00       	nop
      8e:	c8 42       	sbci	r28, 0x28	; 40
      90:	ae c7       	rjmp	.+3932   	; 0xfee <_ZN22DFRobotHighTemperature15readTemperatureEj+0x16e>
      92:	c8 42       	sbci	r28, 0x28	; 40
      94:	5c 8f       	std	Y+28, r21	; 0x1c
      96:	c9 42       	sbci	r28, 0x29	; 41
      98:	0a 57       	subi	r16, 0x7A	; 122
      9a:	ca 42       	sbci	r28, 0x2A	; 42
      9c:	b8 1e       	adc	r11, r24
      9e:	cb 42       	sbci	r28, 0x2B	; 43
      a0:	66 e6       	ldi	r22, 0x66	; 102
      a2:	cb 42       	sbci	r28, 0x2B	; 43
      a4:	14 ae       	std	Z+60, r1	; 0x3c
      a6:	cc 42       	sbci	r28, 0x2C	; 44
      a8:	c3 75       	andi	r28, 0x53	; 83
      aa:	cd 42       	sbci	r28, 0x2D	; 45
      ac:	71 3d       	cpi	r23, 0xD1	; 209
      ae:	ce 42       	sbci	r28, 0x2E	; 46
      b0:	1f 05       	cpc	r17, r15
      b2:	cf 42       	sbci	r28, 0x2F	; 47
      b4:	cd cc       	rjmp	.-1638   	; 0xfffffa50 <__eeprom_end+0xff7efa50>
      b6:	cf 42       	sbci	r28, 0x2F	; 47
      b8:	7b 94       	des	7
      ba:	d0 42       	sbci	r29, 0x20	; 32
      bc:	29 5c       	subi	r18, 0xC9	; 201
      be:	d1 42       	sbci	r29, 0x21	; 33
      c0:	d7 23       	and	r29, r23
      c2:	d2 42       	sbci	r29, 0x22	; 34
      c4:	85 eb       	ldi	r24, 0xB5	; 181
      c6:	d2 42       	sbci	r29, 0x22	; 34
      c8:	33 b3       	in	r19, 0x13	; 19
      ca:	d3 42       	sbci	r29, 0x23	; 35
      cc:	e1 7a       	andi	r30, 0xA1	; 161
      ce:	d4 42       	sbci	r29, 0x24	; 36
      d0:	8f 42       	sbci	r24, 0x2F	; 47
      d2:	d5 42       	sbci	r29, 0x25	; 37
      d4:	3d 0a       	sbc	r3, r29
      d6:	d6 42       	sbci	r29, 0x26	; 38
      d8:	cd cc       	rjmp	.-1638   	; 0xfffffa74 <__eeprom_end+0xff7efa74>
      da:	d6 42       	sbci	r29, 0x26	; 38
      dc:	7b 94       	des	7
      de:	d7 42       	sbci	r29, 0x27	; 39
      e0:	29 5c       	subi	r18, 0xC9	; 201
      e2:	d8 42       	sbci	r29, 0x28	; 40
      e4:	d7 23       	and	r29, r23
      e6:	d9 42       	sbci	r29, 0x29	; 41
      e8:	85 eb       	ldi	r24, 0xB5	; 181
      ea:	d9 42       	sbci	r29, 0x29	; 41
      ec:	33 b3       	in	r19, 0x13	; 19
      ee:	da 42       	sbci	r29, 0x2A	; 42
      f0:	c3 75       	andi	r28, 0x53	; 83
      f2:	db 42       	sbci	r29, 0x2B	; 43
      f4:	71 3d       	cpi	r23, 0xD1	; 209
      f6:	dc 42       	sbci	r29, 0x2C	; 44
      f8:	1f 05       	cpc	r17, r15
      fa:	dd 42       	sbci	r29, 0x2D	; 45
      fc:	cd cc       	rjmp	.-1638   	; 0xfffffa98 <__eeprom_end+0xff7efa98>
      fe:	dd 42       	sbci	r29, 0x2D	; 45
     100:	7b 94       	des	7
     102:	de 42       	sbci	r29, 0x2E	; 46
     104:	0a 57       	subi	r16, 0x7A	; 122
     106:	df 42       	sbci	r29, 0x2F	; 47
     108:	b8 1e       	adc	r11, r24
     10a:	e0 42       	sbci	r30, 0x20	; 32
     10c:	66 e6       	ldi	r22, 0x66	; 102
     10e:	e0 42       	sbci	r30, 0x20	; 32
     110:	f6 a8       	ldd	r15, Z+54	; 0x36
     112:	e1 42       	sbci	r30, 0x21	; 33
     114:	a4 70       	andi	r26, 0x04	; 4
     116:	e2 42       	sbci	r30, 0x22	; 34
     118:	52 38       	cpi	r21, 0x82	; 130
     11a:	e3 42       	sbci	r30, 0x23	; 35
     11c:	00 00       	nop
     11e:	e4 42       	sbci	r30, 0x24	; 36
     120:	8f c2       	rjmp	.+1310   	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
     122:	e4 42       	sbci	r30, 0x24	; 36
     124:	3d 8a       	std	Y+21, r3	; 0x15
     126:	e5 42       	sbci	r30, 0x25	; 37
     128:	cd 4c       	sbci	r28, 0xCD	; 205
     12a:	e6 42       	sbci	r30, 0x26	; 38
     12c:	7b 14       	cp	r7, r11
     12e:	e7 42       	sbci	r30, 0x27	; 39
     130:	29 dc       	rcall	.-1966   	; 0xfffff984 <__eeprom_end+0xff7ef984>
     132:	e7 42       	sbci	r30, 0x27	; 39
     134:	b8 9e       	mul	r11, r24
     136:	e8 42       	sbci	r30, 0x28	; 40
     138:	66 66       	ori	r22, 0x66	; 102
     13a:	e9 42       	sbci	r30, 0x29	; 41
     13c:	f6 28       	or	r15, r6
     13e:	ea 42       	sbci	r30, 0x2A	; 42
     140:	a4 f0       	brlt	.+40     	; 0x16a <__trampolines_end+0xde>
     142:	ea 42       	sbci	r30, 0x2A	; 42
     144:	52 b8       	out	0x02, r5	; 2
     146:	eb 42       	sbci	r30, 0x2B	; 43
     148:	e1 7a       	andi	r30, 0xA1	; 161
     14a:	ec 42       	sbci	r30, 0x2C	; 44
     14c:	8f 42       	sbci	r24, 0x2F	; 47
     14e:	ed 42       	sbci	r30, 0x2D	; 45
     150:	1f 05       	cpc	r17, r15
     152:	ee 42       	sbci	r30, 0x2E	; 46
     154:	cd cc       	rjmp	.-1638   	; 0xfffffaf0 <__eeprom_end+0xff7efaf0>
     156:	ee 42       	sbci	r30, 0x2E	; 46
     158:	5c 8f       	std	Y+28, r21	; 0x1c
     15a:	ef 42       	sbci	r30, 0x2F	; 47
     15c:	0a 57       	subi	r16, 0x7A	; 122
     15e:	f0 42       	sbci	r31, 0x20	; 32
     160:	9a 19       	sub	r25, r10
     162:	f1 42       	sbci	r31, 0x21	; 33
     164:	48 e1       	ldi	r20, 0x18	; 24
     166:	f1 42       	sbci	r31, 0x21	; 33
     168:	d7 a3       	std	Z+39, r29	; 0x27
     16a:	f2 42       	sbci	r31, 0x22	; 34
     16c:	85 6b       	ori	r24, 0xB5	; 181
     16e:	f3 42       	sbci	r31, 0x23	; 35
     170:	14 2e       	mov	r1, r20
     172:	f4 42       	sbci	r31, 0x24	; 36
     174:	a4 f0       	brlt	.+40     	; 0x19e <__trampolines_end+0x112>
     176:	f4 42       	sbci	r31, 0x24	; 36
     178:	52 b8       	out	0x02, r5	; 2
     17a:	f5 42       	sbci	r31, 0x25	; 37
     17c:	e1 7a       	andi	r30, 0xA1	; 161
     17e:	f6 42       	sbci	r31, 0x26	; 38
     180:	8f 42       	sbci	r24, 0x2F	; 47
     182:	f7 42       	sbci	r31, 0x27	; 39
     184:	1f 05       	cpc	r17, r15
     186:	f8 42       	sbci	r31, 0x28	; 40
     188:	ae c7       	rjmp	.+3932   	; 0x10e6 <__vector_15+0x68>
     18a:	f8 42       	sbci	r31, 0x28	; 40
     18c:	5c 8f       	std	Y+28, r21	; 0x1c
     18e:	f9 42       	sbci	r31, 0x29	; 41
     190:	ec 51       	subi	r30, 0x1C	; 28
     192:	fa 42       	sbci	r31, 0x2A	; 42
     194:	7b 14       	cp	r7, r11
     196:	fb 42       	sbci	r31, 0x2B	; 43
     198:	29 dc       	rcall	.-1966   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
     19a:	fb 42       	sbci	r31, 0x2B	; 43
     19c:	b8 9e       	mul	r11, r24
     19e:	fc 42       	sbci	r31, 0x2C	; 44
     1a0:	48 61       	ori	r20, 0x18	; 24
     1a2:	fd 42       	sbci	r31, 0x2D	; 45
     1a4:	f6 28       	or	r15, r6
     1a6:	fe 42       	sbci	r31, 0x2E	; 46
     1a8:	85 eb       	ldi	r24, 0xB5	; 181
     1aa:	fe 42       	sbci	r31, 0x2E	; 46
     1ac:	14 ae       	std	Z+60, r1	; 0x3c
     1ae:	ff 42       	sbci	r31, 0x2F	; 47
     1b0:	52 38       	cpi	r21, 0x82	; 130
     1b2:	00 43       	sbci	r16, 0x30	; 48
     1b4:	29 9c       	mul	r2, r9
     1b6:	00 43       	sbci	r16, 0x30	; 48
     1b8:	71 fd       	sbrc	r23, 1
     1ba:	00 43       	sbci	r16, 0x30	; 48
     1bc:	b8 5e       	subi	r27, 0xE8	; 232
     1be:	01 43       	sbci	r16, 0x31	; 49
     1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <__trampolines_end+0x136>
     1c2:	01 43       	sbci	r16, 0x31	; 49
     1c4:	48 21       	and	r20, r8
     1c6:	02 43       	sbci	r16, 0x32	; 50
     1c8:	1f 85       	ldd	r17, Y+15	; 0x0f
     1ca:	02 43       	sbci	r16, 0x32	; 50
     1cc:	66 e6       	ldi	r22, 0x66	; 102
     1ce:	02 43       	sbci	r16, 0x32	; 50
     1d0:	ae 47       	sbci	r26, 0x7E	; 126
     1d2:	03 43       	sbci	r16, 0x33	; 51
     1d4:	f6 a8       	ldd	r15, Z+54	; 0x36
     1d6:	03 43       	sbci	r16, 0x33	; 51
     1d8:	3d 0a       	sbc	r3, r29
     1da:	04 43       	sbci	r16, 0x34	; 52
     1dc:	85 6b       	ori	r24, 0xB5	; 181
     1de:	04 43       	sbci	r16, 0x34	; 52
     1e0:	cd cc       	rjmp	.-1638   	; 0xfffffb7c <__eeprom_end+0xff7efb7c>
     1e2:	04 43       	sbci	r16, 0x34	; 52
     1e4:	14 2e       	mov	r1, r20
     1e6:	05 43       	sbci	r16, 0x35	; 53
     1e8:	ec 91       	ld	r30, X
     1ea:	05 43       	sbci	r16, 0x35	; 53
     1ec:	33 f3       	brvs	.-52     	; 0x1ba <__trampolines_end+0x12e>
     1ee:	05 43       	sbci	r16, 0x35	; 53
     1f0:	7b 54       	subi	r23, 0x4B	; 75
     1f2:	06 43       	sbci	r16, 0x36	; 54
     1f4:	c3 b5       	in	r28, 0x23	; 35
     1f6:	06 43       	sbci	r16, 0x36	; 54
     1f8:	0a 17       	cp	r16, r26
     1fa:	07 43       	sbci	r16, 0x37	; 55
     1fc:	52 78       	andi	r21, 0x82	; 130
     1fe:	07 43       	sbci	r16, 0x37	; 55
     200:	9a d9       	rcall	.-3276   	; 0xfffff536 <__eeprom_end+0xff7ef536>
     202:	07 43       	sbci	r16, 0x37	; 55
     204:	e1 3a       	cpi	r30, 0xA1	; 161
     206:	08 43       	sbci	r16, 0x38	; 56
     208:	29 9c       	mul	r2, r9
     20a:	08 43       	sbci	r16, 0x38	; 56
     20c:	71 fd       	sbrc	r23, 1
     20e:	08 43       	sbci	r16, 0x38	; 56
     210:	b8 5e       	subi	r27, 0xE8	; 232
     212:	09 43       	sbci	r16, 0x39	; 57
     214:	00 c0       	rjmp	.+0      	; 0x216 <__trampolines_end+0x18a>
     216:	09 43       	sbci	r16, 0x39	; 57
     218:	48 21       	and	r20, r8
     21a:	0a 43       	sbci	r16, 0x3A	; 58
     21c:	8f 82       	std	Y+7, r8	; 0x07
     21e:	0a 43       	sbci	r16, 0x3A	; 58
     220:	48 e1       	ldi	r20, 0x18	; 24
     222:	0a 43       	sbci	r16, 0x3A	; 58
     224:	8f 42       	sbci	r24, 0x2F	; 47
     226:	0b 43       	sbci	r16, 0x3B	; 59
     228:	d7 a3       	std	Z+39, r29	; 0x27
     22a:	0b 43       	sbci	r16, 0x3B	; 59
     22c:	1f 05       	cpc	r17, r15
     22e:	0c 43       	sbci	r16, 0x3C	; 60
     230:	66 66       	ori	r22, 0x66	; 102
     232:	0c 43       	sbci	r16, 0x3C	; 60
     234:	ae c7       	rjmp	.+3932   	; 0x1192 <_ZN13Char_LCD2004A8Data_setEc+0x1e>
     236:	0c 43       	sbci	r16, 0x3C	; 60
     238:	f6 28       	or	r15, r6
     23a:	0d 43       	sbci	r16, 0x3D	; 61
     23c:	3d 8a       	std	Y+21, r3	; 0x15
     23e:	0d 43       	sbci	r16, 0x3D	; 61
     240:	f6 e8       	ldi	r31, 0x86	; 134
     242:	0d 43       	sbci	r16, 0x3D	; 61
     244:	3d 4a       	sbci	r19, 0xAD	; 173
     246:	0e 43       	sbci	r16, 0x3E	; 62
     248:	85 ab       	std	Z+53, r24	; 0x35
     24a:	0e 43       	sbci	r16, 0x3E	; 62
     24c:	cd 0c       	add	r12, r13
     24e:	0f 43       	sbci	r16, 0x3F	; 63
     250:	14 6e       	ori	r17, 0xE4	; 228
     252:	0f 43       	sbci	r16, 0x3F	; 63
     254:	cd cc       	rjmp	.-1638   	; 0xfffffbf0 <__eeprom_end+0xff7efbf0>
     256:	0f 43       	sbci	r16, 0x3F	; 63
     258:	14 2e       	mov	r1, r20
     25a:	10 43       	sbci	r17, 0x30	; 48
     25c:	5c 8f       	std	Y+28, r21	; 0x1c
     25e:	10 43       	sbci	r17, 0x30	; 48
     260:	a4 f0       	brlt	.+40     	; 0x28a <__trampolines_end+0x1fe>
     262:	10 43       	sbci	r17, 0x30	; 48
     264:	5c 4f       	sbci	r21, 0xFC	; 252
     266:	11 43       	sbci	r17, 0x31	; 49
     268:	a4 b0       	in	r10, 0x04	; 4
     26a:	11 43       	sbci	r17, 0x31	; 49
     26c:	ec 11       	cpse	r30, r12
     26e:	12 43       	sbci	r17, 0x32	; 50
     270:	a4 70       	andi	r26, 0x04	; 4
     272:	12 43       	sbci	r17, 0x32	; 50
     274:	ec d1       	rcall	.+984    	; 0x64e <__LOCK_REGION_LENGTH__+0x24e>
     276:	12 43       	sbci	r17, 0x32	; 50
     278:	33 33       	cpi	r19, 0x33	; 51
     27a:	13 43       	sbci	r17, 0x33	; 51
     27c:	ec 91       	ld	r30, X
     27e:	13 43       	sbci	r17, 0x33	; 51
     280:	33 f3       	brvs	.-52     	; 0x24e <__trampolines_end+0x1c2>
     282:	13 43       	sbci	r17, 0x33	; 51
     284:	7b 54       	subi	r23, 0x4B	; 75
     286:	14 43       	sbci	r17, 0x34	; 52
     288:	33 b3       	in	r19, 0x13	; 19
     28a:	14 43       	sbci	r17, 0x34	; 52
     28c:	7b 14       	cp	r7, r11
     28e:	15 43       	sbci	r17, 0x35	; 53
     290:	c3 75       	andi	r28, 0x53	; 83
     292:	15 43       	sbci	r17, 0x35	; 53
     294:	7b d4       	rcall	.+2294   	; 0xb8c <_Z13GetFucc10DataPcP17GetFunctionCode10Pi+0xe>
     296:	15 43       	sbci	r17, 0x35	; 53
     298:	c3 35       	cpi	r28, 0x53	; 83
     29a:	16 43       	sbci	r17, 0x36	; 54
     29c:	7b 94       	des	7
     29e:	16 43       	sbci	r17, 0x36	; 54
     2a0:	c3 f5       	brvc	.+112    	; 0x312 <__trampolines_end+0x286>
     2a2:	16 43       	sbci	r17, 0x36	; 54
     2a4:	7b 54       	subi	r23, 0x4B	; 75
     2a6:	17 43       	sbci	r17, 0x37	; 55
     2a8:	c3 b5       	in	r28, 0x23	; 35
     2aa:	17 43       	sbci	r17, 0x37	; 55
     2ac:	7b 14       	cp	r7, r11
     2ae:	18 43       	sbci	r17, 0x38	; 56
     2b0:	c3 75       	andi	r28, 0x53	; 83
     2b2:	18 43       	sbci	r17, 0x38	; 56
     2b4:	7b d4       	rcall	.+2294   	; 0xbac <_Z13GetFucc10DataPcP17GetFunctionCode10Pi+0x2e>
     2b6:	18 43       	sbci	r17, 0x38	; 56
     2b8:	c3 35       	cpi	r28, 0x53	; 83
     2ba:	19 43       	sbci	r17, 0x39	; 57
     2bc:	7b 94       	des	7
     2be:	19 43       	sbci	r17, 0x39	; 57
     2c0:	c3 f5       	brvc	.+112    	; 0x332 <__trampolines_end+0x2a6>
     2c2:	19 43       	sbci	r17, 0x39	; 57
     2c4:	7b 54       	subi	r23, 0x4B	; 75
     2c6:	1a 43       	sbci	r17, 0x3A	; 58
     2c8:	c3 b5       	in	r28, 0x23	; 35
     2ca:	1a 43       	sbci	r17, 0x3A	; 58
     2cc:	7b 14       	cp	r7, r11
     2ce:	1b 43       	sbci	r17, 0x3B	; 59
     2d0:	c3 75       	andi	r28, 0x53	; 83
     2d2:	1b 43       	sbci	r17, 0x3B	; 59
     2d4:	7b d4       	rcall	.+2294   	; 0xbcc <_Z13GetFucc10DataPcP17GetFunctionCode10Pi+0x4e>
     2d6:	1b 43       	sbci	r17, 0x3B	; 59
     2d8:	33 33       	cpi	r19, 0x33	; 51
     2da:	1c 43       	sbci	r17, 0x3C	; 60
     2dc:	7b 94       	des	7
     2de:	1c 43       	sbci	r17, 0x3C	; 60
     2e0:	33 f3       	brvs	.-52     	; 0x2ae <__trampolines_end+0x222>
     2e2:	1c 43       	sbci	r17, 0x3C	; 60
     2e4:	7b 54       	subi	r23, 0x4B	; 75
     2e6:	1d 43       	sbci	r17, 0x3D	; 61
     2e8:	33 b3       	in	r19, 0x13	; 19
     2ea:	1d 43       	sbci	r17, 0x3D	; 61
     2ec:	ec 11       	cpse	r30, r12
     2ee:	1e 43       	sbci	r17, 0x3E	; 62
     2f0:	33 73       	andi	r19, 0x33	; 51
     2f2:	1e 43       	sbci	r17, 0x3E	; 62
     2f4:	ec d1       	rcall	.+984    	; 0x6ce <_ZL8g_adTemp+0x2>
     2f6:	1e 43       	sbci	r17, 0x3E	; 62
     2f8:	a4 30       	cpi	r26, 0x04	; 4
     2fa:	1f 43       	sbci	r17, 0x3F	; 63
     2fc:	5c 8f       	std	Y+28, r21	; 0x1c
     2fe:	1f 43       	sbci	r17, 0x3F	; 63
     300:	a4 f0       	brlt	.+40     	; 0x32a <__trampolines_end+0x29e>
     302:	1f 43       	sbci	r17, 0x3F	; 63
     304:	5c 4f       	sbci	r21, 0xFC	; 252
     306:	20 43       	sbci	r18, 0x30	; 48
     308:	14 ae       	std	Z+60, r1	; 0x3c
     30a:	20 43       	sbci	r18, 0x30	; 48
     30c:	cd 0c       	add	r12, r13
     30e:	21 43       	sbci	r18, 0x31	; 49
     310:	14 6e       	ori	r17, 0xE4	; 228
     312:	21 43       	sbci	r18, 0x31	; 49
     314:	cd cc       	rjmp	.-1638   	; 0xfffffcb0 <__eeprom_end+0xff7efcb0>
     316:	21 43       	sbci	r18, 0x31	; 49
     318:	85 2b       	or	r24, r21
     31a:	22 43       	sbci	r18, 0x32	; 50
     31c:	3d 8a       	std	Y+21, r3	; 0x15
     31e:	22 43       	sbci	r18, 0x32	; 50
     320:	f6 e8       	ldi	r31, 0x86	; 134
     322:	22 43       	sbci	r18, 0x32	; 50
     324:	3d 4a       	sbci	r19, 0xAD	; 173
     326:	23 43       	sbci	r18, 0x33	; 51
     328:	f6 a8       	ldd	r15, Z+54	; 0x36
     32a:	23 43       	sbci	r18, 0x33	; 51
     32c:	ae 07       	cpc	r26, r30
     32e:	24 43       	sbci	r18, 0x34	; 52
     330:	66 66       	ori	r22, 0x66	; 102
     332:	24 43       	sbci	r18, 0x34	; 52
     334:	1f c5       	rjmp	.+2622   	; 0xd74 <_ZN12SerialBuffer10SerialReadEv+0x3e>
     336:	24 43       	sbci	r18, 0x34	; 52
     338:	d7 23       	and	r29, r23
     33a:	25 43       	sbci	r18, 0x35	; 53
     33c:	8f 82       	std	Y+7, r8	; 0x07
     33e:	25 43       	sbci	r18, 0x35	; 53
     340:	d7 e3       	ldi	r29, 0x37	; 55
     342:	25 43       	sbci	r18, 0x35	; 53
     344:	8f 42       	sbci	r24, 0x2F	; 47
     346:	26 43       	sbci	r18, 0x36	; 54
     348:	48 a1       	ldd	r20, Y+32	; 0x20
     34a:	26 43       	sbci	r18, 0x36	; 54
     34c:	00 00       	nop
     34e:	27 43       	sbci	r18, 0x37	; 55
     350:	b8 5e       	subi	r27, 0xE8	; 232
     352:	27 43       	sbci	r18, 0x37	; 55
     354:	71 bd       	out	0x21, r23	; 33
     356:	27 43       	sbci	r18, 0x37	; 55
     358:	29 1c       	adc	r2, r9
     35a:	28 43       	sbci	r18, 0x38	; 56
     35c:	e1 7a       	andi	r30, 0xA1	; 161
     35e:	28 43       	sbci	r18, 0x38	; 56
     360:	9a d9       	rcall	.-3276   	; 0xfffff696 <__eeprom_end+0xff7ef696>
     362:	28 43       	sbci	r18, 0x38	; 56
     364:	52 38       	cpi	r21, 0x82	; 130
     366:	29 43       	sbci	r18, 0x39	; 57
     368:	0a 97       	sbiw	r24, 0x0a	; 10
     36a:	29 43       	sbci	r18, 0x39	; 57
     36c:	c3 f5       	brvc	.+112    	; 0x3de <__trampolines_end+0x352>
     36e:	29 43       	sbci	r18, 0x39	; 57
     370:	7b 54       	subi	r23, 0x4B	; 75
     372:	2a 43       	sbci	r18, 0x3A	; 58
     374:	33 b3       	in	r19, 0x13	; 19
     376:	2a 43       	sbci	r18, 0x3A	; 58
     378:	ec 11       	cpse	r30, r12
     37a:	2b 43       	sbci	r18, 0x3B	; 59
     37c:	14 6e       	ori	r17, 0xE4	; 228
     37e:	2b 43       	sbci	r18, 0x3B	; 59
     380:	cd cc       	rjmp	.-1638   	; 0xfffffd1c <__eeprom_end+0xff7efd1c>
     382:	2b 43       	sbci	r18, 0x3B	; 59
     384:	85 2b       	or	r24, r21
     386:	2c 43       	sbci	r18, 0x3C	; 60
     388:	3d 8a       	std	Y+21, r3	; 0x15
     38a:	2c 43       	sbci	r18, 0x3C	; 60
     38c:	f6 e8       	ldi	r31, 0x86	; 134
     38e:	2c 43       	sbci	r18, 0x3C	; 60
     390:	ae 47       	sbci	r26, 0x7E	; 126
     392:	2d 43       	sbci	r18, 0x3D	; 61
     394:	66 a6       	std	Z+46, r6	; 0x2e
     396:	2d 43       	sbci	r18, 0x3D	; 61
     398:	1f 05       	cpc	r17, r15
     39a:	2e 43       	sbci	r18, 0x3E	; 62
     39c:	48 61       	ori	r20, 0x18	; 24
     39e:	2e 43       	sbci	r18, 0x3E	; 62
     3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <__trampolines_end+0x316>
     3a2:	2e 43       	sbci	r18, 0x3E	; 62
     3a4:	b8 1e       	adc	r11, r24
     3a6:	2f 43       	sbci	r18, 0x3F	; 63
     3a8:	71 7d       	andi	r23, 0xD1	; 209
     3aa:	2f 43       	sbci	r18, 0x3F	; 63
     3ac:	29 dc       	rcall	.-1966   	; 0xfffffc00 <__eeprom_end+0xff7efc00>
     3ae:	2f 43       	sbci	r18, 0x3F	; 63
     3b0:	52 38       	cpi	r21, 0x82	; 130
     3b2:	30 43       	sbci	r19, 0x30	; 48
     3b4:	0a 97       	sbiw	r24, 0x0a	; 10
     3b6:	30 43       	sbci	r19, 0x30	; 48
     3b8:	c3 f5       	brvc	.+112    	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     3ba:	30 43       	sbci	r19, 0x30	; 48
     3bc:	7b 54       	subi	r23, 0x4B	; 75
     3be:	31 43       	sbci	r19, 0x31	; 49
     3c0:	a4 b0       	in	r10, 0x04	; 4
     3c2:	31 43       	sbci	r19, 0x31	; 49
     3c4:	5c 0f       	add	r21, r28
     3c6:	32 43       	sbci	r19, 0x32	; 50
     3c8:	14 6e       	ori	r17, 0xE4	; 228
     3ca:	32 43       	sbci	r19, 0x32	; 50
     3cc:	3d ca       	rjmp	.-2950   	; 0xfffff848 <__eeprom_end+0xff7ef848>
     3ce:	32 43       	sbci	r19, 0x32	; 50
     3d0:	f6 28       	or	r15, r6
     3d2:	33 43       	sbci	r19, 0x33	; 51
     3d4:	ae 87       	std	Y+14, r26	; 0x0e
     3d6:	33 43       	sbci	r19, 0x33	; 51
     3d8:	d7 e3       	ldi	r29, 0x37	; 55
     3da:	33 43       	sbci	r19, 0x33	; 51
     3dc:	8f 42       	sbci	r24, 0x2F	; 47
     3de:	34 43       	sbci	r19, 0x34	; 52
     3e0:	48 a1       	ldd	r20, Y+32	; 0x20
     3e2:	34 43       	sbci	r19, 0x34	; 52
     3e4:	71 fd       	sbrc	r23, 1
     3e6:	34 43       	sbci	r19, 0x34	; 52
     3e8:	29 5c       	subi	r18, 0xC9	; 201
     3ea:	35 43       	sbci	r19, 0x35	; 53
     3ec:	52 b8       	out	0x02, r5	; 2
     3ee:	35 43       	sbci	r19, 0x35	; 53
     3f0:	0a 17       	cp	r16, r26
     3f2:	36 43       	sbci	r19, 0x36	; 54
     3f4:	c3 75       	andi	r28, 0x53	; 83
     3f6:	36 43       	sbci	r19, 0x36	; 54
     3f8:	ec d1       	rcall	.+984    	; 0x7d2 <_ZL8g_adTemp+0x106>
     3fa:	36 43       	sbci	r19, 0x36	; 54
     3fc:	a4 30       	cpi	r26, 0x04	; 4
     3fe:	37 43       	sbci	r19, 0x37	; 55
     400:	cd 8c       	ldd	r12, Y+29	; 0x1d
     402:	37 43       	sbci	r19, 0x37	; 55
     404:	85 eb       	ldi	r24, 0xB5	; 181
     406:	37 43       	sbci	r19, 0x37	; 55
     408:	ae 47       	sbci	r26, 0x7E	; 126
     40a:	38 43       	sbci	r19, 0x38	; 56
     40c:	66 a6       	std	Z+46, r6	; 0x2e
     40e:	38 43       	sbci	r19, 0x38	; 56
     410:	8f 02       	muls	r24, r31
     412:	39 43       	sbci	r19, 0x39	; 57
     414:	48 61       	ori	r20, 0x18	; 24
     416:	39 43       	sbci	r19, 0x39	; 57
     418:	71 bd       	out	0x21, r23	; 33
     41a:	39 43       	sbci	r19, 0x39	; 57
     41c:	29 1c       	adc	r2, r9
     41e:	3a 43       	sbci	r19, 0x3A	; 58
     420:	52 78       	andi	r21, 0x82	; 130
     422:	3a 43       	sbci	r19, 0x3A	; 58
     424:	0a d7       	rcall	.+3604   	; 0x123a <_ZN13Char_LCD2004A10Cursor_SetEcc+0x14>
     426:	3a 43       	sbci	r19, 0x3A	; 58
     428:	33 33       	cpi	r19, 0x33	; 51
     42a:	3b 43       	sbci	r19, 0x3B	; 59
     42c:	5c 8f       	std	Y+28, r21	; 0x1c
     42e:	3b 43       	sbci	r19, 0x3B	; 59
     430:	14 ee       	ldi	r17, 0xE4	; 228
     432:	3b 43       	sbci	r19, 0x3B	; 59
     434:	3d 4a       	sbci	r19, 0xAD	; 173
     436:	3c 43       	sbci	r19, 0x3C	; 60
     438:	f6 a8       	ldd	r15, Z+54	; 0x36
     43a:	3c 43       	sbci	r19, 0x3C	; 60
     43c:	1f 05       	cpc	r17, r15
     43e:	3d 43       	sbci	r19, 0x3D	; 61
     440:	48 61       	ori	r20, 0x18	; 24
     442:	3d 43       	sbci	r19, 0x3D	; 61
     444:	00 c0       	rjmp	.+0      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     446:	3d 43       	sbci	r19, 0x3D	; 61
     448:	29 1c       	adc	r2, r9
     44a:	3e 43       	sbci	r19, 0x3E	; 62
     44c:	52 78       	andi	r21, 0x82	; 130
     44e:	3e 43       	sbci	r19, 0x3E	; 62
     450:	0a d7       	rcall	.+3604   	; 0x1266 <_ZN13Char_LCD2004A16Set_Cursor_PrintEccPKc+0x1c>
     452:	3e 43       	sbci	r19, 0x3E	; 62
     454:	33 33       	cpi	r19, 0x33	; 51
     456:	3f 43       	sbci	r19, 0x3F	; 63
     458:	5c 8f       	std	Y+28, r21	; 0x1c
     45a:	3f 43       	sbci	r19, 0x3F	; 63
     45c:	85 eb       	ldi	r24, 0xB5	; 181
     45e:	3f 43       	sbci	r19, 0x3F	; 63
     460:	3d 4a       	sbci	r19, 0xAD	; 173
     462:	40 43       	sbci	r20, 0x30	; 48
     464:	66 a6       	std	Z+46, r6	; 0x2e
     466:	40 43       	sbci	r20, 0x30	; 48
     468:	8f 02       	muls	r24, r31
     46a:	41 43       	sbci	r20, 0x31	; 49
     46c:	b8 5e       	subi	r27, 0xE8	; 232
     46e:	41 43       	sbci	r20, 0x31	; 49
     470:	71 bd       	out	0x21, r23	; 33
     472:	41 43       	sbci	r20, 0x31	; 49
     474:	9a 19       	sub	r25, r10
     476:	42 43       	sbci	r20, 0x32	; 50
     478:	c3 75       	andi	r28, 0x53	; 83
     47a:	42 43       	sbci	r20, 0x32	; 50
     47c:	ec d1       	rcall	.+984    	; 0x856 <_ZL9g_alfVolt+0x48>
     47e:	42 43       	sbci	r20, 0x32	; 50
     480:	14 2e       	mov	r1, r20
     482:	43 43       	sbci	r20, 0x33	; 51
     484:	cd 8c       	ldd	r12, Y+29	; 0x1d
     486:	43 43       	sbci	r20, 0x33	; 51
     488:	f6 e8       	ldi	r31, 0x86	; 134
     48a:	43 43       	sbci	r20, 0x33	; 51
     48c:	1f 45       	sbci	r17, 0x5F	; 95
     48e:	44 43       	sbci	r20, 0x34	; 52
     490:	48 a1       	ldd	r20, Y+32	; 0x20
     492:	44 43       	sbci	r20, 0x34	; 52
     494:	71 fd       	sbrc	r23, 1
     496:	44 43       	sbci	r20, 0x34	; 52
     498:	9a 59       	subi	r25, 0x9A	; 154
     49a:	45 43       	sbci	r20, 0x35	; 53
     49c:	c3 b5       	in	r28, 0x23	; 35
     49e:	45 43       	sbci	r20, 0x35	; 53
     4a0:	ec 11       	cpse	r30, r12
     4a2:	46 43       	sbci	r20, 0x36	; 54
     4a4:	14 6e       	ori	r17, 0xE4	; 228
     4a6:	46 43       	sbci	r20, 0x36	; 54
     4a8:	3d ca       	rjmp	.-2950   	; 0xfffff924 <__eeprom_end+0xff7ef924>
     4aa:	46 43       	sbci	r20, 0x36	; 54
     4ac:	66 26       	eor	r6, r22
     4ae:	47 43       	sbci	r20, 0x37	; 55
     4b0:	8f 82       	std	Y+7, r8	; 0x07
     4b2:	47 43       	sbci	r20, 0x37	; 55
     4b4:	b8 de       	rcall	.-656    	; 0x226 <__trampolines_end+0x19a>
     4b6:	47 43       	sbci	r20, 0x37	; 55
     4b8:	e1 3a       	cpi	r30, 0xA1	; 161
     4ba:	48 43       	sbci	r20, 0x38	; 56
     4bc:	0a 97       	sbiw	r24, 0x0a	; 10
     4be:	48 43       	sbci	r20, 0x38	; 56
     4c0:	33 f3       	brvs	.-52     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
     4c2:	48 43       	sbci	r20, 0x38	; 56
     4c4:	5c 4f       	sbci	r21, 0xFC	; 252
     4c6:	49 43       	sbci	r20, 0x39	; 57
     4c8:	85 ab       	std	Z+53, r24	; 0x35
     4ca:	49 43       	sbci	r20, 0x39	; 57
     4cc:	ae 07       	cpc	r26, r30
     4ce:	4a 43       	sbci	r20, 0x3A	; 58
     4d0:	d7 63       	ori	r29, 0x37	; 55
     4d2:	4a 43       	sbci	r20, 0x3A	; 58
     4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
     4d6:	4a 43       	sbci	r20, 0x3A	; 58
     4d8:	29 1c       	adc	r2, r9
     4da:	4b 43       	sbci	r20, 0x3B	; 59
     4dc:	52 78       	andi	r21, 0x82	; 130
     4de:	4b 43       	sbci	r20, 0x3B	; 59
     4e0:	7b d4       	rcall	.+2294   	; 0xdd8 <_ZN22DFRobotHighTemperature4compEfi+0x12>
     4e2:	4b 43       	sbci	r20, 0x3B	; 59
     4e4:	a4 30       	cpi	r26, 0x04	; 4
     4e6:	4c 43       	sbci	r20, 0x3C	; 60
     4e8:	cd 8c       	ldd	r12, Y+29	; 0x1d
     4ea:	4c 43       	sbci	r20, 0x3C	; 60
     4ec:	66 e6       	ldi	r22, 0x66	; 102
     4ee:	4c 43       	sbci	r20, 0x3C	; 60
     4f0:	8f 42       	sbci	r24, 0x2F	; 47
     4f2:	4d 43       	sbci	r20, 0x3D	; 61
     4f4:	b8 9e       	mul	r11, r24
     4f6:	4d 43       	sbci	r20, 0x3D	; 61
     4f8:	e1 fa       	bst	r14, 1
     4fa:	4d 43       	sbci	r20, 0x3D	; 61
     4fc:	0a 57       	subi	r16, 0x7A	; 122
     4fe:	4e 43       	sbci	r20, 0x3E	; 62
     500:	33 b3       	in	r19, 0x13	; 19
     502:	4e 43       	sbci	r20, 0x3E	; 62
     504:	cd 0c       	add	r12, r13
     506:	4f 43       	sbci	r20, 0x3F	; 63
     508:	f6 68       	ori	r31, 0x86	; 134
     50a:	4f 43       	sbci	r20, 0x3F	; 63
     50c:	1f c5       	rjmp	.+2622   	; 0xf4c <_ZN22DFRobotHighTemperature15readTemperatureEj+0xcc>
     50e:	4f 43       	sbci	r20, 0x3F	; 63
     510:	48 21       	and	r20, r8
     512:	50 43       	sbci	r21, 0x30	; 48
     514:	e1 7a       	andi	r30, 0xA1	; 161
     516:	50 43       	sbci	r21, 0x30	; 48
     518:	0a d7       	rcall	.+3604   	; 0x132e <_ZN12Count_SensornwEj+0x4>
     51a:	50 43       	sbci	r21, 0x30	; 48
     51c:	33 33       	cpi	r19, 0x33	; 51
     51e:	51 43       	sbci	r21, 0x31	; 49
     520:	5c 8f       	std	Y+28, r21	; 0x1c
     522:	51 43       	sbci	r21, 0x31	; 49
     524:	f6 e8       	ldi	r31, 0x86	; 134
     526:	51 43       	sbci	r21, 0x31	; 49
     528:	1f 45       	sbci	r17, 0x5F	; 95
     52a:	52 43       	sbci	r21, 0x32	; 50
     52c:	48 a1       	ldd	r20, Y+32	; 0x20
     52e:	52 43       	sbci	r21, 0x32	; 50
     530:	e1 fa       	bst	r14, 1
     532:	52 43       	sbci	r21, 0x32	; 50
     534:	0a 57       	subi	r16, 0x7A	; 122
     536:	53 43       	sbci	r21, 0x33	; 51
     538:	33 b3       	in	r19, 0x13	; 19
     53a:	53 43       	sbci	r21, 0x33	; 51
     53c:	cd 0c       	add	r12, r13
     53e:	54 43       	sbci	r21, 0x34	; 52
     540:	f6 68       	ori	r31, 0x86	; 134
     542:	54 43       	sbci	r21, 0x34	; 52
     544:	8f c2       	rjmp	.+1310   	; 0xa64 <_ZL9g_alfVolt+0x256>
     546:	54 43       	sbci	r21, 0x34	; 52
     548:	b8 1e       	adc	r11, r24
     54a:	55 43       	sbci	r21, 0x35	; 53
     54c:	e1 7a       	andi	r30, 0xA1	; 161
     54e:	55 43       	sbci	r21, 0x35	; 53
     550:	7b d4       	rcall	.+2294   	; 0xe48 <_ZN22DFRobotHighTemperature4compEfi+0x82>
     552:	55 43       	sbci	r21, 0x35	; 53
     554:	a4 30       	cpi	r26, 0x04	; 4
     556:	56 43       	sbci	r21, 0x36	; 54
     558:	3d 8a       	std	Y+21, r3	; 0x15
     55a:	56 43       	sbci	r21, 0x36	; 54
     55c:	66 e6       	ldi	r22, 0x66	; 102
     55e:	56 43       	sbci	r21, 0x36	; 54
     560:	00 40       	sbci	r16, 0x00	; 0
     562:	57 43       	sbci	r21, 0x37	; 55
     564:	29 9c       	mul	r2, r9
     566:	57 43       	sbci	r21, 0x37	; 55
     568:	c3 f5       	brvc	.+112    	; 0x5da <__LOCK_REGION_LENGTH__+0x1da>
     56a:	57 43       	sbci	r21, 0x37	; 55
     56c:	ec 51       	subi	r30, 0x1C	; 28
     56e:	58 43       	sbci	r21, 0x38	; 56
     570:	85 ab       	std	Z+53, r24	; 0x35
     572:	58 43       	sbci	r21, 0x38	; 56
     574:	ae 07       	cpc	r26, r30
     576:	59 43       	sbci	r21, 0x39	; 57
     578:	48 61       	ori	r20, 0x18	; 24
     57a:	59 43       	sbci	r21, 0x39	; 57
     57c:	71 bd       	out	0x21, r23	; 33
     57e:	59 43       	sbci	r21, 0x39	; 57
     580:	0a 17       	cp	r16, r26
     582:	5a 43       	sbci	r21, 0x3A	; 58
     584:	a4 70       	andi	r26, 0x04	; 4
     586:	5a 43       	sbci	r21, 0x3A	; 58
     588:	cd cc       	rjmp	.-1638   	; 0xffffff24 <__eeprom_end+0xff7eff24>
     58a:	5a 43       	sbci	r21, 0x3A	; 58
     58c:	66 26       	eor	r6, r22
     58e:	5b 43       	sbci	r21, 0x3B	; 59
     590:	8f 82       	std	Y+7, r8	; 0x07
     592:	5b 43       	sbci	r21, 0x3B	; 59
     594:	29 dc       	rcall	.-1966   	; 0xfffffde8 <__eeprom_end+0xff7efde8>
     596:	5b 43       	sbci	r21, 0x3B	; 59
     598:	c3 35       	cpi	r28, 0x53	; 83
     59a:	5c 43       	sbci	r21, 0x3C	; 60
     59c:	ec 91       	ld	r30, X
     59e:	5c 43       	sbci	r21, 0x3C	; 60
     5a0:	85 eb       	ldi	r24, 0xB5	; 181
     5a2:	5c 43       	sbci	r21, 0x3C	; 60
     5a4:	1f 45       	sbci	r17, 0x5F	; 95
     5a6:	5d 43       	sbci	r21, 0x3D	; 61
     5a8:	48 a1       	ldd	r20, Y+32	; 0x20
     5aa:	5d 43       	sbci	r21, 0x3D	; 61
     5ac:	e1 fa       	bst	r14, 1
     5ae:	5d 43       	sbci	r21, 0x3D	; 61
     5b0:	7b 54       	subi	r23, 0x4B	; 75
     5b2:	5e 43       	sbci	r21, 0x3E	; 62
     5b4:	14 ae       	std	Z+60, r1	; 0x3c
     5b6:	5e 43       	sbci	r21, 0x3E	; 62
     5b8:	3d 0a       	sbc	r3, r29
     5ba:	5f 43       	sbci	r21, 0x3F	; 63
     5bc:	d7 63       	ori	r29, 0x37	; 55
     5be:	5f 43       	sbci	r21, 0x3F	; 63
     5c0:	71 bd       	out	0x21, r23	; 33
     5c2:	5f 43       	sbci	r21, 0x3F	; 63
     5c4:	0a 17       	cp	r16, r26
     5c6:	60 43       	sbci	r22, 0x30	; 48
     5c8:	33 73       	andi	r19, 0x33	; 51
     5ca:	60 43       	sbci	r22, 0x30	; 48
     5cc:	cd cc       	rjmp	.-1638   	; 0xffffff68 <__eeprom_end+0xff7eff68>
     5ce:	60 43       	sbci	r22, 0x30	; 48
     5d0:	66 26       	eor	r6, r22
     5d2:	61 43       	sbci	r22, 0x31	; 49
     5d4:	00 80       	ld	r0, Z
     5d6:	61 43       	sbci	r22, 0x31	; 49
     5d8:	9a d9       	rcall	.-3276   	; 0xfffff90e <__eeprom_end+0xff7ef90e>
     5da:	61 43       	sbci	r22, 0x31	; 49
     5dc:	c3 35       	cpi	r28, 0x53	; 83
     5de:	62 43       	sbci	r22, 0x32	; 50
     5e0:	5c 8f       	std	Y+28, r21	; 0x1c
     5e2:	62 43       	sbci	r22, 0x32	; 50
     5e4:	f6 e8       	ldi	r31, 0x86	; 134
     5e6:	62 43       	sbci	r22, 0x32	; 50
     5e8:	8f 42       	sbci	r24, 0x2F	; 47
     5ea:	63 43       	sbci	r22, 0x33	; 51
     5ec:	29 9c       	mul	r2, r9
     5ee:	63 43       	sbci	r22, 0x33	; 51
     5f0:	c3 f5       	brvc	.+112    	; 0x662 <__LOCK_REGION_LENGTH__+0x262>
     5f2:	63 43       	sbci	r22, 0x33	; 51
     5f4:	5c 4f       	sbci	r21, 0xFC	; 252
     5f6:	64 43       	sbci	r22, 0x34	; 52
     5f8:	f6 a8       	ldd	r15, Z+54	; 0x36
     5fa:	64 43       	sbci	r22, 0x34	; 52
     5fc:	1f 05       	cpc	r17, r15
     5fe:	65 43       	sbci	r22, 0x35	; 53
     600:	b8 5e       	subi	r27, 0xE8	; 232
     602:	65 43       	sbci	r22, 0x35	; 53
     604:	52 b8       	out	0x02, r5	; 2
     606:	65 43       	sbci	r22, 0x35	; 53
     608:	ec 11       	cpse	r30, r12
     60a:	66 43       	sbci	r22, 0x36	; 54
     60c:	85 6b       	ori	r24, 0xB5	; 181
     60e:	66 43       	sbci	r22, 0x36	; 54
     610:	1f c5       	rjmp	.+2622   	; 0x1050 <Alarm_Start+0x6>
     612:	66 43       	sbci	r22, 0x36	; 54
     614:	b8 1e       	adc	r11, r24
     616:	67 43       	sbci	r22, 0x37	; 55
     618:	52 78       	andi	r21, 0x82	; 130
     61a:	67 43       	sbci	r22, 0x37	; 55
     61c:	ec d1       	rcall	.+984    	; 0x9f6 <_ZL9g_alfVolt+0x1e8>
     61e:	67 43       	sbci	r22, 0x37	; 55
     620:	85 2b       	or	r24, r21
     622:	68 43       	sbci	r22, 0x38	; 56
     624:	1f 85       	ldd	r17, Y+15	; 0x0f
     626:	68 43       	sbci	r22, 0x38	; 56
     628:	b8 de       	rcall	.-656    	; 0x39a <__trampolines_end+0x30e>
     62a:	68 43       	sbci	r22, 0x38	; 56
     62c:	c3 35       	cpi	r28, 0x53	; 83
     62e:	69 43       	sbci	r22, 0x39	; 57
     630:	5c 8f       	std	Y+28, r21	; 0x1c
     632:	69 43       	sbci	r22, 0x39	; 57
     634:	f6 e8       	ldi	r31, 0x86	; 134
     636:	69 43       	sbci	r22, 0x39	; 57
     638:	8f 42       	sbci	r24, 0x2F	; 47
     63a:	6a 43       	sbci	r22, 0x3A	; 58
     63c:	29 9c       	mul	r2, r9
     63e:	6a 43       	sbci	r22, 0x3A	; 58
     640:	c3 f5       	brvc	.+112    	; 0x6b2 <__LOCK_REGION_LENGTH__+0x2b2>
     642:	6a 43       	sbci	r22, 0x3A	; 58
     644:	5c 4f       	sbci	r21, 0xFC	; 252
     646:	6b 43       	sbci	r22, 0x3B	; 59
     648:	f6 a8       	ldd	r15, Z+54	; 0x36
     64a:	6b 43       	sbci	r22, 0x3B	; 59
     64c:	00 00       	nop
     64e:	6c 43       	sbci	r22, 0x3C	; 60
     650:	9a 59       	subi	r25, 0x9A	; 154
     652:	6c 43       	sbci	r22, 0x3C	; 60
     654:	33 b3       	in	r19, 0x13	; 19
     656:	6c 43       	sbci	r22, 0x3C	; 60
     658:	cd 0c       	add	r12, r13
     65a:	6d 43       	sbci	r22, 0x3D	; 61
     65c:	66 66       	ori	r22, 0x66	; 102
     65e:	6d 43       	sbci	r22, 0x3D	; 61
     660:	71 bd       	out	0x21, r23	; 33
     662:	6d 43       	sbci	r22, 0x3D	; 61
     664:	0a 17       	cp	r16, r26
     666:	6e 43       	sbci	r22, 0x3E	; 62
     668:	a4 70       	andi	r26, 0x04	; 4
     66a:	6e 43       	sbci	r22, 0x3E	; 62
     66c:	3d ca       	rjmp	.-2950   	; 0xfffffae8 <__eeprom_end+0xff7efae8>
     66e:	6e 43       	sbci	r22, 0x3E	; 62
     670:	48 21       	and	r20, r8
     672:	6f 43       	sbci	r22, 0x3F	; 63
     674:	e1 7a       	andi	r30, 0xA1	; 161
     676:	6f 43       	sbci	r22, 0x3F	; 63
     678:	7b d4       	rcall	.+2294   	; 0xf70 <_ZN22DFRobotHighTemperature15readTemperatureEj+0xf0>
     67a:	6f 43       	sbci	r22, 0x3F	; 63
     67c:	14 2e       	mov	r1, r20
     67e:	70 43       	sbci	r23, 0x30	; 48
     680:	1f 85       	ldd	r17, Y+15	; 0x0f
     682:	70 43       	sbci	r23, 0x30	; 48
     684:	b8 de       	rcall	.-656    	; 0x3f6 <__trampolines_end+0x36a>
     686:	70 43       	sbci	r23, 0x30	; 48
     688:	52 38       	cpi	r21, 0x82	; 130
     68a:	71 43       	sbci	r23, 0x31	; 49
     68c:	5c 8f       	std	Y+28, r21	; 0x1c
     68e:	71 43       	sbci	r23, 0x31	; 49
     690:	f6 e8       	ldi	r31, 0x86	; 134
     692:	71 43       	sbci	r23, 0x31	; 49
     694:	8f 42       	sbci	r24, 0x2F	; 47
     696:	72 43       	sbci	r23, 0x32	; 50
     698:	9a 99       	sbic	0x13, 2	; 19
     69a:	72 43       	sbci	r23, 0x32	; 50
     69c:	33 f3       	brvs	.-52     	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
     69e:	72 43       	sbci	r23, 0x32	; 50
     6a0:	3d 4a       	sbci	r19, 0xAD	; 173
     6a2:	73 43       	sbci	r23, 0x33	; 51
     6a4:	d7 a3       	std	Z+39, r29	; 0x27
     6a6:	73 43       	sbci	r23, 0x33	; 51
     6a8:	71 fd       	sbrc	r23, 1
     6aa:	73 43       	sbci	r23, 0x33	; 51
     6ac:	7b 54       	subi	r23, 0x4B	; 75
     6ae:	74 43       	sbci	r23, 0x34	; 52
     6b0:	14 ae       	std	Z+60, r1	; 0x3c
     6b2:	74 43       	sbci	r23, 0x34	; 52
     6b4:	1f 05       	cpc	r17, r15
     6b6:	75 43       	sbci	r23, 0x35	; 53
     6b8:	b8 5e       	subi	r27, 0xE8	; 232
     6ba:	75 43       	sbci	r23, 0x35	; 53
     6bc:	c3 b5       	in	r28, 0x23	; 35
     6be:	75 43       	sbci	r23, 0x35	; 53
     6c0:	5c 0f       	add	r21, r28
     6c2:	76 43       	sbci	r23, 0x36	; 54
     6c4:	66 66       	ori	r22, 0x66	; 102
     6c6:	76 43       	sbci	r23, 0x36	; 54
     6c8:	00 c0       	rjmp	.+0      	; 0x6ca <__LOCK_REGION_LENGTH__+0x2ca>
     6ca:	76 43       	sbci	r23, 0x36	; 54

000006cc <_ZL8g_adTemp>:
     6cc:	d8 ff d9 ff da ff db ff dc ff dd ff de ff df ff     ................
     6dc:	e0 ff e1 ff e2 ff e3 ff e4 ff e5 ff e6 ff e7 ff     ................
     6ec:	e8 ff e9 ff ea ff eb ff ec ff ed ff ee ff ef ff     ................
     6fc:	f0 ff f1 ff f2 ff f3 ff f4 ff f5 ff f6 ff f7 ff     ................
     70c:	f8 ff f9 ff fa ff fb ff fc ff fd ff fe ff ff ff     ................
     71c:	00 00 01 00 02 00 03 00 04 00 05 00 06 00 07 00     ................
     72c:	08 00 09 00 0a 00 0b 00 0c 00 0d 00 0e 00 0f 00     ................
     73c:	10 00 11 00 12 00 13 00 14 00 15 00 16 00 17 00     ................
     74c:	18 00 19 00 1a 00 1b 00 1c 00 1d 00 1e 00 1f 00     ................
     75c:	20 00 21 00 22 00 23 00 24 00 25 00 26 00 27 00      .!.".#.$.%.&.'.
     76c:	28 00 29 00 2a 00 2b 00 2c 00 2d 00 2e 00 2f 00     (.).*.+.,.-.../.
     77c:	30 00 31 00 32 00 33 00 34 00 35 00 36 00 37 00     0.1.2.3.4.5.6.7.
     78c:	38 00 39 00 3a 00 3b 00 3c 00 3d 00 3e 00 3f 00     8.9.:.;.<.=.>.?.
     79c:	40 00 41 00 42 00 43 00 44 00 45 00 46 00 47 00     @.A.B.C.D.E.F.G.
     7ac:	48 00 49 00 4a 00 4b 00 4c 00 4d 00 4e 00 4f 00     H.I.J.K.L.M.N.O.
     7bc:	50 00 51 00 52 00 53 00 54 00 55 00 56 00 57 00     P.Q.R.S.T.U.V.W.
     7cc:	58 00 59 00 5a 00 5b 00 5c 00 5d 00 5e 00 5f 00     X.Y.Z.[.\.].^._.
     7dc:	60 00 61 00 62 00 63 00 64 00 65 00 66 00 67 00     `.a.b.c.d.e.f.g.
     7ec:	68 00 69 00 6a 00 6b 00 6c 00 6d 00 6e 00 6f 00     h.i.j.k.l.m.n.o.
     7fc:	70 00 71 00 72 00 73 00 74 00 75 00 76 00 77 00     p.q.r.s.t.u.v.w.
     80c:	78 00                                               x.

0000080e <_ZL9g_alfVolt>:
     80e:	a1 84 89 3e cd 92 90 3e 60 ea 97 3e 97 90 9f 3e     ...>...>`..>...>
     81e:	73 85 a7 3e 92 cb af 3e 95 65 b8 3e ca 54 c1 3e     s..>...>.e.>.T.>
     82e:	80 9a ca 3e 09 38 d4 3e 51 31 de 3e 59 86 e8 3e     ...>.8.>Q1.>Y..>
     83e:	c1 39 f3 3e 88 4b fe 3e 7f de 04 3f 08 c9 0a 3f     .9.>.K.>...?...?
     84e:	11 e4 10 3f 90 31 17 3f 85 b1 1d 3f f1 63 24 3f     ...?.1.?...?.c$?
     85e:	7b 49 2b 3f 24 62 32 3f 92 ae 39 3f c7 2e 41 3f     {I+?$b2?..9?..A?
     86e:	19 e2 48 3f 32 c9 50 3f c1 e2 58 3f 16 30 61 3f     ..H?2.P?..X?.0a?
     87e:	3a af 69 3f 2d 60 72 3f ee 42 7b 3f 17 2b 82 3f     :.i?-`r?.B{?.+.?
     88e:	a3 cc 86 3f c6 85 8b 3f da 55 90 3f 36 3c 95 3f     ...?...?.U.?6<.?
     89e:	32 38 9a 3f cf 49 9f 3f 69 6f a4 3f 00 a9 a9 3f     28.?.I.?io.?...?
     8ae:	99 f5 ae 3f e3 53 b4 3f df c3 b9 3f e9 43 bf 3f     ...?.S.?...?.C.?
     8be:	07 d3 c4 3f e3 70 ca 3f da 1b d0 3f 46 d3 d5 3f     ...?.p.?...?F..?
     8ce:	d5 95 db 3f 8d 62 e1 3f 71 38 e7 3f 33 16 ed 3f     ...?.b.?q8.?3..?
     8de:	83 fa f2 3f b8 e4 f8 3f 84 d3 fe 3f cc 62 02 40     ...?...?...?.b.@
     8ee:	fb 5c 05 40 a8 57 08 40 7e 52 0b 40 ad 4c 0e 40     .\.@.W.@~R.@.L.@
     8fe:	b7 45 11 40 1d 3d 14 40 61 32 17 40 dd 24 1a 40     .E.@.=.@a2.@.$.@
     90e:	3c 14 1d 40 00 00 20 40 82 e7 22 40 97 ca 25 40     <..@.. @.."@..%@
     91e:	6d a8 28 40 dc 80 2b 40 8f 53 2e 40 de 1f 31 40     m.(@..+@.S.@..1@
     92e:	9f e5 33 40 7f a4 36 40 ff 5b 39 40 f6 0b 3c 40     ..3@..6@.[9@..<@
     93e:	e5 b3 3e 40 ce 53 41 40 85 eb 43 40 63 7a 46 40     ..>@.SA@..C@czF@
     94e:	93 00 49 40 bf 7d 4b 40 bf f1 4d 40 92 5c 50 40     ..I@.}K@..M@.\P@
     95e:	e4 bd 52 40 8c 15 55 40 b2 63 57 40 2f a8 59 40     ..R@..U@.cW@/.Y@
     96e:	d6 e2 5b 40 a9 13 5e 40 a8 3a 60 40 d1 57 62 40     ..[@..^@.:`@.Wb@
     97e:	fd 6a 64 40 54 74 66 40 00 74 68 40 ad 69 6a 40     .jd@Ttf@.th@.ij@
     98e:	b0 55 6c 40 df 37 6e 40 8c 10 70 40 8f df 71 40     .Ul@.7n@..p@..q@
     99e:	12 a5 73 40 3d 61 75 40 12 14 77 40 ba bd 78 40     ..s@=au@..w@..x@
     9ae:	0b 5e 7a 40 ae f5 7b 40 23 84 7d 40 13 0a 7f 40     .^z@..{@#.}@...@
     9be:	96 43 80 40 f4 fd 80 40 0f b4 81 40 27 66 82 40     .C.@...@...@'f.@
     9ce:	12 14 83 40 0e be 83 40 1b 64 84 40 4f 06 85 40     ...@...@.d.@O..@
     9de:	d3 a4 85 40 7d 3f 86 40 a1 d6 86 40 2b 6a 87 40     ...@}?.@...@+j.@
     9ee:	2f fa 87 40 c2 86 88 40 0e 10 89 40 ff 95 89 40     /..@...@...@...@
     9fe:	d2 18 8a 40 5f 98 8a 40 f9 14 8b 40 75 8e 8b 40     ...@_..@...@u..@
     a0e:	14 05 8c 40 c0 78 8c 40 a3 e9 8c 40 d1 57 8d 40     ...@.x.@...@.W.@
     a1e:	4c c3 8d 40 28 2c 8e 40 64 92 8e 40 2b f6 8e 40     L..@(,.@d..@+..@
     a2e:	93 57 8f 40 85 b6 8f 40 2b 13 90 40 87 6d 90 40     .W.@...@+..@.m.@
     a3e:	ac c5 90 40 b0 1b 91 40 93 6f 91 40 6a c1 91 40     ...@...@.o.@j..@
     a4e:	49 11 92 40 1c 5f 92 40 22 ab 92 40 45 f5 92 40     I..@._.@"..@E..@
     a5e:	86 3d 93 40 0e 84 93 40 f3 c8 93 40 0b 0c 94 40     .=.@...@...@...@
     a6e:	94 4d 94 40 7a 8d 94 40 e6 cb 94 40 c4 08 95 40     .M.@z..@...@...@
     a7e:	28 44 95 40 13 7e 95 40 ae b6 95 40 d0 ed 95 40     (D.@.~.@...@...@
     a8e:	b8 23 96 40                                         .#.@

00000a92 <__ctors_end>:
     a92:	11 24       	eor	r1, r1
     a94:	1f be       	out	0x3f, r1	; 63
     a96:	cf ef       	ldi	r28, 0xFF	; 255
     a98:	d0 e1       	ldi	r29, 0x10	; 16
     a9a:	de bf       	out	0x3e, r29	; 62
     a9c:	cd bf       	out	0x3d, r28	; 61

00000a9e <__do_copy_data>:
     a9e:	12 e0       	ldi	r17, 0x02	; 2
     aa0:	a0 e0       	ldi	r26, 0x00	; 0
     aa2:	b1 e0       	ldi	r27, 0x01	; 1
     aa4:	e6 e4       	ldi	r30, 0x46	; 70
     aa6:	f5 e5       	ldi	r31, 0x55	; 85
     aa8:	00 e0       	ldi	r16, 0x00	; 0
     aaa:	0b bf       	out	0x3b, r16	; 59
     aac:	02 c0       	rjmp	.+4      	; 0xab2 <__do_copy_data+0x14>
     aae:	07 90       	elpm	r0, Z+
     ab0:	0d 92       	st	X+, r0
     ab2:	a2 34       	cpi	r26, 0x42	; 66
     ab4:	b1 07       	cpc	r27, r17
     ab6:	d9 f7       	brne	.-10     	; 0xaae <__do_copy_data+0x10>

00000ab8 <__do_clear_bss>:
     ab8:	2e e0       	ldi	r18, 0x0E	; 14
     aba:	a2 e4       	ldi	r26, 0x42	; 66
     abc:	b2 e0       	ldi	r27, 0x02	; 2
     abe:	01 c0       	rjmp	.+2      	; 0xac2 <.do_clear_bss_start>

00000ac0 <.do_clear_bss_loop>:
     ac0:	1d 92       	st	X+, r1

00000ac2 <.do_clear_bss_start>:
     ac2:	a1 31       	cpi	r26, 0x11	; 17
     ac4:	b2 07       	cpc	r27, r18
     ac6:	e1 f7       	brne	.-8      	; 0xac0 <.do_clear_bss_loop>
     ac8:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <main>
     acc:	0c 94 a1 2a 	jmp	0x5542	; 0x5542 <_exit>

00000ad0 <__bad_interrupt>:
     ad0:	97 ca       	rjmp	.-2770   	; 0x0 <__vectors>

00000ad2 <_Z5CRC16Phi>:
	function01->ByteCount = 0x02;
	function01->OutPutStatus1 = func1mem[*(buf + 3)];
	function01->OutPutStatus2 = func1mem[(*(buf + 3)) + 1];
	crc16 = CRC16((unsigned char*)function01, BUFSIZE - 2);
	function01->CRC = crc16;
}
     ad2:	fc 01       	movw	r30, r24
     ad4:	68 0f       	add	r22, r24
     ad6:	79 1f       	adc	r23, r25
     ad8:	8f ef       	ldi	r24, 0xFF	; 255
     ada:	9f ef       	ldi	r25, 0xFF	; 255
     adc:	e6 17       	cp	r30, r22
     ade:	f7 07       	cpc	r31, r23
     ae0:	99 f0       	breq	.+38     	; 0xb08 <_Z5CRC16Phi+0x36>
     ae2:	21 91       	ld	r18, Z+
     ae4:	82 27       	eor	r24, r18
     ae6:	28 e0       	ldi	r18, 0x08	; 8
     ae8:	30 e0       	ldi	r19, 0x00	; 0
     aea:	ac 01       	movw	r20, r24
     aec:	41 70       	andi	r20, 0x01	; 1
     aee:	55 27       	eor	r21, r21
     af0:	96 95       	lsr	r25
     af2:	87 95       	ror	r24
     af4:	45 2b       	or	r20, r21
     af6:	21 f0       	breq	.+8      	; 0xb00 <_Z5CRC16Phi+0x2e>
     af8:	41 e0       	ldi	r20, 0x01	; 1
     afa:	84 27       	eor	r24, r20
     afc:	40 ea       	ldi	r20, 0xA0	; 160
     afe:	94 27       	eor	r25, r20
     b00:	21 50       	subi	r18, 0x01	; 1
     b02:	31 09       	sbc	r19, r1
     b04:	91 f7       	brne	.-28     	; 0xaea <_Z5CRC16Phi+0x18>
     b06:	ea cf       	rjmp	.-44     	; 0xadc <_Z5CRC16Phi+0xa>
     b08:	08 95       	ret

00000b0a <_Z13GetFunc04DataPcP17GetFunctionCode04Pi>:
void GetFunc04Data(char* buf,GetFunctionCode04* function04,int* func4mem)
{
     b0a:	cf 93       	push	r28
     b0c:	df 93       	push	r29
     b0e:	dc 01       	movw	r26, r24
     b10:	eb 01       	movw	r28, r22
	unsigned short crc16;
	unsigned int BUFSIZE = sizeof(GetFunctionCode04);
	char address = 0;
	function04->Address = *(buf + 0);
     b12:	8c 91       	ld	r24, X
     b14:	88 83       	st	Y, r24
	function04->FunctionCode = *(buf + 1);
     b16:	11 96       	adiw	r26, 0x01	; 1
     b18:	8c 91       	ld	r24, X
     b1a:	11 97       	sbiw	r26, 0x01	; 1
     b1c:	89 83       	std	Y+1, r24	; 0x01
	address = *(buf + 3);
     b1e:	13 96       	adiw	r26, 0x03	; 3
     b20:	8c 91       	ld	r24, X
	function04->ByteCount = 0x02;
     b22:	92 e0       	ldi	r25, 0x02	; 2
     b24:	9a 83       	std	Y+2, r25	; 0x02
	function04->InputRegHi = (func4mem[address] >> 8);
     b26:	e8 2f       	mov	r30, r24
     b28:	f0 e0       	ldi	r31, 0x00	; 0
     b2a:	ee 0f       	add	r30, r30
     b2c:	ff 1f       	adc	r31, r31
     b2e:	e4 0f       	add	r30, r20
     b30:	f5 1f       	adc	r31, r21
     b32:	81 81       	ldd	r24, Z+1	; 0x01
     b34:	8b 83       	std	Y+3, r24	; 0x03
	function04->InputRegLo = func4mem[address];
     b36:	80 81       	ld	r24, Z
     b38:	8c 83       	std	Y+4, r24	; 0x04
	crc16 = CRC16((unsigned char*)function04, BUFSIZE - 2);
     b3a:	65 e0       	ldi	r22, 0x05	; 5
     b3c:	70 e0       	ldi	r23, 0x00	; 0
     b3e:	ce 01       	movw	r24, r28
     b40:	c8 df       	rcall	.-112    	; 0xad2 <_Z5CRC16Phi>
	function04->CRC = crc16;
     b42:	9e 83       	std	Y+6, r25	; 0x06
     b44:	8d 83       	std	Y+5, r24	; 0x05
}
     b46:	df 91       	pop	r29
     b48:	cf 91       	pop	r28
     b4a:	08 95       	ret

00000b4c <_Z13GetFunc05DataPcP17GetFunctionCode05>:
void GetFunc05Data(char* buf,GetFunctionCode05* function05)
{
     b4c:	cf 93       	push	r28
     b4e:	df 93       	push	r29
     b50:	fc 01       	movw	r30, r24
     b52:	eb 01       	movw	r28, r22
	unsigned short crc16;
	unsigned int BUFSIZE = sizeof(GetFunctionCode05);
	function05->Address = *(buf + 0);
     b54:	80 81       	ld	r24, Z
     b56:	88 83       	st	Y, r24
	function05->FunctionCode = *(buf + 1);
     b58:	81 81       	ldd	r24, Z+1	; 0x01
     b5a:	89 83       	std	Y+1, r24	; 0x01
	function05->OutputAddressHi = *(buf + 2);
     b5c:	82 81       	ldd	r24, Z+2	; 0x02
     b5e:	8a 83       	std	Y+2, r24	; 0x02
	function05->OutputAddressLo = *(buf + 3);
     b60:	83 81       	ldd	r24, Z+3	; 0x03
     b62:	8b 83       	std	Y+3, r24	; 0x03
	function05->OutputValueHi = *(buf + 4);
     b64:	84 81       	ldd	r24, Z+4	; 0x04
     b66:	8c 83       	std	Y+4, r24	; 0x04
	function05->OutputValueLo = *(buf + 5);
     b68:	85 81       	ldd	r24, Z+5	; 0x05
     b6a:	8d 83       	std	Y+5, r24	; 0x05
	crc16 = CRC16((unsigned char*)function05, BUFSIZE - 2);
     b6c:	66 e0       	ldi	r22, 0x06	; 6
     b6e:	70 e0       	ldi	r23, 0x00	; 0
     b70:	ce 01       	movw	r24, r28
     b72:	af df       	rcall	.-162    	; 0xad2 <_Z5CRC16Phi>
	function05->CRC = crc16;//to_little(crc16);
     b74:	9f 83       	std	Y+7, r25	; 0x07
     b76:	8e 83       	std	Y+6, r24	; 0x06
}
     b78:	df 91       	pop	r29
     b7a:	cf 91       	pop	r28
     b7c:	08 95       	ret

00000b7e <_Z13GetFucc10DataPcP17GetFunctionCode10Pi>:
void GetFucc10Data(char* buf,GetFunctionCode10* function10,int* func4mem)
{
     b7e:	cf 93       	push	r28
     b80:	df 93       	push	r29
     b82:	fc 01       	movw	r30, r24
     b84:	eb 01       	movw	r28, r22
	unsigned short crc16;
	unsigned int BUFSIZE = sizeof(GetFunctionCode10);
	function10->address = *(buf + 0);
     b86:	80 81       	ld	r24, Z
     b88:	88 83       	st	Y, r24
	function10->functionCode = *(buf + 1);
     b8a:	81 81       	ldd	r24, Z+1	; 0x01
     b8c:	89 83       	std	Y+1, r24	; 0x01
	function10->startingAddressHi = *(buf + 2);
     b8e:	82 81       	ldd	r24, Z+2	; 0x02
     b90:	8a 83       	std	Y+2, r24	; 0x02
	function10->startingAddressLo = *(buf + 3);
     b92:	83 81       	ldd	r24, Z+3	; 0x03
     b94:	8b 83       	std	Y+3, r24	; 0x03
	function10->quantityOfRegistersHi = *(buf + 4);
     b96:	94 81       	ldd	r25, Z+4	; 0x04
     b98:	9c 83       	std	Y+4, r25	; 0x04
	function10->quantityOfRegistersLo = *(buf + 5);
     b9a:	95 81       	ldd	r25, Z+5	; 0x05
     b9c:	9d 83       	std	Y+5, r25	; 0x05
	function10->byteCount = *(buf + 6);
     b9e:	96 81       	ldd	r25, Z+6	; 0x06
     ba0:	9e 83       	std	Y+6, r25	; 0x06
	function10->registerValueHi = *(buf + 7);
     ba2:	27 81       	ldd	r18, Z+7	; 0x07
     ba4:	2f 83       	std	Y+7, r18	; 0x07
	function10->registerValueLo = *(buf + 8);
     ba6:	90 85       	ldd	r25, Z+8	; 0x08
     ba8:	98 87       	std	Y+8, r25	; 0x08
	func4mem[function10->startingAddressLo] = ((function10->registerValueHi << 8) | (function10->registerValueLo));
     baa:	e8 2f       	mov	r30, r24
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	ee 0f       	add	r30, r30
     bb0:	ff 1f       	adc	r31, r31
     bb2:	e4 0f       	add	r30, r20
     bb4:	f5 1f       	adc	r31, r21
     bb6:	89 2f       	mov	r24, r25
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	92 2b       	or	r25, r18
     bbc:	91 83       	std	Z+1, r25	; 0x01
     bbe:	80 83       	st	Z, r24
	crc16 = CRC16((unsigned char*)function10, BUFSIZE - 2);
     bc0:	69 e0       	ldi	r22, 0x09	; 9
     bc2:	70 e0       	ldi	r23, 0x00	; 0
     bc4:	ce 01       	movw	r24, r28
     bc6:	85 df       	rcall	.-246    	; 0xad2 <_Z5CRC16Phi>
	function10->CRC = crc16;
     bc8:	9a 87       	std	Y+10, r25	; 0x0a
     bca:	89 87       	std	Y+9, r24	; 0x09
}
     bcc:	df 91       	pop	r29
     bce:	cf 91       	pop	r28
     bd0:	08 95       	ret

00000bd2 <_Z18ResponseFucc10DataPcP22ResponseFunctionCode10>:
void ResponseFucc10Data(char* buf,ResponseFunctionCode10 *rfunction10)
{
     bd2:	cf 93       	push	r28
     bd4:	df 93       	push	r29
     bd6:	fc 01       	movw	r30, r24
     bd8:	eb 01       	movw	r28, r22
	unsigned short crc16;
	unsigned int BUFSIZE = sizeof(ResponseFunctionCode10);
	rfunction10->address = *(buf + 0);
     bda:	80 81       	ld	r24, Z
     bdc:	88 83       	st	Y, r24
	rfunction10->functionCode = *(buf + 1);
     bde:	81 81       	ldd	r24, Z+1	; 0x01
     be0:	89 83       	std	Y+1, r24	; 0x01
	rfunction10->startingAddressHi = *(buf + 2);
     be2:	82 81       	ldd	r24, Z+2	; 0x02
     be4:	8a 83       	std	Y+2, r24	; 0x02
	rfunction10->startingAddressLo = *(buf + 3);
     be6:	83 81       	ldd	r24, Z+3	; 0x03
     be8:	8b 83       	std	Y+3, r24	; 0x03
	rfunction10->quantityOfRegistersHi = *(buf + 4);
     bea:	84 81       	ldd	r24, Z+4	; 0x04
     bec:	8c 83       	std	Y+4, r24	; 0x04
	rfunction10->quantityOfRegistersLo = *(buf + 5);
     bee:	85 81       	ldd	r24, Z+5	; 0x05
     bf0:	8d 83       	std	Y+5, r24	; 0x05
	crc16 = CRC16((unsigned char*)rfunction10, BUFSIZE - 2);
     bf2:	66 e0       	ldi	r22, 0x06	; 6
     bf4:	70 e0       	ldi	r23, 0x00	; 0
     bf6:	ce 01       	movw	r24, r28
     bf8:	6c df       	rcall	.-296    	; 0xad2 <_Z5CRC16Phi>
	rfunction10->CRC = crc16;
     bfa:	9f 83       	std	Y+7, r25	; 0x07
     bfc:	8e 83       	std	Y+6, r24	; 0x06
}
     bfe:	df 91       	pop	r29
     c00:	cf 91       	pop	r28
     c02:	08 95       	ret

00000c04 <_Z16GetExceptionCodeP16RspExceptionCodecc>:
void GetExceptionCode(RspExceptionCode* Exception,char adr,char Exception_code)
{
     c04:	cf 93       	push	r28
     c06:	df 93       	push	r29
     c08:	ec 01       	movw	r28, r24
	unsigned short crc16;
	unsigned int BUFSIZE = sizeof(RspExceptionCode);
	Exception->Address = adr;
     c0a:	68 83       	st	Y, r22
	Exception->FunctionCode = 0x81;
     c0c:	81 e8       	ldi	r24, 0x81	; 129
     c0e:	89 83       	std	Y+1, r24	; 0x01
	Exception->ExceptionCode = Exception_code;
     c10:	4a 83       	std	Y+2, r20	; 0x02
	crc16 = CRC16((unsigned char*)Exception, BUFSIZE - 2);
     c12:	63 e0       	ldi	r22, 0x03	; 3
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	ce 01       	movw	r24, r28
     c18:	5c df       	rcall	.-328    	; 0xad2 <_Z5CRC16Phi>
	Exception->CRC = crc16;
     c1a:	9c 83       	std	Y+4, r25	; 0x04
     c1c:	8b 83       	std	Y+3, r24	; 0x03
}
     c1e:	df 91       	pop	r29
     c20:	cf 91       	pop	r28
     c22:	08 95       	ret

00000c24 <_ZN12SerialBufferC1EP11Dev_Manager8Dev_type>:
	Temp = Integer % 10;	
	Temp = HexaString[Temp];
	dev->Write(this->type,Temp);

	
}
     c24:	1f 93       	push	r17
     c26:	cf 93       	push	r28
     c28:	df 93       	push	r29
     c2a:	ec 01       	movw	r28, r24
     c2c:	cb 01       	movw	r24, r22
     c2e:	14 2f       	mov	r17, r20
     c30:	fe 01       	movw	r30, r28
     c32:	ea 57       	subi	r30, 0x7A	; 122
     c34:	ff 4f       	sbci	r31, 0xFF	; 255
     c36:	71 83       	std	Z+1, r23	; 0x01
     c38:	60 83       	st	Z, r22
     c3a:	64 2f       	mov	r22, r20
     c3c:	f6 d3       	rcall	.+2028   	; 0x142a <_ZN11Dev_Manager12Driver_CheckE8Dev_type>
     c3e:	88 23       	and	r24, r24
     c40:	71 f0       	breq	.+28     	; 0xc5e <_ZN12SerialBufferC1EP11Dev_Manager8Dev_type+0x3a>
     c42:	fe 01       	movw	r30, r28
     c44:	eb 57       	subi	r30, 0x7B	; 123
     c46:	ff 4f       	sbci	r31, 0xFF	; 255
     c48:	10 83       	st	Z, r17
     c4a:	31 97       	sbiw	r30, 0x01	; 1
     c4c:	10 82       	st	Z, r1
     c4e:	34 97       	sbiw	r30, 0x04	; 4
     c50:	11 82       	std	Z+1, r1	; 0x01
     c52:	10 82       	st	Z, r1
     c54:	ce 57       	subi	r28, 0x7E	; 126
     c56:	df 4f       	sbci	r29, 0xFF	; 255
     c58:	19 82       	std	Y+1, r1	; 0x01
     c5a:	18 82       	st	Y, r1
     c5c:	04 c0       	rjmp	.+8      	; 0xc66 <_ZN12SerialBufferC1EP11Dev_Manager8Dev_type+0x42>
     c5e:	ca 57       	subi	r28, 0x7A	; 122
     c60:	df 4f       	sbci	r29, 0xFF	; 255
     c62:	19 82       	std	Y+1, r1	; 0x01
     c64:	18 82       	st	Y, r1
     c66:	df 91       	pop	r29
     c68:	cf 91       	pop	r28
     c6a:	1f 91       	pop	r17
     c6c:	08 95       	ret

00000c6e <_ZN12SerialBuffernwEj>:
     c6e:	0c 94 d6 1b 	jmp	0x37ac	; 0x37ac <pvPortMalloc>
     c72:	08 95       	ret

00000c74 <_ZN12SerialBuffer11SerialstoreEc>:
     c74:	fc 01       	movw	r30, r24
     c76:	e0 58       	subi	r30, 0x80	; 128
     c78:	ff 4f       	sbci	r31, 0xFF	; 255
     c7a:	20 81       	ld	r18, Z
     c7c:	2f 5f       	subi	r18, 0xFF	; 255
     c7e:	2f 77       	andi	r18, 0x7F	; 127
     c80:	19 f4       	brne	.+6      	; 0xc88 <_ZN12SerialBuffer11SerialstoreEc+0x14>
     c82:	11 82       	std	Z+1, r1	; 0x01
     c84:	10 82       	st	Z, r1
     c86:	21 e0       	ldi	r18, 0x01	; 1
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	fc 01       	movw	r30, r24
     c8c:	ee 57       	subi	r30, 0x7E	; 126
     c8e:	ff 4f       	sbci	r31, 0xFF	; 255
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	24 17       	cp	r18, r20
     c96:	35 07       	cpc	r19, r21
     c98:	89 f0       	breq	.+34     	; 0xcbc <_ZN12SerialBuffer11SerialstoreEc+0x48>
     c9a:	dc 01       	movw	r26, r24
     c9c:	a0 58       	subi	r26, 0x80	; 128
     c9e:	bf 4f       	sbci	r27, 0xFF	; 255
     ca0:	ed 91       	ld	r30, X+
     ca2:	fc 91       	ld	r31, X
     ca4:	11 97       	sbiw	r26, 0x01	; 1
     ca6:	e8 0f       	add	r30, r24
     ca8:	f9 1f       	adc	r31, r25
     caa:	61 83       	std	Z+1, r22	; 0x01
     cac:	2d 93       	st	X+, r18
     cae:	3c 93       	st	X, r19
     cb0:	fc 01       	movw	r30, r24
     cb2:	ec 57       	subi	r30, 0x7C	; 124
     cb4:	ff 4f       	sbci	r31, 0xFF	; 255
     cb6:	80 81       	ld	r24, Z
     cb8:	8f 5f       	subi	r24, 0xFF	; 255
     cba:	80 83       	st	Z, r24
     cbc:	08 95       	ret

00000cbe <_ZN12SerialBuffer11SerialWriteEPKci>:
     cbe:	af 92       	push	r10
     cc0:	bf 92       	push	r11
     cc2:	cf 92       	push	r12
     cc4:	df 92       	push	r13
     cc6:	ef 92       	push	r14
     cc8:	ff 92       	push	r15
     cca:	0f 93       	push	r16
     ccc:	1f 93       	push	r17
     cce:	cf 93       	push	r28
     cd0:	8c 01       	movw	r16, r24
     cd2:	6b 01       	movw	r12, r22
     cd4:	7a 01       	movw	r14, r20
     cd6:	dc 01       	movw	r26, r24
     cd8:	ab 57       	subi	r26, 0x7B	; 123
     cda:	bf 4f       	sbci	r27, 0xFF	; 255
     cdc:	fc 01       	movw	r30, r24
     cde:	ea 57       	subi	r30, 0x7A	; 122
     ce0:	ff 4f       	sbci	r31, 0xFF	; 255
     ce2:	6c 91       	ld	r22, X
     ce4:	80 81       	ld	r24, Z
     ce6:	91 81       	ldd	r25, Z+1	; 0x01
     ce8:	ad d3       	rcall	.+1882   	; 0x1444 <_ZNK11Dev_Manager16getInterfaceAddrE8Dev_type>
     cea:	89 2b       	or	r24, r25
     cec:	d1 f0       	breq	.+52     	; 0xd22 <_ZN12SerialBuffer11SerialWriteEPKci+0x64>
     cee:	1e 14       	cp	r1, r14
     cf0:	1f 04       	cpc	r1, r15
     cf2:	bc f4       	brge	.+46     	; 0xd22 <_ZN12SerialBuffer11SerialWriteEPKci+0x64>
     cf4:	c0 e0       	ldi	r28, 0x00	; 0
     cf6:	58 01       	movw	r10, r16
     cf8:	85 e8       	ldi	r24, 0x85	; 133
     cfa:	a8 0e       	add	r10, r24
     cfc:	b1 1c       	adc	r11, r1
     cfe:	0a 57       	subi	r16, 0x7A	; 122
     d00:	1f 4f       	sbci	r17, 0xFF	; 255
     d02:	f6 01       	movw	r30, r12
     d04:	ec 0f       	add	r30, r28
     d06:	f1 1d       	adc	r31, r1
     d08:	40 81       	ld	r20, Z
     d0a:	f5 01       	movw	r30, r10
     d0c:	60 81       	ld	r22, Z
     d0e:	f8 01       	movw	r30, r16
     d10:	80 81       	ld	r24, Z
     d12:	91 81       	ldd	r25, Z+1	; 0x01
     d14:	43 d3       	rcall	.+1670   	; 0x139c <_ZN11Dev_Manager5WriteE8Dev_typec>
     d16:	cf 5f       	subi	r28, 0xFF	; 255
     d18:	2c 2f       	mov	r18, r28
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	2e 15       	cp	r18, r14
     d1e:	3f 05       	cpc	r19, r15
     d20:	84 f3       	brlt	.-32     	; 0xd02 <_ZN12SerialBuffer11SerialWriteEPKci+0x44>
     d22:	cf 91       	pop	r28
     d24:	1f 91       	pop	r17
     d26:	0f 91       	pop	r16
     d28:	ff 90       	pop	r15
     d2a:	ef 90       	pop	r14
     d2c:	df 90       	pop	r13
     d2e:	cf 90       	pop	r12
     d30:	bf 90       	pop	r11
     d32:	af 90       	pop	r10
     d34:	08 95       	ret

00000d36 <_ZN12SerialBuffer10SerialReadEv>:
char SerialBuffer::SerialRead(void) //데이터 읽기
{
	if (ib.head == ib.tail)
     d36:	fc 01       	movw	r30, r24
     d38:	ee 57       	subi	r30, 0x7E	; 126
     d3a:	ff 4f       	sbci	r31, 0xFF	; 255
     d3c:	20 81       	ld	r18, Z
     d3e:	31 81       	ldd	r19, Z+1	; 0x01
     d40:	32 97       	sbiw	r30, 0x02	; 2
     d42:	40 81       	ld	r20, Z
     d44:	51 81       	ldd	r21, Z+1	; 0x01
     d46:	42 17       	cp	r20, r18
     d48:	53 07       	cpc	r21, r19
     d4a:	e9 f0       	breq	.+58     	; 0xd86 <_ZN12SerialBuffer10SerialReadEv+0x50>
	{
		return -1;
	}
	else
	{
		unsigned char data = ib.internalBuffer[ib.tail + 1];
     d4c:	2f 5f       	subi	r18, 0xFF	; 255
     d4e:	3f 4f       	sbci	r19, 0xFF	; 255
     d50:	fc 01       	movw	r30, r24
     d52:	e2 0f       	add	r30, r18
     d54:	f3 1f       	adc	r31, r19
     d56:	40 81       	ld	r20, Z
		ib.tail = (ib.tail + 1) % RX_BUFFER_SIZE;
     d58:	2f 77       	andi	r18, 0x7F	; 127
     d5a:	33 27       	eor	r19, r19
     d5c:	fc 01       	movw	r30, r24
     d5e:	ee 57       	subi	r30, 0x7E	; 126
     d60:	ff 4f       	sbci	r31, 0xFF	; 255
     d62:	31 83       	std	Z+1, r19	; 0x01
     d64:	20 83       	st	Z, r18
		if (ib.tail == num)
     d66:	32 96       	adiw	r30, 0x02	; 2
     d68:	60 81       	ld	r22, Z
     d6a:	70 e0       	ldi	r23, 0x00	; 0
     d6c:	26 17       	cp	r18, r22
     d6e:	37 07       	cpc	r19, r23
     d70:	61 f4       	brne	.+24     	; 0xd8a <_ZN12SerialBuffer10SerialReadEv+0x54>
		{
			ib.tail = 0;
     d72:	32 97       	sbiw	r30, 0x02	; 2
     d74:	11 82       	std	Z+1, r1	; 0x01
     d76:	10 82       	st	Z, r1
			ib.head = 0;
     d78:	32 97       	sbiw	r30, 0x02	; 2
     d7a:	11 82       	std	Z+1, r1	; 0x01
     d7c:	10 82       	st	Z, r1
			num = 0;
     d7e:	34 96       	adiw	r30, 0x04	; 4
     d80:	10 82       	st	Z, r1
		}
		return data;
     d82:	84 2f       	mov	r24, r20
     d84:	08 95       	ret
}
char SerialBuffer::SerialRead(void) //데이터 읽기
{
	if (ib.head == ib.tail)
	{
		return -1;
     d86:	8f ef       	ldi	r24, 0xFF	; 255
     d88:	08 95       	ret
		{
			ib.tail = 0;
			ib.head = 0;
			num = 0;
		}
		return data;
     d8a:	84 2f       	mov	r24, r20
	}
}
     d8c:	08 95       	ret

00000d8e <_ZN12SerialBuffer15SerialAvailableEv>:
unsigned char SerialBuffer::SerialAvailable(void) // 가용 자원수 확인
{
	return (unsigned char)(RX_BUFFER_SIZE + (ib.head - ib.tail)) % RX_BUFFER_SIZE;
     d8e:	dc 01       	movw	r26, r24
     d90:	a0 58       	subi	r26, 0x80	; 128
     d92:	bf 4f       	sbci	r27, 0xFF	; 255
     d94:	fc 01       	movw	r30, r24
     d96:	ee 57       	subi	r30, 0x7E	; 126
     d98:	ff 4f       	sbci	r31, 0xFF	; 255
     d9a:	8c 91       	ld	r24, X
     d9c:	90 81       	ld	r25, Z
     d9e:	89 1b       	sub	r24, r25
}
     da0:	8f 77       	andi	r24, 0x7F	; 127
     da2:	08 95       	ret

00000da4 <_ZN12SerialBuffer11SerialFlushEv>:

void SerialBuffer::SerialFlush(void)// 버퍼를 비운다.
{
	ib.tail = 0;
     da4:	fc 01       	movw	r30, r24
     da6:	ee 57       	subi	r30, 0x7E	; 126
     da8:	ff 4f       	sbci	r31, 0xFF	; 255
     daa:	11 82       	std	Z+1, r1	; 0x01
     dac:	10 82       	st	Z, r1
	ib.head = 0;
     dae:	32 97       	sbiw	r30, 0x02	; 2
     db0:	11 82       	std	Z+1, r1	; 0x01
     db2:	10 82       	st	Z, r1
	num = 0;
     db4:	34 96       	adiw	r30, 0x04	; 4
     db6:	10 82       	st	Z, r1
     db8:	08 95       	ret

00000dba <_ZN22DFRobotHighTemperatureC1Ef>:
DFRobotHighTemperature::DFRobotHighTemperature(float v)  //Constructor
{
	_voltageRef = v;
}

DFRobotHighTemperature::~DFRobotHighTemperature()		//Destructor
     dba:	fc 01       	movw	r30, r24
     dbc:	40 83       	st	Z, r20
     dbe:	51 83       	std	Z+1, r21	; 0x01
     dc0:	62 83       	std	Z+2, r22	; 0x02
     dc2:	73 83       	std	Z+3, r23	; 0x03
     dc4:	08 95       	ret

00000dc6 <_ZN22DFRobotHighTemperature4compEfi>:
            mid = front + (end - front) / 2;
        }
    return mid;
}
int DFRobotHighTemperature::comp(float pt, int i) //Which number is closer on the two adjacent numbers.
{
     dc6:	4f 92       	push	r4
     dc8:	5f 92       	push	r5
     dca:	6f 92       	push	r6
     dcc:	7f 92       	push	r7
     dce:	8f 92       	push	r8
     dd0:	9f 92       	push	r9
     dd2:	af 92       	push	r10
     dd4:	bf 92       	push	r11
     dd6:	cf 92       	push	r12
     dd8:	df 92       	push	r13
     dda:	ef 92       	push	r14
     ddc:	ff 92       	push	r15
     dde:	0f 93       	push	r16
     de0:	1f 93       	push	r17
     de2:	cf 93       	push	r28
     de4:	df 93       	push	r29
     de6:	cb 01       	movw	r24, r22
     de8:	ba 01       	movw	r22, r20
     dea:	e9 01       	movw	r28, r18
    if ((pt - pgm_read_float(&PT100Tab[i])) > (pgm_read_float(&PT100Tab[i + 1]) - pgm_read_float(&PT100Tab[i])) / 2 )
     dec:	22 0f       	add	r18, r18
     dee:	33 1f       	adc	r19, r19
     df0:	22 0f       	add	r18, r18
     df2:	33 1f       	adc	r19, r19
     df4:	d9 01       	movw	r26, r18
     df6:	a4 57       	subi	r26, 0x74	; 116
     df8:	bf 4f       	sbci	r27, 0xFF	; 255
     dfa:	fd 01       	movw	r30, r26
     dfc:	25 91       	lpm	r18, Z+
     dfe:	35 91       	lpm	r19, Z+
     e00:	45 91       	lpm	r20, Z+
     e02:	54 91       	lpm	r21, Z
     e04:	8e 01       	movw	r16, r28
     e06:	0f 5f       	subi	r16, 0xFF	; 255
     e08:	1f 4f       	sbci	r17, 0xFF	; 255
     e0a:	f8 01       	movw	r30, r16
     e0c:	ee 0f       	add	r30, r30
     e0e:	ff 1f       	adc	r31, r31
     e10:	ee 0f       	add	r30, r30
     e12:	ff 1f       	adc	r31, r31
     e14:	e4 57       	subi	r30, 0x74	; 116
     e16:	ff 4f       	sbci	r31, 0xFF	; 255
     e18:	85 90       	lpm	r8, Z+
     e1a:	95 90       	lpm	r9, Z+
     e1c:	a5 90       	lpm	r10, Z+
     e1e:	b4 90       	lpm	r11, Z
     e20:	fd 01       	movw	r30, r26
     e22:	45 90       	lpm	r4, Z+
     e24:	55 90       	lpm	r5, Z+
     e26:	65 90       	lpm	r6, Z+
     e28:	74 90       	lpm	r7, Z
     e2a:	0e 94 58 25 	call	0x4ab0	; 0x4ab0 <__subsf3>
     e2e:	6b 01       	movw	r12, r22
     e30:	7c 01       	movw	r14, r24
     e32:	a3 01       	movw	r20, r6
     e34:	92 01       	movw	r18, r4
     e36:	c5 01       	movw	r24, r10
     e38:	b4 01       	movw	r22, r8
     e3a:	0e 94 58 25 	call	0x4ab0	; 0x4ab0 <__subsf3>
     e3e:	20 e0       	ldi	r18, 0x00	; 0
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	40 e0       	ldi	r20, 0x00	; 0
     e44:	5f e3       	ldi	r21, 0x3F	; 63
     e46:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
     e4a:	9b 01       	movw	r18, r22
     e4c:	ac 01       	movw	r20, r24
     e4e:	c7 01       	movw	r24, r14
     e50:	b6 01       	movw	r22, r12
     e52:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <__gesf2>
     e56:	18 16       	cp	r1, r24
     e58:	0c f0       	brlt	.+2      	; 0xe5c <_ZN22DFRobotHighTemperature4compEfi+0x96>
        return i + 1;
    else
        return i;
     e5a:	8e 01       	movw	r16, r28
}
     e5c:	c8 01       	movw	r24, r16
     e5e:	df 91       	pop	r29
     e60:	cf 91       	pop	r28
     e62:	1f 91       	pop	r17
     e64:	0f 91       	pop	r16
     e66:	ff 90       	pop	r15
     e68:	ef 90       	pop	r14
     e6a:	df 90       	pop	r13
     e6c:	cf 90       	pop	r12
     e6e:	bf 90       	pop	r11
     e70:	af 90       	pop	r10
     e72:	9f 90       	pop	r9
     e74:	8f 90       	pop	r8
     e76:	7f 90       	pop	r7
     e78:	6f 90       	pop	r6
     e7a:	5f 90       	pop	r5
     e7c:	4f 90       	pop	r4
     e7e:	08 95       	ret

00000e80 <_ZN22DFRobotHighTemperature15readTemperatureEj>:
DFRobotHighTemperature::~DFRobotHighTemperature()		//Destructor
{
	
}
int DFRobotHighTemperature::readTemperature(unsigned int sensorValue)     //Get temperature
{
     e80:	4f 92       	push	r4
     e82:	5f 92       	push	r5
     e84:	6f 92       	push	r6
     e86:	7f 92       	push	r7
     e88:	af 92       	push	r10
     e8a:	bf 92       	push	r11
     e8c:	cf 92       	push	r12
     e8e:	df 92       	push	r13
     e90:	ef 92       	push	r14
     e92:	ff 92       	push	r15
     e94:	0f 93       	push	r16
     e96:	1f 93       	push	r17
     e98:	cf 93       	push	r28
     e9a:	df 93       	push	r29
     e9c:	5c 01       	movw	r10, r24
    float voltage = 0,res = 0;
    voltage = sensorValue * 0.0048828125;//_voltageRef / 1024.0;  //If your microcontroller are a 12 bit ADC, you should be change 1024 to 4096
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	0e 94 5a 26 	call	0x4cb4	; 0x4cb4 <__floatunsisf>
     ea6:	20 e0       	ldi	r18, 0x00	; 0
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	40 ea       	ldi	r20, 0xA0	; 160
     eac:	5b e3       	ldi	r21, 0x3B	; 59
     eae:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
     eb2:	6b 01       	movw	r12, r22
     eb4:	7c 01       	movw	r14, r24
	//If you have a DS18B20 on hand, you can make a more accurate calibration.
	//change 220.9 to 210.9 or 230.9,and you need change 2.209 to 2.109 or 2.309 at the same time to accurate calibration.
	res =  (1800 * voltage + 220.9 * 18) / (2.209 * 18 - voltage);
     eb6:	20 e0       	ldi	r18, 0x00	; 0
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	41 ee       	ldi	r20, 0xE1	; 225
     ebc:	54 e4       	ldi	r21, 0x44	; 68
     ebe:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
     ec2:	23 e3       	ldi	r18, 0x33	; 51
     ec4:	33 e8       	ldi	r19, 0x83	; 131
     ec6:	48 e7       	ldi	r20, 0x78	; 120
     ec8:	55 e4       	ldi	r21, 0x45	; 69
     eca:	0e 94 59 25 	call	0x4ab2	; 0x4ab2 <__addsf3>
     ece:	2b 01       	movw	r4, r22
     ed0:	3c 01       	movw	r6, r24
     ed2:	a7 01       	movw	r20, r14
     ed4:	96 01       	movw	r18, r12
     ed6:	6a e4       	ldi	r22, 0x4A	; 74
     ed8:	7c e0       	ldi	r23, 0x0C	; 12
     eda:	8f e1       	ldi	r24, 0x1F	; 31
     edc:	92 e4       	ldi	r25, 0x42	; 66
     ede:	0e 94 58 25 	call	0x4ab0	; 0x4ab0 <__subsf3>
     ee2:	9b 01       	movw	r18, r22
     ee4:	ac 01       	movw	r20, r24
     ee6:	c3 01       	movw	r24, r6
     ee8:	b2 01       	movw	r22, r4
     eea:	0e 94 c1 25 	call	0x4b82	; 0x4b82 <__divsf3>
     eee:	2b 01       	movw	r4, r22
     ef0:	3c 01       	movw	r6, r24
	//res =  (1800 * voltage + 235.9 * 18) / (2.359 * 18 - voltage);
	//searched by the halving method
    int front = 0, end = 0, mid = 0;
    front = 0;
    end = 399;
    mid = (front + end) / 2;
     ef2:	c7 ec       	ldi	r28, 0xC7	; 199
     ef4:	d0 e0       	ldi	r29, 0x00	; 0
	res =  (1800 * voltage + 220.9 * 18) / (2.209 * 18 - voltage);
	//res =  (1800 * voltage + 235.9 * 18) / (2.359 * 18 - voltage);
	//searched by the halving method
    int front = 0, end = 0, mid = 0;
    front = 0;
    end = 399;
     ef6:	0f 2e       	mov	r0, r31
     ef8:	ff e8       	ldi	r31, 0x8F	; 143
     efa:	cf 2e       	mov	r12, r31
     efc:	dd 24       	eor	r13, r13
     efe:	d3 94       	inc	r13
     f00:	f0 2d       	mov	r31, r0
	//change 220.9 to 210.9 or 230.9,and you need change 2.209 to 2.109 or 2.309 at the same time to accurate calibration.
	res =  (1800 * voltage + 220.9 * 18) / (2.209 * 18 - voltage);
	//res =  (1800 * voltage + 235.9 * 18) / (2.359 * 18 - voltage);
	//searched by the halving method
    int front = 0, end = 0, mid = 0;
    front = 0;
     f02:	e1 2c       	mov	r14, r1
     f04:	f1 2c       	mov	r15, r1
    end = 399;
    mid = (front + end) / 2;
    while (front < end && pgm_read_float(&PT100Tab[mid]) != res)  
     f06:	8e 01       	movw	r16, r28
     f08:	00 0f       	add	r16, r16
     f0a:	11 1f       	adc	r17, r17
     f0c:	00 0f       	add	r16, r16
     f0e:	11 1f       	adc	r17, r17
     f10:	04 57       	subi	r16, 0x74	; 116
     f12:	1f 4f       	sbci	r17, 0xFF	; 255
     f14:	f8 01       	movw	r30, r16
     f16:	25 91       	lpm	r18, Z+
     f18:	35 91       	lpm	r19, Z+
     f1a:	45 91       	lpm	r20, Z+
     f1c:	54 91       	lpm	r21, Z
     f1e:	c3 01       	movw	r24, r6
     f20:	b2 01       	movw	r22, r4
     f22:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <__cmpsf2>
     f26:	81 11       	cpse	r24, r1
     f28:	50 c0       	rjmp	.+160    	; 0xfca <_ZN22DFRobotHighTemperature15readTemperatureEj+0x14a>
     f2a:	5c c0       	rjmp	.+184    	; 0xfe4 <_ZN22DFRobotHighTemperature15readTemperatureEj+0x164>
        {
            if (pgm_read_float(&PT100Tab[mid]) < res)
                if (pgm_read_float(&PT100Tab[mid + 1]) < res)
     f2c:	7e 01       	movw	r14, r28
     f2e:	8f ef       	ldi	r24, 0xFF	; 255
     f30:	e8 1a       	sub	r14, r24
     f32:	f8 0a       	sbc	r15, r24
     f34:	f7 01       	movw	r30, r14
     f36:	ee 0f       	add	r30, r30
     f38:	ff 1f       	adc	r31, r31
     f3a:	ee 0f       	add	r30, r30
     f3c:	ff 1f       	adc	r31, r31
     f3e:	e4 57       	subi	r30, 0x74	; 116
     f40:	ff 4f       	sbci	r31, 0xFF	; 255
     f42:	25 91       	lpm	r18, Z+
     f44:	35 91       	lpm	r19, Z+
     f46:	45 91       	lpm	r20, Z+
     f48:	54 91       	lpm	r21, Z
     f4a:	c3 01       	movw	r24, r6
     f4c:	b2 01       	movw	r22, r4
     f4e:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <__gesf2>
     f52:	18 16       	cp	r1, r24
     f54:	34 f0       	brlt	.+12     	; 0xf62 <_ZN22DFRobotHighTemperature15readTemperatureEj+0xe2>
                    front = mid + 1;
                else
                    {
                        mid = comp(res, mid);
     f56:	9e 01       	movw	r18, r28
     f58:	b3 01       	movw	r22, r6
     f5a:	a2 01       	movw	r20, r4
     f5c:	c5 01       	movw	r24, r10
     f5e:	33 df       	rcall	.-410    	; 0xdc6 <_ZN22DFRobotHighTemperature4compEfi>
                        return mid;
     f60:	43 c0       	rjmp	.+134    	; 0xfe8 <_ZN22DFRobotHighTemperature15readTemperatureEj+0x168>
                    }
            if (pgm_read_float(&PT100Tab[mid]) > res)
     f62:	f8 01       	movw	r30, r16
     f64:	25 91       	lpm	r18, Z+
     f66:	35 91       	lpm	r19, Z+
     f68:	45 91       	lpm	r20, Z+
     f6a:	54 91       	lpm	r21, Z
     f6c:	c3 01       	movw	r24, r6
     f6e:	b2 01       	movw	r22, r4
     f70:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <__cmpsf2>
     f74:	88 23       	and	r24, r24
     f76:	dc f4       	brge	.+54     	; 0xfae <_ZN22DFRobotHighTemperature15readTemperatureEj+0x12e>
                if (pgm_read_float(&PT100Tab[mid - 1]) > res)
     f78:	6e 01       	movw	r12, r28
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	c8 1a       	sub	r12, r24
     f7e:	d1 08       	sbc	r13, r1
     f80:	f6 01       	movw	r30, r12
     f82:	ee 0f       	add	r30, r30
     f84:	ff 1f       	adc	r31, r31
     f86:	ee 0f       	add	r30, r30
     f88:	ff 1f       	adc	r31, r31
     f8a:	e4 57       	subi	r30, 0x74	; 116
     f8c:	ff 4f       	sbci	r31, 0xFF	; 255
     f8e:	25 91       	lpm	r18, Z+
     f90:	35 91       	lpm	r19, Z+
     f92:	45 91       	lpm	r20, Z+
     f94:	54 91       	lpm	r21, Z
     f96:	c3 01       	movw	r24, r6
     f98:	b2 01       	movw	r22, r4
     f9a:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <__cmpsf2>
     f9e:	88 23       	and	r24, r24
     fa0:	34 f0       	brlt	.+12     	; 0xfae <_ZN22DFRobotHighTemperature15readTemperatureEj+0x12e>
                    end = mid - 1;
                else
                    {
                        mid = comp(res, mid - 1);
     fa2:	96 01       	movw	r18, r12
     fa4:	b3 01       	movw	r22, r6
     fa6:	a2 01       	movw	r20, r4
     fa8:	c5 01       	movw	r24, r10
     faa:	0d df       	rcall	.-486    	; 0xdc6 <_ZN22DFRobotHighTemperature4compEfi>
                        return mid;
     fac:	1d c0       	rjmp	.+58     	; 0xfe8 <_ZN22DFRobotHighTemperature15readTemperatureEj+0x168>
                    }
            mid = front + (end - front) / 2;
     fae:	c6 01       	movw	r24, r12
     fb0:	8e 19       	sub	r24, r14
     fb2:	9f 09       	sbc	r25, r15
     fb4:	ec 01       	movw	r28, r24
     fb6:	0a f4       	brpl	.+2      	; 0xfba <_ZN22DFRobotHighTemperature15readTemperatureEj+0x13a>
     fb8:	21 96       	adiw	r28, 0x01	; 1
     fba:	d5 95       	asr	r29
     fbc:	c7 95       	ror	r28
     fbe:	ce 0d       	add	r28, r14
     fc0:	df 1d       	adc	r29, r15
	//searched by the halving method
    int front = 0, end = 0, mid = 0;
    front = 0;
    end = 399;
    mid = (front + end) / 2;
    while (front < end && pgm_read_float(&PT100Tab[mid]) != res)  
     fc2:	ec 14       	cp	r14, r12
     fc4:	fd 04       	cpc	r15, r13
     fc6:	74 f4       	brge	.+28     	; 0xfe4 <_ZN22DFRobotHighTemperature15readTemperatureEj+0x164>
     fc8:	9e cf       	rjmp	.-196    	; 0xf06 <_ZN22DFRobotHighTemperature15readTemperatureEj+0x86>
        {
            if (pgm_read_float(&PT100Tab[mid]) < res)
     fca:	f8 01       	movw	r30, r16
     fcc:	25 91       	lpm	r18, Z+
     fce:	35 91       	lpm	r19, Z+
     fd0:	45 91       	lpm	r20, Z+
     fd2:	54 91       	lpm	r21, Z
     fd4:	c3 01       	movw	r24, r6
     fd6:	b2 01       	movw	r22, r4
     fd8:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <__gesf2>
     fdc:	18 16       	cp	r1, r24
     fde:	0c f4       	brge	.+2      	; 0xfe2 <_ZN22DFRobotHighTemperature15readTemperatureEj+0x162>
     fe0:	a5 cf       	rjmp	.-182    	; 0xf2c <_ZN22DFRobotHighTemperature15readTemperatureEj+0xac>
     fe2:	bf cf       	rjmp	.-130    	; 0xf62 <_ZN22DFRobotHighTemperature15readTemperatureEj+0xe2>
                if (pgm_read_float(&PT100Tab[mid - 1]) > res)
                    end = mid - 1;
                else
                    {
                        mid = comp(res, mid - 1);
                        return mid;
     fe4:	8c 2f       	mov	r24, r28
     fe6:	9d 2f       	mov	r25, r29
                    }
            mid = front + (end - front) / 2;
        }
    return mid;
}
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	1f 91       	pop	r17
     fee:	0f 91       	pop	r16
     ff0:	ff 90       	pop	r15
     ff2:	ef 90       	pop	r14
     ff4:	df 90       	pop	r13
     ff6:	cf 90       	pop	r12
     ff8:	bf 90       	pop	r11
     ffa:	af 90       	pop	r10
     ffc:	7f 90       	pop	r7
     ffe:	6f 90       	pop	r6
    1000:	5f 90       	pop	r5
    1002:	4f 90       	pop	r4
    1004:	08 95       	ret

00001006 <_ZN20DeviceDriveInterFace13Device_WritesEPKc>:
class DeviceDriveInterFace
{
	public:
	virtual void Device_Init() = 0;
	virtual char Device_Read() const{return 0;}
	virtual void Device_Writes(const char* data){}
    1006:	08 95       	ret

00001008 <_ZN20DeviceDriveInterFace12Device_WriteEc>:
	virtual void Device_Write(char data){}
    1008:	08 95       	ret

0000100a <_ZN20DeviceDriveInterFace11Stop_DeviceEv>:
	virtual void Stop_Device(void){}
    100a:	08 95       	ret

0000100c <_ZN3Adc11Device_InitEv>:
{
	return channel_inf;
}
void Adc::Read_Set()
{
	read_flag = 0;
    100c:	80 e4       	ldi	r24, 0x40	; 64
    100e:	87 b9       	out	0x07, r24	; 7
    1010:	87 e8       	ldi	r24, 0x87	; 135
    1012:	86 b9       	out	0x06, r24	; 6
    1014:	08 95       	ret

00001016 <_ZN3Adc12Start_DeviceEh>:
    1016:	36 99       	sbic	0x06, 6	; 6
    1018:	fe cf       	rjmp	.-4      	; 0x1016 <_ZN3Adc12Start_DeviceEh>
    101a:	87 b1       	in	r24, 0x07	; 7
    101c:	80 7e       	andi	r24, 0xE0	; 224
    101e:	68 2b       	or	r22, r24
    1020:	67 b9       	out	0x07, r22	; 7
    1022:	36 9a       	sbi	0x06, 6	; 6
    1024:	08 95       	ret

00001026 <_ZNK3Adc11Device_ReadEv>:
    1026:	fc 01       	movw	r30, r24
    1028:	82 81       	ldd	r24, Z+2	; 0x02
    102a:	08 95       	ret

0000102c <_ZN3AdcnwEj>:
}
void* Adc::operator new(size_t size)
{
	return malloc(size);
    102c:	0c 94 d6 1b 	jmp	0x37ac	; 0x37ac <pvPortMalloc>
}
    1030:	08 95       	ret

00001032 <Alarm_Init>:
	AlarmTable[Alarm].Time = 0;
	AlarmTable[Alarm].alarm_Handle = Handle;
}
void Alarm_Close(Alarm_t Alarm)
{
	AlarmTable[Alarm].alarm_Handle = NULL;
    1032:	8c e0       	ldi	r24, 0x0C	; 12
    1034:	83 bf       	out	0x33, r24	; 51
    1036:	8c e7       	ldi	r24, 0x7C	; 124
    1038:	81 bf       	out	0x31, r24	; 49
    103a:	87 b7       	in	r24, 0x37	; 55
    103c:	82 60       	ori	r24, 0x02	; 2
    103e:	87 bf       	out	0x37, r24	; 55
    1040:	08 95       	ret

00001042 <Alarm_Stop>:
    1042:	87 b7       	in	r24, 0x37	; 55
    1044:	8d 7f       	andi	r24, 0xFD	; 253
    1046:	87 bf       	out	0x37, r24	; 55
    1048:	08 95       	ret

0000104a <Alarm_Start>:
    104a:	87 b7       	in	r24, 0x37	; 55
    104c:	82 60       	ori	r24, 0x02	; 2
    104e:	87 bf       	out	0x37, r24	; 55
    1050:	08 95       	ret

00001052 <Alarm_Open>:
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	fc 01       	movw	r30, r24
    1056:	ee 0f       	add	r30, r30
    1058:	ff 1f       	adc	r31, r31
    105a:	df 01       	movw	r26, r30
    105c:	a8 0f       	add	r26, r24
    105e:	b9 1f       	adc	r27, r25
    1060:	aa 0f       	add	r26, r26
    1062:	bb 1f       	adc	r27, r27
    1064:	ae 5b       	subi	r26, 0xBE	; 190
    1066:	bd 4f       	sbci	r27, 0xFD	; 253
    1068:	11 96       	adiw	r26, 0x01	; 1
    106a:	7c 93       	st	X, r23
    106c:	6e 93       	st	-X, r22
    106e:	13 96       	adiw	r26, 0x03	; 3
    1070:	1c 92       	st	X, r1
    1072:	1e 92       	st	-X, r1
    1074:	12 97       	sbiw	r26, 0x02	; 2
    1076:	fd 01       	movw	r30, r26
    1078:	55 83       	std	Z+5, r21	; 0x05
    107a:	44 83       	std	Z+4, r20	; 0x04
    107c:	08 95       	ret

0000107e <__vector_15>:
}
/*5ms마다 호출됨 */
void TIMER0_COMP_vect(void)
{
    107e:	1f 92       	push	r1
    1080:	0f 92       	push	r0
    1082:	0f b6       	in	r0, 0x3f	; 63
    1084:	0f 92       	push	r0
    1086:	11 24       	eor	r1, r1
    1088:	0b b6       	in	r0, 0x3b	; 59
    108a:	0f 92       	push	r0
    108c:	ef 92       	push	r14
    108e:	ff 92       	push	r15
    1090:	0f 93       	push	r16
    1092:	1f 93       	push	r17
    1094:	2f 93       	push	r18
    1096:	3f 93       	push	r19
    1098:	4f 93       	push	r20
    109a:	5f 93       	push	r21
    109c:	6f 93       	push	r22
    109e:	7f 93       	push	r23
    10a0:	8f 93       	push	r24
    10a2:	9f 93       	push	r25
    10a4:	af 93       	push	r26
    10a6:	bf 93       	push	r27
    10a8:	cf 93       	push	r28
    10aa:	df 93       	push	r29
    10ac:	ef 93       	push	r30
    10ae:	ff 93       	push	r31
    10b0:	c2 e4       	ldi	r28, 0x42	; 66
    10b2:	d2 e0       	ldi	r29, 0x02	; 2
    10b4:	0f 2e       	mov	r0, r31
    10b6:	f0 e6       	ldi	r31, 0x60	; 96
    10b8:	ef 2e       	mov	r14, r31
    10ba:	f2 e0       	ldi	r31, 0x02	; 2
    10bc:	ff 2e       	mov	r15, r31
    10be:	f0 2d       	mov	r31, r0
	uint8_t i;
	for(i=0;i<ALARM_MAX;i++)
	{
		if(AlarmTable[i].alarm_Handle)
    10c0:	ec 81       	ldd	r30, Y+4	; 0x04
    10c2:	fd 81       	ldd	r31, Y+5	; 0x05
    10c4:	30 97       	sbiw	r30, 0x00	; 0
    10c6:	79 f0       	breq	.+30     	; 0x10e6 <__vector_15+0x68>
		{
			AlarmTable[i].Time++;
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	9b 81       	ldd	r25, Y+3	; 0x03
    10cc:	01 96       	adiw	r24, 0x01	; 1
    10ce:	9b 83       	std	Y+3, r25	; 0x03
    10d0:	8a 83       	std	Y+2, r24	; 0x02
			if(AlarmTable[i].Period == AlarmTable[i].Time)
    10d2:	28 81       	ld	r18, Y
    10d4:	39 81       	ldd	r19, Y+1	; 0x01
    10d6:	82 17       	cp	r24, r18
    10d8:	93 07       	cpc	r25, r19
    10da:	29 f4       	brne	.+10     	; 0x10e6 <__vector_15+0x68>
			{
				AlarmTable[i].Time = 0;
    10dc:	1b 82       	std	Y+3, r1	; 0x03
    10de:	1a 82       	std	Y+2, r1	; 0x02
				AlarmTable[i].alarm_Handle();
    10e0:	09 95       	icall
				AlarmTable[i].alarm_Handle = NULL;
    10e2:	1d 82       	std	Y+5, r1	; 0x05
    10e4:	1c 82       	std	Y+4, r1	; 0x04
    10e6:	26 96       	adiw	r28, 0x06	; 6
}
/*5ms마다 호출됨 */
void TIMER0_COMP_vect(void)
{
	uint8_t i;
	for(i=0;i<ALARM_MAX;i++)
    10e8:	ce 15       	cp	r28, r14
    10ea:	df 05       	cpc	r29, r15
    10ec:	49 f7       	brne	.-46     	; 0x10c0 <__vector_15+0x42>
				AlarmTable[i].alarm_Handle();
				AlarmTable[i].alarm_Handle = NULL;
			}
		}
	}
}
    10ee:	ff 91       	pop	r31
    10f0:	ef 91       	pop	r30
    10f2:	df 91       	pop	r29
    10f4:	cf 91       	pop	r28
    10f6:	bf 91       	pop	r27
    10f8:	af 91       	pop	r26
    10fa:	9f 91       	pop	r25
    10fc:	8f 91       	pop	r24
    10fe:	7f 91       	pop	r23
    1100:	6f 91       	pop	r22
    1102:	5f 91       	pop	r21
    1104:	4f 91       	pop	r20
    1106:	3f 91       	pop	r19
    1108:	2f 91       	pop	r18
    110a:	1f 91       	pop	r17
    110c:	0f 91       	pop	r16
    110e:	ff 90       	pop	r15
    1110:	ef 90       	pop	r14
    1112:	0f 90       	pop	r0
    1114:	0b be       	out	0x3b, r0	; 59
    1116:	0f 90       	pop	r0
    1118:	0f be       	out	0x3f, r0	; 63
    111a:	0f 90       	pop	r0
    111c:	1f 90       	pop	r1
    111e:	18 95       	reti

00001120 <_ZNK20DeviceDriveInterFace11Device_ReadEv>:

class DeviceDriveInterFace
{
	public:
	virtual void Device_Init() = 0;
	virtual char Device_Read() const{return 0;}
    1120:	80 e0       	ldi	r24, 0x00	; 0
    1122:	08 95       	ret

00001124 <_ZN20DeviceDriveInterFace12Start_DeviceEh>:
	virtual void Device_Writes(const char* data){}
	virtual void Device_Write(char data){}
	virtual void Stop_Device(void){}
	virtual void Start_Device(unsigned char){}
    1124:	08 95       	ret

00001126 <_ZN13Char_LCD2004A5delayEc>:
	if(addr < 8)
		this->Data_set(addr);
}
void Char_LCD2004A::operator delete(void* ptr)
{
	free(ptr);
    1126:	66 23       	and	r22, r22
    1128:	51 f0       	breq	.+20     	; 0x113e <_ZN13Char_LCD2004A5delayEc+0x18>
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	ef ea       	ldi	r30, 0xAF	; 175
    112e:	f4 e0       	ldi	r31, 0x04	; 4
    1130:	31 97       	sbiw	r30, 0x01	; 1
    1132:	f1 f7       	brne	.-4      	; 0x1130 <_ZN13Char_LCD2004A5delayEc+0xa>
    1134:	00 c0       	rjmp	.+0      	; 0x1136 <_ZN13Char_LCD2004A5delayEc+0x10>
    1136:	00 00       	nop
    1138:	8f 5f       	subi	r24, 0xFF	; 255
    113a:	68 13       	cpse	r22, r24
    113c:	f7 cf       	rjmp	.-18     	; 0x112c <_ZN13Char_LCD2004A5delayEc+0x6>
    113e:	08 95       	ret

00001140 <_ZN13Char_LCD2004A11Command_SetEc>:
    1140:	0f 93       	push	r16
    1142:	1f 93       	push	r17
    1144:	cf 93       	push	r28
    1146:	8c 01       	movw	r16, r24
    1148:	c6 2f       	mov	r28, r22
    114a:	d8 98       	cbi	0x1b, 0	; 27
    114c:	86 2f       	mov	r24, r22
    114e:	80 7f       	andi	r24, 0xF0	; 240
    1150:	8b bb       	out	0x1b, r24	; 27
    1152:	d9 9a       	sbi	0x1b, 1	; 27
    1154:	61 e0       	ldi	r22, 0x01	; 1
    1156:	c8 01       	movw	r24, r16
    1158:	e6 df       	rcall	.-52     	; 0x1126 <_ZN13Char_LCD2004A5delayEc>
    115a:	d9 98       	cbi	0x1b, 1	; 27
    115c:	c2 95       	swap	r28
    115e:	c0 7f       	andi	r28, 0xF0	; 240
    1160:	cb bb       	out	0x1b, r28	; 27
    1162:	d9 9a       	sbi	0x1b, 1	; 27
    1164:	61 e0       	ldi	r22, 0x01	; 1
    1166:	c8 01       	movw	r24, r16
    1168:	de df       	rcall	.-68     	; 0x1126 <_ZN13Char_LCD2004A5delayEc>
    116a:	d9 98       	cbi	0x1b, 1	; 27
    116c:	cf 91       	pop	r28
    116e:	1f 91       	pop	r17
    1170:	0f 91       	pop	r16
    1172:	08 95       	ret

00001174 <_ZN13Char_LCD2004A8Data_setEc>:
    1174:	0f 93       	push	r16
    1176:	1f 93       	push	r17
    1178:	cf 93       	push	r28
    117a:	8c 01       	movw	r16, r24
    117c:	c6 2f       	mov	r28, r22
    117e:	d8 9a       	sbi	0x1b, 0	; 27
    1180:	86 2f       	mov	r24, r22
    1182:	80 7f       	andi	r24, 0xF0	; 240
    1184:	81 60       	ori	r24, 0x01	; 1
    1186:	8b bb       	out	0x1b, r24	; 27
    1188:	d9 9a       	sbi	0x1b, 1	; 27
    118a:	61 e0       	ldi	r22, 0x01	; 1
    118c:	c8 01       	movw	r24, r16
    118e:	cb df       	rcall	.-106    	; 0x1126 <_ZN13Char_LCD2004A5delayEc>
    1190:	d9 98       	cbi	0x1b, 1	; 27
    1192:	80 e1       	ldi	r24, 0x10	; 16
    1194:	c8 9f       	mul	r28, r24
    1196:	b0 01       	movw	r22, r0
    1198:	11 24       	eor	r1, r1
    119a:	61 60       	ori	r22, 0x01	; 1
    119c:	6b bb       	out	0x1b, r22	; 27
    119e:	d9 9a       	sbi	0x1b, 1	; 27
    11a0:	61 e0       	ldi	r22, 0x01	; 1
    11a2:	c8 01       	movw	r24, r16
    11a4:	c0 df       	rcall	.-128    	; 0x1126 <_ZN13Char_LCD2004A5delayEc>
    11a6:	d9 98       	cbi	0x1b, 1	; 27
    11a8:	cf 91       	pop	r28
    11aa:	1f 91       	pop	r17
    11ac:	0f 91       	pop	r16
    11ae:	08 95       	ret

000011b0 <_ZN13Char_LCD2004A13Device_WritesEPKc>:
    11b0:	0f 93       	push	r16
    11b2:	1f 93       	push	r17
    11b4:	cf 93       	push	r28
    11b6:	df 93       	push	r29
    11b8:	eb 01       	movw	r28, r22
    11ba:	68 81       	ld	r22, Y
    11bc:	66 23       	and	r22, r22
    11be:	39 f0       	breq	.+14     	; 0x11ce <_ZN13Char_LCD2004A13Device_WritesEPKc+0x1e>
    11c0:	8c 01       	movw	r16, r24
    11c2:	21 96       	adiw	r28, 0x01	; 1
    11c4:	c8 01       	movw	r24, r16
    11c6:	d6 df       	rcall	.-84     	; 0x1174 <_ZN13Char_LCD2004A8Data_setEc>
    11c8:	69 91       	ld	r22, Y+
    11ca:	61 11       	cpse	r22, r1
    11cc:	fb cf       	rjmp	.-10     	; 0x11c4 <_ZN13Char_LCD2004A13Device_WritesEPKc+0x14>
    11ce:	df 91       	pop	r29
    11d0:	cf 91       	pop	r28
    11d2:	1f 91       	pop	r17
    11d4:	0f 91       	pop	r16
    11d6:	08 95       	ret

000011d8 <_ZN13Char_LCD2004A9Clear_LcdEv>:
    11d8:	cf 93       	push	r28
    11da:	df 93       	push	r29
    11dc:	ec 01       	movw	r28, r24
    11de:	61 e0       	ldi	r22, 0x01	; 1
    11e0:	af df       	rcall	.-162    	; 0x1140 <_ZN13Char_LCD2004A11Command_SetEc>
    11e2:	63 e0       	ldi	r22, 0x03	; 3
    11e4:	ce 01       	movw	r24, r28
    11e6:	9f df       	rcall	.-194    	; 0x1126 <_ZN13Char_LCD2004A5delayEc>
    11e8:	df 91       	pop	r29
    11ea:	cf 91       	pop	r28
    11ec:	08 95       	ret

000011ee <_ZN13Char_LCD2004A11Device_InitEv>:
    11ee:	cf 93       	push	r28
    11f0:	df 93       	push	r29
    11f2:	ec 01       	movw	r28, r24
    11f4:	8f ef       	ldi	r24, 0xFF	; 255
    11f6:	8b bb       	out	0x1b, r24	; 27
    11f8:	68 e2       	ldi	r22, 0x28	; 40
    11fa:	ce 01       	movw	r24, r28
    11fc:	a1 df       	rcall	.-190    	; 0x1140 <_ZN13Char_LCD2004A11Command_SetEc>
    11fe:	66 e0       	ldi	r22, 0x06	; 6
    1200:	ce 01       	movw	r24, r28
    1202:	9e df       	rcall	.-196    	; 0x1140 <_ZN13Char_LCD2004A11Command_SetEc>
    1204:	6c e0       	ldi	r22, 0x0C	; 12
    1206:	ce 01       	movw	r24, r28
    1208:	9b df       	rcall	.-202    	; 0x1140 <_ZN13Char_LCD2004A11Command_SetEc>
    120a:	ce 01       	movw	r24, r28
    120c:	e5 df       	rcall	.-54     	; 0x11d8 <_ZN13Char_LCD2004A9Clear_LcdEv>
    120e:	df 91       	pop	r29
    1210:	cf 91       	pop	r28
    1212:	08 95       	ret

00001214 <_ZN13Char_LCD2004AC1Ev>:
    1214:	2b e5       	ldi	r18, 0x5B	; 91
    1216:	31 e0       	ldi	r19, 0x01	; 1
    1218:	fc 01       	movw	r30, r24
    121a:	31 83       	std	Z+1, r19	; 0x01
    121c:	20 83       	st	Z, r18
    121e:	2f ef       	ldi	r18, 0xFF	; 255
    1220:	2a bb       	out	0x1a, r18	; 26
    1222:	e5 cf       	rjmp	.-54     	; 0x11ee <_ZN13Char_LCD2004A11Device_InitEv>
    1224:	08 95       	ret

00001226 <_ZN13Char_LCD2004A10Cursor_SetEcc>:
    1226:	41 30       	cpi	r20, 0x01	; 1
    1228:	41 f0       	breq	.+16     	; 0x123a <_ZN13Char_LCD2004A10Cursor_SetEcc+0x14>
    122a:	28 f0       	brcs	.+10     	; 0x1236 <_ZN13Char_LCD2004A10Cursor_SetEcc+0x10>
    122c:	42 30       	cpi	r20, 0x02	; 2
    122e:	39 f0       	breq	.+14     	; 0x123e <_ZN13Char_LCD2004A10Cursor_SetEcc+0x18>
    1230:	43 30       	cpi	r20, 0x03	; 3
    1232:	39 f0       	breq	.+14     	; 0x1242 <_ZN13Char_LCD2004A10Cursor_SetEcc+0x1c>
    1234:	07 c0       	rjmp	.+14     	; 0x1244 <_ZN13Char_LCD2004A10Cursor_SetEcc+0x1e>
    1236:	40 e8       	ldi	r20, 0x80	; 128
    1238:	05 c0       	rjmp	.+10     	; 0x1244 <_ZN13Char_LCD2004A10Cursor_SetEcc+0x1e>
    123a:	40 ec       	ldi	r20, 0xC0	; 192
    123c:	03 c0       	rjmp	.+6      	; 0x1244 <_ZN13Char_LCD2004A10Cursor_SetEcc+0x1e>
    123e:	44 e9       	ldi	r20, 0x94	; 148
    1240:	01 c0       	rjmp	.+2      	; 0x1244 <_ZN13Char_LCD2004A10Cursor_SetEcc+0x1e>
    1242:	44 ed       	ldi	r20, 0xD4	; 212
    1244:	64 0f       	add	r22, r20
    1246:	7c cf       	rjmp	.-264    	; 0x1140 <_ZN13Char_LCD2004A11Command_SetEc>
    1248:	08 95       	ret

0000124a <_ZN13Char_LCD2004A16Set_Cursor_PrintEccPKc>:
    124a:	0f 93       	push	r16
    124c:	1f 93       	push	r17
    124e:	cf 93       	push	r28
    1250:	df 93       	push	r29
    1252:	8c 01       	movw	r16, r24
    1254:	e9 01       	movw	r28, r18
    1256:	e7 df       	rcall	.-50     	; 0x1226 <_ZN13Char_LCD2004A10Cursor_SetEcc>
    1258:	68 81       	ld	r22, Y
    125a:	66 23       	and	r22, r22
    125c:	31 f0       	breq	.+12     	; 0x126a <_ZN13Char_LCD2004A16Set_Cursor_PrintEccPKc+0x20>
    125e:	21 96       	adiw	r28, 0x01	; 1
    1260:	c8 01       	movw	r24, r16
    1262:	88 df       	rcall	.-240    	; 0x1174 <_ZN13Char_LCD2004A8Data_setEc>
    1264:	69 91       	ld	r22, Y+
    1266:	61 11       	cpse	r22, r1
    1268:	fb cf       	rjmp	.-10     	; 0x1260 <_ZN13Char_LCD2004A16Set_Cursor_PrintEccPKc+0x16>
    126a:	df 91       	pop	r29
    126c:	cf 91       	pop	r28
    126e:	1f 91       	pop	r17
    1270:	0f 91       	pop	r16
    1272:	08 95       	ret

00001274 <_ZN13Char_LCD2004A9Lcd_PrintEPKc>:
    1274:	0f 93       	push	r16
    1276:	1f 93       	push	r17
    1278:	cf 93       	push	r28
    127a:	df 93       	push	r29
    127c:	eb 01       	movw	r28, r22
    127e:	68 81       	ld	r22, Y
    1280:	66 23       	and	r22, r22
    1282:	39 f0       	breq	.+14     	; 0x1292 <_ZN13Char_LCD2004A9Lcd_PrintEPKc+0x1e>
    1284:	8c 01       	movw	r16, r24
    1286:	21 96       	adiw	r28, 0x01	; 1
    1288:	c8 01       	movw	r24, r16
    128a:	74 df       	rcall	.-280    	; 0x1174 <_ZN13Char_LCD2004A8Data_setEc>
    128c:	69 91       	ld	r22, Y+
    128e:	61 11       	cpse	r22, r1
    1290:	fb cf       	rjmp	.-10     	; 0x1288 <_ZN13Char_LCD2004A9Lcd_PrintEPKc+0x14>
    1292:	df 91       	pop	r29
    1294:	cf 91       	pop	r28
    1296:	1f 91       	pop	r17
    1298:	0f 91       	pop	r16
    129a:	08 95       	ret

0000129c <_ZN13Char_LCD2004A11Cursor_HomeEv>:
    129c:	cf 93       	push	r28
    129e:	df 93       	push	r29
    12a0:	ec 01       	movw	r28, r24
    12a2:	62 e0       	ldi	r22, 0x02	; 2
    12a4:	4d df       	rcall	.-358    	; 0x1140 <_ZN13Char_LCD2004A11Command_SetEc>
    12a6:	63 e0       	ldi	r22, 0x03	; 3
    12a8:	ce 01       	movw	r24, r28
    12aa:	3d df       	rcall	.-390    	; 0x1126 <_ZN13Char_LCD2004A5delayEc>
    12ac:	df 91       	pop	r29
    12ae:	cf 91       	pop	r28
    12b0:	08 95       	ret

000012b2 <_ZN13Char_LCD2004A13Register_FontEcPKh>:
    12b2:	ef 92       	push	r14
    12b4:	ff 92       	push	r15
    12b6:	0f 93       	push	r16
    12b8:	1f 93       	push	r17
    12ba:	cf 93       	push	r28
    12bc:	df 93       	push	r29
    12be:	7c 01       	movw	r14, r24
    12c0:	8a 01       	movw	r16, r20
    12c2:	61 11       	cpse	r22, r1
    12c4:	03 c0       	rjmp	.+6      	; 0x12cc <_ZN13Char_LCD2004A13Register_FontEcPKh+0x1a>
    12c6:	60 e4       	ldi	r22, 0x40	; 64
    12c8:	3b df       	rcall	.-394    	; 0x1140 <_ZN13Char_LCD2004A11Command_SetEc>
    12ca:	09 c0       	rjmp	.+18     	; 0x12de <_ZN13Char_LCD2004A13Register_FontEcPKh+0x2c>
    12cc:	c6 2f       	mov	r28, r22
    12ce:	cc 0f       	add	r28, r28
    12d0:	cc 0f       	add	r28, r28
    12d2:	cc 0f       	add	r28, r28
    12d4:	60 e4       	ldi	r22, 0x40	; 64
    12d6:	6c 0f       	add	r22, r28
    12d8:	33 df       	rcall	.-410    	; 0x1140 <_ZN13Char_LCD2004A11Command_SetEc>
    12da:	c1 34       	cpi	r28, 0x41	; 65
    12dc:	48 f4       	brcc	.+18     	; 0x12f0 <_ZN13Char_LCD2004A13Register_FontEcPKh+0x3e>
    12de:	e8 01       	movw	r28, r16
    12e0:	08 5f       	subi	r16, 0xF8	; 248
    12e2:	1f 4f       	sbci	r17, 0xFF	; 255
    12e4:	69 91       	ld	r22, Y+
    12e6:	c7 01       	movw	r24, r14
    12e8:	45 df       	rcall	.-374    	; 0x1174 <_ZN13Char_LCD2004A8Data_setEc>
    12ea:	c0 17       	cp	r28, r16
    12ec:	d1 07       	cpc	r29, r17
    12ee:	d1 f7       	brne	.-12     	; 0x12e4 <_ZN13Char_LCD2004A13Register_FontEcPKh+0x32>
    12f0:	df 91       	pop	r29
    12f2:	cf 91       	pop	r28
    12f4:	1f 91       	pop	r17
    12f6:	0f 91       	pop	r16
    12f8:	ff 90       	pop	r15
    12fa:	ef 90       	pop	r14
    12fc:	08 95       	ret

000012fe <_ZN13Char_LCD2004A10Font_PrintEc>:
    12fe:	68 30       	cpi	r22, 0x08	; 8
    1300:	08 f4       	brcc	.+2      	; 0x1304 <_ZN13Char_LCD2004A10Font_PrintEc+0x6>
    1302:	38 cf       	rjmp	.-400    	; 0x1174 <_ZN13Char_LCD2004A8Data_setEc>
    1304:	08 95       	ret

00001306 <_ZN13Char_LCD2004AnwEj>:
}
void* Char_LCD2004A::operator new(size_t size)
{
	return malloc(size);
    1306:	0c 94 d6 1b 	jmp	0x37ac	; 0x37ac <pvPortMalloc>
}
    130a:	08 95       	ret

0000130c <_ZN12Count_Sensor11Device_InitEv>:
#define cbi(PORTX, BitX) PORTX &= ~(1 << BitX)
void Count_Sensor::Device_Init()
{
	//cbi(DDRD,0); //PORTD 0PIN INPUT
	//sbi(PORTD,0); //USE PULL UP
	DDRD = 0x00;
    130c:	11 ba       	out	0x11, r1	; 17
	PORTD = 0xFF;
    130e:	8f ef       	ldi	r24, 0xFF	; 255
    1310:	82 bb       	out	0x12, r24	; 18
	sbi(EICRA,1);
    1312:	ea e6       	ldi	r30, 0x6A	; 106
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	82 60       	ori	r24, 0x02	; 2
    131a:	80 83       	st	Z, r24
	cbi(EICRA,0);  // ISC10 = 1 ISC00 = 0;
    131c:	80 81       	ld	r24, Z
    131e:	8e 7f       	andi	r24, 0xFE	; 254
    1320:	80 83       	st	Z, r24
	sbi(EIMSK,0);  // 0Pin interrupt Enable;
    1322:	89 b7       	in	r24, 0x39	; 57
    1324:	81 60       	ori	r24, 0x01	; 1
    1326:	89 bf       	out	0x39, r24	; 57
    1328:	08 95       	ret

0000132a <_ZN12Count_SensornwEj>:
}
void* Count_Sensor::operator new(size_t size)
{
	return malloc(size);
    132a:	0c 94 d6 1b 	jmp	0x37ac	; 0x37ac <pvPortMalloc>
}
    132e:	08 95       	ret

00001330 <_ZN11Dev_ManagerC1Ev>:
}
void Dev_Manager::Close_Handle(Dev_type Device)
{
	if(interface[Device])
	{
		isr_handle[Device] = nullptr;
    1330:	2a e0       	ldi	r18, 0x0A	; 10
    1332:	dc 01       	movw	r26, r24
    1334:	e2 2f       	mov	r30, r18
    1336:	1d 92       	st	X+, r1
    1338:	ea 95       	dec	r30
    133a:	e9 f7       	brne	.-6      	; 0x1336 <_ZN11Dev_ManagerC1Ev+0x6>
    133c:	fc 01       	movw	r30, r24
    133e:	3a 96       	adiw	r30, 0x0a	; 10
    1340:	df 01       	movw	r26, r30
    1342:	1d 92       	st	X+, r1
    1344:	2a 95       	dec	r18
    1346:	e9 f7       	brne	.-6      	; 0x1342 <_ZN11Dev_ManagerC1Ev+0x12>
    1348:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <_ZN11Dev_Manager4instE+0x1>
    134c:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <_ZN11Dev_Manager4instE>
    1350:	08 95       	ret

00001352 <_ZN11Dev_Manager11getInstanceEv>:
    1352:	cf 93       	push	r28
    1354:	df 93       	push	r29
    1356:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <_ZN11Dev_Manager4instE>
    135a:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <_ZN11Dev_Manager4instE+0x1>
    135e:	89 2b       	or	r24, r25
    1360:	51 f4       	brne	.+20     	; 0x1376 <_ZN11Dev_Manager11getInstanceEv+0x24>
    1362:	84 e1       	ldi	r24, 0x14	; 20
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <pvPortMalloc>
    136a:	ec 01       	movw	r28, r24
    136c:	e1 df       	rcall	.-62     	; 0x1330 <_ZN11Dev_ManagerC1Ev>
    136e:	d0 93 61 02 	sts	0x0261, r29	; 0x800261 <_ZN11Dev_Manager4instE+0x1>
    1372:	c0 93 60 02 	sts	0x0260, r28	; 0x800260 <_ZN11Dev_Manager4instE>
    1376:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <_ZN11Dev_Manager4instE>
    137a:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <_ZN11Dev_Manager4instE+0x1>
    137e:	df 91       	pop	r29
    1380:	cf 91       	pop	r28
    1382:	08 95       	ret

00001384 <_ZN11Dev_Manager12Register_DevEP20DeviceDriveInterFace8Dev_type>:
    1384:	50 e0       	ldi	r21, 0x00	; 0
    1386:	44 0f       	add	r20, r20
    1388:	55 1f       	adc	r21, r21
    138a:	84 0f       	add	r24, r20
    138c:	95 1f       	adc	r25, r21
    138e:	fc 01       	movw	r30, r24
    1390:	71 83       	std	Z+1, r23	; 0x01
    1392:	60 83       	st	Z, r22
    1394:	08 95       	ret

00001396 <_ZN11Dev_ManagernwEj>:
    1396:	0c 94 d6 1b 	jmp	0x37ac	; 0x37ac <pvPortMalloc>
    139a:	08 95       	ret

0000139c <_ZN11Dev_Manager5WriteE8Dev_typec>:
    139c:	26 2f       	mov	r18, r22
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	22 0f       	add	r18, r18
    13a2:	33 1f       	adc	r19, r19
    13a4:	82 0f       	add	r24, r18
    13a6:	93 1f       	adc	r25, r19
    13a8:	dc 01       	movw	r26, r24
    13aa:	8d 91       	ld	r24, X+
    13ac:	9c 91       	ld	r25, X
    13ae:	00 97       	sbiw	r24, 0x00	; 0
    13b0:	41 f0       	breq	.+16     	; 0x13c2 <_ZN11Dev_Manager5WriteE8Dev_typec+0x26>
    13b2:	64 2f       	mov	r22, r20
    13b4:	dc 01       	movw	r26, r24
    13b6:	ed 91       	ld	r30, X+
    13b8:	fc 91       	ld	r31, X
    13ba:	06 80       	ldd	r0, Z+6	; 0x06
    13bc:	f7 81       	ldd	r31, Z+7	; 0x07
    13be:	e0 2d       	mov	r30, r0
    13c0:	09 95       	icall
    13c2:	08 95       	ret

000013c4 <_ZN11Dev_Manager6WritesE8Dev_typePKc>:
    13c4:	26 2f       	mov	r18, r22
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	22 0f       	add	r18, r18
    13ca:	33 1f       	adc	r19, r19
    13cc:	82 0f       	add	r24, r18
    13ce:	93 1f       	adc	r25, r19
    13d0:	dc 01       	movw	r26, r24
    13d2:	8d 91       	ld	r24, X+
    13d4:	9c 91       	ld	r25, X
    13d6:	00 97       	sbiw	r24, 0x00	; 0
    13d8:	41 f0       	breq	.+16     	; 0x13ea <_ZN11Dev_Manager6WritesE8Dev_typePKc+0x26>
    13da:	ba 01       	movw	r22, r20
    13dc:	dc 01       	movw	r26, r24
    13de:	ed 91       	ld	r30, X+
    13e0:	fc 91       	ld	r31, X
    13e2:	04 80       	ldd	r0, Z+4	; 0x04
    13e4:	f5 81       	ldd	r31, Z+5	; 0x05
    13e6:	e0 2d       	mov	r30, r0
    13e8:	09 95       	icall
    13ea:	08 95       	ret

000013ec <_ZN11Dev_Manager11Device_InitE8Dev_type>:
    13ec:	70 e0       	ldi	r23, 0x00	; 0
    13ee:	66 0f       	add	r22, r22
    13f0:	77 1f       	adc	r23, r23
    13f2:	86 0f       	add	r24, r22
    13f4:	97 1f       	adc	r25, r23
    13f6:	dc 01       	movw	r26, r24
    13f8:	8d 91       	ld	r24, X+
    13fa:	9c 91       	ld	r25, X
    13fc:	00 97       	sbiw	r24, 0x00	; 0
    13fe:	39 f0       	breq	.+14     	; 0x140e <_ZN11Dev_Manager11Device_InitE8Dev_type+0x22>
    1400:	dc 01       	movw	r26, r24
    1402:	ed 91       	ld	r30, X+
    1404:	fc 91       	ld	r31, X
    1406:	01 90       	ld	r0, Z+
    1408:	f0 81       	ld	r31, Z
    140a:	e0 2d       	mov	r30, r0
    140c:	09 95       	icall
    140e:	08 95       	ret

00001410 <_ZN11Dev_Manager11Open_HandleE8Dev_typePFvS0_jE>:
    1410:	e6 2f       	mov	r30, r22
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	ee 0f       	add	r30, r30
    1416:	ff 1f       	adc	r31, r31
    1418:	e8 0f       	add	r30, r24
    141a:	f9 1f       	adc	r31, r25
    141c:	80 81       	ld	r24, Z
    141e:	91 81       	ldd	r25, Z+1	; 0x01
    1420:	89 2b       	or	r24, r25
    1422:	11 f0       	breq	.+4      	; 0x1428 <_ZN11Dev_Manager11Open_HandleE8Dev_typePFvS0_jE+0x18>
    1424:	53 87       	std	Z+11, r21	; 0x0b
    1426:	42 87       	std	Z+10, r20	; 0x0a
    1428:	08 95       	ret

0000142a <_ZN11Dev_Manager12Driver_CheckE8Dev_type>:
    142a:	70 e0       	ldi	r23, 0x00	; 0
    142c:	66 0f       	add	r22, r22
    142e:	77 1f       	adc	r23, r23
    1430:	fc 01       	movw	r30, r24
    1432:	e6 0f       	add	r30, r22
    1434:	f7 1f       	adc	r31, r23
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	20 81       	ld	r18, Z
    143a:	31 81       	ldd	r19, Z+1	; 0x01
    143c:	23 2b       	or	r18, r19
    143e:	09 f4       	brne	.+2      	; 0x1442 <_ZN11Dev_Manager12Driver_CheckE8Dev_type+0x18>
    1440:	80 e0       	ldi	r24, 0x00	; 0
    1442:	08 95       	ret

00001444 <_ZNK11Dev_Manager16getInterfaceAddrE8Dev_type>:
	}
}
DeviceDriveInterFace* const Dev_Manager::getInterfaceAddr(Dev_type Device) const
{
	if(interface[Device])
    1444:	70 e0       	ldi	r23, 0x00	; 0
    1446:	66 0f       	add	r22, r22
    1448:	77 1f       	adc	r23, r23
    144a:	86 0f       	add	r24, r22
    144c:	97 1f       	adc	r25, r23
	{
		return interface[Device];
	}
	else
		return nullptr;
}
    144e:	fc 01       	movw	r30, r24
    1450:	80 81       	ld	r24, Z
    1452:	91 81       	ldd	r25, Z+1	; 0x01
    1454:	08 95       	ret

00001456 <__vector_18>:
ISR(USART0_RX_vect)
{
    1456:	1f 92       	push	r1
    1458:	0f 92       	push	r0
    145a:	0f b6       	in	r0, 0x3f	; 63
    145c:	0f 92       	push	r0
    145e:	11 24       	eor	r1, r1
    1460:	0b b6       	in	r0, 0x3b	; 59
    1462:	0f 92       	push	r0
    1464:	2f 93       	push	r18
    1466:	3f 93       	push	r19
    1468:	4f 93       	push	r20
    146a:	5f 93       	push	r21
    146c:	6f 93       	push	r22
    146e:	7f 93       	push	r23
    1470:	8f 93       	push	r24
    1472:	9f 93       	push	r25
    1474:	af 93       	push	r26
    1476:	bf 93       	push	r27
    1478:	ef 93       	push	r30
	Dev_Manager::getInstance()->isr_handle[UART0](UART0,UDR0);
    147a:	ff 93       	push	r31
    147c:	6a df       	rcall	.-300    	; 0x1352 <_ZN11Dev_Manager11getInstanceEv>
    147e:	6c b1       	in	r22, 0x0c	; 12
    1480:	70 e0       	ldi	r23, 0x00	; 0
    1482:	dc 01       	movw	r26, r24
    1484:	1a 96       	adiw	r26, 0x0a	; 10
    1486:	ed 91       	ld	r30, X+
    1488:	fc 91       	ld	r31, X
    148a:	1b 97       	sbiw	r26, 0x0b	; 11
    148c:	80 e0       	ldi	r24, 0x00	; 0
}
    148e:	09 95       	icall
    1490:	ff 91       	pop	r31
    1492:	ef 91       	pop	r30
    1494:	bf 91       	pop	r27
    1496:	af 91       	pop	r26
    1498:	9f 91       	pop	r25
    149a:	8f 91       	pop	r24
    149c:	7f 91       	pop	r23
    149e:	6f 91       	pop	r22
    14a0:	5f 91       	pop	r21
    14a2:	4f 91       	pop	r20
    14a4:	3f 91       	pop	r19
    14a6:	2f 91       	pop	r18
    14a8:	0f 90       	pop	r0
    14aa:	0b be       	out	0x3b, r0	; 59
    14ac:	0f 90       	pop	r0
    14ae:	0f be       	out	0x3f, r0	; 63
    14b0:	0f 90       	pop	r0
    14b2:	1f 90       	pop	r1
    14b4:	18 95       	reti

000014b6 <__vector_30>:
ISR(USART1_RX_vect)
{
    14b6:	1f 92       	push	r1
    14b8:	0f 92       	push	r0
    14ba:	0f b6       	in	r0, 0x3f	; 63
    14bc:	0f 92       	push	r0
    14be:	11 24       	eor	r1, r1
    14c0:	0b b6       	in	r0, 0x3b	; 59
    14c2:	0f 92       	push	r0
    14c4:	2f 93       	push	r18
    14c6:	3f 93       	push	r19
    14c8:	4f 93       	push	r20
    14ca:	5f 93       	push	r21
    14cc:	6f 93       	push	r22
    14ce:	7f 93       	push	r23
    14d0:	8f 93       	push	r24
    14d2:	9f 93       	push	r25
    14d4:	af 93       	push	r26
    14d6:	bf 93       	push	r27
    14d8:	ef 93       	push	r30
	Dev_Manager::getInstance()->isr_handle[RS485](RS485,UDR1);
    14da:	ff 93       	push	r31
    14dc:	3a df       	rcall	.-396    	; 0x1352 <_ZN11Dev_Manager11getInstanceEv>
    14de:	60 91 9c 00 	lds	r22, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    14e2:	70 e0       	ldi	r23, 0x00	; 0
    14e4:	dc 01       	movw	r26, r24
    14e6:	1c 96       	adiw	r26, 0x0c	; 12
    14e8:	ed 91       	ld	r30, X+
    14ea:	fc 91       	ld	r31, X
    14ec:	1d 97       	sbiw	r26, 0x0d	; 13
    14ee:	81 e0       	ldi	r24, 0x01	; 1
}
    14f0:	09 95       	icall
    14f2:	ff 91       	pop	r31
    14f4:	ef 91       	pop	r30
    14f6:	bf 91       	pop	r27
    14f8:	af 91       	pop	r26
    14fa:	9f 91       	pop	r25
    14fc:	8f 91       	pop	r24
    14fe:	7f 91       	pop	r23
    1500:	6f 91       	pop	r22
    1502:	5f 91       	pop	r21
    1504:	4f 91       	pop	r20
    1506:	3f 91       	pop	r19
    1508:	2f 91       	pop	r18
    150a:	0f 90       	pop	r0
    150c:	0b be       	out	0x3b, r0	; 59
    150e:	0f 90       	pop	r0
    1510:	0f be       	out	0x3f, r0	; 63
    1512:	0f 90       	pop	r0
    1514:	1f 90       	pop	r1
    1516:	18 95       	reti

00001518 <__vector_28>:
ISR(TIMER3_COMPC_vect)
{
    1518:	1f 92       	push	r1
    151a:	0f 92       	push	r0
    151c:	0f b6       	in	r0, 0x3f	; 63
    151e:	0f 92       	push	r0
    1520:	11 24       	eor	r1, r1
    1522:	0b b6       	in	r0, 0x3b	; 59
    1524:	0f 92       	push	r0
    1526:	2f 93       	push	r18
    1528:	3f 93       	push	r19
    152a:	4f 93       	push	r20
    152c:	5f 93       	push	r21
    152e:	6f 93       	push	r22
    1530:	7f 93       	push	r23
    1532:	8f 93       	push	r24
    1534:	9f 93       	push	r25
    1536:	af 93       	push	r26
    1538:	bf 93       	push	r27
    153a:	ef 93       	push	r30
	Dev_Manager::getInstance()->isr_handle[SEC_TIMER](SEC_TIMER,NULL);
    153c:	ff 93       	push	r31
    153e:	09 df       	rcall	.-494    	; 0x1352 <_ZN11Dev_Manager11getInstanceEv>
    1540:	dc 01       	movw	r26, r24
    1542:	1e 96       	adiw	r26, 0x0e	; 14
    1544:	ed 91       	ld	r30, X+
    1546:	fc 91       	ld	r31, X
    1548:	1f 97       	sbiw	r26, 0x0f	; 15
    154a:	60 e0       	ldi	r22, 0x00	; 0
    154c:	70 e0       	ldi	r23, 0x00	; 0
    154e:	82 e0       	ldi	r24, 0x02	; 2
}
    1550:	09 95       	icall
    1552:	ff 91       	pop	r31
    1554:	ef 91       	pop	r30
    1556:	bf 91       	pop	r27
    1558:	af 91       	pop	r26
    155a:	9f 91       	pop	r25
    155c:	8f 91       	pop	r24
    155e:	7f 91       	pop	r23
    1560:	6f 91       	pop	r22
    1562:	5f 91       	pop	r21
    1564:	4f 91       	pop	r20
    1566:	3f 91       	pop	r19
    1568:	2f 91       	pop	r18
    156a:	0f 90       	pop	r0
    156c:	0b be       	out	0x3b, r0	; 59
    156e:	0f 90       	pop	r0
    1570:	0f be       	out	0x3f, r0	; 63
    1572:	0f 90       	pop	r0
    1574:	1f 90       	pop	r1
    1576:	18 95       	reti

00001578 <__vector_1>:
ISR(INT0_vect)
{
    1578:	1f 92       	push	r1
    157a:	0f 92       	push	r0
    157c:	0f b6       	in	r0, 0x3f	; 63
    157e:	0f 92       	push	r0
    1580:	11 24       	eor	r1, r1
    1582:	0b b6       	in	r0, 0x3b	; 59
    1584:	0f 92       	push	r0
    1586:	2f 93       	push	r18
    1588:	3f 93       	push	r19
    158a:	4f 93       	push	r20
    158c:	5f 93       	push	r21
    158e:	6f 93       	push	r22
    1590:	7f 93       	push	r23
    1592:	8f 93       	push	r24
    1594:	9f 93       	push	r25
    1596:	af 93       	push	r26
    1598:	bf 93       	push	r27
    159a:	ef 93       	push	r30
	Dev_Manager::getInstance()->isr_handle[COUNT_SENSOR](COUNT_SENSOR,NULL);
    159c:	ff 93       	push	r31
    159e:	d9 de       	rcall	.-590    	; 0x1352 <_ZN11Dev_Manager11getInstanceEv>
    15a0:	dc 01       	movw	r26, r24
    15a2:	50 96       	adiw	r26, 0x10	; 16
    15a4:	ed 91       	ld	r30, X+
    15a6:	fc 91       	ld	r31, X
    15a8:	51 97       	sbiw	r26, 0x11	; 17
    15aa:	60 e0       	ldi	r22, 0x00	; 0
    15ac:	70 e0       	ldi	r23, 0x00	; 0
    15ae:	83 e0       	ldi	r24, 0x03	; 3
}
    15b0:	09 95       	icall
    15b2:	ff 91       	pop	r31
    15b4:	ef 91       	pop	r30
    15b6:	bf 91       	pop	r27
    15b8:	af 91       	pop	r26
    15ba:	9f 91       	pop	r25
    15bc:	8f 91       	pop	r24
    15be:	7f 91       	pop	r23
    15c0:	6f 91       	pop	r22
    15c2:	5f 91       	pop	r21
    15c4:	4f 91       	pop	r20
    15c6:	3f 91       	pop	r19
    15c8:	2f 91       	pop	r18
    15ca:	0f 90       	pop	r0
    15cc:	0b be       	out	0x3b, r0	; 59
    15ce:	0f 90       	pop	r0
    15d0:	0f be       	out	0x3f, r0	; 63
    15d2:	0f 90       	pop	r0
    15d4:	1f 90       	pop	r1
    15d6:	18 95       	reti

000015d8 <__vector_21>:
ISR(ADC_vect)
{	
    15d8:	1f 92       	push	r1
    15da:	0f 92       	push	r0
    15dc:	0f b6       	in	r0, 0x3f	; 63
    15de:	0f 92       	push	r0
    15e0:	11 24       	eor	r1, r1
    15e2:	0b b6       	in	r0, 0x3b	; 59
    15e4:	0f 92       	push	r0
    15e6:	2f 93       	push	r18
    15e8:	3f 93       	push	r19
    15ea:	4f 93       	push	r20
    15ec:	5f 93       	push	r21
    15ee:	6f 93       	push	r22
    15f0:	7f 93       	push	r23
    15f2:	8f 93       	push	r24
    15f4:	9f 93       	push	r25
    15f6:	af 93       	push	r26
    15f8:	bf 93       	push	r27
    15fa:	ef 93       	push	r30
	Dev_Manager::getInstance()->isr_handle[_ADC](_ADC,ADCL+((uint16_t)ADCH << 8));
    15fc:	ff 93       	push	r31
    15fe:	a9 de       	rcall	.-686    	; 0x1352 <_ZN11Dev_Manager11getInstanceEv>
    1600:	24 b1       	in	r18, 0x04	; 4
    1602:	65 b1       	in	r22, 0x05	; 5
    1604:	70 e0       	ldi	r23, 0x00	; 0
    1606:	76 2f       	mov	r23, r22
    1608:	66 27       	eor	r22, r22
    160a:	62 0f       	add	r22, r18
    160c:	71 1d       	adc	r23, r1
    160e:	dc 01       	movw	r26, r24
    1610:	52 96       	adiw	r26, 0x12	; 18
    1612:	ed 91       	ld	r30, X+
    1614:	fc 91       	ld	r31, X
    1616:	53 97       	sbiw	r26, 0x13	; 19
    1618:	84 e0       	ldi	r24, 0x04	; 4
}
    161a:	09 95       	icall
    161c:	ff 91       	pop	r31
    161e:	ef 91       	pop	r30
    1620:	bf 91       	pop	r27
    1622:	af 91       	pop	r26
    1624:	9f 91       	pop	r25
    1626:	8f 91       	pop	r24
    1628:	7f 91       	pop	r23
    162a:	6f 91       	pop	r22
    162c:	5f 91       	pop	r21
    162e:	4f 91       	pop	r20
    1630:	3f 91       	pop	r19
    1632:	2f 91       	pop	r18
    1634:	0f 90       	pop	r0
    1636:	0b be       	out	0x3b, r0	; 59
    1638:	0f 90       	pop	r0
    163a:	0f be       	out	0x3f, r0	; 63
    163c:	0f 90       	pop	r0
    163e:	1f 90       	pop	r1
    1640:	18 95       	reti

00001642 <_ZN5Timer11Device_InitEv>:
{
	
}
void Timer::Device_Init()
{
	TCCR3A = 0x40;
    1642:	80 e4       	ldi	r24, 0x40	; 64
    1644:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
	TCCR3B = 0x04;
    1648:	84 e0       	ldi	r24, 0x04	; 4
    164a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	OCR3A = 15624;
    164e:	88 e0       	ldi	r24, 0x08	; 8
    1650:	9d e3       	ldi	r25, 0x3D	; 61
    1652:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    1656:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	ETIMSK = 1 << OCIE3C;
    165a:	82 e0       	ldi	r24, 0x02	; 2
    165c:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x7e007d>
    1660:	08 95       	ret

00001662 <_ZN5TimerC1Ev>:
 * Created: 2017-07-25 오후 3:18:57
 *  Author: bluebiz
 */ 
#include "per_sec_timer.h"

Timer::Timer()
    1662:	2b e7       	ldi	r18, 0x7B	; 123
    1664:	31 e0       	ldi	r19, 0x01	; 1
    1666:	fc 01       	movw	r30, r24
    1668:	31 83       	std	Z+1, r19	; 0x01
    166a:	20 83       	st	Z, r18
    166c:	08 95       	ret

0000166e <_ZN5TimernwEj>:
	OCR3A = 15624;
	ETIMSK = 1 << OCIE3C;
}
void* Timer::operator new(size_t size)
{
	return malloc(size);
    166e:	0c 94 d6 1b 	jmp	0x37ac	; 0x37ac <pvPortMalloc>
}
    1672:	08 95       	ret

00001674 <_ZN11RS485Driver11Device_InitEv>:
{
	this->Uart_baudrate = _Uart_baudrate;
}
void RS485Driver::operator delete(void* ptr)
{
	free(ptr);
    1674:	cf 93       	push	r28
    1676:	df 93       	push	r29
    1678:	ec 01       	movw	r28, r24
    167a:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    167e:	88 e9       	ldi	r24, 0x98	; 152
    1680:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
    1684:	86 e0       	ldi	r24, 0x06	; 6
    1686:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
    168a:	be 01       	movw	r22, r28
    168c:	6e 5f       	subi	r22, 0xFE	; 254
    168e:	7f 4f       	sbci	r23, 0xFF	; 255
    1690:	ce 01       	movw	r24, r28
    1692:	19 d1       	rcall	.+562    	; 0x18c6 <_ZN4Ubbr10Ubbr_ValueERKj>
    1694:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
    1698:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <xQueueCreateMutex>
    16a2:	9f 83       	std	Y+7, r25	; 0x07
    16a4:	8e 83       	std	Y+6, r24	; 0x06
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <xQueueCreateMutex>
    16ac:	9d 83       	std	Y+5, r25	; 0x05
    16ae:	8c 83       	std	Y+4, r24	; 0x04
    16b0:	df 91       	pop	r29
    16b2:	cf 91       	pop	r28
    16b4:	08 95       	ret

000016b6 <_ZN11RS485DriverC1Ev>:
    16b6:	2b e8       	ldi	r18, 0x8B	; 139
    16b8:	31 e0       	ldi	r19, 0x01	; 1
    16ba:	fc 01       	movw	r30, r24
    16bc:	31 83       	std	Z+1, r19	; 0x01
    16be:	20 83       	st	Z, r18
    16c0:	20 e8       	ldi	r18, 0x80	; 128
    16c2:	35 e2       	ldi	r19, 0x25	; 37
    16c4:	33 83       	std	Z+3, r19	; 0x03
    16c6:	22 83       	std	Z+2, r18	; 0x02
    16c8:	20 91 62 02 	lds	r18, 0x0262	; 0x800262 <_ZN11RS485Driver4instE>
    16cc:	30 91 63 02 	lds	r19, 0x0263	; 0x800263 <_ZN11RS485Driver4instE+0x1>
    16d0:	23 2b       	or	r18, r19
    16d2:	21 f4       	brne	.+8      	; 0x16dc <_ZN11RS485DriverC1Ev+0x26>
    16d4:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <_ZN11RS485Driver4instE+0x1>
    16d8:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <_ZN11RS485Driver4instE>
    16dc:	08 95       	ret

000016de <_ZN11RS485DrivernwEj>:
}
void* RS485Driver::operator new(size_t size)
{
	return malloc(size);
    16de:	0c 94 d6 1b 	jmp	0x37ac	; 0x37ac <pvPortMalloc>
}
    16e2:	08 95       	ret

000016e4 <_ZN11RS485Driver12UART_PutcharEc>:
void RS485Driver::UART_Putchar(const char data)
{
    16e4:	1f 93       	push	r17
    16e6:	cf 93       	push	r28
    16e8:	df 93       	push	r29
    16ea:	ec 01       	movw	r28, r24
    16ec:	16 2f       	mov	r17, r22
	if(xSemaphoreTake(char_Mutex,100) == pdPASS)
    16ee:	20 e0       	ldi	r18, 0x00	; 0
    16f0:	44 e6       	ldi	r20, 0x64	; 100
    16f2:	50 e0       	ldi	r21, 0x00	; 0
    16f4:	60 e0       	ldi	r22, 0x00	; 0
    16f6:	70 e0       	ldi	r23, 0x00	; 0
    16f8:	8c 81       	ldd	r24, Y+4	; 0x04
    16fa:	9d 81       	ldd	r25, Y+5	; 0x05
    16fc:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <xQueueGenericReceive>
    1700:	81 30       	cpi	r24, 0x01	; 1
    1702:	81 f4       	brne	.+32     	; 0x1724 <_ZN11RS485Driver12UART_PutcharEc+0x40>
	{
		while((UCSR1A & (1 << UDRE1)) == 0);
    1704:	eb e9       	ldi	r30, 0x9B	; 155
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	85 ff       	sbrs	r24, 5
    170c:	fd cf       	rjmp	.-6      	; 0x1708 <_ZN11RS485Driver12UART_PutcharEc+0x24>
		UDR1 = data;
    170e:	10 93 9c 00 	sts	0x009C, r17	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
		xSemaphoreGive(char_Mutex);
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	40 e0       	ldi	r20, 0x00	; 0
    1716:	50 e0       	ldi	r21, 0x00	; 0
    1718:	60 e0       	ldi	r22, 0x00	; 0
    171a:	70 e0       	ldi	r23, 0x00	; 0
    171c:	8c 81       	ldd	r24, Y+4	; 0x04
    171e:	9d 81       	ldd	r25, Y+5	; 0x05
    1720:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <xQueueGenericSend>
	}
}
    1724:	df 91       	pop	r29
    1726:	cf 91       	pop	r28
    1728:	1f 91       	pop	r17
    172a:	08 95       	ret

0000172c <_ZN11RS485Driver12Device_WriteEc>:
		}
		xSemaphoreGive(Uart_Mutex);
	}
}
void RS485Driver::Device_Write(char data)
{
    172c:	db cf       	rjmp	.-74     	; 0x16e4 <_ZN11RS485Driver12UART_PutcharEc>
    172e:	08 95       	ret

00001730 <_ZN11RS485Driver14UART_PutStringEPKc>:
    1730:	0f 93       	push	r16
    1732:	1f 93       	push	r17
    1734:	cf 93       	push	r28
    1736:	df 93       	push	r29
    1738:	8c 01       	movw	r16, r24
    173a:	eb 01       	movw	r28, r22
    173c:	20 e0       	ldi	r18, 0x00	; 0
    173e:	44 e6       	ldi	r20, 0x64	; 100
    1740:	50 e0       	ldi	r21, 0x00	; 0
    1742:	60 e0       	ldi	r22, 0x00	; 0
    1744:	70 e0       	ldi	r23, 0x00	; 0
    1746:	fc 01       	movw	r30, r24
    1748:	86 81       	ldd	r24, Z+6	; 0x06
    174a:	97 81       	ldd	r25, Z+7	; 0x07
    174c:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <xQueueGenericReceive>
    1750:	81 30       	cpi	r24, 0x01	; 1
    1752:	99 f4       	brne	.+38     	; 0x177a <_ZN11RS485Driver14UART_PutStringEPKc+0x4a>
    1754:	68 81       	ld	r22, Y
    1756:	66 23       	and	r22, r22
    1758:	31 f0       	breq	.+12     	; 0x1766 <_ZN11RS485Driver14UART_PutStringEPKc+0x36>
    175a:	21 96       	adiw	r28, 0x01	; 1
    175c:	c8 01       	movw	r24, r16
    175e:	c2 df       	rcall	.-124    	; 0x16e4 <_ZN11RS485Driver12UART_PutcharEc>
    1760:	69 91       	ld	r22, Y+
    1762:	61 11       	cpse	r22, r1
    1764:	fb cf       	rjmp	.-10     	; 0x175c <_ZN11RS485Driver14UART_PutStringEPKc+0x2c>
    1766:	20 e0       	ldi	r18, 0x00	; 0
    1768:	40 e0       	ldi	r20, 0x00	; 0
    176a:	50 e0       	ldi	r21, 0x00	; 0
    176c:	60 e0       	ldi	r22, 0x00	; 0
    176e:	70 e0       	ldi	r23, 0x00	; 0
    1770:	f8 01       	movw	r30, r16
    1772:	86 81       	ldd	r24, Z+6	; 0x06
    1774:	97 81       	ldd	r25, Z+7	; 0x07
    1776:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <xQueueGenericSend>
    177a:	df 91       	pop	r29
    177c:	cf 91       	pop	r28
    177e:	1f 91       	pop	r17
    1780:	0f 91       	pop	r16
    1782:	08 95       	ret

00001784 <_ZN11RS485Driver13Device_WritesEPKc>:
    1784:	d5 cf       	rjmp	.-86     	; 0x1730 <_ZN11RS485Driver14UART_PutStringEPKc>
    1786:	08 95       	ret

00001788 <__vector_9>:
	OCR2 = 249; //4ms마다 인터럽트
	sbi(TIMSK,OCIE2); // 인터럽트 활성화	
	//Timer_Alarm::ptr = mem4;
}
void Timer_Alarm::Service_routine()
{
    1788:	1f 92       	push	r1
    178a:	0f 92       	push	r0
    178c:	0f b6       	in	r0, 0x3f	; 63
    178e:	0f 92       	push	r0
    1790:	11 24       	eor	r1, r1
    1792:	0b b6       	in	r0, 0x3b	; 59
    1794:	0f 92       	push	r0
    1796:	8f 93       	push	r24
    1798:	9f 93       	push	r25
    179a:	ef 93       	push	r30
    179c:	ff 93       	push	r31
	mem4[3]++;
    179e:	e0 e2       	ldi	r30, 0x20	; 32
    17a0:	f3 e0       	ldi	r31, 0x03	; 3
    17a2:	86 81       	ldd	r24, Z+6	; 0x06
    17a4:	97 81       	ldd	r25, Z+7	; 0x07
    17a6:	01 96       	adiw	r24, 0x01	; 1
    17a8:	97 83       	std	Z+7, r25	; 0x07
    17aa:	86 83       	std	Z+6, r24	; 0x06
}
    17ac:	ff 91       	pop	r31
    17ae:	ef 91       	pop	r30
    17b0:	9f 91       	pop	r25
    17b2:	8f 91       	pop	r24
    17b4:	0f 90       	pop	r0
    17b6:	0b be       	out	0x3b, r0	; 59
    17b8:	0f 90       	pop	r0
    17ba:	0f be       	out	0x3f, r0	; 63
    17bc:	0f 90       	pop	r0
    17be:	1f 90       	pop	r1
    17c0:	18 95       	reti

000017c2 <_ZN10UartDriver11Device_InitEv>:
{
	return Ubbr::Ubbr_Value(_Uart_baudrate);
}
void UartDriver::operator delete(void* ptr)
{
	free(ptr);
    17c2:	cf 93       	push	r28
    17c4:	df 93       	push	r29
    17c6:	ec 01       	movw	r28, r24
    17c8:	88 e9       	ldi	r24, 0x98	; 152
    17ca:	8a b9       	out	0x0a, r24	; 10
    17cc:	86 e0       	ldi	r24, 0x06	; 6
    17ce:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
    17d2:	be 01       	movw	r22, r28
    17d4:	6e 5f       	subi	r22, 0xFE	; 254
    17d6:	7f 4f       	sbci	r23, 0xFF	; 255
    17d8:	ce 01       	movw	r24, r28
    17da:	75 d0       	rcall	.+234    	; 0x18c6 <_ZN4Ubbr10Ubbr_ValueERKj>
    17dc:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    17e0:	99 b9       	out	0x09, r25	; 9
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <xQueueCreateMutex>
    17e8:	9f 83       	std	Y+7, r25	; 0x07
    17ea:	8e 83       	std	Y+6, r24	; 0x06
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <xQueueCreateMutex>
    17f2:	9d 83       	std	Y+5, r25	; 0x05
    17f4:	8c 83       	std	Y+4, r24	; 0x04
    17f6:	df 91       	pop	r29
    17f8:	cf 91       	pop	r28
    17fa:	08 95       	ret

000017fc <_ZN10UartDriverC1Ev>:
    17fc:	2b e9       	ldi	r18, 0x9B	; 155
    17fe:	31 e0       	ldi	r19, 0x01	; 1
    1800:	fc 01       	movw	r30, r24
    1802:	31 83       	std	Z+1, r19	; 0x01
    1804:	20 83       	st	Z, r18
    1806:	20 e4       	ldi	r18, 0x40	; 64
    1808:	38 e3       	ldi	r19, 0x38	; 56
    180a:	33 83       	std	Z+3, r19	; 0x03
    180c:	22 83       	std	Z+2, r18	; 0x02
    180e:	20 91 64 02 	lds	r18, 0x0264	; 0x800264 <_ZN10UartDriver4instE>
    1812:	30 91 65 02 	lds	r19, 0x0265	; 0x800265 <_ZN10UartDriver4instE+0x1>
    1816:	23 2b       	or	r18, r19
    1818:	21 f4       	brne	.+8      	; 0x1822 <_ZN10UartDriverC1Ev+0x26>
    181a:	90 93 65 02 	sts	0x0265, r25	; 0x800265 <_ZN10UartDriver4instE+0x1>
    181e:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <_ZN10UartDriver4instE>
    1822:	08 95       	ret

00001824 <_ZN10UartDrivernwEj>:
}
void* UartDriver::operator new(size_t size)
{
	return malloc(size);
    1824:	0c 94 d6 1b 	jmp	0x37ac	; 0x37ac <pvPortMalloc>
}
    1828:	08 95       	ret

0000182a <_ZN10UartDriver12UART_PutcharEc>:
void UartDriver::UART_Putchar(const char data)
{
    182a:	1f 93       	push	r17
    182c:	cf 93       	push	r28
    182e:	df 93       	push	r29
    1830:	ec 01       	movw	r28, r24
    1832:	16 2f       	mov	r17, r22
	if(xSemaphoreTake(char_Mutex,100) == pdPASS)
    1834:	20 e0       	ldi	r18, 0x00	; 0
    1836:	44 e6       	ldi	r20, 0x64	; 100
    1838:	50 e0       	ldi	r21, 0x00	; 0
    183a:	60 e0       	ldi	r22, 0x00	; 0
    183c:	70 e0       	ldi	r23, 0x00	; 0
    183e:	8c 81       	ldd	r24, Y+4	; 0x04
    1840:	9d 81       	ldd	r25, Y+5	; 0x05
    1842:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <xQueueGenericReceive>
    1846:	81 30       	cpi	r24, 0x01	; 1
    1848:	61 f4       	brne	.+24     	; 0x1862 <_ZN10UartDriver12UART_PutcharEc+0x38>
	{
		while((UCSR0A & (1 << UDRE0)) == 0);
    184a:	5d 9b       	sbis	0x0b, 5	; 11
    184c:	fe cf       	rjmp	.-4      	; 0x184a <_ZN10UartDriver12UART_PutcharEc+0x20>
		UDR0 = data;
    184e:	1c b9       	out	0x0c, r17	; 12
		xSemaphoreGive(char_Mutex);
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	40 e0       	ldi	r20, 0x00	; 0
    1854:	50 e0       	ldi	r21, 0x00	; 0
    1856:	60 e0       	ldi	r22, 0x00	; 0
    1858:	70 e0       	ldi	r23, 0x00	; 0
    185a:	8c 81       	ldd	r24, Y+4	; 0x04
    185c:	9d 81       	ldd	r25, Y+5	; 0x05
    185e:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <xQueueGenericSend>
	}
}
    1862:	df 91       	pop	r29
    1864:	cf 91       	pop	r28
    1866:	1f 91       	pop	r17
    1868:	08 95       	ret

0000186a <_ZN10UartDriver12Device_WriteEc>:
    186a:	df cf       	rjmp	.-66     	; 0x182a <_ZN10UartDriver12UART_PutcharEc>
    186c:	08 95       	ret

0000186e <_ZN10UartDriver14UART_PutStringEPKc>:
    186e:	0f 93       	push	r16
    1870:	1f 93       	push	r17
    1872:	cf 93       	push	r28
    1874:	df 93       	push	r29
    1876:	8c 01       	movw	r16, r24
    1878:	eb 01       	movw	r28, r22
    187a:	20 e0       	ldi	r18, 0x00	; 0
    187c:	44 e6       	ldi	r20, 0x64	; 100
    187e:	50 e0       	ldi	r21, 0x00	; 0
    1880:	60 e0       	ldi	r22, 0x00	; 0
    1882:	70 e0       	ldi	r23, 0x00	; 0
    1884:	fc 01       	movw	r30, r24
    1886:	86 81       	ldd	r24, Z+6	; 0x06
    1888:	97 81       	ldd	r25, Z+7	; 0x07
    188a:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <xQueueGenericReceive>
    188e:	81 30       	cpi	r24, 0x01	; 1
    1890:	99 f4       	brne	.+38     	; 0x18b8 <_ZN10UartDriver14UART_PutStringEPKc+0x4a>
    1892:	68 81       	ld	r22, Y
    1894:	66 23       	and	r22, r22
    1896:	31 f0       	breq	.+12     	; 0x18a4 <_ZN10UartDriver14UART_PutStringEPKc+0x36>
    1898:	21 96       	adiw	r28, 0x01	; 1
    189a:	c8 01       	movw	r24, r16
    189c:	c6 df       	rcall	.-116    	; 0x182a <_ZN10UartDriver12UART_PutcharEc>
    189e:	69 91       	ld	r22, Y+
    18a0:	61 11       	cpse	r22, r1
    18a2:	fb cf       	rjmp	.-10     	; 0x189a <_ZN10UartDriver14UART_PutStringEPKc+0x2c>
    18a4:	20 e0       	ldi	r18, 0x00	; 0
    18a6:	40 e0       	ldi	r20, 0x00	; 0
    18a8:	50 e0       	ldi	r21, 0x00	; 0
    18aa:	60 e0       	ldi	r22, 0x00	; 0
    18ac:	70 e0       	ldi	r23, 0x00	; 0
    18ae:	f8 01       	movw	r30, r16
    18b0:	86 81       	ldd	r24, Z+6	; 0x06
    18b2:	97 81       	ldd	r25, Z+7	; 0x07
    18b4:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <xQueueGenericSend>
    18b8:	df 91       	pop	r29
    18ba:	cf 91       	pop	r28
    18bc:	1f 91       	pop	r17
    18be:	0f 91       	pop	r16
    18c0:	08 95       	ret

000018c2 <_ZN10UartDriver13Device_WritesEPKc>:
    18c2:	d5 cf       	rjmp	.-86     	; 0x186e <_ZN10UartDriver14UART_PutStringEPKc>
    18c4:	08 95       	ret

000018c6 <_ZN4Ubbr10Ubbr_ValueERKj>:
 *  Author: bluebiz
 */ 
#include "Ubbr_Calculate.h"

uint16_t Ubbr::Ubbr_Value(const uint16_t &Uart_baudrate)
{
    18c6:	cf 92       	push	r12
    18c8:	df 92       	push	r13
    18ca:	ef 92       	push	r14
    18cc:	ff 92       	push	r15
    18ce:	cf 93       	push	r28
    18d0:	df 93       	push	r29
	float temp =  (((F_cpu / (Uart_baudrate * 16UL))) - 1);
	float ubbr_h = (uint16_t)(temp + 0.5);
    18d2:	fb 01       	movw	r30, r22
    18d4:	20 81       	ld	r18, Z
    18d6:	31 81       	ldd	r19, Z+1	; 0x01
    18d8:	c9 01       	movw	r24, r18
    18da:	a0 e0       	ldi	r26, 0x00	; 0
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	88 0f       	add	r24, r24
    18e0:	99 1f       	adc	r25, r25
    18e2:	aa 1f       	adc	r26, r26
    18e4:	bb 1f       	adc	r27, r27
    18e6:	88 0f       	add	r24, r24
    18e8:	99 1f       	adc	r25, r25
    18ea:	aa 1f       	adc	r26, r26
    18ec:	bb 1f       	adc	r27, r27
    18ee:	9c 01       	movw	r18, r24
    18f0:	ad 01       	movw	r20, r26
    18f2:	22 0f       	add	r18, r18
    18f4:	33 1f       	adc	r19, r19
    18f6:	44 1f       	adc	r20, r20
    18f8:	55 1f       	adc	r21, r21
    18fa:	22 0f       	add	r18, r18
    18fc:	33 1f       	adc	r19, r19
    18fe:	44 1f       	adc	r20, r20
    1900:	55 1f       	adc	r21, r21
    1902:	60 e0       	ldi	r22, 0x00	; 0
    1904:	74 e2       	ldi	r23, 0x24	; 36
    1906:	84 ef       	ldi	r24, 0xF4	; 244
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	0e 94 73 27 	call	0x4ee6	; 0x4ee6 <__udivmodsi4>
    190e:	ca 01       	movw	r24, r20
    1910:	b9 01       	movw	r22, r18
    1912:	61 50       	subi	r22, 0x01	; 1
    1914:	71 09       	sbc	r23, r1
    1916:	81 09       	sbc	r24, r1
    1918:	91 09       	sbc	r25, r1
    191a:	0e 94 5a 26 	call	0x4cb4	; 0x4cb4 <__floatunsisf>
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	40 e0       	ldi	r20, 0x00	; 0
    1924:	5f e3       	ldi	r21, 0x3F	; 63
    1926:	0e 94 59 25 	call	0x4ab2	; 0x4ab2 <__addsf3>
    192a:	6b 01       	movw	r12, r22
    192c:	7c 01       	movw	r14, r24
	float ubbr_l = (uint8_t)(temp + 0.5);
	uint16_t result = (0xff00 & ((uint16_t)ubbr_h << 8)) | (0x00ff & (uint8_t)ubbr_l);
	return result;
    192e:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <__fixunssfsi>
    1932:	d6 2f       	mov	r29, r22
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	cf 2f       	mov	r28, r31
    1938:	c7 01       	movw	r24, r14
    193a:	b6 01       	movw	r22, r12
    193c:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <__fixunssfsi>
}
    1940:	ce 01       	movw	r24, r28
    1942:	86 2b       	or	r24, r22
    1944:	df 91       	pop	r29
    1946:	cf 91       	pop	r28
    1948:	ff 90       	pop	r15
    194a:	ef 90       	pop	r14
    194c:	df 90       	pop	r13
    194e:	cf 90       	pop	r12
    1950:	08 95       	ret

00001952 <_Z14enc28j60ReadOphh>:
// link status
uint8_t enc28j60linkup(void)
{
        // bit 10 (= bit 3 in upper reg)
	return(enc28j60PhyReadH(PHSTAT2) && 4);
}
    1952:	c0 98       	cbi	0x18, 0	; 24
    1954:	96 2f       	mov	r25, r22
    1956:	6f 71       	andi	r22, 0x1F	; 31
    1958:	86 2b       	or	r24, r22
    195a:	8f b9       	out	0x0f, r24	; 15
    195c:	77 9b       	sbis	0x0e, 7	; 14
    195e:	fe cf       	rjmp	.-4      	; 0x195c <_Z14enc28j60ReadOphh+0xa>
    1960:	1f b8       	out	0x0f, r1	; 15
    1962:	77 9b       	sbis	0x0e, 7	; 14
    1964:	fe cf       	rjmp	.-4      	; 0x1962 <_Z14enc28j60ReadOphh+0x10>
    1966:	99 23       	and	r25, r25
    1968:	1c f4       	brge	.+6      	; 0x1970 <_Z14enc28j60ReadOphh+0x1e>
    196a:	1f b8       	out	0x0f, r1	; 15
    196c:	77 9b       	sbis	0x0e, 7	; 14
    196e:	fe cf       	rjmp	.-4      	; 0x196c <_Z14enc28j60ReadOphh+0x1a>
    1970:	c0 9a       	sbi	0x18, 0	; 24
    1972:	8f b1       	in	r24, 0x0f	; 15
    1974:	08 95       	ret

00001976 <_Z15enc28j60WriteOphhh>:
    1976:	c0 98       	cbi	0x18, 0	; 24
    1978:	6f 71       	andi	r22, 0x1F	; 31
    197a:	86 2b       	or	r24, r22
    197c:	8f b9       	out	0x0f, r24	; 15
    197e:	77 9b       	sbis	0x0e, 7	; 14
    1980:	fe cf       	rjmp	.-4      	; 0x197e <_Z15enc28j60WriteOphhh+0x8>
    1982:	4f b9       	out	0x0f, r20	; 15
    1984:	77 9b       	sbis	0x0e, 7	; 14
    1986:	fe cf       	rjmp	.-4      	; 0x1984 <_Z15enc28j60WriteOphhh+0xe>
    1988:	c0 9a       	sbi	0x18, 0	; 24
    198a:	08 95       	ret

0000198c <_Z18enc28j60ReadBufferjPh>:
    198c:	fb 01       	movw	r30, r22
    198e:	c0 98       	cbi	0x18, 0	; 24
    1990:	2a e3       	ldi	r18, 0x3A	; 58
    1992:	2f b9       	out	0x0f, r18	; 15
    1994:	77 9b       	sbis	0x0e, 7	; 14
    1996:	fe cf       	rjmp	.-4      	; 0x1994 <_Z18enc28j60ReadBufferjPh+0x8>
    1998:	00 97       	sbiw	r24, 0x00	; 0
    199a:	61 f0       	breq	.+24     	; 0x19b4 <_Z18enc28j60ReadBufferjPh+0x28>
    199c:	df 01       	movw	r26, r30
    199e:	a8 0f       	add	r26, r24
    19a0:	b9 1f       	adc	r27, r25
    19a2:	1f b8       	out	0x0f, r1	; 15
    19a4:	77 9b       	sbis	0x0e, 7	; 14
    19a6:	fe cf       	rjmp	.-4      	; 0x19a4 <_Z18enc28j60ReadBufferjPh+0x18>
    19a8:	9f b1       	in	r25, 0x0f	; 15
    19aa:	91 93       	st	Z+, r25
    19ac:	ae 17       	cp	r26, r30
    19ae:	bf 07       	cpc	r27, r31
    19b0:	c1 f7       	brne	.-16     	; 0x19a2 <_Z18enc28j60ReadBufferjPh+0x16>
    19b2:	01 c0       	rjmp	.+2      	; 0x19b6 <_Z18enc28j60ReadBufferjPh+0x2a>
    19b4:	df 01       	movw	r26, r30
    19b6:	1c 92       	st	X, r1
    19b8:	c0 9a       	sbi	0x18, 0	; 24
    19ba:	08 95       	ret

000019bc <_Z19enc28j60WriteBufferjPh>:
    19bc:	fb 01       	movw	r30, r22
    19be:	c0 98       	cbi	0x18, 0	; 24
    19c0:	2a e7       	ldi	r18, 0x7A	; 122
    19c2:	2f b9       	out	0x0f, r18	; 15
    19c4:	77 9b       	sbis	0x0e, 7	; 14
    19c6:	fe cf       	rjmp	.-4      	; 0x19c4 <_Z19enc28j60WriteBufferjPh+0x8>
    19c8:	00 97       	sbiw	r24, 0x00	; 0
    19ca:	61 f0       	breq	.+24     	; 0x19e4 <_Z19enc28j60WriteBufferjPh+0x28>
    19cc:	9f 01       	movw	r18, r30
    19ce:	28 0f       	add	r18, r24
    19d0:	39 1f       	adc	r19, r25
    19d2:	03 c0       	rjmp	.+6      	; 0x19da <_Z19enc28j60WriteBufferjPh+0x1e>
    19d4:	2e 17       	cp	r18, r30
    19d6:	3f 07       	cpc	r19, r31
    19d8:	29 f0       	breq	.+10     	; 0x19e4 <_Z19enc28j60WriteBufferjPh+0x28>
    19da:	91 91       	ld	r25, Z+
    19dc:	9f b9       	out	0x0f, r25	; 15
    19de:	77 9b       	sbis	0x0e, 7	; 14
    19e0:	fe cf       	rjmp	.-4      	; 0x19de <_Z19enc28j60WriteBufferjPh+0x22>
    19e2:	f8 cf       	rjmp	.-16     	; 0x19d4 <_Z19enc28j60WriteBufferjPh+0x18>
    19e4:	c0 9a       	sbi	0x18, 0	; 24
    19e6:	08 95       	ret

000019e8 <_Z15enc28j60SetBankh>:
    19e8:	1f 93       	push	r17
    19ea:	cf 93       	push	r28
    19ec:	df 93       	push	r29
    19ee:	18 2f       	mov	r17, r24
    19f0:	10 76       	andi	r17, 0x60	; 96
    19f2:	c1 2f       	mov	r28, r17
    19f4:	d0 e0       	ldi	r29, 0x00	; 0
    19f6:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <_ZL12Enc28j60Bank>
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	c8 17       	cp	r28, r24
    19fe:	d9 07       	cpc	r29, r25
    1a00:	a1 f0       	breq	.+40     	; 0x1a2a <_Z15enc28j60SetBankh+0x42>
    1a02:	43 e0       	ldi	r20, 0x03	; 3
    1a04:	6f e1       	ldi	r22, 0x1F	; 31
    1a06:	80 ea       	ldi	r24, 0xA0	; 160
    1a08:	b6 df       	rcall	.-148    	; 0x1976 <_Z15enc28j60WriteOphhh>
    1a0a:	ae 01       	movw	r20, r28
    1a0c:	55 95       	asr	r21
    1a0e:	47 95       	ror	r20
    1a10:	55 95       	asr	r21
    1a12:	47 95       	ror	r20
    1a14:	55 95       	asr	r21
    1a16:	47 95       	ror	r20
    1a18:	55 95       	asr	r21
    1a1a:	47 95       	ror	r20
    1a1c:	55 95       	asr	r21
    1a1e:	47 95       	ror	r20
    1a20:	6f e1       	ldi	r22, 0x1F	; 31
    1a22:	80 e8       	ldi	r24, 0x80	; 128
    1a24:	a8 df       	rcall	.-176    	; 0x1976 <_Z15enc28j60WriteOphhh>
    1a26:	10 93 68 02 	sts	0x0268, r17	; 0x800268 <_ZL12Enc28j60Bank>
    1a2a:	df 91       	pop	r29
    1a2c:	cf 91       	pop	r28
    1a2e:	1f 91       	pop	r17
    1a30:	08 95       	ret

00001a32 <_Z12enc28j60Readh>:
    1a32:	cf 93       	push	r28
    1a34:	c8 2f       	mov	r28, r24
    1a36:	d8 df       	rcall	.-80     	; 0x19e8 <_Z15enc28j60SetBankh>
    1a38:	6c 2f       	mov	r22, r28
    1a3a:	80 e0       	ldi	r24, 0x00	; 0
    1a3c:	8a df       	rcall	.-236    	; 0x1952 <_Z14enc28j60ReadOphh>
    1a3e:	cf 91       	pop	r28
    1a40:	08 95       	ret

00001a42 <_Z13enc28j60Writehh>:
    1a42:	cf 93       	push	r28
    1a44:	df 93       	push	r29
    1a46:	c8 2f       	mov	r28, r24
    1a48:	d6 2f       	mov	r29, r22
    1a4a:	ce df       	rcall	.-100    	; 0x19e8 <_Z15enc28j60SetBankh>
    1a4c:	4d 2f       	mov	r20, r29
    1a4e:	6c 2f       	mov	r22, r28
    1a50:	80 e4       	ldi	r24, 0x40	; 64
    1a52:	91 df       	rcall	.-222    	; 0x1976 <_Z15enc28j60WriteOphhh>
    1a54:	df 91       	pop	r29
    1a56:	cf 91       	pop	r28
    1a58:	08 95       	ret

00001a5a <_Z16enc28j60PhyWritehj>:
    1a5a:	cf 93       	push	r28
    1a5c:	df 93       	push	r29
    1a5e:	d6 2f       	mov	r29, r22
    1a60:	c7 2f       	mov	r28, r23
    1a62:	68 2f       	mov	r22, r24
    1a64:	84 ed       	ldi	r24, 0xD4	; 212
    1a66:	ed df       	rcall	.-38     	; 0x1a42 <_Z13enc28j60Writehh>
    1a68:	6d 2f       	mov	r22, r29
    1a6a:	86 ed       	ldi	r24, 0xD6	; 214
    1a6c:	ea df       	rcall	.-44     	; 0x1a42 <_Z13enc28j60Writehh>
    1a6e:	6c 2f       	mov	r22, r28
    1a70:	87 ed       	ldi	r24, 0xD7	; 215
    1a72:	e7 df       	rcall	.-50     	; 0x1a42 <_Z13enc28j60Writehh>
    1a74:	8a ee       	ldi	r24, 0xEA	; 234
    1a76:	dd df       	rcall	.-70     	; 0x1a32 <_Z12enc28j60Readh>
    1a78:	80 ff       	sbrs	r24, 0
    1a7a:	04 c0       	rjmp	.+8      	; 0x1a84 <_Z16enc28j60PhyWritehj+0x2a>
    1a7c:	85 e0       	ldi	r24, 0x05	; 5
    1a7e:	8a 95       	dec	r24
    1a80:	f1 f7       	brne	.-4      	; 0x1a7e <_Z16enc28j60PhyWritehj+0x24>
    1a82:	f8 cf       	rjmp	.-16     	; 0x1a74 <_Z16enc28j60PhyWritehj+0x1a>
    1a84:	df 91       	pop	r29
    1a86:	cf 91       	pop	r28
    1a88:	08 95       	ret

00001a8a <_Z14enc28j60clkouth>:
    1a8a:	68 2f       	mov	r22, r24
    1a8c:	67 70       	andi	r22, 0x07	; 7
    1a8e:	85 e7       	ldi	r24, 0x75	; 117
    1a90:	d8 cf       	rjmp	.-80     	; 0x1a42 <_Z13enc28j60Writehh>
    1a92:	08 95       	ret

00001a94 <_Z12enc28j60InitPh>:
    1a94:	cf 93       	push	r28
    1a96:	df 93       	push	r29
    1a98:	ec 01       	movw	r28, r24
    1a9a:	b8 9a       	sbi	0x17, 0	; 23
    1a9c:	c0 9a       	sbi	0x18, 0	; 24
    1a9e:	a6 d2       	rcall	.+1356   	; 0x1fec <_Z8spi_initv>
    1aa0:	4f ef       	ldi	r20, 0xFF	; 255
    1aa2:	60 e0       	ldi	r22, 0x00	; 0
    1aa4:	8f ef       	ldi	r24, 0xFF	; 255
    1aa6:	67 df       	rcall	.-306    	; 0x1976 <_Z15enc28j60WriteOphhh>
    1aa8:	82 e3       	ldi	r24, 0x32	; 50
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	a9 d2       	rcall	.+1362   	; 0x2000 <_Z8delay_msj>
    1aae:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <_ZL13NextPacketPtr+0x1>
    1ab2:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <_ZL13NextPacketPtr>
    1ab6:	60 e0       	ldi	r22, 0x00	; 0
    1ab8:	88 e0       	ldi	r24, 0x08	; 8
    1aba:	c3 df       	rcall	.-122    	; 0x1a42 <_Z13enc28j60Writehh>
    1abc:	60 e0       	ldi	r22, 0x00	; 0
    1abe:	89 e0       	ldi	r24, 0x09	; 9
    1ac0:	c0 df       	rcall	.-128    	; 0x1a42 <_Z13enc28j60Writehh>
    1ac2:	60 e0       	ldi	r22, 0x00	; 0
    1ac4:	8c e0       	ldi	r24, 0x0C	; 12
    1ac6:	bd df       	rcall	.-134    	; 0x1a42 <_Z13enc28j60Writehh>
    1ac8:	60 e0       	ldi	r22, 0x00	; 0
    1aca:	8d e0       	ldi	r24, 0x0D	; 13
    1acc:	ba df       	rcall	.-140    	; 0x1a42 <_Z13enc28j60Writehh>
    1ace:	6e ef       	ldi	r22, 0xFE	; 254
    1ad0:	8a e0       	ldi	r24, 0x0A	; 10
    1ad2:	b7 df       	rcall	.-146    	; 0x1a42 <_Z13enc28j60Writehh>
    1ad4:	69 e1       	ldi	r22, 0x19	; 25
    1ad6:	8b e0       	ldi	r24, 0x0B	; 11
    1ad8:	b4 df       	rcall	.-152    	; 0x1a42 <_Z13enc28j60Writehh>
    1ada:	6f ef       	ldi	r22, 0xFF	; 255
    1adc:	84 e0       	ldi	r24, 0x04	; 4
    1ade:	b1 df       	rcall	.-158    	; 0x1a42 <_Z13enc28j60Writehh>
    1ae0:	69 e1       	ldi	r22, 0x19	; 25
    1ae2:	85 e0       	ldi	r24, 0x05	; 5
    1ae4:	ae df       	rcall	.-164    	; 0x1a42 <_Z13enc28j60Writehh>
    1ae6:	6f ef       	ldi	r22, 0xFF	; 255
    1ae8:	86 e0       	ldi	r24, 0x06	; 6
    1aea:	ab df       	rcall	.-170    	; 0x1a42 <_Z13enc28j60Writehh>
    1aec:	6f e1       	ldi	r22, 0x1F	; 31
    1aee:	87 e0       	ldi	r24, 0x07	; 7
    1af0:	a8 df       	rcall	.-176    	; 0x1a42 <_Z13enc28j60Writehh>
    1af2:	60 eb       	ldi	r22, 0xB0	; 176
    1af4:	88 e3       	ldi	r24, 0x38	; 56
    1af6:	a5 df       	rcall	.-182    	; 0x1a42 <_Z13enc28j60Writehh>
    1af8:	6f e3       	ldi	r22, 0x3F	; 63
    1afa:	88 e2       	ldi	r24, 0x28	; 40
    1afc:	a2 df       	rcall	.-188    	; 0x1a42 <_Z13enc28j60Writehh>
    1afe:	60 e3       	ldi	r22, 0x30	; 48
    1b00:	89 e2       	ldi	r24, 0x29	; 41
    1b02:	9f df       	rcall	.-194    	; 0x1a42 <_Z13enc28j60Writehh>
    1b04:	69 ef       	ldi	r22, 0xF9	; 249
    1b06:	80 e3       	ldi	r24, 0x30	; 48
    1b08:	9c df       	rcall	.-200    	; 0x1a42 <_Z13enc28j60Writehh>
    1b0a:	67 ef       	ldi	r22, 0xF7	; 247
    1b0c:	81 e3       	ldi	r24, 0x31	; 49
    1b0e:	99 df       	rcall	.-206    	; 0x1a42 <_Z13enc28j60Writehh>
    1b10:	6d e0       	ldi	r22, 0x0D	; 13
    1b12:	80 ec       	ldi	r24, 0xC0	; 192
    1b14:	96 df       	rcall	.-212    	; 0x1a42 <_Z13enc28j60Writehh>
    1b16:	60 e0       	ldi	r22, 0x00	; 0
    1b18:	81 ec       	ldi	r24, 0xC1	; 193
    1b1a:	93 df       	rcall	.-218    	; 0x1a42 <_Z13enc28j60Writehh>
    1b1c:	42 e3       	ldi	r20, 0x32	; 50
    1b1e:	62 ec       	ldi	r22, 0xC2	; 194
    1b20:	80 e8       	ldi	r24, 0x80	; 128
    1b22:	29 df       	rcall	.-430    	; 0x1976 <_Z15enc28j60WriteOphhh>
    1b24:	62 e1       	ldi	r22, 0x12	; 18
    1b26:	86 ec       	ldi	r24, 0xC6	; 198
    1b28:	8c df       	rcall	.-232    	; 0x1a42 <_Z13enc28j60Writehh>
    1b2a:	6c e0       	ldi	r22, 0x0C	; 12
    1b2c:	87 ec       	ldi	r24, 0xC7	; 199
    1b2e:	89 df       	rcall	.-238    	; 0x1a42 <_Z13enc28j60Writehh>
    1b30:	62 e1       	ldi	r22, 0x12	; 18
    1b32:	84 ec       	ldi	r24, 0xC4	; 196
    1b34:	86 df       	rcall	.-244    	; 0x1a42 <_Z13enc28j60Writehh>
    1b36:	6c ed       	ldi	r22, 0xDC	; 220
    1b38:	8a ec       	ldi	r24, 0xCA	; 202
    1b3a:	83 df       	rcall	.-250    	; 0x1a42 <_Z13enc28j60Writehh>
    1b3c:	65 e0       	ldi	r22, 0x05	; 5
    1b3e:	8b ec       	ldi	r24, 0xCB	; 203
    1b40:	80 df       	rcall	.-256    	; 0x1a42 <_Z13enc28j60Writehh>
    1b42:	68 81       	ld	r22, Y
    1b44:	84 ee       	ldi	r24, 0xE4	; 228
    1b46:	7d df       	rcall	.-262    	; 0x1a42 <_Z13enc28j60Writehh>
    1b48:	69 81       	ldd	r22, Y+1	; 0x01
    1b4a:	85 ee       	ldi	r24, 0xE5	; 229
    1b4c:	7a df       	rcall	.-268    	; 0x1a42 <_Z13enc28j60Writehh>
    1b4e:	6a 81       	ldd	r22, Y+2	; 0x02
    1b50:	82 ee       	ldi	r24, 0xE2	; 226
    1b52:	77 df       	rcall	.-274    	; 0x1a42 <_Z13enc28j60Writehh>
    1b54:	6b 81       	ldd	r22, Y+3	; 0x03
    1b56:	83 ee       	ldi	r24, 0xE3	; 227
    1b58:	74 df       	rcall	.-280    	; 0x1a42 <_Z13enc28j60Writehh>
    1b5a:	6c 81       	ldd	r22, Y+4	; 0x04
    1b5c:	80 ee       	ldi	r24, 0xE0	; 224
    1b5e:	71 df       	rcall	.-286    	; 0x1a42 <_Z13enc28j60Writehh>
    1b60:	6d 81       	ldd	r22, Y+5	; 0x05
    1b62:	81 ee       	ldi	r24, 0xE1	; 225
    1b64:	6e df       	rcall	.-292    	; 0x1a42 <_Z13enc28j60Writehh>
    1b66:	60 e0       	ldi	r22, 0x00	; 0
    1b68:	71 e0       	ldi	r23, 0x01	; 1
    1b6a:	80 e1       	ldi	r24, 0x10	; 16
    1b6c:	76 df       	rcall	.-276    	; 0x1a5a <_Z16enc28j60PhyWritehj>
    1b6e:	8f e1       	ldi	r24, 0x1F	; 31
    1b70:	3b df       	rcall	.-394    	; 0x19e8 <_Z15enc28j60SetBankh>
    1b72:	40 ec       	ldi	r20, 0xC0	; 192
    1b74:	6b e1       	ldi	r22, 0x1B	; 27
    1b76:	80 e8       	ldi	r24, 0x80	; 128
    1b78:	fe de       	rcall	.-516    	; 0x1976 <_Z15enc28j60WriteOphhh>
    1b7a:	44 e0       	ldi	r20, 0x04	; 4
    1b7c:	6f e1       	ldi	r22, 0x1F	; 31
    1b7e:	80 e8       	ldi	r24, 0x80	; 128
    1b80:	fa de       	rcall	.-524    	; 0x1976 <_Z15enc28j60WriteOphhh>
    1b82:	df 91       	pop	r29
    1b84:	cf 91       	pop	r28
    1b86:	08 95       	ret

00001b88 <_Z18enc28j60PacketSendjPh>:

void enc28j60PacketSend(uint16_t len, uint8_t* packet)
{
    1b88:	0f 93       	push	r16
    1b8a:	1f 93       	push	r17
    1b8c:	cf 93       	push	r28
    1b8e:	df 93       	push	r29
    1b90:	ec 01       	movw	r28, r24
    1b92:	8b 01       	movw	r16, r22
	// Set the write pointer to start of transmit buffer area
	enc28j60Write(EWRPTL, TXSTART_INIT&0xFF);
    1b94:	6f ef       	ldi	r22, 0xFF	; 255
    1b96:	82 e0       	ldi	r24, 0x02	; 2
    1b98:	54 df       	rcall	.-344    	; 0x1a42 <_Z13enc28j60Writehh>
	enc28j60Write(EWRPTH, TXSTART_INIT>>8);
    1b9a:	69 e1       	ldi	r22, 0x19	; 25
    1b9c:	83 e0       	ldi	r24, 0x03	; 3
    1b9e:	51 df       	rcall	.-350    	; 0x1a42 <_Z13enc28j60Writehh>
	// Set the TXND pointer to correspond to the packet size given
	enc28j60Write(ETXNDL, (TXSTART_INIT+len)&0xFF);
    1ba0:	6c 2f       	mov	r22, r28
    1ba2:	61 50       	subi	r22, 0x01	; 1
    1ba4:	86 e0       	ldi	r24, 0x06	; 6
    1ba6:	4d df       	rcall	.-358    	; 0x1a42 <_Z13enc28j60Writehh>
	enc28j60Write(ETXNDH, (TXSTART_INIT+len)>>8);
    1ba8:	ce 01       	movw	r24, r28
    1baa:	81 50       	subi	r24, 0x01	; 1
    1bac:	96 4e       	sbci	r25, 0xE6	; 230
    1bae:	69 2f       	mov	r22, r25
    1bb0:	87 e0       	ldi	r24, 0x07	; 7
	// write per-packet control byte (0x00 means use macon3 settings)
	enc28j60WriteOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
    1bb2:	47 df       	rcall	.-370    	; 0x1a42 <_Z13enc28j60Writehh>
    1bb4:	40 e0       	ldi	r20, 0x00	; 0
    1bb6:	60 e0       	ldi	r22, 0x00	; 0
    1bb8:	8a e7       	ldi	r24, 0x7A	; 122
	// copy the packet into the transmit buffer
	enc28j60WriteBuffer(len, packet);
    1bba:	dd de       	rcall	.-582    	; 0x1976 <_Z15enc28j60WriteOphhh>
    1bbc:	b8 01       	movw	r22, r16
	// send the contents of the transmit buffer onto the network
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
    1bbe:	ce 01       	movw	r24, r28
    1bc0:	fd de       	rcall	.-518    	; 0x19bc <_Z19enc28j60WriteBufferjPh>
    1bc2:	48 e0       	ldi	r20, 0x08	; 8
    1bc4:	6f e1       	ldi	r22, 0x1F	; 31
        // Reset the transmit logic problem. See Rev. B4 Silicon Errata point 12.
	if( (enc28j60Read(EIR) & EIR_TXERIF) ){
    1bc6:	80 e8       	ldi	r24, 0x80	; 128
    1bc8:	d6 de       	rcall	.-596    	; 0x1976 <_Z15enc28j60WriteOphhh>
    1bca:	8c e1       	ldi	r24, 0x1C	; 28
    1bcc:	32 df       	rcall	.-412    	; 0x1a32 <_Z12enc28j60Readh>
                enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRTS);
    1bce:	81 ff       	sbrs	r24, 1
    1bd0:	04 c0       	rjmp	.+8      	; 0x1bda <_Z18enc28j60PacketSendjPh+0x52>
    1bd2:	48 e0       	ldi	r20, 0x08	; 8
    1bd4:	6f e1       	ldi	r22, 0x1F	; 31
    1bd6:	80 ea       	ldi	r24, 0xA0	; 160
        }
}
    1bd8:	ce de       	rcall	.-612    	; 0x1976 <_Z15enc28j60WriteOphhh>
    1bda:	df 91       	pop	r29
    1bdc:	cf 91       	pop	r28
    1bde:	1f 91       	pop	r17
    1be0:	0f 91       	pop	r16
    1be2:	08 95       	ret

00001be4 <_Z21enc28j60PacketReceivejPh>:
// The packet will by headed by an ethernet header.
//      maxlen  The maximum acceptable length of a retrieved packet.
//      packet  Pointer where packet data should be stored.
// Returns: Packet length in bytes if a packet was retrieved, zero otherwise.
uint16_t enc28j60PacketReceive(uint16_t maxlen, uint8_t* packet)
{
    1be4:	9f 92       	push	r9
    1be6:	af 92       	push	r10
    1be8:	bf 92       	push	r11
    1bea:	cf 92       	push	r12
    1bec:	df 92       	push	r13
    1bee:	ef 92       	push	r14
    1bf0:	ff 92       	push	r15
    1bf2:	0f 93       	push	r16
    1bf4:	1f 93       	push	r17
    1bf6:	cf 93       	push	r28
    1bf8:	df 93       	push	r29
    1bfa:	5c 01       	movw	r10, r24
    1bfc:	7b 01       	movw	r14, r22
	uint16_t rxstat;
	uint16_t len;
	// check if a packet has been received and buffered
	//if( !(enc28j60Read(EIR) & EIR_PKTIF) ){
        // The above does not work. See Rev. B4 Silicon Errata point 6.
	if( enc28j60Read(EPKTCNT) ==0 ){
    1bfe:	89 e3       	ldi	r24, 0x39	; 57
    1c00:	18 df       	rcall	.-464    	; 0x1a32 <_Z12enc28j60Readh>
    1c02:	88 23       	and	r24, r24
    1c04:	09 f4       	brne	.+2      	; 0x1c08 <_Z21enc28j60PacketReceivejPh+0x24>
    1c06:	45 c0       	rjmp	.+138    	; 0x1c92 <_Z21enc28j60PacketReceivejPh+0xae>
		return(0);
        }

	// Set the read pointer to the start of the received packet
	enc28j60Write(ERDPTL, (NextPacketPtr));
    1c08:	60 91 66 02 	lds	r22, 0x0266	; 0x800266 <_ZL13NextPacketPtr>
    1c0c:	c0 91 67 02 	lds	r28, 0x0267	; 0x800267 <_ZL13NextPacketPtr+0x1>
    1c10:	80 e0       	ldi	r24, 0x00	; 0
	enc28j60Write(ERDPTH, (NextPacketPtr)>>8);
    1c12:	17 df       	rcall	.-466    	; 0x1a42 <_Z13enc28j60Writehh>
    1c14:	6c 2f       	mov	r22, r28
	// read the next packet pointer
	NextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	14 df       	rcall	.-472    	; 0x1a42 <_Z13enc28j60Writehh>
    1c1a:	60 e0       	ldi	r22, 0x00	; 0
    1c1c:	8a e3       	ldi	r24, 0x3A	; 58
	NextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
    1c1e:	99 de       	rcall	.-718    	; 0x1952 <_Z14enc28j60ReadOphh>
    1c20:	c8 2f       	mov	r28, r24
    1c22:	60 e0       	ldi	r22, 0x00	; 0
    1c24:	8a e3       	ldi	r24, 0x3A	; 58
    1c26:	95 de       	rcall	.-726    	; 0x1952 <_Z14enc28j60ReadOphh>
    1c28:	d0 e0       	ldi	r29, 0x00	; 0
    1c2a:	d8 2b       	or	r29, r24
    1c2c:	d0 93 67 02 	sts	0x0267, r29	; 0x800267 <_ZL13NextPacketPtr+0x1>
	// read the packet length (see datasheet page 43)
	len  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
    1c30:	c0 93 66 02 	sts	0x0266, r28	; 0x800266 <_ZL13NextPacketPtr>
    1c34:	60 e0       	ldi	r22, 0x00	; 0
	len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
    1c36:	8a e3       	ldi	r24, 0x3A	; 58
    1c38:	8c de       	rcall	.-744    	; 0x1952 <_Z14enc28j60ReadOphh>
    1c3a:	08 2f       	mov	r16, r24
        len-=4; //remove the CRC count
	// read the receive status (see datasheet page 43)
	rxstat  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
    1c3c:	60 e0       	ldi	r22, 0x00	; 0
    1c3e:	8a e3       	ldi	r24, 0x3A	; 58
    1c40:	88 de       	rcall	.-752    	; 0x1952 <_Z14enc28j60ReadOphh>
    1c42:	98 2e       	mov	r9, r24
    1c44:	60 e0       	ldi	r22, 0x00	; 0
	rxstat |= ((uint16_t)enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0))<<8;
    1c46:	8a e3       	ldi	r24, 0x3A	; 58
    1c48:	84 de       	rcall	.-760    	; 0x1952 <_Z14enc28j60ReadOphh>
    1c4a:	c8 2e       	mov	r12, r24
    1c4c:	60 e0       	ldi	r22, 0x00	; 0
                len=maxlen-1;
        }
        // check CRC and symbol errors (see datasheet page 44, table 7-3):
        // The ERXFCON.CRCEN is set by default. Normally we should not
        // need to check this.
        if ((rxstat & 0x80)==0){
    1c4e:	8a e3       	ldi	r24, 0x3A	; 58
    1c50:	80 de       	rcall	.-768    	; 0x1952 <_Z14enc28j60ReadOphh>
        len-=4; //remove the CRC count
	// read the receive status (see datasheet page 43)
	rxstat  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
	rxstat |= ((uint16_t)enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0))<<8;
	// limit retrieve length
        if (len>maxlen-1){
    1c52:	c7 fe       	sbrs	r12, 7
    1c54:	0f c0       	rjmp	.+30     	; 0x1c74 <_Z21enc28j60PacketReceivejPh+0x90>
    1c56:	81 e0       	ldi	r24, 0x01	; 1
	// read the next packet pointer
	NextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
	NextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
	// read the packet length (see datasheet page 43)
	len  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
	len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
    1c58:	a8 1a       	sub	r10, r24
    1c5a:	b1 08       	sbc	r11, r1
    1c5c:	10 e0       	ldi	r17, 0x00	; 0
    1c5e:	19 29       	or	r17, r9
    1c60:	04 50       	subi	r16, 0x04	; 4
    1c62:	11 09       	sbc	r17, r1
        if ((rxstat & 0x80)==0){
                // invalid
                len=0;
        }else{
                // copy the packet from the receive buffer
                enc28j60ReadBuffer(len, packet);
    1c64:	a0 16       	cp	r10, r16
    1c66:	b1 06       	cpc	r11, r17
    1c68:	08 f4       	brcc	.+2      	; 0x1c6c <_Z21enc28j60PacketReceivejPh+0x88>
    1c6a:	85 01       	movw	r16, r10
        // check CRC and symbol errors (see datasheet page 44, table 7-3):
        // The ERXFCON.CRCEN is set by default. Normally we should not
        // need to check this.
        if ((rxstat & 0x80)==0){
                // invalid
                len=0;
    1c6c:	b7 01       	movw	r22, r14
                // copy the packet from the receive buffer
                enc28j60ReadBuffer(len, packet);
        }
	// Move the RX read pointer to the start of the next received packet
	// This frees the memory we just read out
	enc28j60Write(ERXRDPTL, (NextPacketPtr));
    1c6e:	c8 01       	movw	r24, r16
    1c70:	8d de       	rcall	.-742    	; 0x198c <_Z18enc28j60ReadBufferjPh>
    1c72:	02 c0       	rjmp	.+4      	; 0x1c78 <_Z21enc28j60PacketReceivejPh+0x94>
    1c74:	00 e0       	ldi	r16, 0x00	; 0
	enc28j60Write(ERXRDPTH, (NextPacketPtr)>>8);
    1c76:	10 e0       	ldi	r17, 0x00	; 0
    1c78:	6c 2f       	mov	r22, r28
    1c7a:	8c e0       	ldi	r24, 0x0C	; 12
    1c7c:	e2 de       	rcall	.-572    	; 0x1a42 <_Z13enc28j60Writehh>
	// decrement the packet counter indicate we are done with this packet
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
    1c7e:	6d 2f       	mov	r22, r29
    1c80:	8d e0       	ldi	r24, 0x0D	; 13
    1c82:	df de       	rcall	.-578    	; 0x1a42 <_Z13enc28j60Writehh>
    1c84:	40 e4       	ldi	r20, 0x40	; 64
    1c86:	6e e1       	ldi	r22, 0x1E	; 30
	return(len);
    1c88:	80 e8       	ldi	r24, 0x80	; 128
    1c8a:	75 de       	rcall	.-790    	; 0x1976 <_Z15enc28j60WriteOphhh>
    1c8c:	80 2f       	mov	r24, r16
	uint16_t len;
	// check if a packet has been received and buffered
	//if( !(enc28j60Read(EIR) & EIR_PKTIF) ){
        // The above does not work. See Rev. B4 Silicon Errata point 6.
	if( enc28j60Read(EPKTCNT) ==0 ){
		return(0);
    1c8e:	91 2f       	mov	r25, r17
    1c90:	02 c0       	rjmp	.+4      	; 0x1c96 <_Z21enc28j60PacketReceivejPh+0xb2>
	enc28j60Write(ERXRDPTL, (NextPacketPtr));
	enc28j60Write(ERXRDPTH, (NextPacketPtr)>>8);
	// decrement the packet counter indicate we are done with this packet
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
	return(len);
}
    1c92:	80 e0       	ldi	r24, 0x00	; 0
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	df 91       	pop	r29
    1c98:	cf 91       	pop	r28
    1c9a:	1f 91       	pop	r17
    1c9c:	0f 91       	pop	r16
    1c9e:	ff 90       	pop	r15
    1ca0:	ef 90       	pop	r14
    1ca2:	df 90       	pop	r13
    1ca4:	cf 90       	pop	r12
    1ca6:	bf 90       	pop	r11
    1ca8:	af 90       	pop	r10
    1caa:	9f 90       	pop	r9
    1cac:	08 95       	ret

00001cae <_Z8checksumPhjh>:
        }else{
                // no options:
                // 20 bytes:
                buf[TCP_HEADER_LEN_P]=0x50;
        }
}
    1cae:	cf 92       	push	r12
    1cb0:	df 92       	push	r13
    1cb2:	ef 92       	push	r14
    1cb4:	ff 92       	push	r15
    1cb6:	cf 93       	push	r28
    1cb8:	df 93       	push	r29
    1cba:	ec 01       	movw	r28, r24
    1cbc:	db 01       	movw	r26, r22
    1cbe:	41 30       	cpi	r20, 0x01	; 1
    1cc0:	61 f4       	brne	.+24     	; 0x1cda <_Z8checksumPhjh+0x2c>
    1cc2:	6b 01       	movw	r12, r22
    1cc4:	88 e0       	ldi	r24, 0x08	; 8
    1cc6:	c8 1a       	sub	r12, r24
    1cc8:	d1 08       	sbc	r13, r1
    1cca:	e1 2c       	mov	r14, r1
    1ccc:	f1 2c       	mov	r15, r1
    1cce:	81 e1       	ldi	r24, 0x11	; 17
    1cd0:	c8 0e       	add	r12, r24
    1cd2:	d1 1c       	adc	r13, r1
    1cd4:	e1 1c       	adc	r14, r1
    1cd6:	f1 1c       	adc	r15, r1
    1cd8:	11 c0       	rjmp	.+34     	; 0x1cfc <_Z8checksumPhjh+0x4e>
    1cda:	42 30       	cpi	r20, 0x02	; 2
    1cdc:	61 f4       	brne	.+24     	; 0x1cf6 <_Z8checksumPhjh+0x48>
    1cde:	6b 01       	movw	r12, r22
    1ce0:	88 e0       	ldi	r24, 0x08	; 8
    1ce2:	c8 1a       	sub	r12, r24
    1ce4:	d1 08       	sbc	r13, r1
    1ce6:	e1 2c       	mov	r14, r1
    1ce8:	f1 2c       	mov	r15, r1
    1cea:	86 e0       	ldi	r24, 0x06	; 6
    1cec:	c8 0e       	add	r12, r24
    1cee:	d1 1c       	adc	r13, r1
    1cf0:	e1 1c       	adc	r14, r1
    1cf2:	f1 1c       	adc	r15, r1
    1cf4:	03 c0       	rjmp	.+6      	; 0x1cfc <_Z8checksumPhjh+0x4e>
    1cf6:	c1 2c       	mov	r12, r1
    1cf8:	d1 2c       	mov	r13, r1
    1cfa:	76 01       	movw	r14, r12
    1cfc:	a2 30       	cpi	r26, 0x02	; 2
    1cfe:	b1 05       	cpc	r27, r1
    1d00:	f0 f0       	brcs	.+60     	; 0x1d3e <_Z8checksumPhjh+0x90>
    1d02:	9d 01       	movw	r18, r26
    1d04:	fe 01       	movw	r30, r28
    1d06:	40 81       	ld	r20, Z
    1d08:	50 e0       	ldi	r21, 0x00	; 0
    1d0a:	60 e0       	ldi	r22, 0x00	; 0
    1d0c:	70 e0       	ldi	r23, 0x00	; 0
    1d0e:	76 2f       	mov	r23, r22
    1d10:	65 2f       	mov	r22, r21
    1d12:	54 2f       	mov	r21, r20
    1d14:	44 27       	eor	r20, r20
    1d16:	81 81       	ldd	r24, Z+1	; 0x01
    1d18:	48 2b       	or	r20, r24
    1d1a:	c4 0e       	add	r12, r20
    1d1c:	d5 1e       	adc	r13, r21
    1d1e:	e6 1e       	adc	r14, r22
    1d20:	f7 1e       	adc	r15, r23
    1d22:	32 96       	adiw	r30, 0x02	; 2
    1d24:	22 50       	subi	r18, 0x02	; 2
    1d26:	31 09       	sbc	r19, r1
    1d28:	22 30       	cpi	r18, 0x02	; 2
    1d2a:	31 05       	cpc	r19, r1
    1d2c:	60 f7       	brcc	.-40     	; 0x1d06 <_Z8checksumPhjh+0x58>
    1d2e:	cd 01       	movw	r24, r26
    1d30:	02 97       	sbiw	r24, 0x02	; 2
    1d32:	8e 7f       	andi	r24, 0xFE	; 254
    1d34:	02 96       	adiw	r24, 0x02	; 2
    1d36:	c8 0f       	add	r28, r24
    1d38:	d9 1f       	adc	r29, r25
    1d3a:	a1 70       	andi	r26, 0x01	; 1
    1d3c:	bb 27       	eor	r27, r27
    1d3e:	ab 2b       	or	r26, r27
    1d40:	61 f0       	breq	.+24     	; 0x1d5a <_Z8checksumPhjh+0xac>
    1d42:	88 81       	ld	r24, Y
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	a0 e0       	ldi	r26, 0x00	; 0
    1d48:	b0 e0       	ldi	r27, 0x00	; 0
    1d4a:	ba 2f       	mov	r27, r26
    1d4c:	a9 2f       	mov	r26, r25
    1d4e:	98 2f       	mov	r25, r24
    1d50:	88 27       	eor	r24, r24
    1d52:	c8 0e       	add	r12, r24
    1d54:	d9 1e       	adc	r13, r25
    1d56:	ea 1e       	adc	r14, r26
    1d58:	fb 1e       	adc	r15, r27
    1d5a:	a7 01       	movw	r20, r14
    1d5c:	66 27       	eor	r22, r22
    1d5e:	77 27       	eor	r23, r23
    1d60:	41 15       	cp	r20, r1
    1d62:	51 05       	cpc	r21, r1
    1d64:	61 05       	cpc	r22, r1
    1d66:	71 05       	cpc	r23, r1
    1d68:	71 f0       	breq	.+28     	; 0x1d86 <_Z8checksumPhjh+0xd8>
    1d6a:	ee 24       	eor	r14, r14
    1d6c:	ff 24       	eor	r15, r15
    1d6e:	c4 0e       	add	r12, r20
    1d70:	d5 1e       	adc	r13, r21
    1d72:	e6 1e       	adc	r14, r22
    1d74:	f7 1e       	adc	r15, r23
    1d76:	a7 01       	movw	r20, r14
    1d78:	66 27       	eor	r22, r22
    1d7a:	77 27       	eor	r23, r23
    1d7c:	41 15       	cp	r20, r1
    1d7e:	51 05       	cpc	r21, r1
    1d80:	61 05       	cpc	r22, r1
    1d82:	71 05       	cpc	r23, r1
    1d84:	91 f7       	brne	.-28     	; 0x1d6a <_Z8checksumPhjh+0xbc>
    1d86:	c6 01       	movw	r24, r12
    1d88:	80 95       	com	r24
    1d8a:	90 95       	com	r25
    1d8c:	df 91       	pop	r29
    1d8e:	cf 91       	pop	r28
    1d90:	ff 90       	pop	r15
    1d92:	ef 90       	pop	r14
    1d94:	df 90       	pop	r13
    1d96:	cf 90       	pop	r12
    1d98:	08 95       	ret

00001d9a <_Z19init_ip_arp_udp_tcpPhS_h>:
    1d9a:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <__data_start>
    1d9e:	a6 2f       	mov	r26, r22
    1da0:	b7 2f       	mov	r27, r23
    1da2:	e9 e6       	ldi	r30, 0x69	; 105
    1da4:	f2 e0       	ldi	r31, 0x02	; 2
    1da6:	4d e6       	ldi	r20, 0x6D	; 109
    1da8:	52 e0       	ldi	r21, 0x02	; 2
    1daa:	2d 91       	ld	r18, X+
    1dac:	21 93       	st	Z+, r18
    1dae:	e4 17       	cp	r30, r20
    1db0:	f5 07       	cpc	r31, r21
    1db2:	d9 f7       	brne	.-10     	; 0x1daa <_Z19init_ip_arp_udp_tcpPhS_h+0x10>
    1db4:	a8 2f       	mov	r26, r24
    1db6:	b9 2f       	mov	r27, r25
    1db8:	ed e6       	ldi	r30, 0x6D	; 109
    1dba:	f2 e0       	ldi	r31, 0x02	; 2
    1dbc:	23 e7       	ldi	r18, 0x73	; 115
    1dbe:	32 e0       	ldi	r19, 0x02	; 2
    1dc0:	8d 91       	ld	r24, X+
    1dc2:	81 93       	st	Z+, r24
    1dc4:	e2 17       	cp	r30, r18
    1dc6:	f3 07       	cpc	r31, r19
    1dc8:	d9 f7       	brne	.-10     	; 0x1dc0 <_Z19init_ip_arp_udp_tcpPhS_h+0x26>
    1dca:	08 95       	ret

00001dcc <_Z25eth_type_is_arp_and_my_ipPhj>:
    1dcc:	69 32       	cpi	r22, 0x29	; 41
    1dce:	71 05       	cpc	r23, r1
    1dd0:	c8 f0       	brcs	.+50     	; 0x1e04 <_Z25eth_type_is_arp_and_my_ipPhj+0x38>
    1dd2:	fc 01       	movw	r30, r24
    1dd4:	24 85       	ldd	r18, Z+12	; 0x0c
    1dd6:	28 30       	cpi	r18, 0x08	; 8
    1dd8:	b9 f4       	brne	.+46     	; 0x1e08 <_Z25eth_type_is_arp_and_my_ipPhj+0x3c>
    1dda:	25 85       	ldd	r18, Z+13	; 0x0d
    1ddc:	26 30       	cpi	r18, 0x06	; 6
    1dde:	b1 f4       	brne	.+44     	; 0x1e0c <_Z25eth_type_is_arp_and_my_ipPhj+0x40>
    1de0:	36 a1       	ldd	r19, Z+38	; 0x26
    1de2:	20 91 69 02 	lds	r18, 0x0269	; 0x800269 <_ZL6ipaddr>
    1de6:	32 13       	cpse	r19, r18
    1de8:	13 c0       	rjmp	.+38     	; 0x1e10 <_Z25eth_type_is_arp_and_my_ipPhj+0x44>
    1dea:	b7 96       	adiw	r30, 0x27	; 39
    1dec:	aa e6       	ldi	r26, 0x6A	; 106
    1dee:	b2 e0       	ldi	r27, 0x02	; 2
    1df0:	8a 96       	adiw	r24, 0x2a	; 42
    1df2:	31 91       	ld	r19, Z+
    1df4:	2d 91       	ld	r18, X+
    1df6:	32 13       	cpse	r19, r18
    1df8:	0d c0       	rjmp	.+26     	; 0x1e14 <_Z25eth_type_is_arp_and_my_ipPhj+0x48>
    1dfa:	e8 17       	cp	r30, r24
    1dfc:	f9 07       	cpc	r31, r25
    1dfe:	c9 f7       	brne	.-14     	; 0x1df2 <_Z25eth_type_is_arp_and_my_ipPhj+0x26>
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	08 95       	ret
    1e04:	80 e0       	ldi	r24, 0x00	; 0
    1e06:	08 95       	ret
    1e08:	80 e0       	ldi	r24, 0x00	; 0
    1e0a:	08 95       	ret
    1e0c:	80 e0       	ldi	r24, 0x00	; 0
    1e0e:	08 95       	ret
    1e10:	80 e0       	ldi	r24, 0x00	; 0
    1e12:	08 95       	ret
    1e14:	80 e0       	ldi	r24, 0x00	; 0
    1e16:	08 95       	ret

00001e18 <_Z24eth_type_is_ip_and_my_ipPhj>:
    1e18:	cf 93       	push	r28
    1e1a:	df 93       	push	r29
    1e1c:	fc 01       	movw	r30, r24
    1e1e:	6a 32       	cpi	r22, 0x2A	; 42
    1e20:	71 05       	cpc	r23, r1
    1e22:	e0 f0       	brcs	.+56     	; 0x1e5c <_Z24eth_type_is_ip_and_my_ipPhj+0x44>
    1e24:	84 85       	ldd	r24, Z+12	; 0x0c
    1e26:	88 30       	cpi	r24, 0x08	; 8
    1e28:	d9 f4       	brne	.+54     	; 0x1e60 <_Z24eth_type_is_ip_and_my_ipPhj+0x48>
    1e2a:	85 85       	ldd	r24, Z+13	; 0x0d
    1e2c:	81 11       	cpse	r24, r1
    1e2e:	1a c0       	rjmp	.+52     	; 0x1e64 <_Z24eth_type_is_ip_and_my_ipPhj+0x4c>
    1e30:	96 85       	ldd	r25, Z+14	; 0x0e
    1e32:	95 34       	cpi	r25, 0x45	; 69
    1e34:	c1 f4       	brne	.+48     	; 0x1e66 <_Z24eth_type_is_ip_and_my_ipPhj+0x4e>
    1e36:	26 8d       	ldd	r18, Z+30	; 0x1e
    1e38:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <_ZL6ipaddr>
    1e3c:	29 13       	cpse	r18, r25
    1e3e:	13 c0       	rjmp	.+38     	; 0x1e66 <_Z24eth_type_is_ip_and_my_ipPhj+0x4e>
    1e40:	df 01       	movw	r26, r30
    1e42:	5f 96       	adiw	r26, 0x1f	; 31
    1e44:	ca e6       	ldi	r28, 0x6A	; 106
    1e46:	d2 e0       	ldi	r29, 0x02	; 2
    1e48:	b2 96       	adiw	r30, 0x22	; 34
    1e4a:	2d 91       	ld	r18, X+
    1e4c:	99 91       	ld	r25, Y+
    1e4e:	29 13       	cpse	r18, r25
    1e50:	0a c0       	rjmp	.+20     	; 0x1e66 <_Z24eth_type_is_ip_and_my_ipPhj+0x4e>
    1e52:	ae 17       	cp	r26, r30
    1e54:	bf 07       	cpc	r27, r31
    1e56:	c9 f7       	brne	.-14     	; 0x1e4a <_Z24eth_type_is_ip_and_my_ipPhj+0x32>
    1e58:	81 e0       	ldi	r24, 0x01	; 1
    1e5a:	05 c0       	rjmp	.+10     	; 0x1e66 <_Z24eth_type_is_ip_and_my_ipPhj+0x4e>
    1e5c:	80 e0       	ldi	r24, 0x00	; 0
    1e5e:	03 c0       	rjmp	.+6      	; 0x1e66 <_Z24eth_type_is_ip_and_my_ipPhj+0x4e>
    1e60:	80 e0       	ldi	r24, 0x00	; 0
    1e62:	01 c0       	rjmp	.+2      	; 0x1e66 <_Z24eth_type_is_ip_and_my_ipPhj+0x4e>
    1e64:	80 e0       	ldi	r24, 0x00	; 0
    1e66:	df 91       	pop	r29
    1e68:	cf 91       	pop	r28
    1e6a:	08 95       	ret

00001e6c <_Z8make_ethPh>:
    1e6c:	fc 01       	movw	r30, r24
    1e6e:	ad e6       	ldi	r26, 0x6D	; 109
    1e70:	b2 e0       	ldi	r27, 0x02	; 2
    1e72:	9c 01       	movw	r18, r24
    1e74:	2a 5f       	subi	r18, 0xFA	; 250
    1e76:	3f 4f       	sbci	r19, 0xFF	; 255
    1e78:	86 81       	ldd	r24, Z+6	; 0x06
    1e7a:	81 93       	st	Z+, r24
    1e7c:	8d 91       	ld	r24, X+
    1e7e:	85 83       	std	Z+5, r24	; 0x05
    1e80:	e2 17       	cp	r30, r18
    1e82:	f3 07       	cpc	r31, r19
    1e84:	c9 f7       	brne	.-14     	; 0x1e78 <_Z8make_ethPh+0xc>
    1e86:	08 95       	ret

00001e88 <_Z20fill_ip_hdr_checksumPh>:
    1e88:	cf 93       	push	r28
    1e8a:	df 93       	push	r29
    1e8c:	ec 01       	movw	r28, r24
    1e8e:	18 8e       	std	Y+24, r1	; 0x18
    1e90:	19 8e       	std	Y+25, r1	; 0x19
    1e92:	80 e4       	ldi	r24, 0x40	; 64
    1e94:	8c 8b       	std	Y+20, r24	; 0x14
    1e96:	1d 8a       	std	Y+21, r1	; 0x15
    1e98:	8e 8b       	std	Y+22, r24	; 0x16
    1e9a:	40 e0       	ldi	r20, 0x00	; 0
    1e9c:	64 e1       	ldi	r22, 0x14	; 20
    1e9e:	70 e0       	ldi	r23, 0x00	; 0
    1ea0:	ce 01       	movw	r24, r28
    1ea2:	0e 96       	adiw	r24, 0x0e	; 14
    1ea4:	04 df       	rcall	.-504    	; 0x1cae <_Z8checksumPhjh>
    1ea6:	98 8f       	std	Y+24, r25	; 0x18
    1ea8:	89 8f       	std	Y+25, r24	; 0x19
    1eaa:	df 91       	pop	r29
    1eac:	cf 91       	pop	r28
    1eae:	08 95       	ret

00001eb0 <_Z7make_ipPh>:
    1eb0:	ac 01       	movw	r20, r24
    1eb2:	a9 e6       	ldi	r26, 0x69	; 105
    1eb4:	b2 e0       	ldi	r27, 0x02	; 2
    1eb6:	fc 01       	movw	r30, r24
    1eb8:	7a 96       	adiw	r30, 0x1a	; 26
    1eba:	2d e6       	ldi	r18, 0x6D	; 109
    1ebc:	32 e0       	ldi	r19, 0x02	; 2
    1ebe:	90 81       	ld	r25, Z
    1ec0:	94 83       	std	Z+4, r25	; 0x04
    1ec2:	9d 91       	ld	r25, X+
    1ec4:	91 93       	st	Z+, r25
    1ec6:	a2 17       	cp	r26, r18
    1ec8:	b3 07       	cpc	r27, r19
    1eca:	c9 f7       	brne	.-14     	; 0x1ebe <_Z7make_ipPh+0xe>
    1ecc:	ca 01       	movw	r24, r20
    1ece:	dc cf       	rjmp	.-72     	; 0x1e88 <_Z20fill_ip_hdr_checksumPh>
    1ed0:	08 95       	ret

00001ed2 <_Z28make_arp_answer_from_requestPh>:

void make_arp_answer_from_request(uint8_t *buf)
{
    1ed2:	cf 93       	push	r28
    1ed4:	df 93       	push	r29
        uint8_t i=0;
        //
        make_eth(buf);
    1ed6:	ec 01       	movw	r28, r24
        buf[ETH_ARP_OPCODE_H_P]=ETH_ARP_OPCODE_REPLY_H_V;
    1ed8:	c9 df       	rcall	.-110    	; 0x1e6c <_Z8make_ethPh>
        buf[ETH_ARP_OPCODE_L_P]=ETH_ARP_OPCODE_REPLY_L_V;
    1eda:	1c 8a       	std	Y+20, r1	; 0x14
    1edc:	82 e0       	ldi	r24, 0x02	; 2
    1ede:	8d 8b       	std	Y+21, r24	; 0x15
    1ee0:	ad e6       	ldi	r26, 0x6D	; 109
    1ee2:	b2 e0       	ldi	r27, 0x02	; 2
    1ee4:	fe 01       	movw	r30, r28
    1ee6:	76 96       	adiw	r30, 0x16	; 22
    1ee8:	23 e7       	ldi	r18, 0x73	; 115
        // fill the mac addresses:
        while(i<6){
                buf[ETH_ARP_DST_MAC_P+i]=buf[ETH_ARP_SRC_MAC_P+i];
    1eea:	32 e0       	ldi	r19, 0x02	; 2
    1eec:	80 81       	ld	r24, Z
                buf[ETH_ARP_SRC_MAC_P+i]=macaddr[i];
    1eee:	82 87       	std	Z+10, r24	; 0x0a
    1ef0:	8d 91       	ld	r24, X+
        //
        make_eth(buf);
        buf[ETH_ARP_OPCODE_H_P]=ETH_ARP_OPCODE_REPLY_H_V;
        buf[ETH_ARP_OPCODE_L_P]=ETH_ARP_OPCODE_REPLY_L_V;
        // fill the mac addresses:
        while(i<6){
    1ef2:	81 93       	st	Z+, r24
    1ef4:	a2 17       	cp	r26, r18
    1ef6:	b3 07       	cpc	r27, r19
    1ef8:	c9 f7       	brne	.-14     	; 0x1eec <_Z28make_arp_answer_from_requestPh+0x1a>
    1efa:	a9 e6       	ldi	r26, 0x69	; 105
    1efc:	b2 e0       	ldi	r27, 0x02	; 2
    1efe:	fe 01       	movw	r30, r28
    1f00:	7c 96       	adiw	r30, 0x1c	; 28
    1f02:	2d e6       	ldi	r18, 0x6D	; 109
                buf[ETH_ARP_SRC_MAC_P+i]=macaddr[i];
                i++;
        }
        i=0;
        while(i<4){
                buf[ETH_ARP_DST_IP_P+i]=buf[ETH_ARP_SRC_IP_P+i];
    1f04:	32 e0       	ldi	r19, 0x02	; 2
    1f06:	80 81       	ld	r24, Z
                buf[ETH_ARP_SRC_IP_P+i]=ipaddr[i];
    1f08:	82 87       	std	Z+10, r24	; 0x0a
    1f0a:	8d 91       	ld	r24, X+
                buf[ETH_ARP_DST_MAC_P+i]=buf[ETH_ARP_SRC_MAC_P+i];
                buf[ETH_ARP_SRC_MAC_P+i]=macaddr[i];
                i++;
        }
        i=0;
        while(i<4){
    1f0c:	81 93       	st	Z+, r24
    1f0e:	a2 17       	cp	r26, r18
    1f10:	b3 07       	cpc	r27, r19
                buf[ETH_ARP_DST_IP_P+i]=buf[ETH_ARP_SRC_IP_P+i];
                buf[ETH_ARP_SRC_IP_P+i]=ipaddr[i];
                i++;
        }
        // eth+arp is 42 bytes:
        enc28j60PacketSend(42,buf); 
    1f12:	c9 f7       	brne	.-14     	; 0x1f06 <_Z28make_arp_answer_from_requestPh+0x34>
    1f14:	be 01       	movw	r22, r28
    1f16:	8a e2       	ldi	r24, 0x2A	; 42
    1f18:	90 e0       	ldi	r25, 0x00	; 0
}
    1f1a:	36 de       	rcall	.-916    	; 0x1b88 <_Z18enc28j60PacketSendjPh>
    1f1c:	df 91       	pop	r29
    1f1e:	cf 91       	pop	r28
    1f20:	08 95       	ret

00001f22 <_Z28make_echo_reply_from_requestPhj>:

void make_echo_reply_from_request(uint8_t *buf,uint16_t len)
{
    1f22:	0f 93       	push	r16
    1f24:	1f 93       	push	r17
    1f26:	cf 93       	push	r28
    1f28:	df 93       	push	r29
    1f2a:	ec 01       	movw	r28, r24
        make_eth(buf);
        make_ip(buf);
    1f2c:	8b 01       	movw	r16, r22
    1f2e:	9e df       	rcall	.-196    	; 0x1e6c <_Z8make_ethPh>
        buf[ICMP_TYPE_P]=ICMP_TYPE_ECHOREPLY_V;
    1f30:	ce 01       	movw	r24, r28
        // we changed only the icmp.type field from request(=8) to reply(=0).
        // we can therefore easily correct the checksum:
        if (buf[ICMP_CHECKSUM_P] > (0xff-0x08)){
    1f32:	be df       	rcall	.-132    	; 0x1eb0 <_Z7make_ipPh>
    1f34:	1a a2       	std	Y+34, r1	; 0x22
    1f36:	8c a1       	ldd	r24, Y+36	; 0x24
                buf[ICMP_CHECKSUM_P+1]++;
    1f38:	88 3f       	cpi	r24, 0xF8	; 248
    1f3a:	18 f0       	brcs	.+6      	; 0x1f42 <_Z28make_echo_reply_from_requestPhj+0x20>
    1f3c:	9d a1       	ldd	r25, Y+37	; 0x25
        }
        buf[ICMP_CHECKSUM_P]+=0x08;
    1f3e:	9f 5f       	subi	r25, 0xFF	; 255
        //
        enc28j60PacketSend(len,buf);
    1f40:	9d a3       	std	Y+37, r25	; 0x25
    1f42:	88 5f       	subi	r24, 0xF8	; 248
    1f44:	8c a3       	std	Y+36, r24	; 0x24
}
    1f46:	be 01       	movw	r22, r28
    1f48:	c8 01       	movw	r24, r16
    1f4a:	1e de       	rcall	.-964    	; 0x1b88 <_Z18enc28j60PacketSendjPh>
    1f4c:	df 91       	pop	r29
    1f4e:	cf 91       	pop	r28
    1f50:	1f 91       	pop	r17
    1f52:	0f 91       	pop	r16
    1f54:	08 95       	ret

00001f56 <_Z27make_udp_reply_from_requestPhPchj>:

// you can send a max of 220 bytes of data
void make_udp_reply_from_request(uint8_t *buf,char *data,uint8_t datalen,uint16_t port)
{
    1f56:	df 92       	push	r13
    1f58:	ef 92       	push	r14
    1f5a:	ff 92       	push	r15
    1f5c:	0f 93       	push	r16
    1f5e:	1f 93       	push	r17
    1f60:	cf 93       	push	r28
    1f62:	df 93       	push	r29
    1f64:	ec 01       	movw	r28, r24
    1f66:	d6 2e       	mov	r13, r22
    1f68:	e7 2e       	mov	r14, r23
    1f6a:	04 2f       	mov	r16, r20
    1f6c:	12 2f       	mov	r17, r18
        uint8_t i=0;
        uint16_t ck;
        make_eth(buf);
    1f6e:	f3 2e       	mov	r15, r19
    1f70:	7d df       	rcall	.-262    	; 0x1e6c <_Z8make_ethPh>
    1f72:	0d 3d       	cpi	r16, 0xDD	; 221
    1f74:	08 f0       	brcs	.+2      	; 0x1f78 <_Z27make_udp_reply_from_requestPhPchj+0x22>
        if (datalen>220){
                datalen=220;
        }
        // total length field in the IP header must be set:
        buf[IP_TOTLEN_H_P]=0;
    1f76:	0c ed       	ldi	r16, 0xDC	; 220
        buf[IP_TOTLEN_L_P]=IP_HEADER_LEN+UDP_HEADER_LEN+datalen;
    1f78:	18 8a       	std	Y+16, r1	; 0x10
    1f7a:	8c e1       	ldi	r24, 0x1C	; 28
        make_ip(buf);
    1f7c:	80 0f       	add	r24, r16
    1f7e:	89 8b       	std	Y+17, r24	; 0x11
        // send to port:
        //buf[UDP_DST_PORT_H_P]=port>>8;
        //buf[UDP_DST_PORT_L_P]=port & 0xff;
        // sent to port of sender and use "port" as own source:
        buf[UDP_DST_PORT_H_P]=buf[UDP_SRC_PORT_H_P];
    1f80:	ce 01       	movw	r24, r28
    1f82:	96 df       	rcall	.-212    	; 0x1eb0 <_Z7make_ipPh>
        buf[UDP_DST_PORT_L_P]= buf[UDP_SRC_PORT_L_P];
    1f84:	8a a1       	ldd	r24, Y+34	; 0x22
    1f86:	8c a3       	std	Y+36, r24	; 0x24
        buf[UDP_SRC_PORT_H_P]=port>>8;
    1f88:	8b a1       	ldd	r24, Y+35	; 0x23
        buf[UDP_SRC_PORT_L_P]=port & 0xff;
    1f8a:	8d a3       	std	Y+37, r24	; 0x25
        // calculte the udp length:
        buf[UDP_LEN_H_P]=0;
    1f8c:	fa a2       	std	Y+34, r15	; 0x22
        buf[UDP_LEN_L_P]=UDP_HEADER_LEN+datalen;
    1f8e:	1b a3       	std	Y+35, r17	; 0x23
    1f90:	1e a2       	std	Y+38, r1	; 0x26
    1f92:	88 e0       	ldi	r24, 0x08	; 8
        // zero the checksum
        buf[UDP_CHECKSUM_H_P]=0;
    1f94:	80 0f       	add	r24, r16
        buf[UDP_CHECKSUM_L_P]=0;
    1f96:	8f a3       	std	Y+39, r24	; 0x27
        // copy the data:
        while(i<datalen){
    1f98:	18 a6       	std	Y+40, r1	; 0x28
    1f9a:	19 a6       	std	Y+41, r1	; 0x29
    1f9c:	00 23       	and	r16, r16
    1f9e:	81 f0       	breq	.+32     	; 0x1fc0 <_Z27make_udp_reply_from_requestPhPchj+0x6a>
    1fa0:	ad 2d       	mov	r26, r13
    1fa2:	be 2d       	mov	r27, r14
    1fa4:	fe 01       	movw	r30, r28
    1fa6:	ba 96       	adiw	r30, 0x2a	; 42
    1fa8:	2f ef       	ldi	r18, 0xFF	; 255
    1faa:	20 0f       	add	r18, r16
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	25 5d       	subi	r18, 0xD5	; 213
    1fb0:	3f 4f       	sbci	r19, 0xFF	; 255
                buf[UDP_DATA_P+i]=data[i];
    1fb2:	2c 0f       	add	r18, r28
    1fb4:	3d 1f       	adc	r19, r29
        buf[UDP_LEN_L_P]=UDP_HEADER_LEN+datalen;
        // zero the checksum
        buf[UDP_CHECKSUM_H_P]=0;
        buf[UDP_CHECKSUM_L_P]=0;
        // copy the data:
        while(i<datalen){
    1fb6:	9d 91       	ld	r25, X+
    1fb8:	91 93       	st	Z+, r25
    1fba:	e2 17       	cp	r30, r18
                buf[UDP_DATA_P+i]=data[i];
                i++;
        }
        ck=checksum(&buf[IP_SRC_P], 16 + datalen,1);
    1fbc:	f3 07       	cpc	r31, r19
    1fbe:	d9 f7       	brne	.-10     	; 0x1fb6 <_Z27make_udp_reply_from_requestPhPchj+0x60>
    1fc0:	10 e0       	ldi	r17, 0x00	; 0
    1fc2:	b8 01       	movw	r22, r16
    1fc4:	60 5f       	subi	r22, 0xF0	; 240
    1fc6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fc8:	41 e0       	ldi	r20, 0x01	; 1
    1fca:	ce 01       	movw	r24, r28
        buf[UDP_CHECKSUM_H_P]=ck>>8;
    1fcc:	4a 96       	adiw	r24, 0x1a	; 26
        buf[UDP_CHECKSUM_L_P]=ck& 0xff;
        enc28j60PacketSend(UDP_HEADER_LEN+IP_HEADER_LEN+ETH_HEADER_LEN+datalen,buf);
    1fce:	6f de       	rcall	.-802    	; 0x1cae <_Z8checksumPhjh>
    1fd0:	98 a7       	std	Y+40, r25	; 0x28
    1fd2:	89 a7       	std	Y+41, r24	; 0x29
    1fd4:	be 01       	movw	r22, r28
}
    1fd6:	c8 01       	movw	r24, r16
    1fd8:	8a 96       	adiw	r24, 0x2a	; 42
    1fda:	d6 dd       	rcall	.-1108   	; 0x1b88 <_Z18enc28j60PacketSendjPh>
    1fdc:	df 91       	pop	r29
    1fde:	cf 91       	pop	r28
    1fe0:	1f 91       	pop	r17
    1fe2:	0f 91       	pop	r16
    1fe4:	ff 90       	pop	r15
    1fe6:	ef 90       	pop	r14
    1fe8:	df 90       	pop	r13
    1fea:	08 95       	ret

00001fec <_Z8spi_initv>:
#include "spi.h"

void spi_init(void)
{
    //DDRB  |= 1<<PB5 | 1<<PB7; // mosi, sck output
	DDRB  |= 1<<SPI_MOSI | 1<<SPI_SCK; // mosi, sck output
    1fec:	87 b3       	in	r24, 0x17	; 23
    1fee:	86 60       	ori	r24, 0x06	; 6
    1ff0:	87 bb       	out	0x17, r24	; 23
	cbi(SPI_DDR,SPI_MISO); // MISO is input
    1ff2:	bb 98       	cbi	0x17, 3	; 23
        
           //    CSPASSIVE; ###############################
    cbi(SPI_PORT,SPI_MOSI); // MOSI low
    1ff4:	c2 98       	cbi	0x18, 2	; 24
    cbi(SPI_PORT,SPI_SCK); // SCK low
    1ff6:	c1 98       	cbi	0x18, 1	; 24
    //CPHA = 0;
  //  SPCR &= 0xF3;

	// initialize SPI interface
	// master mode and Fosc/2 clock:
    SPCR = (1<<SPE)|(1<<MSTR);  
    1ff8:	80 e5       	ldi	r24, 0x50	; 80
    1ffa:	8d b9       	out	0x0d, r24	; 13
     //SPCR &= 0x7B;
   // master mode and Fosc/128 clock:
   //SPCR &= 0xFB;
  
	//SPSR = 0x00;
    SPSR |= (1<<SPI2X); 
    1ffc:	70 9a       	sbi	0x0e, 0	; 14
    1ffe:	08 95       	ret

00002000 <_Z8delay_msj>:
/* delay for a minimum of <ms> */
{
        // we use a calibrated macro. This is more
        // accurate and not so much compiler dependent
        // as self made code.
        while(ms){
    2000:	00 97       	sbiw	r24, 0x00	; 0
    2002:	41 f0       	breq	.+16     	; 0x2014 <_Z8delay_msj+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2004:	ef eb       	ldi	r30, 0xBF	; 191
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	31 97       	sbiw	r30, 0x01	; 1
    200a:	f1 f7       	brne	.-4      	; 0x2008 <_Z8delay_msj+0x8>
    200c:	00 c0       	rjmp	.+0      	; 0x200e <_Z8delay_msj+0xe>
    200e:	00 00       	nop
                _delay_ms(0.96);
                ms--;
    2010:	01 97       	sbiw	r24, 0x01	; 1
/* delay for a minimum of <ms> */
{
        // we use a calibrated macro. This is more
        // accurate and not so much compiler dependent
        // as self made code.
        while(ms){
    2012:	c1 f7       	brne	.-16     	; 0x2004 <_Z8delay_msj+0x4>
    2014:	08 95       	ret

00002016 <_Z9Timer_ISR8Dev_typej>:
	sb->Serialstore(data);
	sbi(PORTB,6);
}
void Timer_ISR(Dev_type Device,uint16_t Arg)
{
	mem4[SEC]++;
    2016:	e0 e2       	ldi	r30, 0x20	; 32
    2018:	f3 e0       	ldi	r31, 0x03	; 3
    201a:	84 85       	ldd	r24, Z+12	; 0x0c
    201c:	95 85       	ldd	r25, Z+13	; 0x0d
    201e:	01 96       	adiw	r24, 0x01	; 1
    2020:	95 87       	std	Z+13, r25	; 0x0d
    2022:	84 87       	std	Z+12, r24	; 0x0c
	Ctl_LCD_Cursor++;
    2024:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <Ctl_LCD_Cursor>
    2028:	8f 5f       	subi	r24, 0xFF	; 255
    202a:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <Ctl_LCD_Cursor>
	cbi(PORTB,5); //통신 램프 클리어
    202e:	c5 98       	cbi	0x18, 5	; 24
	cbi(PORTB,6); //통신 램프 클리어 	
    2030:	c6 98       	cbi	0x18, 6	; 24
	#if USE_SYSTEM_SEC
		//mem4[SYSTEM_SEC_CLOCK]++;
		current_states_times++;
    2032:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <current_states_times>
    2036:	90 91 99 03 	lds	r25, 0x0399	; 0x800399 <current_states_times+0x1>
    203a:	a0 91 9a 03 	lds	r26, 0x039A	; 0x80039a <current_states_times+0x2>
    203e:	b0 91 9b 03 	lds	r27, 0x039B	; 0x80039b <current_states_times+0x3>
    2042:	01 96       	adiw	r24, 0x01	; 1
    2044:	a1 1d       	adc	r26, r1
    2046:	b1 1d       	adc	r27, r1
    2048:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <current_states_times>
    204c:	90 93 99 03 	sts	0x0399, r25	; 0x800399 <current_states_times+0x1>
    2050:	a0 93 9a 03 	sts	0x039A, r26	; 0x80039a <current_states_times+0x2>
    2054:	b0 93 9b 03 	sts	0x039B, r27	; 0x80039b <current_states_times+0x3>
    2058:	08 95       	ret

0000205a <_Z7ADC_ISR8Dev_typej>:
	#endif
}
void ADC_ISR(Dev_type Device,uint16_t Arg)
{
    205a:	08 95       	ret

0000205c <_Z9Set_Alarmv>:
{
	Alarm_Open(ALARM0,80,Set_Alarm);
}
void Set_Alarm()
{
	if(chatter_flag == 0)
    205c:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <chatter_flag>
    2060:	81 11       	cpse	r24, r1
    2062:	03 c0       	rjmp	.+6      	; 0x206a <_Z9Set_Alarmv+0xe>
	{
		chatter_flag = 1;
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <chatter_flag>
    206a:	08 95       	ret

0000206c <_ZL5proc4Pv>:
		seq++;
	}
	
}
static void proc4(void* pvParam)
{
    206c:	cf 93       	push	r28
    206e:	df 93       	push	r29
    2070:	cd b7       	in	r28, 0x3d	; 61
    2072:	de b7       	in	r29, 0x3e	; 62
    2074:	cc 54       	subi	r28, 0x4C	; 76
    2076:	d1 09       	sbc	r29, r1
    2078:	0f b6       	in	r0, 0x3f	; 63
    207a:	f8 94       	cli
    207c:	de bf       	out	0x3e, r29	; 62
    207e:	0f be       	out	0x3f, r0	; 63
    2080:	cd bf       	out	0x3d, r28	; 61
	char ip_adr1[12];
		 lcd->Clear_Lcd();
    2082:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    2086:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    208a:	a6 d8       	rcall	.-3764   	; 0x11d8 <_ZN13Char_LCD2004A9Clear_LcdEv>
		 unsigned char left_up[8]  = {0x01,0x02,0x04,0x08,0x10,0x10,0x10,0x10};
    208c:	88 e0       	ldi	r24, 0x08	; 8
    208e:	e7 e0       	ldi	r30, 0x07	; 7
    2090:	f1 e0       	ldi	r31, 0x01	; 1
    2092:	de 01       	movw	r26, r28
    2094:	1d 96       	adiw	r26, 0x0d	; 13
    2096:	01 90       	ld	r0, Z+
    2098:	0d 92       	st	X+, r0
    209a:	8a 95       	dec	r24
    209c:	e1 f7       	brne	.-8      	; 0x2096 <_ZL5proc4Pv+0x2a>
		 unsigned char right_up[8] = {0x10,0x08,0x04,0x02,0x01,0x01,0x01,0x01};
    209e:	88 e0       	ldi	r24, 0x08	; 8
    20a0:	ef e0       	ldi	r30, 0x0F	; 15
    20a2:	f1 e0       	ldi	r31, 0x01	; 1
    20a4:	de 01       	movw	r26, r28
    20a6:	55 96       	adiw	r26, 0x15	; 21
    20a8:	01 90       	ld	r0, Z+
    20aa:	0d 92       	st	X+, r0
    20ac:	8a 95       	dec	r24
    20ae:	e1 f7       	brne	.-8      	; 0x20a8 <_ZL5proc4Pv+0x3c>
		 unsigned char right_down[8] = {0x01,0x01,0x01,0x01,0x02,0x04,0x08,0x10};
    20b0:	88 e0       	ldi	r24, 0x08	; 8
    20b2:	e7 e1       	ldi	r30, 0x17	; 23
    20b4:	f1 e0       	ldi	r31, 0x01	; 1
    20b6:	de 01       	movw	r26, r28
    20b8:	5d 96       	adiw	r26, 0x1d	; 29
    20ba:	01 90       	ld	r0, Z+
    20bc:	0d 92       	st	X+, r0
    20be:	8a 95       	dec	r24
    20c0:	e1 f7       	brne	.-8      	; 0x20ba <_ZL5proc4Pv+0x4e>
		 unsigned char left_down[8] = {0x10,0x10,0x10,0x10,0x08,0x04,0x02,0x01};
    20c2:	88 e0       	ldi	r24, 0x08	; 8
    20c4:	ef e1       	ldi	r30, 0x1F	; 31
    20c6:	f1 e0       	ldi	r31, 0x01	; 1
    20c8:	de 01       	movw	r26, r28
    20ca:	95 96       	adiw	r26, 0x25	; 37
    20cc:	01 90       	ld	r0, Z+
    20ce:	0d 92       	st	X+, r0
    20d0:	8a 95       	dec	r24
    20d2:	e1 f7       	brne	.-8      	; 0x20cc <_ZL5proc4Pv+0x60>
		 
		 
		 unsigned char left_pic[8] = {0x01,0x02,0x06,0x0E,0x1E,0x16,0x12,0x11};
    20d4:	88 e0       	ldi	r24, 0x08	; 8
    20d6:	e7 e2       	ldi	r30, 0x27	; 39
    20d8:	f1 e0       	ldi	r31, 0x01	; 1
    20da:	de 01       	movw	r26, r28
    20dc:	9d 96       	adiw	r26, 0x2d	; 45
    20de:	01 90       	ld	r0, Z+
    20e0:	0d 92       	st	X+, r0
    20e2:	8a 95       	dec	r24
    20e4:	e1 f7       	brne	.-8      	; 0x20de <_ZL5proc4Pv+0x72>
		 unsigned char right_pic[8] = {0x10,0x08,0x0C,0x0E,0x0F,0X0D,0x09,0x11};
    20e6:	88 e0       	ldi	r24, 0x08	; 8
    20e8:	ef e2       	ldi	r30, 0x2F	; 47
    20ea:	f1 e0       	ldi	r31, 0x01	; 1
    20ec:	de 01       	movw	r26, r28
    20ee:	d5 96       	adiw	r26, 0x35	; 53
    20f0:	01 90       	ld	r0, Z+
    20f2:	0d 92       	st	X+, r0
    20f4:	8a 95       	dec	r24
    20f6:	e1 f7       	brne	.-8      	; 0x20f0 <_ZL5proc4Pv+0x84>
		 unsigned char right_down_pic[8] = {0x11,0x09,0x0D,0x0F,0x0E,0x0C,0x08,0x10};
    20f8:	88 e0       	ldi	r24, 0x08	; 8
    20fa:	e7 e3       	ldi	r30, 0x37	; 55
    20fc:	f1 e0       	ldi	r31, 0x01	; 1
    20fe:	de 01       	movw	r26, r28
    2100:	dd 96       	adiw	r26, 0x3d	; 61
    2102:	01 90       	ld	r0, Z+
    2104:	0d 92       	st	X+, r0
    2106:	8a 95       	dec	r24
    2108:	e1 f7       	brne	.-8      	; 0x2102 <_ZL5proc4Pv+0x96>
		 unsigned char left_down_pic[8] = {0x11,0x12,0x1E,0x1E,0x0E,0x06,0x02,0x01};
    210a:	88 e0       	ldi	r24, 0x08	; 8
    210c:	ef e3       	ldi	r30, 0x3F	; 63
    210e:	f1 e0       	ldi	r31, 0x01	; 1
    2110:	de 01       	movw	r26, r28
    2112:	ab 5b       	subi	r26, 0xBB	; 187
    2114:	bf 4f       	sbci	r27, 0xFF	; 255
    2116:	01 90       	ld	r0, Z+
    2118:	0d 92       	st	X+, r0
    211a:	8a 95       	dec	r24
    211c:	e1 f7       	brne	.-8      	; 0x2116 <_ZL5proc4Pv+0xaa>
		 
		 
		 
		 lcd->Register_Font(0,left_up);
    211e:	ae 01       	movw	r20, r28
    2120:	43 5f       	subi	r20, 0xF3	; 243
    2122:	5f 4f       	sbci	r21, 0xFF	; 255
    2124:	60 e0       	ldi	r22, 0x00	; 0
    2126:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    212a:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    212e:	c1 d8       	rcall	.-3710   	; 0x12b2 <_ZN13Char_LCD2004A13Register_FontEcPKh>
		 lcd->Register_Font(1,right_up);
    2130:	ae 01       	movw	r20, r28
    2132:	4b 5e       	subi	r20, 0xEB	; 235
    2134:	5f 4f       	sbci	r21, 0xFF	; 255
    2136:	61 e0       	ldi	r22, 0x01	; 1
    2138:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    213c:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    2140:	b8 d8       	rcall	.-3728   	; 0x12b2 <_ZN13Char_LCD2004A13Register_FontEcPKh>
		 lcd->Register_Font(2,right_down);
    2142:	ae 01       	movw	r20, r28
    2144:	43 5e       	subi	r20, 0xE3	; 227
    2146:	5f 4f       	sbci	r21, 0xFF	; 255
    2148:	62 e0       	ldi	r22, 0x02	; 2
    214a:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    214e:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    2152:	af d8       	rcall	.-3746   	; 0x12b2 <_ZN13Char_LCD2004A13Register_FontEcPKh>
		 lcd->Register_Font(3,left_down);
    2154:	ae 01       	movw	r20, r28
    2156:	4b 5d       	subi	r20, 0xDB	; 219
    2158:	5f 4f       	sbci	r21, 0xFF	; 255
    215a:	63 e0       	ldi	r22, 0x03	; 3
    215c:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    2160:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    2164:	a6 d8       	rcall	.-3764   	; 0x12b2 <_ZN13Char_LCD2004A13Register_FontEcPKh>
		 
		 lcd->Register_Font(4,left_pic);
    2166:	ae 01       	movw	r20, r28
    2168:	43 5d       	subi	r20, 0xD3	; 211
    216a:	5f 4f       	sbci	r21, 0xFF	; 255
    216c:	64 e0       	ldi	r22, 0x04	; 4
    216e:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    2172:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    2176:	9d d8       	rcall	.-3782   	; 0x12b2 <_ZN13Char_LCD2004A13Register_FontEcPKh>
		 lcd->Register_Font(5,right_pic);
    2178:	ae 01       	movw	r20, r28
    217a:	4b 5c       	subi	r20, 0xCB	; 203
    217c:	5f 4f       	sbci	r21, 0xFF	; 255
    217e:	65 e0       	ldi	r22, 0x05	; 5
    2180:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    2184:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    2188:	94 d8       	rcall	.-3800   	; 0x12b2 <_ZN13Char_LCD2004A13Register_FontEcPKh>
		 lcd->Register_Font(6,right_down_pic);
    218a:	ae 01       	movw	r20, r28
    218c:	43 5c       	subi	r20, 0xC3	; 195
    218e:	5f 4f       	sbci	r21, 0xFF	; 255
    2190:	66 e0       	ldi	r22, 0x06	; 6
    2192:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    2196:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
		 lcd->Register_Font(7,left_down_pic);
    219a:	8b d8       	rcall	.-3818   	; 0x12b2 <_ZN13Char_LCD2004A13Register_FontEcPKh>
    219c:	ae 01       	movw	r20, r28
    219e:	4b 5b       	subi	r20, 0xBB	; 187
    21a0:	5f 4f       	sbci	r21, 0xFF	; 255
    21a2:	67 e0       	ldi	r22, 0x07	; 7
    21a4:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    21a8:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
			cls_var = 0;
			goto LCD_CLEAR;
		}
		lcd->Cursor_Home();
		lcd->Device_Writes("IP :");
		sprintf(ip_adr1,"%d",myip[0]);
    21ac:	82 d8       	rcall	.-3836   	; 0x12b2 <_ZN13Char_LCD2004A13Register_FontEcPKh>
    21ae:	0f 2e       	mov	r0, r31
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	8f 2e       	mov	r8, r31
    21b4:	f3 e0       	ldi	r31, 0x03	; 3
    21b6:	9f 2e       	mov	r9, r31
    21b8:	f0 2d       	mov	r31, r0
    21ba:	0f 2e       	mov	r0, r31
    21bc:	fc ea       	ldi	r31, 0xAC	; 172
    21be:	cf 2e       	mov	r12, r31
    21c0:	f1 e0       	ldi	r31, 0x01	; 1
    21c2:	df 2e       	mov	r13, r31
    21c4:	f0 2d       	mov	r31, r0
    21c6:	9e 01       	movw	r18, r28
    21c8:	2f 5f       	subi	r18, 0xFF	; 255
    21ca:	3f 4f       	sbci	r19, 0xFF	; 255
		lcd->Device_Writes(ip_adr1);
		lcd->Device_Writes(".");
		sprintf(ip_adr1,"%d",myip[3]);
		lcd->Device_Writes(ip_adr1);
		lcd->Set_Cursor_Print(0,1,"MAC:");
		sprintf(ip_adr1,"%x",mymac[0]);
    21cc:	79 01       	movw	r14, r18
    21ce:	0f 2e       	mov	r0, r31
    21d0:	f1 e0       	ldi	r31, 0x01	; 1
    21d2:	af 2e       	mov	r10, r31
    21d4:	f1 e0       	ldi	r31, 0x01	; 1
    21d6:	bf 2e       	mov	r11, r31
    21d8:	f0 2d       	mov	r31, r0
    21da:	06 eb       	ldi	r16, 0xB6	; 182
		lcd->Device_Writes(":");
		sprintf(ip_adr1,"%x",mymac[5]);
		lcd->Device_Writes(ip_adr1);
					 //char num = Ctl_LCD_Cursor % 4;
		char cnts1 = lcd_cnt / 30;
		char num = cnts1 % 4;
    21dc:	11 e0       	ldi	r17, 0x01	; 1
    21de:	0f 2e       	mov	r0, r31
    21e0:	f9 e8       	ldi	r31, 0x89	; 137
    21e2:	5f 2e       	mov	r5, r31
			cls_var = 0;
			goto LCD_CLEAR;
		}
		lcd->Cursor_Home();
		lcd->Device_Writes("IP :");
		sprintf(ip_adr1,"%d",myip[0]);
    21e4:	f0 2d       	mov	r31, r0
    21e6:	62 2e       	mov	r6, r18
		 lcd->Register_Font(4,left_pic);
		 lcd->Register_Font(5,right_pic);
		 lcd->Register_Font(6,right_down_pic);
		 lcd->Register_Font(7,left_down_pic);
		 LCD_CLEAR:
			lcd->Clear_Lcd();
    21e8:	7f 2c       	mov	r7, r15
    21ea:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    21ee:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    21f2:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <_ZN13Char_LCD2004A9Clear_LcdEv>
	while(1)
	{
		if(cls_var == 1)
    21f6:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <cls_var>
		{
			cls_var = 0;
    21fa:	81 30       	cpi	r24, 0x01	; 1
    21fc:	19 f4       	brne	.+6      	; 0x2204 <_ZL5proc4Pv+0x198>
			goto LCD_CLEAR;
    21fe:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <cls_var>
		}
		lcd->Cursor_Home();
    2202:	f3 cf       	rjmp	.-26     	; 0x21ea <_ZL5proc4Pv+0x17e>
    2204:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    2208:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
		lcd->Device_Writes("IP :");
    220c:	47 d8       	rcall	.-3954   	; 0x129c <_ZN13Char_LCD2004A11Cursor_HomeEv>
    220e:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    2212:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    2216:	dc 01       	movw	r26, r24
    2218:	ed 91       	ld	r30, X+
    221a:	fc 91       	ld	r31, X
    221c:	04 80       	ldd	r0, Z+4	; 0x04
    221e:	f5 81       	ldd	r31, Z+5	; 0x05
    2220:	e0 2d       	mov	r30, r0
    2222:	67 ea       	ldi	r22, 0xA7	; 167
    2224:	71 e0       	ldi	r23, 0x01	; 1
		sprintf(ip_adr1,"%d",myip[0]);
    2226:	09 95       	icall
    2228:	f4 01       	movw	r30, r8
    222a:	80 81       	ld	r24, Z
    222c:	1f 92       	push	r1
    222e:	8f 93       	push	r24
    2230:	df 92       	push	r13
    2232:	cf 92       	push	r12
    2234:	ff 92       	push	r15
    2236:	ef 92       	push	r14
    2238:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <sprintf>
		lcd->Device_Writes(ip_adr1);
    223c:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    2240:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    2244:	dc 01       	movw	r26, r24
    2246:	ed 91       	ld	r30, X+
    2248:	fc 91       	ld	r31, X
    224a:	04 80       	ldd	r0, Z+4	; 0x04
    224c:	f5 81       	ldd	r31, Z+5	; 0x05
    224e:	e0 2d       	mov	r30, r0
    2250:	66 2d       	mov	r22, r6
    2252:	77 2d       	mov	r23, r7
		lcd->Device_Writes(".");
    2254:	09 95       	icall
    2256:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    225a:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    225e:	dc 01       	movw	r26, r24
    2260:	ed 91       	ld	r30, X+
    2262:	fc 91       	ld	r31, X
    2264:	04 80       	ldd	r0, Z+4	; 0x04
    2266:	f5 81       	ldd	r31, Z+5	; 0x05
    2268:	e0 2d       	mov	r30, r0
    226a:	6f ea       	ldi	r22, 0xAF	; 175
    226c:	71 e0       	ldi	r23, 0x01	; 1
		sprintf(ip_adr1,"%d",myip[1]);
    226e:	09 95       	icall
    2270:	f4 01       	movw	r30, r8
    2272:	81 81       	ldd	r24, Z+1	; 0x01
    2274:	1f 92       	push	r1
    2276:	8f 93       	push	r24
    2278:	df 92       	push	r13
    227a:	cf 92       	push	r12
    227c:	ff 92       	push	r15
    227e:	ef 92       	push	r14
    2280:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <sprintf>
		lcd->Device_Writes(ip_adr1);
    2284:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    2288:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    228c:	dc 01       	movw	r26, r24
    228e:	ed 91       	ld	r30, X+
    2290:	fc 91       	ld	r31, X
    2292:	04 80       	ldd	r0, Z+4	; 0x04
    2294:	f5 81       	ldd	r31, Z+5	; 0x05
    2296:	e0 2d       	mov	r30, r0
    2298:	66 2d       	mov	r22, r6
    229a:	77 2d       	mov	r23, r7
		lcd->Device_Writes(".");
    229c:	09 95       	icall
    229e:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    22a2:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    22a6:	dc 01       	movw	r26, r24
    22a8:	ed 91       	ld	r30, X+
    22aa:	fc 91       	ld	r31, X
    22ac:	04 80       	ldd	r0, Z+4	; 0x04
    22ae:	f5 81       	ldd	r31, Z+5	; 0x05
    22b0:	e0 2d       	mov	r30, r0
    22b2:	6f ea       	ldi	r22, 0xAF	; 175
    22b4:	71 e0       	ldi	r23, 0x01	; 1
		sprintf(ip_adr1,"%d",myip[2]);
    22b6:	09 95       	icall
    22b8:	f4 01       	movw	r30, r8
    22ba:	82 81       	ldd	r24, Z+2	; 0x02
    22bc:	1f 92       	push	r1
    22be:	8f 93       	push	r24
    22c0:	df 92       	push	r13
    22c2:	cf 92       	push	r12
    22c4:	ff 92       	push	r15
    22c6:	ef 92       	push	r14
    22c8:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <sprintf>
		lcd->Device_Writes(ip_adr1);
    22cc:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    22d0:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    22d4:	dc 01       	movw	r26, r24
    22d6:	ed 91       	ld	r30, X+
    22d8:	fc 91       	ld	r31, X
    22da:	04 80       	ldd	r0, Z+4	; 0x04
    22dc:	f5 81       	ldd	r31, Z+5	; 0x05
    22de:	e0 2d       	mov	r30, r0
    22e0:	66 2d       	mov	r22, r6
    22e2:	77 2d       	mov	r23, r7
		lcd->Device_Writes(".");
    22e4:	09 95       	icall
    22e6:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    22ea:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    22ee:	dc 01       	movw	r26, r24
    22f0:	ed 91       	ld	r30, X+
    22f2:	fc 91       	ld	r31, X
    22f4:	04 80       	ldd	r0, Z+4	; 0x04
    22f6:	f5 81       	ldd	r31, Z+5	; 0x05
    22f8:	e0 2d       	mov	r30, r0
    22fa:	6f ea       	ldi	r22, 0xAF	; 175
    22fc:	71 e0       	ldi	r23, 0x01	; 1
		sprintf(ip_adr1,"%d",myip[3]);
    22fe:	09 95       	icall
    2300:	f4 01       	movw	r30, r8
    2302:	83 81       	ldd	r24, Z+3	; 0x03
    2304:	1f 92       	push	r1
    2306:	8f 93       	push	r24
    2308:	df 92       	push	r13
    230a:	cf 92       	push	r12
    230c:	ff 92       	push	r15
    230e:	ef 92       	push	r14
    2310:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <sprintf>
		lcd->Device_Writes(ip_adr1);
    2314:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    2318:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    231c:	dc 01       	movw	r26, r24
    231e:	ed 91       	ld	r30, X+
    2320:	fc 91       	ld	r31, X
    2322:	04 80       	ldd	r0, Z+4	; 0x04
    2324:	f5 81       	ldd	r31, Z+5	; 0x05
    2326:	e0 2d       	mov	r30, r0
    2328:	66 2d       	mov	r22, r6
    232a:	77 2d       	mov	r23, r7
		lcd->Set_Cursor_Print(0,1,"MAC:");
    232c:	09 95       	icall
    232e:	21 eb       	ldi	r18, 0xB1	; 177
    2330:	31 e0       	ldi	r19, 0x01	; 1
    2332:	41 e0       	ldi	r20, 0x01	; 1
    2334:	60 e0       	ldi	r22, 0x00	; 0
    2336:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    233a:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    233e:	0e 94 25 09 	call	0x124a	; 0x124a <_ZN13Char_LCD2004A16Set_Cursor_PrintEccPKc>
		sprintf(ip_adr1,"%x",mymac[0]);
    2342:	f5 01       	movw	r30, r10
    2344:	80 81       	ld	r24, Z
    2346:	1f 92       	push	r1
    2348:	8f 93       	push	r24
    234a:	1f 93       	push	r17
    234c:	0f 93       	push	r16
    234e:	ff 92       	push	r15
    2350:	ef 92       	push	r14
    2352:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <sprintf>
		lcd->Device_Writes(ip_adr1);
    2356:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    235a:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    235e:	dc 01       	movw	r26, r24
    2360:	ed 91       	ld	r30, X+
    2362:	fc 91       	ld	r31, X
    2364:	04 80       	ldd	r0, Z+4	; 0x04
    2366:	f5 81       	ldd	r31, Z+5	; 0x05
    2368:	e0 2d       	mov	r30, r0
    236a:	66 2d       	mov	r22, r6
    236c:	77 2d       	mov	r23, r7
		lcd->Device_Writes(":");
    236e:	09 95       	icall
    2370:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    2374:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    2378:	dc 01       	movw	r26, r24
    237a:	ed 91       	ld	r30, X+
    237c:	fc 91       	ld	r31, X
    237e:	04 80       	ldd	r0, Z+4	; 0x04
    2380:	f5 81       	ldd	r31, Z+5	; 0x05
    2382:	e0 2d       	mov	r30, r0
    2384:	6a ea       	ldi	r22, 0xAA	; 170
    2386:	71 e0       	ldi	r23, 0x01	; 1
		sprintf(ip_adr1,"%x",mymac[1]);
    2388:	09 95       	icall
    238a:	f5 01       	movw	r30, r10
    238c:	81 81       	ldd	r24, Z+1	; 0x01
    238e:	1f 92       	push	r1
    2390:	8f 93       	push	r24
    2392:	1f 93       	push	r17
    2394:	0f 93       	push	r16
    2396:	ff 92       	push	r15
    2398:	ef 92       	push	r14
    239a:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <sprintf>
		lcd->Device_Writes(ip_adr1);
    239e:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    23a2:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    23a6:	0f b6       	in	r0, 0x3f	; 63
    23a8:	f8 94       	cli
    23aa:	de bf       	out	0x3e, r29	; 62
    23ac:	0f be       	out	0x3f, r0	; 63
    23ae:	cd bf       	out	0x3d, r28	; 61
    23b0:	dc 01       	movw	r26, r24
    23b2:	ed 91       	ld	r30, X+
    23b4:	fc 91       	ld	r31, X
    23b6:	04 80       	ldd	r0, Z+4	; 0x04
    23b8:	f5 81       	ldd	r31, Z+5	; 0x05
    23ba:	e0 2d       	mov	r30, r0
    23bc:	66 2d       	mov	r22, r6
    23be:	77 2d       	mov	r23, r7
		lcd->Device_Writes(":");
    23c0:	09 95       	icall
    23c2:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    23c6:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    23ca:	dc 01       	movw	r26, r24
    23cc:	ed 91       	ld	r30, X+
    23ce:	fc 91       	ld	r31, X
    23d0:	04 80       	ldd	r0, Z+4	; 0x04
    23d2:	f5 81       	ldd	r31, Z+5	; 0x05
    23d4:	e0 2d       	mov	r30, r0
    23d6:	6a ea       	ldi	r22, 0xAA	; 170
    23d8:	71 e0       	ldi	r23, 0x01	; 1
		sprintf(ip_adr1,"%x",mymac[2]);
    23da:	09 95       	icall
    23dc:	f5 01       	movw	r30, r10
    23de:	82 81       	ldd	r24, Z+2	; 0x02
    23e0:	1f 92       	push	r1
    23e2:	8f 93       	push	r24
    23e4:	1f 93       	push	r17
    23e6:	0f 93       	push	r16
    23e8:	ff 92       	push	r15
    23ea:	ef 92       	push	r14
    23ec:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <sprintf>
		lcd->Device_Writes(ip_adr1);
    23f0:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    23f4:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    23f8:	dc 01       	movw	r26, r24
    23fa:	ed 91       	ld	r30, X+
    23fc:	fc 91       	ld	r31, X
    23fe:	04 80       	ldd	r0, Z+4	; 0x04
    2400:	f5 81       	ldd	r31, Z+5	; 0x05
    2402:	e0 2d       	mov	r30, r0
    2404:	66 2d       	mov	r22, r6
    2406:	77 2d       	mov	r23, r7
		lcd->Device_Writes(":");
    2408:	09 95       	icall
    240a:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    240e:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    2412:	dc 01       	movw	r26, r24
    2414:	ed 91       	ld	r30, X+
    2416:	fc 91       	ld	r31, X
    2418:	04 80       	ldd	r0, Z+4	; 0x04
    241a:	f5 81       	ldd	r31, Z+5	; 0x05
    241c:	e0 2d       	mov	r30, r0
    241e:	6a ea       	ldi	r22, 0xAA	; 170
    2420:	71 e0       	ldi	r23, 0x01	; 1
		sprintf(ip_adr1,"%x",mymac[3]);
    2422:	09 95       	icall
    2424:	f5 01       	movw	r30, r10
    2426:	83 81       	ldd	r24, Z+3	; 0x03
    2428:	1f 92       	push	r1
    242a:	8f 93       	push	r24
    242c:	1f 93       	push	r17
    242e:	0f 93       	push	r16
    2430:	ff 92       	push	r15
    2432:	ef 92       	push	r14
    2434:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <sprintf>
		lcd->Device_Writes(ip_adr1);
    2438:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    243c:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    2440:	dc 01       	movw	r26, r24
    2442:	ed 91       	ld	r30, X+
    2444:	fc 91       	ld	r31, X
    2446:	04 80       	ldd	r0, Z+4	; 0x04
    2448:	f5 81       	ldd	r31, Z+5	; 0x05
    244a:	e0 2d       	mov	r30, r0
    244c:	66 2d       	mov	r22, r6
    244e:	77 2d       	mov	r23, r7
		lcd->Device_Writes(":");
    2450:	09 95       	icall
    2452:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    2456:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    245a:	dc 01       	movw	r26, r24
    245c:	ed 91       	ld	r30, X+
    245e:	fc 91       	ld	r31, X
    2460:	04 80       	ldd	r0, Z+4	; 0x04
    2462:	f5 81       	ldd	r31, Z+5	; 0x05
    2464:	e0 2d       	mov	r30, r0
    2466:	6a ea       	ldi	r22, 0xAA	; 170
    2468:	71 e0       	ldi	r23, 0x01	; 1
		sprintf(ip_adr1,"%x",mymac[4]);
    246a:	09 95       	icall
    246c:	f5 01       	movw	r30, r10
    246e:	84 81       	ldd	r24, Z+4	; 0x04
    2470:	1f 92       	push	r1
    2472:	8f 93       	push	r24
    2474:	1f 93       	push	r17
    2476:	0f 93       	push	r16
    2478:	ff 92       	push	r15
    247a:	ef 92       	push	r14
    247c:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <sprintf>
		lcd->Device_Writes(ip_adr1);
    2480:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    2484:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    2488:	dc 01       	movw	r26, r24
    248a:	ed 91       	ld	r30, X+
    248c:	fc 91       	ld	r31, X
    248e:	04 80       	ldd	r0, Z+4	; 0x04
    2490:	f5 81       	ldd	r31, Z+5	; 0x05
    2492:	e0 2d       	mov	r30, r0
    2494:	66 2d       	mov	r22, r6
    2496:	77 2d       	mov	r23, r7
		lcd->Device_Writes(":");
    2498:	09 95       	icall
    249a:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    249e:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    24a2:	dc 01       	movw	r26, r24
    24a4:	ed 91       	ld	r30, X+
    24a6:	fc 91       	ld	r31, X
    24a8:	04 80       	ldd	r0, Z+4	; 0x04
    24aa:	f5 81       	ldd	r31, Z+5	; 0x05
    24ac:	e0 2d       	mov	r30, r0
    24ae:	6a ea       	ldi	r22, 0xAA	; 170
    24b0:	71 e0       	ldi	r23, 0x01	; 1
		sprintf(ip_adr1,"%x",mymac[5]);
    24b2:	09 95       	icall
    24b4:	f5 01       	movw	r30, r10
    24b6:	85 81       	ldd	r24, Z+5	; 0x05
    24b8:	1f 92       	push	r1
    24ba:	8f 93       	push	r24
    24bc:	1f 93       	push	r17
    24be:	0f 93       	push	r16
    24c0:	ff 92       	push	r15
    24c2:	ef 92       	push	r14
    24c4:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <sprintf>
		lcd->Device_Writes(ip_adr1);
    24c8:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    24cc:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    24d0:	dc 01       	movw	r26, r24
    24d2:	ed 91       	ld	r30, X+
    24d4:	fc 91       	ld	r31, X
    24d6:	04 80       	ldd	r0, Z+4	; 0x04
    24d8:	f5 81       	ldd	r31, Z+5	; 0x05
    24da:	e0 2d       	mov	r30, r0
    24dc:	66 2d       	mov	r22, r6
    24de:	77 2d       	mov	r23, r7
					 //char num = Ctl_LCD_Cursor % 4;
		char cnts1 = lcd_cnt / 30;
    24e0:	09 95       	icall
    24e2:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <lcd_cnt>
		char num = cnts1 % 4;
    24e6:	85 9d       	mul	r24, r5
    24e8:	81 2d       	mov	r24, r1
    24ea:	11 24       	eor	r1, r1
    24ec:	82 95       	swap	r24
    24ee:	8f 70       	andi	r24, 0x0F	; 15
		if(num == 0)
    24f0:	83 70       	andi	r24, 0x03	; 3
    24f2:	0f b6       	in	r0, 0x3f	; 63
    24f4:	f8 94       	cli
    24f6:	de bf       	out	0x3e, r29	; 62
    24f8:	0f be       	out	0x3f, r0	; 63
    24fa:	cd bf       	out	0x3d, r28	; 61
    24fc:	09 f0       	breq	.+2      	; 0x2500 <_ZL5proc4Pv+0x494>
		{
			lcd->Cursor_Home();
    24fe:	43 c0       	rjmp	.+134    	; 0x2586 <_ZL5proc4Pv+0x51a>
    2500:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    2504:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    2508:	0e 94 4e 09 	call	0x129c	; 0x129c <_ZN13Char_LCD2004A11Cursor_HomeEv>
			lcd->Cursor_Set(0,2);
    250c:	42 e0       	ldi	r20, 0x02	; 2
    250e:	60 e0       	ldi	r22, 0x00	; 0
    2510:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    2514:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    2518:	0e 94 13 09 	call	0x1226	; 0x1226 <_ZN13Char_LCD2004A10Cursor_SetEcc>
			lcd->Font_Print(0x04);
    251c:	64 e0       	ldi	r22, 0x04	; 4
    251e:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    2522:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    2526:	0e 94 7f 09 	call	0x12fe	; 0x12fe <_ZN13Char_LCD2004A10Font_PrintEc>
			lcd->Font_Print(0x01);
    252a:	61 e0       	ldi	r22, 0x01	; 1
    252c:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    2530:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    2534:	0e 94 7f 09 	call	0x12fe	; 0x12fe <_ZN13Char_LCD2004A10Font_PrintEc>
			lcd->Lcd_Print("Sensor Gateway");
    2538:	69 eb       	ldi	r22, 0xB9	; 185
    253a:	71 e0       	ldi	r23, 0x01	; 1
    253c:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    2540:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    2544:	0e 94 3a 09 	call	0x1274	; 0x1274 <_ZN13Char_LCD2004A9Lcd_PrintEPKc>
			lcd->Cursor_Set(0,3);
    2548:	43 e0       	ldi	r20, 0x03	; 3
    254a:	60 e0       	ldi	r22, 0x00	; 0
    254c:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    2550:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    2554:	0e 94 13 09 	call	0x1226	; 0x1226 <_ZN13Char_LCD2004A10Cursor_SetEcc>
			lcd->Font_Print(0x03);
    2558:	63 e0       	ldi	r22, 0x03	; 3
    255a:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    255e:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    2562:	0e 94 7f 09 	call	0x12fe	; 0x12fe <_ZN13Char_LCD2004A10Font_PrintEc>
			lcd->Font_Print(0x02);
    2566:	62 e0       	ldi	r22, 0x02	; 2
    2568:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    256c:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    2570:	0e 94 7f 09 	call	0x12fe	; 0x12fe <_ZN13Char_LCD2004A10Font_PrintEc>
			lcd->Lcd_Print("BLUE-BIZ.CO.LTD");
    2574:	68 ec       	ldi	r22, 0xC8	; 200
    2576:	71 e0       	ldi	r23, 0x01	; 1
    2578:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    257c:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    2580:	0e 94 3a 09 	call	0x1274	; 0x1274 <_ZN13Char_LCD2004A9Lcd_PrintEPKc>
		}
		else if(num == 1)
    2584:	38 ce       	rjmp	.-912    	; 0x21f6 <_ZL5proc4Pv+0x18a>
    2586:	81 30       	cpi	r24, 0x01	; 1
    2588:	09 f0       	breq	.+2      	; 0x258c <_ZL5proc4Pv+0x520>
		{
			 lcd->Cursor_Home();
    258a:	43 c0       	rjmp	.+134    	; 0x2612 <_ZL5proc4Pv+0x5a6>
    258c:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    2590:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    2594:	0e 94 4e 09 	call	0x129c	; 0x129c <_ZN13Char_LCD2004A11Cursor_HomeEv>
			 lcd->Cursor_Set(0,2);
    2598:	42 e0       	ldi	r20, 0x02	; 2
    259a:	60 e0       	ldi	r22, 0x00	; 0
    259c:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    25a0:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    25a4:	0e 94 13 09 	call	0x1226	; 0x1226 <_ZN13Char_LCD2004A10Cursor_SetEcc>
			 lcd->Font_Print(0x00);
    25a8:	60 e0       	ldi	r22, 0x00	; 0
    25aa:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    25ae:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    25b2:	0e 94 7f 09 	call	0x12fe	; 0x12fe <_ZN13Char_LCD2004A10Font_PrintEc>
			 lcd->Font_Print(0x05);
    25b6:	65 e0       	ldi	r22, 0x05	; 5
    25b8:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    25bc:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    25c0:	0e 94 7f 09 	call	0x12fe	; 0x12fe <_ZN13Char_LCD2004A10Font_PrintEc>
			 lcd->Lcd_Print("Sensor Gateway");
    25c4:	69 eb       	ldi	r22, 0xB9	; 185
    25c6:	71 e0       	ldi	r23, 0x01	; 1
    25c8:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    25cc:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    25d0:	0e 94 3a 09 	call	0x1274	; 0x1274 <_ZN13Char_LCD2004A9Lcd_PrintEPKc>
			 lcd->Cursor_Set(0,3);
    25d4:	43 e0       	ldi	r20, 0x03	; 3
    25d6:	60 e0       	ldi	r22, 0x00	; 0
    25d8:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    25dc:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    25e0:	0e 94 13 09 	call	0x1226	; 0x1226 <_ZN13Char_LCD2004A10Cursor_SetEcc>
			 lcd->Font_Print(0x03);
    25e4:	63 e0       	ldi	r22, 0x03	; 3
    25e6:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    25ea:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    25ee:	0e 94 7f 09 	call	0x12fe	; 0x12fe <_ZN13Char_LCD2004A10Font_PrintEc>
			 lcd->Font_Print(0x02);
    25f2:	62 e0       	ldi	r22, 0x02	; 2
    25f4:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    25f8:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    25fc:	0e 94 7f 09 	call	0x12fe	; 0x12fe <_ZN13Char_LCD2004A10Font_PrintEc>
			 lcd->Lcd_Print("BLUE-BIZ.CO.LTD");
    2600:	68 ec       	ldi	r22, 0xC8	; 200
    2602:	71 e0       	ldi	r23, 0x01	; 1
    2604:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    2608:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    260c:	0e 94 3a 09 	call	0x1274	; 0x1274 <_ZN13Char_LCD2004A9Lcd_PrintEPKc>
		}
		else if(num == 2)
    2610:	f2 cd       	rjmp	.-1052   	; 0x21f6 <_ZL5proc4Pv+0x18a>
    2612:	82 30       	cpi	r24, 0x02	; 2
    2614:	09 f0       	breq	.+2      	; 0x2618 <_ZL5proc4Pv+0x5ac>
		{
			lcd->Cursor_Home();
    2616:	43 c0       	rjmp	.+134    	; 0x269e <_ZL5proc4Pv+0x632>
    2618:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    261c:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    2620:	0e 94 4e 09 	call	0x129c	; 0x129c <_ZN13Char_LCD2004A11Cursor_HomeEv>
			lcd->Cursor_Set(0,2);
    2624:	42 e0       	ldi	r20, 0x02	; 2
    2626:	60 e0       	ldi	r22, 0x00	; 0
    2628:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    262c:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    2630:	0e 94 13 09 	call	0x1226	; 0x1226 <_ZN13Char_LCD2004A10Cursor_SetEcc>
			lcd->Font_Print(0x00);
    2634:	60 e0       	ldi	r22, 0x00	; 0
    2636:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    263a:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    263e:	0e 94 7f 09 	call	0x12fe	; 0x12fe <_ZN13Char_LCD2004A10Font_PrintEc>
			lcd->Font_Print(0x01);
    2642:	61 e0       	ldi	r22, 0x01	; 1
    2644:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    2648:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    264c:	0e 94 7f 09 	call	0x12fe	; 0x12fe <_ZN13Char_LCD2004A10Font_PrintEc>
			lcd->Lcd_Print("Sensor Gateway");
    2650:	69 eb       	ldi	r22, 0xB9	; 185
    2652:	71 e0       	ldi	r23, 0x01	; 1
    2654:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    2658:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    265c:	0e 94 3a 09 	call	0x1274	; 0x1274 <_ZN13Char_LCD2004A9Lcd_PrintEPKc>
			lcd->Cursor_Set(0,3);
    2660:	43 e0       	ldi	r20, 0x03	; 3
    2662:	60 e0       	ldi	r22, 0x00	; 0
    2664:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    2668:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    266c:	0e 94 13 09 	call	0x1226	; 0x1226 <_ZN13Char_LCD2004A10Cursor_SetEcc>
			lcd->Font_Print(0x03);
    2670:	63 e0       	ldi	r22, 0x03	; 3
    2672:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    2676:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    267a:	0e 94 7f 09 	call	0x12fe	; 0x12fe <_ZN13Char_LCD2004A10Font_PrintEc>
			lcd->Font_Print(0x06);
    267e:	66 e0       	ldi	r22, 0x06	; 6
    2680:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    2684:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    2688:	0e 94 7f 09 	call	0x12fe	; 0x12fe <_ZN13Char_LCD2004A10Font_PrintEc>
			lcd->Lcd_Print("BLUE-BIZ.CO.LTD");
    268c:	68 ec       	ldi	r22, 0xC8	; 200
    268e:	71 e0       	ldi	r23, 0x01	; 1
    2690:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    2694:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    2698:	0e 94 3a 09 	call	0x1274	; 0x1274 <_ZN13Char_LCD2004A9Lcd_PrintEPKc>
		}
		else if(num == 3)
    269c:	ac cd       	rjmp	.-1192   	; 0x21f6 <_ZL5proc4Pv+0x18a>
    269e:	83 30       	cpi	r24, 0x03	; 3
    26a0:	09 f0       	breq	.+2      	; 0x26a4 <_ZL5proc4Pv+0x638>
		{
			 lcd->Cursor_Home();
    26a2:	a9 cd       	rjmp	.-1198   	; 0x21f6 <_ZL5proc4Pv+0x18a>
    26a4:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    26a8:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    26ac:	0e 94 4e 09 	call	0x129c	; 0x129c <_ZN13Char_LCD2004A11Cursor_HomeEv>
			 lcd->Cursor_Set(0,2);
    26b0:	42 e0       	ldi	r20, 0x02	; 2
    26b2:	60 e0       	ldi	r22, 0x00	; 0
    26b4:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    26b8:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    26bc:	0e 94 13 09 	call	0x1226	; 0x1226 <_ZN13Char_LCD2004A10Cursor_SetEcc>
			 lcd->Font_Print(0x00);
    26c0:	60 e0       	ldi	r22, 0x00	; 0
    26c2:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    26c6:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    26ca:	0e 94 7f 09 	call	0x12fe	; 0x12fe <_ZN13Char_LCD2004A10Font_PrintEc>
			 lcd->Font_Print(0x01);
    26ce:	61 e0       	ldi	r22, 0x01	; 1
    26d0:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    26d4:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    26d8:	0e 94 7f 09 	call	0x12fe	; 0x12fe <_ZN13Char_LCD2004A10Font_PrintEc>
			 lcd->Lcd_Print("Sensor Gateway");
    26dc:	69 eb       	ldi	r22, 0xB9	; 185
    26de:	71 e0       	ldi	r23, 0x01	; 1
    26e0:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    26e4:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    26e8:	0e 94 3a 09 	call	0x1274	; 0x1274 <_ZN13Char_LCD2004A9Lcd_PrintEPKc>
			 lcd->Cursor_Set(0,3);
    26ec:	43 e0       	ldi	r20, 0x03	; 3
    26ee:	60 e0       	ldi	r22, 0x00	; 0
    26f0:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    26f4:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    26f8:	0e 94 13 09 	call	0x1226	; 0x1226 <_ZN13Char_LCD2004A10Cursor_SetEcc>
			 lcd->Font_Print(0x07);
    26fc:	67 e0       	ldi	r22, 0x07	; 7
    26fe:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    2702:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    2706:	0e 94 7f 09 	call	0x12fe	; 0x12fe <_ZN13Char_LCD2004A10Font_PrintEc>
			 lcd->Font_Print(0x02);
    270a:	62 e0       	ldi	r22, 0x02	; 2
    270c:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    2710:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    2714:	0e 94 7f 09 	call	0x12fe	; 0x12fe <_ZN13Char_LCD2004A10Font_PrintEc>
			 lcd->Lcd_Print("BLUE-BIZ.CO.LTD");
    2718:	68 ec       	ldi	r22, 0xC8	; 200
    271a:	71 e0       	ldi	r23, 0x01	; 1
    271c:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <lcd>
    2720:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <lcd+0x1>
    2724:	0e 94 3a 09 	call	0x1274	; 0x1274 <_ZN13Char_LCD2004A9Lcd_PrintEPKc>
    2728:	66 cd       	rjmp	.-1332   	; 0x21f6 <_ZL5proc4Pv+0x18a>

0000272a <_ZL5proc2Pv>:
	}
}

#if USE_ETH
static void proc2(void* pvParam)
{
    272a:	cf 93       	push	r28
    272c:	df 93       	push	r29
    272e:	cd b7       	in	r28, 0x3d	; 61
    2730:	de b7       	in	r29, 0x3e	; 62
    2732:	a1 97       	sbiw	r28, 0x21	; 33
    2734:	0f b6       	in	r0, 0x3f	; 63
    2736:	f8 94       	cli
    2738:	de bf       	out	0x3e, r29	; 62
    273a:	0f be       	out	0x3f, r0	; 63
    273c:	cd bf       	out	0x3d, r28	; 61
RESET_ETH:
    char led_flag = 0;
	//lcd->Clear_Lcd();
	//static uint8_t mymac[6] = {0x54,0x55,0x58,0x10,0x00,0x24};
	//static uint8_t myip[4] = {0,0,0,0};
	memcpy(myip,cmp_mem,sizeof(cmp_mem));		
    273e:	0f 2e       	mov	r0, r31
    2740:	f8 e0       	ldi	r31, 0x08	; 8
    2742:	6f 2e       	mov	r6, r31
    2744:	f3 e0       	ldi	r31, 0x03	; 3
    2746:	7f 2e       	mov	r7, r31
    2748:	f0 2d       	mov	r31, r0

	 while(1)
	 {	 

		 
		 if((cmp_mem[0] != mem4[IPV4_0]) | (cmp_mem[1] != mem4[IPV4_1]) | (cmp_mem[2] != mem4[IPV4_2]) | (cmp_mem[3] != mem4[IPV4_3]))
    274a:	0f 2e       	mov	r0, r31
    274c:	f0 e6       	ldi	r31, 0x60	; 96
    274e:	8f 2e       	mov	r8, r31
    2750:	f3 e0       	ldi	r31, 0x03	; 3
    2752:	9f 2e       	mov	r9, r31
    2754:	f0 2d       	mov	r31, r0
    2756:	0f 2e       	mov	r0, r31
    2758:	f2 e6       	ldi	r31, 0x62	; 98
    275a:	4f 2e       	mov	r4, r31
    275c:	f3 e0       	ldi	r31, 0x03	; 3
    275e:	5f 2e       	mov	r5, r31
    2760:	f0 2d       	mov	r31, r0
			 }
			 
		 }
		 else if(buf[UDP_DATA_P] == 0x03 + '0') //end time fromServer
		 {
			 char temp[14] = {0};
    2762:	ce 01       	movw	r24, r28
    2764:	01 96       	adiw	r24, 0x01	; 1
    2766:	9f 8f       	std	Y+31, r25	; 0x1f
    2768:	8e 8f       	std	Y+30, r24	; 0x1e

	 while(1)
	 {	 

		 
		 if((cmp_mem[0] != mem4[IPV4_0]) | (cmp_mem[1] != mem4[IPV4_1]) | (cmp_mem[2] != mem4[IPV4_2]) | (cmp_mem[3] != mem4[IPV4_3]))
    276a:	33 24       	eor	r3, r3
    276c:	33 94       	inc	r3
RESET_ETH:
    char led_flag = 0;
	//lcd->Clear_Lcd();
	//static uint8_t mymac[6] = {0x54,0x55,0x58,0x10,0x00,0x24};
	//static uint8_t myip[4] = {0,0,0,0};
	memcpy(myip,cmp_mem,sizeof(cmp_mem));		
    276e:	f3 01       	movw	r30, r6
    2770:	80 81       	ld	r24, Z
    2772:	91 81       	ldd	r25, Z+1	; 0x01
    2774:	a2 81       	ldd	r26, Z+2	; 0x02
    2776:	b3 81       	ldd	r27, Z+3	; 0x03
    2778:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <_ZL4myip>
    277c:	90 93 01 03 	sts	0x0301, r25	; 0x800301 <_ZL4myip+0x1>
    2780:	a0 93 02 03 	sts	0x0302, r26	; 0x800302 <_ZL4myip+0x2>
    2784:	b0 93 03 03 	sts	0x0303, r27	; 0x800303 <_ZL4myip+0x3>
	static uint8_t buf[BUFFER_SIZE+1];
	uint16_t plen;
	DDRB = 0xff;
    2788:	8f ef       	ldi	r24, 0xFF	; 255
    278a:	87 bb       	out	0x17, r24	; 23
	PORTB = 0xff;
    278c:	88 bb       	out	0x18, r24	; 24
	 enc28j60Init(mymac);
    278e:	81 e0       	ldi	r24, 0x01	; 1
    2790:	91 e0       	ldi	r25, 0x01	; 1
	 enc28j60clkout(2); // change clkout from 6.25MHz to 12.5MHz
    2792:	80 d9       	rcall	.-3328   	; 0x1a94 <_Z12enc28j60InitPh>
    2794:	82 e0       	ldi	r24, 0x02	; 2
	 vTaskDelay(10);
    2796:	79 d9       	rcall	.-3342   	; 0x1a8a <_Z14enc28j60clkouth>
    2798:	8a e0       	ldi	r24, 0x0A	; 10
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	0e 94 40 23 	call	0x4680	; 0x4680 <vTaskDelay>
	 enc28j60PhyWrite(PHLCON,0x476);
    27a0:	66 e7       	ldi	r22, 0x76	; 118
    27a2:	74 e0       	ldi	r23, 0x04	; 4
    27a4:	84 e1       	ldi	r24, 0x14	; 20
	 vTaskDelay(20);
    27a6:	59 d9       	rcall	.-3406   	; 0x1a5a <_Z16enc28j60PhyWritehj>
    27a8:	84 e1       	ldi	r24, 0x14	; 20
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	0e 94 40 23 	call	0x4680	; 0x4680 <vTaskDelay>
	 init_ip_arp_udp_tcp(mymac,myip,MYWWWPORT);
    27b0:	40 e5       	ldi	r20, 0x50	; 80
    27b2:	60 e0       	ldi	r22, 0x00	; 0
    27b4:	73 e0       	ldi	r23, 0x03	; 3
    27b6:	81 e0       	ldi	r24, 0x01	; 1
    27b8:	91 e0       	ldi	r25, 0x01	; 1

#if USE_ETH
static void proc2(void* pvParam)
{
RESET_ETH:
    char led_flag = 0;
    27ba:	ef da       	rcall	.-2594   	; 0x1d9a <_Z19init_ip_arp_udp_tcpPhS_h>

	 while(1)
	 {	 

		 
		 if((cmp_mem[0] != mem4[IPV4_0]) | (cmp_mem[1] != mem4[IPV4_1]) | (cmp_mem[2] != mem4[IPV4_2]) | (cmp_mem[3] != mem4[IPV4_3]))
    27bc:	21 2c       	mov	r2, r1
    27be:	04 e6       	ldi	r16, 0x64	; 100
    27c0:	13 e0       	ldi	r17, 0x03	; 3
    27c2:	0f 2e       	mov	r0, r31
    27c4:	f6 e6       	ldi	r31, 0x66	; 102
    27c6:	ef 2e       	mov	r14, r31
    27c8:	f3 e0       	ldi	r31, 0x03	; 3
    27ca:	ff 2e       	mov	r15, r31
			 else
			 {
				 PORTB = cbi(PORTB,4); 
			 }
			 static int data[12] = {0};
			 data[0] = mem4[TEMP];
    27cc:	f0 2d       	mov	r31, r0
    27ce:	0f 2e       	mov	r0, r31
    27d0:	f3 e7       	ldi	r31, 0x73	; 115
    27d2:	af 2e       	mov	r10, r31
    27d4:	f2 e0       	ldi	r31, 0x02	; 2
    27d6:	bf 2e       	mov	r11, r31
    27d8:	f0 2d       	mov	r31, r0
    27da:	0f 2e       	mov	r0, r31
    27dc:	f0 e2       	ldi	r31, 0x20	; 32
    27de:	cf 2e       	mov	r12, r31
    27e0:	f3 e0       	ldi	r31, 0x03	; 3
    27e2:	df 2e       	mov	r13, r31

	 while(1)
	 {	 

		 
		 if((cmp_mem[0] != mem4[IPV4_0]) | (cmp_mem[1] != mem4[IPV4_1]) | (cmp_mem[2] != mem4[IPV4_2]) | (cmp_mem[3] != mem4[IPV4_3]))
    27e4:	f0 2d       	mov	r31, r0
    27e6:	d3 01       	movw	r26, r6
    27e8:	8c 91       	ld	r24, X
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	f4 01       	movw	r30, r8
    27ee:	60 81       	ld	r22, Z
    27f0:	71 81       	ldd	r23, Z+1	; 0x01
    27f2:	11 96       	adiw	r26, 0x01	; 1
    27f4:	4c 91       	ld	r20, X
    27f6:	50 e0       	ldi	r21, 0x00	; 0
    27f8:	33 2d       	mov	r19, r3
    27fa:	d2 01       	movw	r26, r4
    27fc:	ed 91       	ld	r30, X+
    27fe:	fc 91       	ld	r31, X
    2800:	4e 17       	cp	r20, r30
    2802:	5f 07       	cpc	r21, r31
    2804:	09 f4       	brne	.+2      	; 0x2808 <_ZL5proc2Pv+0xde>
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	23 2d       	mov	r18, r3
    280a:	86 17       	cp	r24, r22
    280c:	97 07       	cpc	r25, r23
    280e:	09 f4       	brne	.+2      	; 0x2812 <_ZL5proc2Pv+0xe8>
    2810:	20 e0       	ldi	r18, 0x00	; 0
    2812:	32 2b       	or	r19, r18
    2814:	f3 01       	movw	r30, r6
    2816:	42 81       	ldd	r20, Z+2	; 0x02
    2818:	50 e0       	ldi	r21, 0x00	; 0
    281a:	23 2d       	mov	r18, r3
    281c:	d8 01       	movw	r26, r16
    281e:	ed 91       	ld	r30, X+
    2820:	fc 91       	ld	r31, X
    2822:	4e 17       	cp	r20, r30
    2824:	5f 07       	cpc	r21, r31
    2826:	09 f4       	brne	.+2      	; 0x282a <_ZL5proc2Pv+0x100>
    2828:	20 e0       	ldi	r18, 0x00	; 0
    282a:	23 2b       	or	r18, r19
    282c:	71 f4       	brne	.+28     	; 0x284a <_ZL5proc2Pv+0x120>
    282e:	f3 01       	movw	r30, r6
    2830:	23 81       	ldd	r18, Z+3	; 0x03
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	43 2d       	mov	r20, r3
    2836:	d7 01       	movw	r26, r14
    2838:	ed 91       	ld	r30, X+
    283a:	fc 91       	ld	r31, X
    283c:	2e 17       	cp	r18, r30
    283e:	3f 07       	cpc	r19, r31
    2840:	09 f4       	brne	.+2      	; 0x2844 <_ZL5proc2Pv+0x11a>
    2842:	40 e0       	ldi	r20, 0x00	; 0
    2844:	44 23       	and	r20, r20
    2846:	09 f4       	brne	.+2      	; 0x284a <_ZL5proc2Pv+0x120>
		 {
			 if(cmp_mem[0] != mem4[IPV4_0])
    2848:	47 c0       	rjmp	.+142    	; 0x28d8 <_ZL5proc2Pv+0x1ae>
    284a:	86 17       	cp	r24, r22
    284c:	97 07       	cpc	r25, r23
			 {
				  eeprom_update_byte((uint8_t*)0,mem4[IPV4_0]);
    284e:	41 f0       	breq	.+16     	; 0x2860 <_ZL5proc2Pv+0x136>
    2850:	80 e0       	ldi	r24, 0x00	; 0
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	0e 94 90 2a 	call	0x5520	; 0x5520 <eeprom_update_byte>
				  cmp_mem[0] = mem4[IPV4_0];
    2858:	f4 01       	movw	r30, r8
    285a:	80 81       	ld	r24, Z
    285c:	d3 01       	movw	r26, r6
			 }
			 if(cmp_mem[1] != mem4[IPV4_1])
    285e:	8c 93       	st	X, r24
    2860:	f2 01       	movw	r30, r4
    2862:	60 81       	ld	r22, Z
    2864:	71 81       	ldd	r23, Z+1	; 0x01
    2866:	d3 01       	movw	r26, r6
    2868:	11 96       	adiw	r26, 0x01	; 1
    286a:	8c 91       	ld	r24, X
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	86 17       	cp	r24, r22
    2870:	97 07       	cpc	r25, r23
			 {
				  eeprom_update_byte((uint8_t*)1,mem4[IPV4_1]);
    2872:	49 f0       	breq	.+18     	; 0x2886 <_ZL5proc2Pv+0x15c>
    2874:	81 e0       	ldi	r24, 0x01	; 1
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	0e 94 90 2a 	call	0x5520	; 0x5520 <eeprom_update_byte>
				  cmp_mem[1] = mem4[IPV4_1];
    287c:	f2 01       	movw	r30, r4
    287e:	80 81       	ld	r24, Z
    2880:	d3 01       	movw	r26, r6
    2882:	11 96       	adiw	r26, 0x01	; 1
			 }
			 if(cmp_mem[2] != mem4[IPV4_2])
    2884:	8c 93       	st	X, r24
    2886:	60 91 64 03 	lds	r22, 0x0364	; 0x800364 <mem4+0x44>
    288a:	70 91 65 03 	lds	r23, 0x0365	; 0x800365 <mem4+0x45>
    288e:	f3 01       	movw	r30, r6
    2890:	82 81       	ldd	r24, Z+2	; 0x02
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	86 17       	cp	r24, r22
    2896:	97 07       	cpc	r25, r23
			 {
				  eeprom_update_byte((uint8_t*)2,mem4[IPV4_2]);
    2898:	49 f0       	breq	.+18     	; 0x28ac <_ZL5proc2Pv+0x182>
    289a:	82 e0       	ldi	r24, 0x02	; 2
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	0e 94 90 2a 	call	0x5520	; 0x5520 <eeprom_update_byte>
				  cmp_mem[2] = mem4[IPV4_2];
    28a2:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <mem4+0x44>
    28a6:	d3 01       	movw	r26, r6
    28a8:	12 96       	adiw	r26, 0x02	; 2
			 }
			 if(cmp_mem[3] != mem4[IPV4_3])
    28aa:	8c 93       	st	X, r24
    28ac:	60 91 66 03 	lds	r22, 0x0366	; 0x800366 <mem4+0x46>
    28b0:	70 91 67 03 	lds	r23, 0x0367	; 0x800367 <mem4+0x47>
    28b4:	f3 01       	movw	r30, r6
    28b6:	83 81       	ldd	r24, Z+3	; 0x03
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	86 17       	cp	r24, r22
    28bc:	97 07       	cpc	r25, r23
			 {
				  eeprom_update_byte((uint8_t*)3,mem4[IPV4_3]);
    28be:	49 f0       	breq	.+18     	; 0x28d2 <_ZL5proc2Pv+0x1a8>
    28c0:	83 e0       	ldi	r24, 0x03	; 3
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	0e 94 90 2a 	call	0x5520	; 0x5520 <eeprom_update_byte>
				  cmp_mem[3] = mem4[IPV4_3];
    28c8:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <mem4+0x46>
    28cc:	d3 01       	movw	r26, r6
    28ce:	13 96       	adiw	r26, 0x03	; 3
			 }
			 cls_var = 1;
    28d0:	8c 93       	st	X, r24
    28d2:	30 92 04 03 	sts	0x0304, r3	; 0x800304 <cls_var>
			 goto RESET_ETH;
		 }
		 plen = enc28j60PacketReceive(BUFFER_SIZE, buf);
    28d6:	4b cf       	rjmp	.-362    	; 0x276e <_ZL5proc2Pv+0x44>
    28d8:	6b e8       	ldi	r22, 0x8B	; 139
    28da:	72 e0       	ldi	r23, 0x02	; 2
    28dc:	84 e6       	ldi	r24, 0x64	; 100
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	81 d9       	rcall	.-3326   	; 0x1be4 <_Z21enc28j60PacketReceivejPh>
		 if(plen==0)
    28e2:	99 a3       	std	Y+33, r25	; 0x21
    28e4:	88 a3       	std	Y+32, r24	; 0x20
		 {
			 goto UDP_SEND;
		 }
		 if(eth_type_is_arp_and_my_ip(buf,plen))
    28e6:	00 97       	sbiw	r24, 0x00	; 0
    28e8:	09 f4       	brne	.+2      	; 0x28ec <_ZL5proc2Pv+0x1c2>
    28ea:	ea c0       	rjmp	.+468    	; 0x2ac0 <_ZL5proc2Pv+0x396>
    28ec:	bc 01       	movw	r22, r24
    28ee:	8b e8       	ldi	r24, 0x8B	; 139
    28f0:	92 e0       	ldi	r25, 0x02	; 2
		 {
			 make_arp_answer_from_request(buf);
    28f2:	6c da       	rcall	.-2856   	; 0x1dcc <_Z25eth_type_is_arp_and_my_ipPhj>
    28f4:	88 23       	and	r24, r24
    28f6:	21 f0       	breq	.+8      	; 0x2900 <_ZL5proc2Pv+0x1d6>
			 continue;
    28f8:	8b e8       	ldi	r24, 0x8B	; 139
		 }
		 if(eth_type_is_ip_and_my_ip(buf,plen)==0)
    28fa:	92 e0       	ldi	r25, 0x02	; 2
    28fc:	ea da       	rcall	.-2604   	; 0x1ed2 <_Z28make_arp_answer_from_requestPh>
    28fe:	73 cf       	rjmp	.-282    	; 0x27e6 <_ZL5proc2Pv+0xbc>
    2900:	68 a1       	ldd	r22, Y+32	; 0x20
    2902:	79 a1       	ldd	r23, Y+33	; 0x21
    2904:	8b e8       	ldi	r24, 0x8B	; 139
    2906:	92 e0       	ldi	r25, 0x02	; 2
    2908:	87 da       	rcall	.-2802   	; 0x1e18 <_Z24eth_type_is_ip_and_my_ipPhj>
    290a:	88 23       	and	r24, r24
		 {
			 continue;
		 }
		 if(buf[IP_PROTO_P]==IP_PROTO_ICMP_V && buf[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V)
    290c:	09 f4       	brne	.+2      	; 0x2910 <_ZL5proc2Pv+0x1e6>
    290e:	6b cf       	rjmp	.-298    	; 0x27e6 <_ZL5proc2Pv+0xbc>
    2910:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <_ZZL5proc2PvE3buf+0x17>
    2914:	81 30       	cpi	r24, 0x01	; 1
    2916:	51 f4       	brne	.+20     	; 0x292c <_ZL5proc2Pv+0x202>
		 {
			make_echo_reply_from_request(buf,plen);
    2918:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <_ZZL5proc2PvE3buf+0x22>
    291c:	88 30       	cpi	r24, 0x08	; 8
    291e:	31 f4       	brne	.+12     	; 0x292c <_ZL5proc2Pv+0x202>
    2920:	68 a1       	ldd	r22, Y+32	; 0x20
    2922:	79 a1       	ldd	r23, Y+33	; 0x21
			continue;
    2924:	8b e8       	ldi	r24, 0x8B	; 139
		 }
		 if(buf[UDP_DATA_P] == 0x01 + '0')
    2926:	92 e0       	ldi	r25, 0x02	; 2
    2928:	fc da       	rcall	.-2568   	; 0x1f22 <_Z28make_echo_reply_from_requestPhj>
    292a:	5d cf       	rjmp	.-326    	; 0x27e6 <_ZL5proc2Pv+0xbc>
    292c:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <_ZZL5proc2PvE3buf+0x2a>
		 {
			 char temp[29] = {0};
    2930:	81 33       	cpi	r24, 0x31	; 49
    2932:	09 f0       	breq	.+2      	; 0x2936 <_ZL5proc2Pv+0x20c>
    2934:	53 c0       	rjmp	.+166    	; 0x29dc <_ZL5proc2Pv+0x2b2>
    2936:	8d e1       	ldi	r24, 0x1D	; 29
    2938:	ee 8d       	ldd	r30, Y+30	; 0x1e
    293a:	ff 8d       	ldd	r31, Y+31	; 0x1f
			 char loop = buf[UDP_DATA_P + 1];
    293c:	11 92       	st	Z+, r1
    293e:	8a 95       	dec	r24
			 loop = loop - '0';
			 if(loop <= 1 | loop > 30)
    2940:	e9 f7       	brne	.-6      	; 0x293c <_ZL5proc2Pv+0x212>
    2942:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <_ZZL5proc2PvE3buf+0x2b>
    2946:	9e ec       	ldi	r25, 0xCE	; 206
    2948:	98 0f       	add	r25, r24
			 {
				 goto UDP_SEND;
			 }
			 char start = 2;
			 char num = 0;
			 for(char i=1;i<loop+1;i++)
    294a:	9d 31       	cpi	r25, 0x1D	; 29
    294c:	08 f0       	brcs	.+2      	; 0x2950 <_ZL5proc2Pv+0x226>
    294e:	b8 c0       	rjmp	.+368    	; 0x2ac0 <_ZL5proc2Pv+0x396>
    2950:	40 ed       	ldi	r20, 0xD0	; 208
    2952:	48 0f       	add	r20, r24
    2954:	50 e0       	ldi	r21, 0x00	; 0
    2956:	4f 5f       	subi	r20, 0xFF	; 255
    2958:	5f 4f       	sbci	r21, 0xFF	; 255
    295a:	42 30       	cpi	r20, 0x02	; 2
    295c:	51 05       	cpc	r21, r1
			 {
				 temp[i-1] = buf[UDP_DATA_P + (start + (i-1))];
    295e:	0c f0       	brlt	.+2      	; 0x2962 <_ZL5proc2Pv+0x238>
    2960:	14 c1       	rjmp	.+552    	; 0x2b8a <_ZL5proc2Pv+0x460>
    2962:	22 c0       	rjmp	.+68     	; 0x29a8 <_ZL5proc2Pv+0x27e>
    2964:	fc 01       	movw	r30, r24
    2966:	e5 57       	subi	r30, 0x75	; 117
    2968:	fd 4f       	sbci	r31, 0xFD	; 253
    296a:	63 a5       	ldd	r22, Z+43	; 0x2b
    296c:	fe 01       	movw	r30, r28
				 if(i % 2 == 0)
    296e:	e8 0f       	add	r30, r24
    2970:	f9 1f       	adc	r31, r25
				 {
					mem4[UDP_DATA0 + num] =  (( 0xff00 & temp[i-1] << 8)) | (0x00ff & temp[i-2]);
    2972:	60 83       	st	Z, r22
    2974:	20 fd       	sbrc	r18, 0
    2976:	12 c0       	rjmp	.+36     	; 0x299c <_ZL5proc2Pv+0x272>
    2978:	e3 2f       	mov	r30, r19
    297a:	f0 e0       	ldi	r31, 0x00	; 0
    297c:	ee 0f       	add	r30, r30
    297e:	ff 1f       	adc	r31, r31
    2980:	ec 5c       	subi	r30, 0xCC	; 204
    2982:	fc 4f       	sbci	r31, 0xFC	; 252
    2984:	af ef       	ldi	r26, 0xFF	; 255
    2986:	bf ef       	ldi	r27, 0xFF	; 255
    2988:	ac 0f       	add	r26, r28
    298a:	bd 1f       	adc	r27, r29
    298c:	a8 0f       	add	r26, r24
    298e:	b9 1f       	adc	r27, r25
    2990:	8c 91       	ld	r24, X
    2992:	90 e0       	ldi	r25, 0x00	; 0
					num++;
    2994:	96 2b       	or	r25, r22
			 {
				 goto UDP_SEND;
			 }
			 char start = 2;
			 char num = 0;
			 for(char i=1;i<loop+1;i++)
    2996:	91 83       	std	Z+1, r25	; 0x01
    2998:	80 83       	st	Z, r24
    299a:	3f 5f       	subi	r19, 0xFF	; 255
    299c:	2f 5f       	subi	r18, 0xFF	; 255
    299e:	82 2f       	mov	r24, r18
    29a0:	90 e0       	ldi	r25, 0x00	; 0
				 {
					mem4[UDP_DATA0 + num] =  (( 0xff00 & temp[i-1] << 8)) | (0x00ff & temp[i-2]);
					num++;
				 }
			 }
			 mem4[GOAL_CNT] = mem4[UDP_DATA14];
    29a2:	84 17       	cp	r24, r20
    29a4:	95 07       	cpc	r25, r21
    29a6:	f4 f2       	brlt	.-68     	; 0x2964 <_ZL5proc2Pv+0x23a>
    29a8:	d6 01       	movw	r26, r12
    29aa:	d0 96       	adiw	r26, 0x30	; 48
    29ac:	8d 91       	ld	r24, X+
    29ae:	9c 91       	ld	r25, X
    29b0:	d1 97       	sbiw	r26, 0x31	; 49
    29b2:	51 96       	adiw	r26, 0x11	; 17
			 mem4[TARGET_MAX] = mem4[GOAL_CNT];
    29b4:	9c 93       	st	X, r25
    29b6:	8e 93       	st	-X, r24
    29b8:	50 97       	sbiw	r26, 0x10	; 16
    29ba:	dd 96       	adiw	r26, 0x3d	; 61
			 mem4[TARGET_GOAL_CNT] = mem4[GOAL_CNT];
    29bc:	9c 93       	st	X, r25
    29be:	8e 93       	st	-X, r24
    29c0:	dc 97       	sbiw	r26, 0x3c	; 60
    29c2:	d9 96       	adiw	r26, 0x39	; 57
			 mem4[WARNING_HIGH] = mem4[GOAL_CNT];
    29c4:	9c 93       	st	X, r25
    29c6:	8e 93       	st	-X, r24
    29c8:	d8 97       	sbiw	r26, 0x38	; 56
    29ca:	d7 96       	adiw	r26, 0x37	; 55
			 mem4[TARGET_CMP] = mem4[GOAL_CNT];
    29cc:	9c 93       	st	X, r25
    29ce:	8e 93       	st	-X, r24
    29d0:	d6 97       	sbiw	r26, 0x36	; 54
    29d2:	df 96       	adiw	r26, 0x3f	; 63
			 goto UDP_SEND;
    29d4:	9c 93       	st	X, r25
		 }
		 else if(buf[UDP_DATA_P] == 0x02 + '0')  //start time from Server
    29d6:	8e 93       	st	-X, r24
    29d8:	de 97       	sbiw	r26, 0x3e	; 62
		 {
			 char temp[14] = {0};
    29da:	72 c0       	rjmp	.+228    	; 0x2ac0 <_ZL5proc2Pv+0x396>
    29dc:	82 33       	cpi	r24, 0x32	; 50
    29de:	c1 f5       	brne	.+112    	; 0x2a50 <_ZL5proc2Pv+0x326>
    29e0:	8e e0       	ldi	r24, 0x0E	; 14
    29e2:	ee 8d       	ldd	r30, Y+30	; 0x1e
    29e4:	ff 8d       	ldd	r31, Y+31	; 0x1f
			 char loop = buf[UDP_DATA_P + 1];
    29e6:	11 92       	st	Z+, r1
    29e8:	8a 95       	dec	r24
			 loop = loop - '0';
			 if(loop <= 1 | loop > 14)
    29ea:	e9 f7       	brne	.-6      	; 0x29e6 <_ZL5proc2Pv+0x2bc>
    29ec:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <_ZZL5proc2PvE3buf+0x2b>
    29f0:	9e ec       	ldi	r25, 0xCE	; 206
    29f2:	98 0f       	add	r25, r24
			 {
				goto UDP_SEND;
			 }
			 char start = 2;
			 char num = 0;
			 for(char i=1;i<loop+1;i++)
    29f4:	9d 30       	cpi	r25, 0x0D	; 13
    29f6:	08 f0       	brcs	.+2      	; 0x29fa <_ZL5proc2Pv+0x2d0>
    29f8:	63 c0       	rjmp	.+198    	; 0x2ac0 <_ZL5proc2Pv+0x396>
    29fa:	80 53       	subi	r24, 0x30	; 48
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	01 96       	adiw	r24, 0x01	; 1
    2a00:	82 30       	cpi	r24, 0x02	; 2
    2a02:	91 05       	cpc	r25, r1
			 {
				  temp[i-1] = buf[UDP_DATA_P + (start + (i-1))];
    2a04:	0c f0       	brlt	.+2      	; 0x2a08 <_ZL5proc2Pv+0x2de>
    2a06:	c7 c0       	rjmp	.+398    	; 0x2b96 <_ZL5proc2Pv+0x46c>
    2a08:	5b c0       	rjmp	.+182    	; 0x2ac0 <_ZL5proc2Pv+0x396>
    2a0a:	f9 01       	movw	r30, r18
    2a0c:	e5 57       	subi	r30, 0x75	; 117
    2a0e:	fd 4f       	sbci	r31, 0xFD	; 253
    2a10:	63 a5       	ldd	r22, Z+43	; 0x2b
    2a12:	fe 01       	movw	r30, r28
				  if(i % 2 == 0)
    2a14:	e2 0f       	add	r30, r18
    2a16:	f3 1f       	adc	r31, r19
				  {
					  mem4[DATE_DATA0 + num] =  (( 0xff00 & temp[i-1] << 8)) | (0x00ff & temp[i-2]);
    2a18:	60 83       	st	Z, r22
    2a1a:	40 fd       	sbrc	r20, 0
    2a1c:	12 c0       	rjmp	.+36     	; 0x2a42 <_ZL5proc2Pv+0x318>
    2a1e:	e5 2f       	mov	r30, r21
    2a20:	f0 e0       	ldi	r31, 0x00	; 0
    2a22:	ee 0f       	add	r30, r30
    2a24:	ff 1f       	adc	r31, r31
    2a26:	ea 58       	subi	r30, 0x8A	; 138
    2a28:	fc 4f       	sbci	r31, 0xFC	; 252
    2a2a:	af ef       	ldi	r26, 0xFF	; 255
    2a2c:	bf ef       	ldi	r27, 0xFF	; 255
    2a2e:	ac 0f       	add	r26, r28
    2a30:	bd 1f       	adc	r27, r29
    2a32:	a2 0f       	add	r26, r18
    2a34:	b3 1f       	adc	r27, r19
    2a36:	2c 91       	ld	r18, X
    2a38:	30 e0       	ldi	r19, 0x00	; 0
					  num++;
    2a3a:	36 2b       	or	r19, r22
			 {
				goto UDP_SEND;
			 }
			 char start = 2;
			 char num = 0;
			 for(char i=1;i<loop+1;i++)
    2a3c:	31 83       	std	Z+1, r19	; 0x01
    2a3e:	20 83       	st	Z, r18
    2a40:	5f 5f       	subi	r21, 0xFF	; 255
    2a42:	4f 5f       	subi	r20, 0xFF	; 255
    2a44:	24 2f       	mov	r18, r20
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	28 17       	cp	r18, r24
					  num++;
				  }
			 }
			 
		 }
		 else if(buf[UDP_DATA_P] == 0x03 + '0') //end time fromServer
    2a4a:	39 07       	cpc	r19, r25
    2a4c:	f4 f2       	brlt	.-68     	; 0x2a0a <_ZL5proc2Pv+0x2e0>
		 {
			 char temp[14] = {0};
    2a4e:	38 c0       	rjmp	.+112    	; 0x2ac0 <_ZL5proc2Pv+0x396>
    2a50:	83 33       	cpi	r24, 0x33	; 51
    2a52:	b1 f5       	brne	.+108    	; 0x2ac0 <_ZL5proc2Pv+0x396>
    2a54:	8e e0       	ldi	r24, 0x0E	; 14
    2a56:	ae 8d       	ldd	r26, Y+30	; 0x1e
    2a58:	bf 8d       	ldd	r27, Y+31	; 0x1f
			 char loop = buf[UDP_DATA_P + 1];
    2a5a:	1d 92       	st	X+, r1
    2a5c:	8a 95       	dec	r24
			 loop = loop - '0';
			 if(loop <= 1 | loop > 14)
    2a5e:	e9 f7       	brne	.-6      	; 0x2a5a <_ZL5proc2Pv+0x330>
    2a60:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <_ZZL5proc2PvE3buf+0x2b>
    2a64:	9e ec       	ldi	r25, 0xCE	; 206
			 {
				 goto UDP_SEND;
			 }
			 char start = 2;
			 char num = 0;
			 for(char i=1;i<loop+1;i++)
    2a66:	98 0f       	add	r25, r24
    2a68:	9d 30       	cpi	r25, 0x0D	; 13
    2a6a:	50 f5       	brcc	.+84     	; 0x2ac0 <_ZL5proc2Pv+0x396>
    2a6c:	80 53       	subi	r24, 0x30	; 48
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	01 96       	adiw	r24, 0x01	; 1
    2a72:	82 30       	cpi	r24, 0x02	; 2
    2a74:	91 05       	cpc	r25, r1
			 {
				 temp[i-1] = buf[UDP_DATA_P + (start + (i-1))];
    2a76:	0c f0       	brlt	.+2      	; 0x2a7a <_ZL5proc2Pv+0x350>
    2a78:	94 c0       	rjmp	.+296    	; 0x2ba2 <_ZL5proc2Pv+0x478>
    2a7a:	22 c0       	rjmp	.+68     	; 0x2ac0 <_ZL5proc2Pv+0x396>
    2a7c:	f9 01       	movw	r30, r18
    2a7e:	e5 57       	subi	r30, 0x75	; 117
    2a80:	fd 4f       	sbci	r31, 0xFD	; 253
    2a82:	63 a5       	ldd	r22, Z+43	; 0x2b
    2a84:	fe 01       	movw	r30, r28
				 if(i % 2 == 0)
    2a86:	e2 0f       	add	r30, r18
    2a88:	f3 1f       	adc	r31, r19
				 {
					 mem4[DATE_DATA7 + num] =  (( 0xff00 & temp[i-1] << 8)) | (0x00ff & temp[i-2]);
    2a8a:	60 83       	st	Z, r22
    2a8c:	40 fd       	sbrc	r20, 0
    2a8e:	12 c0       	rjmp	.+36     	; 0x2ab4 <_ZL5proc2Pv+0x38a>
    2a90:	e5 2f       	mov	r30, r21
    2a92:	f0 e0       	ldi	r31, 0x00	; 0
    2a94:	ee 0f       	add	r30, r30
    2a96:	ff 1f       	adc	r31, r31
    2a98:	ec 57       	subi	r30, 0x7C	; 124
    2a9a:	fc 4f       	sbci	r31, 0xFC	; 252
    2a9c:	af ef       	ldi	r26, 0xFF	; 255
    2a9e:	bf ef       	ldi	r27, 0xFF	; 255
    2aa0:	ac 0f       	add	r26, r28
    2aa2:	bd 1f       	adc	r27, r29
    2aa4:	a2 0f       	add	r26, r18
    2aa6:	b3 1f       	adc	r27, r19
    2aa8:	2c 91       	ld	r18, X
    2aaa:	30 e0       	ldi	r19, 0x00	; 0
					 num++;
    2aac:	36 2b       	or	r19, r22
			 {
				 goto UDP_SEND;
			 }
			 char start = 2;
			 char num = 0;
			 for(char i=1;i<loop+1;i++)
    2aae:	31 83       	std	Z+1, r19	; 0x01
    2ab0:	20 83       	st	Z, r18
    2ab2:	5f 5f       	subi	r21, 0xFF	; 255
    2ab4:	4f 5f       	subi	r20, 0xFF	; 255
    2ab6:	24 2f       	mov	r18, r20
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
					 num++;
				 }
			 }
		 }
		 UDP_SEND:
			 led_flag = ~led_flag;
    2aba:	28 17       	cp	r18, r24
			 if(led_flag)
    2abc:	39 07       	cpc	r19, r25
			 {
				 PORTB = sbi(PORTB,4);
    2abe:	f4 f2       	brlt	.-68     	; 0x2a7c <_ZL5proc2Pv+0x352>
    2ac0:	20 94       	com	r2
    2ac2:	29 f0       	breq	.+10     	; 0x2ace <_ZL5proc2Pv+0x3a4>
    2ac4:	88 b3       	in	r24, 0x18	; 24
    2ac6:	80 61       	ori	r24, 0x10	; 16
			 }
			 else
			 {
				 PORTB = cbi(PORTB,4); 
    2ac8:	88 bb       	out	0x18, r24	; 24
    2aca:	88 bb       	out	0x18, r24	; 24
    2acc:	04 c0       	rjmp	.+8      	; 0x2ad6 <_ZL5proc2Pv+0x3ac>
    2ace:	88 b3       	in	r24, 0x18	; 24
			 }
			 static int data[12] = {0};
			 data[0] = mem4[TEMP];
    2ad0:	8f 7e       	andi	r24, 0xEF	; 239
    2ad2:	88 bb       	out	0x18, r24	; 24
    2ad4:	88 bb       	out	0x18, r24	; 24
    2ad6:	f6 01       	movw	r30, r12
    2ad8:	82 81       	ldd	r24, Z+2	; 0x02
    2ada:	93 81       	ldd	r25, Z+3	; 0x03
    2adc:	d5 01       	movw	r26, r10
			 data[1] = mem4[COUNT];
    2ade:	11 96       	adiw	r26, 0x01	; 1
    2ae0:	9c 93       	st	X, r25
    2ae2:	8e 93       	st	-X, r24
    2ae4:	86 81       	ldd	r24, Z+6	; 0x06
    2ae6:	97 81       	ldd	r25, Z+7	; 0x07
    2ae8:	13 96       	adiw	r26, 0x03	; 3
			 data[2] = mem4[PRESSURE];
    2aea:	9c 93       	st	X, r25
    2aec:	8e 93       	st	-X, r24
    2aee:	12 97       	sbiw	r26, 0x02	; 2
    2af0:	84 81       	ldd	r24, Z+4	; 0x04
    2af2:	95 81       	ldd	r25, Z+5	; 0x05
    2af4:	15 96       	adiw	r26, 0x05	; 5
			 data[3] = mem4[GOAL_CNT];
    2af6:	9c 93       	st	X, r25
    2af8:	8e 93       	st	-X, r24
    2afa:	14 97       	sbiw	r26, 0x04	; 4
    2afc:	80 89       	ldd	r24, Z+16	; 0x10
    2afe:	91 89       	ldd	r25, Z+17	; 0x11
    2b00:	17 96       	adiw	r26, 0x07	; 7
			 data[4] = mem4[MACHINE_STATES];
    2b02:	9c 93       	st	X, r25
    2b04:	8e 93       	st	-X, r24
    2b06:	16 97       	sbiw	r26, 0x06	; 6
    2b08:	82 89       	ldd	r24, Z+18	; 0x12
    2b0a:	93 89       	ldd	r25, Z+19	; 0x13
    2b0c:	19 96       	adiw	r26, 0x09	; 9
			 data[5] = mem4[SEC];
    2b0e:	9c 93       	st	X, r25
    2b10:	8e 93       	st	-X, r24
    2b12:	18 97       	sbiw	r26, 0x08	; 8
    2b14:	84 85       	ldd	r24, Z+12	; 0x0c
    2b16:	95 85       	ldd	r25, Z+13	; 0x0d
    2b18:	1b 96       	adiw	r26, 0x0b	; 11
			 data[6] = mem4[MIN];
    2b1a:	9c 93       	st	X, r25
    2b1c:	8e 93       	st	-X, r24
    2b1e:	1a 97       	sbiw	r26, 0x0a	; 10
    2b20:	82 85       	ldd	r24, Z+10	; 0x0a
    2b22:	93 85       	ldd	r25, Z+11	; 0x0b
    2b24:	1d 96       	adiw	r26, 0x0d	; 13
			 data[7] = mem4[HOUR];
    2b26:	9c 93       	st	X, r25
    2b28:	8e 93       	st	-X, r24
    2b2a:	1c 97       	sbiw	r26, 0x0c	; 12
    2b2c:	80 85       	ldd	r24, Z+8	; 0x08
    2b2e:	91 85       	ldd	r25, Z+9	; 0x09
    2b30:	1f 96       	adiw	r26, 0x0f	; 15
			 data[8] = mem4[CURRENT_RUN_NUMBER];  //현재 생산 페이지
    2b32:	9c 93       	st	X, r25
    2b34:	8e 93       	st	-X, r24
    2b36:	1e 97       	sbiw	r26, 0x0e	; 14
    2b38:	e4 e7       	ldi	r30, 0x74	; 116
    2b3a:	f3 e0       	ldi	r31, 0x03	; 3
    2b3c:	80 81       	ld	r24, Z
    2b3e:	91 81       	ldd	r25, Z+1	; 0x01
    2b40:	51 96       	adiw	r26, 0x11	; 17
			 data[9] = mem4[CURRENT_STATE_ON]; //혀재 생산 상태 값을 보냄.
    2b42:	9c 93       	st	X, r25
    2b44:	8e 93       	st	-X, r24
    2b46:	50 97       	sbiw	r26, 0x10	; 16
    2b48:	a2 e7       	ldi	r26, 0x72	; 114
    2b4a:	b3 e0       	ldi	r27, 0x03	; 3
    2b4c:	8d 91       	ld	r24, X+
    2b4e:	9c 91       	ld	r25, X
			 data[10] = mem4[START_BUTTON]; //현재 시작 버튼의 상태를 보냄
    2b50:	f5 01       	movw	r30, r10
    2b52:	93 8b       	std	Z+19, r25	; 0x13
    2b54:	82 8b       	std	Z+18, r24	; 0x12
    2b56:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <mem4+0x4c>
    2b5a:	90 91 6d 03 	lds	r25, 0x036D	; 0x80036d <mem4+0x4d>
			 data[11] = mem4[CURRENT_PAGE]; //현재 시작 버튼의 상태를 보냄  
    2b5e:	95 8b       	std	Z+21, r25	; 0x15
    2b60:	84 8b       	std	Z+20, r24	; 0x14
    2b62:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <mem4+0x50>
			 make_udp_reply_from_request(buf,(char*)&data,sizeof(data),MYUDPPORT);
    2b66:	90 91 71 03 	lds	r25, 0x0371	; 0x800371 <mem4+0x51>
    2b6a:	97 8b       	std	Z+23, r25	; 0x17
    2b6c:	86 8b       	std	Z+22, r24	; 0x16
    2b6e:	2f e0       	ldi	r18, 0x0F	; 15
    2b70:	37 e2       	ldi	r19, 0x27	; 39
    2b72:	48 e1       	ldi	r20, 0x18	; 24
			// memcpy(buf,data,sizeof(data));
			 //enc28j60PacketSend(UDP_HEADER_LEN+IP_HEADER_LEN+ETH_HEADER_LEN+sizeof(data),buf);
			 //vTaskDelay(500);
			 //memset(buf,0,sizeof(buf));
			 //vTaskDelay(100);
			 lcd_cnt++;
    2b74:	b5 01       	movw	r22, r10
    2b76:	8b e8       	ldi	r24, 0x8B	; 139
    2b78:	92 e0       	ldi	r25, 0x02	; 2
    2b7a:	ed d9       	rcall	.-3110   	; 0x1f56 <_Z27make_udp_reply_from_requestPhPchj>
    2b7c:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <lcd_cnt>
			taskYIELD();
    2b80:	8f 5f       	subi	r24, 0xFF	; 255
    2b82:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <lcd_cnt>
			 }
			 char start = 2;
			 char num = 0;
			 for(char i=1;i<loop+1;i++)
			 {
				 temp[i-1] = buf[UDP_DATA_P + (start + (i-1))];
    2b86:	71 d7       	rcall	.+3810   	; 0x3a6a <vPortYield>
    2b88:	2e ce       	rjmp	.-932    	; 0x27e6 <_ZL5proc2Pv+0xbc>
    2b8a:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <_ZZL5proc2PvE3buf+0x2c>
    2b8e:	89 83       	std	Y+1, r24	; 0x01
			 }
			 char start = 2;
			 char num = 0;
			 for(char i=1;i<loop+1;i++)
			 {
				  temp[i-1] = buf[UDP_DATA_P + (start + (i-1))];
    2b90:	21 e0       	ldi	r18, 0x01	; 1
    2b92:	30 e0       	ldi	r19, 0x00	; 0
    2b94:	03 cf       	rjmp	.-506    	; 0x299c <_ZL5proc2Pv+0x272>
    2b96:	20 91 b7 02 	lds	r18, 0x02B7	; 0x8002b7 <_ZZL5proc2PvE3buf+0x2c>
    2b9a:	29 83       	std	Y+1, r18	; 0x01
			 }
			 char start = 2;
			 char num = 0;
			 for(char i=1;i<loop+1;i++)
			 {
				 temp[i-1] = buf[UDP_DATA_P + (start + (i-1))];
    2b9c:	41 e0       	ldi	r20, 0x01	; 1
    2b9e:	50 e0       	ldi	r21, 0x00	; 0
    2ba0:	50 cf       	rjmp	.-352    	; 0x2a42 <_ZL5proc2Pv+0x318>
    2ba2:	20 91 b7 02 	lds	r18, 0x02B7	; 0x8002b7 <_ZZL5proc2PvE3buf+0x2c>
    2ba6:	29 83       	std	Y+1, r18	; 0x01
    2ba8:	41 e0       	ldi	r20, 0x01	; 1
    2baa:	50 e0       	ldi	r21, 0x00	; 0
    2bac:	83 cf       	rjmp	.-250    	; 0x2ab4 <_ZL5proc2Pv+0x38a>

00002bae <_ZL5proc1Pv>:
			/////////////////////////////////			
		}
	}
}
static void proc1(void* pvParam) 
{
    2bae:	cf 93       	push	r28
    2bb0:	df 93       	push	r29
    2bb2:	cd b7       	in	r28, 0x3d	; 61
    2bb4:	de b7       	in	r29, 0x3e	; 62
    2bb6:	2f 97       	sbiw	r28, 0x0f	; 15
    2bb8:	0f b6       	in	r0, 0x3f	; 63
    2bba:	f8 94       	cli
    2bbc:	de bf       	out	0x3e, r29	; 62
    2bbe:	0f be       	out	0x3f, r0	; 63
    2bc0:	cd bf       	out	0x3d, r28	; 61
    2bc2:	6c 01       	movw	r12, r24
	//UART1 
	SerialBuffer *sb = static_cast<SerialBuffer*>(pvParam);
	uint8_t proc1_buff[15] = {0};
    2bc4:	fe 01       	movw	r30, r28
    2bc6:	31 96       	adiw	r30, 0x01	; 1
    2bc8:	8f e0       	ldi	r24, 0x0F	; 15
    2bca:	df 01       	movw	r26, r30
    2bcc:	1d 92       	st	X+, r1
    2bce:	8a 95       	dec	r24
    2bd0:	e9 f7       	brne	.-6      	; 0x2bcc <_ZL5proc1Pv+0x1e>
		
	while(1)
	{
	   if(mem4[TARGET_CMP] != mem4[GOAL_CNT])
    2bd2:	00 e2       	ldi	r16, 0x20	; 32
    2bd4:	13 e0       	ldi	r17, 0x03	; 3
    2bd6:	5e 01       	movw	r10, r28
    2bd8:	b0 e1       	ldi	r27, 0x10	; 16
    2bda:	ab 0e       	add	r10, r27
    2bdc:	b1 1c       	adc	r11, r1
			else
			{
				cbi(PORTB,7);
				GetExceptionCode(&exception,0x01,0x06);
				sb->SerialWrite((char*)&exception,sizeof(exception)); //리스폰스 데이터 쓰기.
				cbi(UCSR1B,RXCIE0);
    2bde:	0f 2e       	mov	r0, r31
    2be0:	fa e9       	ldi	r31, 0x9A	; 154
    2be2:	8f 2e       	mov	r8, r31
    2be4:	91 2c       	mov	r9, r1
    2be6:	f0 2d       	mov	r31, r0
	
				count_number = ((0xff & proc1_buff[7]) << 8) | (0xff & proc1_buff[8]);
				current_temp = ((0xff & proc1_buff[9]) << 8) | (0xff & proc1_buff[10]);
				current_pressure = ((0xff & proc1_buff[11]) << 8) | (0xff & proc1_buff[12]);
				mem4[TEMP] = current_temp;
				if(mem4[TARGET_COUNT_SENSOR]) //LOCAL SENSOR 
    2be8:	0f 2e       	mov	r0, r31
    2bea:	f8 e6       	ldi	r31, 0x68	; 104
    2bec:	6f 2e       	mov	r6, r31
    2bee:	f3 e0       	ldi	r31, 0x03	; 3
    2bf0:	7f 2e       	mov	r7, r31
    2bf2:	f0 2d       	mov	r31, r0

				}
				mem4[PRESSURE] = current_pressure;
				if((mem4[GOAL_CNT] == mem4[COUNT])&& mem4[MACHINE_STATES] == NORMAL)
				{
					mem4[MACHINE_STATES] = COMPLETE_PRODUCTS;
    2bf4:	0f 2e       	mov	r0, r31
    2bf6:	f3 e0       	ldi	r31, 0x03	; 3
    2bf8:	2f 2e       	mov	r2, r31
    2bfa:	31 2c       	mov	r3, r1
    2bfc:	f0 2d       	mov	r31, r0
					Alarm_Start();
				}
				else //PLC
				{
					Alarm_Stop();
					if(mem4[START_BUTTON] == ON)
    2bfe:	0f 2e       	mov	r0, r31
    2c00:	fc e6       	ldi	r31, 0x6C	; 108
    2c02:	4f 2e       	mov	r4, r31
    2c04:	f3 e0       	ldi	r31, 0x03	; 3
    2c06:	5f 2e       	mov	r5, r31
    2c08:	f0 2d       	mov	r31, r0
	SerialBuffer *sb = static_cast<SerialBuffer*>(pvParam);
	uint8_t proc1_buff[15] = {0};
		
	while(1)
	{
	   if(mem4[TARGET_CMP] != mem4[GOAL_CNT])
    2c0a:	f8 01       	movw	r30, r16
    2c0c:	80 89       	ldd	r24, Z+16	; 0x10
    2c0e:	91 89       	ldd	r25, Z+17	; 0x11
    2c10:	26 ad       	ldd	r18, Z+62	; 0x3e
    2c12:	37 ad       	ldd	r19, Z+63	; 0x3f
    2c14:	28 17       	cp	r18, r24
    2c16:	39 07       	cpc	r19, r25
    2c18:	41 f0       	breq	.+16     	; 0x2c2a <_ZL5proc1Pv+0x7c>
	   {
		   mem4[TARGET_MAX] = mem4[GOAL_CNT];
    2c1a:	95 af       	std	Z+61, r25	; 0x3d
    2c1c:	84 af       	std	Z+60, r24	; 0x3c
		   mem4[TARGET_GOAL_CNT] = mem4[GOAL_CNT];
    2c1e:	91 af       	std	Z+57, r25	; 0x39
    2c20:	80 af       	std	Z+56, r24	; 0x38
		   mem4[WARNING_HIGH] = mem4[GOAL_CNT];
    2c22:	97 ab       	std	Z+55, r25	; 0x37
    2c24:	86 ab       	std	Z+54, r24	; 0x36
		   mem4[TARGET_CMP] = mem4[GOAL_CNT];
    2c26:	97 af       	std	Z+63, r25	; 0x3f
    2c28:	86 af       	std	Z+62, r24	; 0x3e
		}
		if(sb->SerialAvailable() >= 15)
    2c2a:	c6 01       	movw	r24, r12
    2c2c:	0e 94 c7 06 	call	0xd8e	; 0xd8e <_ZN12SerialBuffer15SerialAvailableEv>
    2c30:	8f 30       	cpi	r24, 0x0F	; 15
    2c32:	58 f3       	brcs	.-42     	; 0x2c0a <_ZL5proc1Pv+0x5c>
    2c34:	ce 01       	movw	r24, r28
    2c36:	01 96       	adiw	r24, 0x01	; 1
    2c38:	7c 01       	movw	r14, r24
		{
			for(uint8_t i=0;i<15;i++)
			{
				proc1_buff[i] = sb->SerialRead();
    2c3a:	c6 01       	movw	r24, r12
    2c3c:	0e 94 9b 06 	call	0xd36	; 0xd36 <_ZN12SerialBuffer10SerialReadEv>
    2c40:	d7 01       	movw	r26, r14
    2c42:	8d 93       	st	X+, r24
    2c44:	7d 01       	movw	r14, r26
		   mem4[WARNING_HIGH] = mem4[GOAL_CNT];
		   mem4[TARGET_CMP] = mem4[GOAL_CNT];
		}
		if(sb->SerialAvailable() >= 15)
		{
			for(uint8_t i=0;i<15;i++)
    2c46:	aa 15       	cp	r26, r10
    2c48:	bb 05       	cpc	r27, r11
    2c4a:	b9 f7       	brne	.-18     	; 0x2c3a <_ZL5proc1Pv+0x8c>
			{
				proc1_buff[i] = sb->SerialRead();
			}
			if(proc1_buff[0] == 0x02)
    2c4c:	89 81       	ldd	r24, Y+1	; 0x01
    2c4e:	82 30       	cpi	r24, 0x02	; 2
    2c50:	09 f0       	breq	.+2      	; 0x2c54 <_ZL5proc1Pv+0xa6>
    2c52:	74 c0       	rjmp	.+232    	; 0x2d3c <_ZL5proc1Pv+0x18e>
			{
	
				count_number = ((0xff & proc1_buff[7]) << 8) | (0xff & proc1_buff[8]);
    2c54:	88 85       	ldd	r24, Y+8	; 0x08
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	98 2f       	mov	r25, r24
    2c5a:	88 27       	eor	r24, r24
    2c5c:	29 85       	ldd	r18, Y+9	; 0x09
    2c5e:	82 2b       	or	r24, r18
    2c60:	90 93 ab 03 	sts	0x03AB, r25	; 0x8003ab <count_number+0x1>
    2c64:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <count_number>
				current_temp = ((0xff & proc1_buff[9]) << 8) | (0xff & proc1_buff[10]);
    2c68:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	98 2f       	mov	r25, r24
    2c6e:	88 27       	eor	r24, r24
    2c70:	2b 85       	ldd	r18, Y+11	; 0x0b
    2c72:	82 2b       	or	r24, r18
    2c74:	90 93 a9 03 	sts	0x03A9, r25	; 0x8003a9 <current_temp+0x1>
    2c78:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <current_temp>
				current_pressure = ((0xff & proc1_buff[11]) << 8) | (0xff & proc1_buff[12]);
    2c7c:	2c 85       	ldd	r18, Y+12	; 0x0c
    2c7e:	30 e0       	ldi	r19, 0x00	; 0
    2c80:	32 2f       	mov	r19, r18
    2c82:	22 27       	eor	r18, r18
    2c84:	4d 85       	ldd	r20, Y+13	; 0x0d
    2c86:	24 2b       	or	r18, r20
    2c88:	30 93 a7 03 	sts	0x03A7, r19	; 0x8003a7 <current_pressure+0x1>
    2c8c:	20 93 a6 03 	sts	0x03A6, r18	; 0x8003a6 <current_pressure>
				mem4[TEMP] = current_temp;
    2c90:	f8 01       	movw	r30, r16
    2c92:	93 83       	std	Z+3, r25	; 0x03
    2c94:	82 83       	std	Z+2, r24	; 0x02
				if(mem4[TARGET_COUNT_SENSOR]) //LOCAL SENSOR 
    2c96:	d3 01       	movw	r26, r6
    2c98:	ed 90       	ld	r14, X+
    2c9a:	fc 90       	ld	r15, X
    2c9c:	e1 14       	cp	r14, r1
    2c9e:	f1 04       	cpc	r15, r1
    2ca0:	19 f0       	breq	.+6      	; 0x2ca8 <_ZL5proc1Pv+0xfa>
				{
					Alarm_Start();
    2ca2:	0e 94 25 08 	call	0x104a	; 0x104a <Alarm_Start>
    2ca6:	33 c0       	rjmp	.+102    	; 0x2d0e <_ZL5proc1Pv+0x160>
				}
				else //PLC
				{
					Alarm_Stop();
    2ca8:	0e 94 21 08 	call	0x1042	; 0x1042 <Alarm_Stop>
					if(mem4[START_BUTTON] == ON)
    2cac:	f2 01       	movw	r30, r4
    2cae:	80 81       	ld	r24, Z
    2cb0:	91 81       	ldd	r25, Z+1	; 0x01
    2cb2:	01 97       	sbiw	r24, 0x01	; 1
    2cb4:	61 f5       	brne	.+88     	; 0x2d0e <_ZL5proc1Pv+0x160>
					{
						uint8_t i;
						for(i=0;i<PAGE_MAX;i++)
						{
							if(current_states_lookup_table[i] == ON)
    2cb6:	ac e9       	ldi	r26, 0x9C	; 156
    2cb8:	b3 e0       	ldi	r27, 0x03	; 3
    2cba:	8c 91       	ld	r24, X
    2cbc:	81 30       	cpi	r24, 0x01	; 1
    2cbe:	59 f0       	breq	.+22     	; 0x2cd6 <_ZL5proc1Pv+0x128>
    2cc0:	ad e9       	ldi	r26, 0x9D	; 157
    2cc2:	b3 e0       	ldi	r27, 0x03	; 3
				{
					Alarm_Stop();
					if(mem4[START_BUTTON] == ON)
					{
						uint8_t i;
						for(i=0;i<PAGE_MAX;i++)
    2cc4:	e1 e0       	ldi	r30, 0x01	; 1
    2cc6:	cd 01       	movw	r24, r26
    2cc8:	8c 59       	subi	r24, 0x9C	; 156
    2cca:	93 40       	sbci	r25, 0x03	; 3
    2ccc:	7c 01       	movw	r14, r24
						{
							if(current_states_lookup_table[i] == ON)
    2cce:	8d 91       	ld	r24, X+
    2cd0:	81 30       	cpi	r24, 0x01	; 1
    2cd2:	71 f4       	brne	.+28     	; 0x2cf0 <_ZL5proc1Pv+0x142>
    2cd4:	01 c0       	rjmp	.+2      	; 0x2cd8 <_ZL5proc1Pv+0x12a>
    2cd6:	e0 e0       	ldi	r30, 0x00	; 0
							{
								current_cnt_mem[i] = count_number;
    2cd8:	d7 01       	movw	r26, r14
    2cda:	aa 0f       	add	r26, r26
    2cdc:	bb 1f       	adc	r27, r27
    2cde:	a4 5f       	subi	r26, 0xF4	; 244
    2ce0:	bc 4f       	sbci	r27, 0xFC	; 252
    2ce2:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <count_number>
    2ce6:	90 91 ab 03 	lds	r25, 0x03AB	; 0x8003ab <count_number+0x1>
    2cea:	8d 93       	st	X+, r24
    2cec:	9c 93       	st	X, r25
								break;
    2cee:	03 c0       	rjmp	.+6      	; 0x2cf6 <_ZL5proc1Pv+0x148>
				{
					Alarm_Stop();
					if(mem4[START_BUTTON] == ON)
					{
						uint8_t i;
						for(i=0;i<PAGE_MAX;i++)
    2cf0:	ef 5f       	subi	r30, 0xFF	; 255
    2cf2:	ea 30       	cpi	r30, 0x0A	; 10
    2cf4:	41 f7       	brne	.-48     	; 0x2cc6 <_ZL5proc1Pv+0x118>
							{
								current_cnt_mem[i] = count_number;
								break;
							}
						}
						mem4[COUNT] = current_cnt_mem[i]; 
    2cf6:	f0 e0       	ldi	r31, 0x00	; 0
    2cf8:	ee 0f       	add	r30, r30
    2cfa:	ff 1f       	adc	r31, r31
    2cfc:	e4 5f       	subi	r30, 0xF4	; 244
    2cfe:	fc 4f       	sbci	r31, 0xFC	; 252
    2d00:	80 81       	ld	r24, Z
    2d02:	91 81       	ldd	r25, Z+1	; 0x01
    2d04:	d8 01       	movw	r26, r16
    2d06:	17 96       	adiw	r26, 0x07	; 7
    2d08:	9c 93       	st	X, r25
    2d0a:	8e 93       	st	-X, r24
    2d0c:	16 97       	sbiw	r26, 0x06	; 6
					}

				}
				mem4[PRESSURE] = current_pressure;
    2d0e:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <current_pressure>
    2d12:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <current_pressure+0x1>
    2d16:	f8 01       	movw	r30, r16
    2d18:	95 83       	std	Z+5, r25	; 0x05
    2d1a:	84 83       	std	Z+4, r24	; 0x04
				if((mem4[GOAL_CNT] == mem4[COUNT])&& mem4[MACHINE_STATES] == NORMAL)
    2d1c:	20 89       	ldd	r18, Z+16	; 0x10
    2d1e:	31 89       	ldd	r19, Z+17	; 0x11
    2d20:	86 81       	ldd	r24, Z+6	; 0x06
    2d22:	97 81       	ldd	r25, Z+7	; 0x07
    2d24:	28 17       	cp	r18, r24
    2d26:	39 07       	cpc	r19, r25
    2d28:	09 f0       	breq	.+2      	; 0x2d2c <_ZL5proc1Pv+0x17e>
    2d2a:	6f cf       	rjmp	.-290    	; 0x2c0a <_ZL5proc1Pv+0x5c>
    2d2c:	82 89       	ldd	r24, Z+18	; 0x12
    2d2e:	93 89       	ldd	r25, Z+19	; 0x13
    2d30:	89 2b       	or	r24, r25
    2d32:	09 f0       	breq	.+2      	; 0x2d36 <_ZL5proc1Pv+0x188>
    2d34:	6a cf       	rjmp	.-300    	; 0x2c0a <_ZL5proc1Pv+0x5c>
				{
					mem4[MACHINE_STATES] = COMPLETE_PRODUCTS;
    2d36:	33 8a       	std	Z+19, r3	; 0x13
    2d38:	22 8a       	std	Z+18, r2	; 0x12
    2d3a:	67 cf       	rjmp	.-306    	; 0x2c0a <_ZL5proc1Pv+0x5c>
				}
			}
			else
			{
				cbi(PORTB,7);
    2d3c:	c7 98       	cbi	0x18, 7	; 24
				GetExceptionCode(&exception,0x01,0x06);
    2d3e:	46 e0       	ldi	r20, 0x06	; 6
    2d40:	61 e0       	ldi	r22, 0x01	; 1
    2d42:	84 eb       	ldi	r24, 0xB4	; 180
    2d44:	93 e0       	ldi	r25, 0x03	; 3
    2d46:	0e 94 02 06 	call	0xc04	; 0xc04 <_Z16GetExceptionCodeP16RspExceptionCodecc>
				sb->SerialWrite((char*)&exception,sizeof(exception)); //리스폰스 데이터 쓰기.
    2d4a:	45 e0       	ldi	r20, 0x05	; 5
    2d4c:	50 e0       	ldi	r21, 0x00	; 0
    2d4e:	64 eb       	ldi	r22, 0xB4	; 180
    2d50:	73 e0       	ldi	r23, 0x03	; 3
    2d52:	c6 01       	movw	r24, r12
    2d54:	0e 94 5f 06 	call	0xcbe	; 0xcbe <_ZN12SerialBuffer11SerialWriteEPKci>
				cbi(UCSR1B,RXCIE0);
    2d58:	d4 01       	movw	r26, r8
    2d5a:	8c 91       	ld	r24, X
    2d5c:	8f 77       	andi	r24, 0x7F	; 127
    2d5e:	8c 93       	st	X, r24
				sb->SerialFlush();
    2d60:	c6 01       	movw	r24, r12
    2d62:	0e 94 d2 06 	call	0xda4	; 0xda4 <_ZN12SerialBuffer11SerialFlushEv>
				sbi(UCSR1B,RXCIE0);
    2d66:	f4 01       	movw	r30, r8
    2d68:	80 81       	ld	r24, Z
    2d6a:	80 68       	ori	r24, 0x80	; 128
    2d6c:	80 83       	st	Z, r24
				sbi(PORTB,7);
    2d6e:	c7 9a       	sbi	0x18, 7	; 24
    2d70:	4c cf       	rjmp	.-360    	; 0x2c0a <_ZL5proc1Pv+0x5c>

00002d72 <_ZL4procPv>:
	{
		chatter_flag = 1;
	}
}
static void proc(void* pvParam) //터치패널 HMI RS232 쓰레드
{
    2d72:	cf 93       	push	r28
    2d74:	df 93       	push	r29
    2d76:	cd b7       	in	r28, 0x3d	; 61
    2d78:	de b7       	in	r29, 0x3e	; 62
    2d7a:	2a 97       	sbiw	r28, 0x0a	; 10
    2d7c:	0f b6       	in	r0, 0x3f	; 63
    2d7e:	f8 94       	cli
    2d80:	de bf       	out	0x3e, r29	; 62
    2d82:	0f be       	out	0x3f, r0	; 63
    2d84:	cd bf       	out	0x3d, r28	; 61
    2d86:	7c 01       	movw	r14, r24
	char read_Flag = 0;
    2d88:	b1 2c       	mov	r11, r1
	while(1)
	{
		//mem4[COUNT] = PIND;
		if(PIND == 0xfe && chatter_flag == 1)//
		{
			if(mem4[START_BUTTON] == ON)
    2d8a:	0f 2e       	mov	r0, r31
    2d8c:	fc e6       	ldi	r31, 0x6C	; 108
    2d8e:	6f 2e       	mov	r6, r31
    2d90:	f3 e0       	ldi	r31, 0x03	; 3
    2d92:	7f 2e       	mov	r7, r31
    2d94:	f0 2d       	mov	r31, r0
				if(current_states_lookup_table[mem4[CURRENT_RUN_NUMBER]] == ON)
				{
					current_cnt_mem[mem4[CURRENT_RUN_NUMBER]]++;
				}
			}
			chatter_flag = 2;
    2d96:	68 94       	set
    2d98:	33 24       	eor	r3, r3
    2d9a:	31 f8       	bld	r3, 1
		if(PIND == 0xff && chatter_flag == 2)//
		{
			vTaskDelay(10);
			chatter_flag = 0;
		}
		if(mem4[SEC] >= 60)
    2d9c:	00 e2       	ldi	r16, 0x20	; 32
    2d9e:	13 e0       	ldi	r17, 0x03	; 3
			{
				mem4[MIN] = 0;
				mem4[HOUR]++;
			}
		}
		mem4[COUNT] = current_cnt_mem[mem4[CURRENT_PAGE]];
    2da0:	0f 2e       	mov	r0, r31
    2da2:	f0 e7       	ldi	r31, 0x70	; 112
    2da4:	cf 2e       	mov	r12, r31
    2da6:	f3 e0       	ldi	r31, 0x03	; 3
    2da8:	df 2e       	mov	r13, r31
    2daa:	f0 2d       	mov	r31, r0
    2dac:	2e 01       	movw	r4, r28
    2dae:	8c e0       	ldi	r24, 0x0C	; 12
    2db0:	48 0e       	add	r4, r24
    2db2:	51 1c       	adc	r5, r1
    2db4:	68 94       	set
    2db6:	22 24       	eor	r2, r2
    2db8:	24 f8       	bld	r2, 4
    2dba:	4e 01       	movw	r8, r28
    2dbc:	99 e0       	ldi	r25, 0x09	; 9
    2dbe:	89 0e       	add	r8, r25
    2dc0:	91 1c       	adc	r9, r1
    2dc2:	1a c0       	rjmp	.+52     	; 0x2df8 <_ZL4procPv+0x86>
    2dc4:	aa 24       	eor	r10, r10
    2dc6:	a3 94       	inc	r10
    2dc8:	bb 24       	eor	r11, r11
    2dca:	b3 94       	inc	r11
    2dcc:	15 c0       	rjmp	.+42     	; 0x2df8 <_ZL4procPv+0x86>
    2dce:	aa 24       	eor	r10, r10
    2dd0:	a3 94       	inc	r10
    2dd2:	bb 24       	eor	r11, r11
    2dd4:	b3 94       	inc	r11
    2dd6:	10 c0       	rjmp	.+32     	; 0x2df8 <_ZL4procPv+0x86>
    2dd8:	68 94       	set
    2dda:	aa 24       	eor	r10, r10
    2ddc:	a2 f8       	bld	r10, 2
    2dde:	bb 24       	eor	r11, r11
    2de0:	b3 94       	inc	r11
    2de2:	0a c0       	rjmp	.+20     	; 0x2df8 <_ZL4procPv+0x86>
    2de4:	0f 2e       	mov	r0, r31
    2de6:	f5 e0       	ldi	r31, 0x05	; 5
    2de8:	af 2e       	mov	r10, r31
    2dea:	f0 2d       	mov	r31, r0
    2dec:	bb 24       	eor	r11, r11
    2dee:	b3 94       	inc	r11
    2df0:	03 c0       	rjmp	.+6      	; 0x2df8 <_ZL4procPv+0x86>
    2df2:	a2 2c       	mov	r10, r2
    2df4:	bb 24       	eor	r11, r11
    2df6:	b3 94       	inc	r11
	SerialBuffer *sb = static_cast<SerialBuffer*>(pvParam);	
	register uint16_t i;
	while(1)
	{
		//mem4[COUNT] = PIND;
		if(PIND == 0xfe && chatter_flag == 1)//
    2df8:	80 b3       	in	r24, 0x10	; 16
    2dfa:	8e 3f       	cpi	r24, 0xFE	; 254
    2dfc:	f9 f4       	brne	.+62     	; 0x2e3c <_ZL4procPv+0xca>
    2dfe:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <chatter_flag>
    2e02:	81 30       	cpi	r24, 0x01	; 1
    2e04:	d9 f4       	brne	.+54     	; 0x2e3c <_ZL4procPv+0xca>
    2e06:	80 c1       	rjmp	.+768    	; 0x3108 <_ZL4procPv+0x396>
		{
			if(mem4[START_BUTTON] == ON)
			{
				if(current_states_lookup_table[mem4[CURRENT_RUN_NUMBER]] == ON)
    2e08:	a4 e7       	ldi	r26, 0x74	; 116
    2e0a:	b3 e0       	ldi	r27, 0x03	; 3
    2e0c:	8d 91       	ld	r24, X+
    2e0e:	9c 91       	ld	r25, X
    2e10:	fc 01       	movw	r30, r24
    2e12:	e4 56       	subi	r30, 0x64	; 100
    2e14:	fc 4f       	sbci	r31, 0xFC	; 252
    2e16:	20 81       	ld	r18, Z
    2e18:	21 30       	cpi	r18, 0x01	; 1
    2e1a:	51 f4       	brne	.+20     	; 0x2e30 <_ZL4procPv+0xbe>
				{
					current_cnt_mem[mem4[CURRENT_RUN_NUMBER]]++;
    2e1c:	88 0f       	add	r24, r24
    2e1e:	99 1f       	adc	r25, r25
    2e20:	fc 01       	movw	r30, r24
    2e22:	e4 5f       	subi	r30, 0xF4	; 244
    2e24:	fc 4f       	sbci	r31, 0xFC	; 252
    2e26:	80 81       	ld	r24, Z
    2e28:	91 81       	ldd	r25, Z+1	; 0x01
    2e2a:	01 96       	adiw	r24, 0x01	; 1
    2e2c:	91 83       	std	Z+1, r25	; 0x01
    2e2e:	80 83       	st	Z, r24
				}
			}
			chatter_flag = 2;
    2e30:	30 92 06 03 	sts	0x0306, r3	; 0x800306 <chatter_flag>
		}
		if(PIND == 0xff && chatter_flag == 2)//
    2e34:	80 b3       	in	r24, 0x10	; 16
    2e36:	8f 3f       	cpi	r24, 0xFF	; 255
    2e38:	49 f4       	brne	.+18     	; 0x2e4c <_ZL4procPv+0xda>
    2e3a:	6d c1       	rjmp	.+730    	; 0x3116 <_ZL4procPv+0x3a4>
    2e3c:	80 b3       	in	r24, 0x10	; 16
    2e3e:	8f 3f       	cpi	r24, 0xFF	; 255
    2e40:	29 f4       	brne	.+10     	; 0x2e4c <_ZL4procPv+0xda>
    2e42:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <chatter_flag>
    2e46:	82 30       	cpi	r24, 0x02	; 2
    2e48:	09 f4       	brne	.+2      	; 0x2e4c <_ZL4procPv+0xda>
    2e4a:	65 c1       	rjmp	.+714    	; 0x3116 <_ZL4procPv+0x3a4>
		{
			vTaskDelay(10);
			chatter_flag = 0;
		}
		if(mem4[SEC] >= 60)
    2e4c:	f8 01       	movw	r30, r16
    2e4e:	84 85       	ldd	r24, Z+12	; 0x0c
    2e50:	95 85       	ldd	r25, Z+13	; 0x0d
    2e52:	cc 97       	sbiw	r24, 0x3c	; 60
    2e54:	94 f0       	brlt	.+36     	; 0x2e7a <_ZL4procPv+0x108>
		{
			mem4[SEC] = 0;
    2e56:	15 86       	std	Z+13, r1	; 0x0d
    2e58:	14 86       	std	Z+12, r1	; 0x0c
			mem4[MIN]++;
    2e5a:	82 85       	ldd	r24, Z+10	; 0x0a
    2e5c:	93 85       	ldd	r25, Z+11	; 0x0b
    2e5e:	01 96       	adiw	r24, 0x01	; 1
			if(mem4[MIN] >= 60)
    2e60:	8c 33       	cpi	r24, 0x3C	; 60
    2e62:	91 05       	cpc	r25, r1
    2e64:	1c f4       	brge	.+6      	; 0x2e6c <_ZL4procPv+0xfa>
			chatter_flag = 0;
		}
		if(mem4[SEC] >= 60)
		{
			mem4[SEC] = 0;
			mem4[MIN]++;
    2e66:	93 87       	std	Z+11, r25	; 0x0b
    2e68:	82 87       	std	Z+10, r24	; 0x0a
    2e6a:	07 c0       	rjmp	.+14     	; 0x2e7a <_ZL4procPv+0x108>
			if(mem4[MIN] >= 60)
			{
				mem4[MIN] = 0;
    2e6c:	13 86       	std	Z+11, r1	; 0x0b
    2e6e:	12 86       	std	Z+10, r1	; 0x0a
				mem4[HOUR]++;
    2e70:	80 85       	ldd	r24, Z+8	; 0x08
    2e72:	91 85       	ldd	r25, Z+9	; 0x09
    2e74:	01 96       	adiw	r24, 0x01	; 1
    2e76:	91 87       	std	Z+9, r25	; 0x09
    2e78:	80 87       	std	Z+8, r24	; 0x08
			}
		}
		mem4[COUNT] = current_cnt_mem[mem4[CURRENT_PAGE]];
    2e7a:	d6 01       	movw	r26, r12
    2e7c:	ed 91       	ld	r30, X+
    2e7e:	fc 91       	ld	r31, X
    2e80:	ee 0f       	add	r30, r30
    2e82:	ff 1f       	adc	r31, r31
    2e84:	e4 5f       	subi	r30, 0xF4	; 244
    2e86:	fc 4f       	sbci	r31, 0xFC	; 252
    2e88:	80 81       	ld	r24, Z
    2e8a:	91 81       	ldd	r25, Z+1	; 0x01
    2e8c:	f8 01       	movw	r30, r16
    2e8e:	97 83       	std	Z+7, r25	; 0x07
    2e90:	86 83       	std	Z+6, r24	; 0x06
		if(read_Flag == 0)
    2e92:	b1 10       	cpse	r11, r1
    2e94:	59 c0       	rjmp	.+178    	; 0x2f48 <_ZL4procPv+0x1d6>
		{
			if(sb->SerialAvailable() >= 2)
    2e96:	c7 01       	movw	r24, r14
    2e98:	0e 94 c7 06 	call	0xd8e	; 0xd8e <_ZN12SerialBuffer15SerialAvailableEv>
    2e9c:	82 30       	cpi	r24, 0x02	; 2
    2e9e:	08 f4       	brcc	.+2      	; 0x2ea2 <_ZL4procPv+0x130>
    2ea0:	41 c1       	rjmp	.+642    	; 0x3124 <_ZL4procPv+0x3b2>
			{
				for(i=0;i<2;i++)
				{
					buf1[i] = sb->SerialRead();
    2ea2:	c7 01       	movw	r24, r14
    2ea4:	0e 94 9b 06 	call	0xd36	; 0xd36 <_ZN12SerialBuffer10SerialReadEv>
    2ea8:	89 83       	std	Y+1, r24	; 0x01
    2eaa:	c7 01       	movw	r24, r14
    2eac:	0e 94 9b 06 	call	0xd36	; 0xd36 <_ZN12SerialBuffer10SerialReadEv>
    2eb0:	8a 83       	std	Y+2, r24	; 0x02
					#if PACKET_DEBUG
						sb1->SerialWrite(buf1[i]);
					#endif
				}
				if(buf1[0] != 0x01)
    2eb2:	99 81       	ldd	r25, Y+1	; 0x01
    2eb4:	91 30       	cpi	r25, 0x01	; 1
    2eb6:	b1 f4       	brne	.+44     	; 0x2ee4 <_ZL4procPv+0x172>
				{
				//	read_Flag = 0;
					goto FREAM_ERROR;
				}
				if(buf1[1] == 0x01)
    2eb8:	81 30       	cpi	r24, 0x01	; 1
    2eba:	09 f4       	brne	.+2      	; 0x2ebe <_ZL4procPv+0x14c>
    2ebc:	4a c0       	rjmp	.+148    	; 0x2f52 <_ZL4procPv+0x1e0>
				{
					function_code = 0x01;
					read_Flag = 1;
				}
				else if(buf1[1] == 0x04)
    2ebe:	84 30       	cpi	r24, 0x04	; 4
    2ec0:	09 f4       	brne	.+2      	; 0x2ec4 <_ZL4procPv+0x152>
    2ec2:	5e c0       	rjmp	.+188    	; 0x2f80 <_ZL4procPv+0x20e>
				{
					function_code = 0x04;
					read_Flag = 1;
				}
				else if(buf1[1] == 0x05)
    2ec4:	85 30       	cpi	r24, 0x05	; 5
    2ec6:	09 f4       	brne	.+2      	; 0x2eca <_ZL4procPv+0x158>
    2ec8:	89 c0       	rjmp	.+274    	; 0x2fdc <_ZL4procPv+0x26a>
				{
					function_code = 0x05;                              
					read_Flag = 1;
				}
				else if(buf1[1] == 0x10)
    2eca:	80 31       	cpi	r24, 0x10	; 16
    2ecc:	59 f4       	brne	.+22     	; 0x2ee4 <_ZL4procPv+0x172>
    2ece:	b4 c0       	rjmp	.+360    	; 0x3038 <_ZL4procPv+0x2c6>
    2ed0:	68 94       	set
    2ed2:	aa 24       	eor	r10, r10
    2ed4:	a2 f8       	bld	r10, 2
    2ed6:	06 c0       	rjmp	.+12     	; 0x2ee4 <_ZL4procPv+0x172>
    2ed8:	0f 2e       	mov	r0, r31
    2eda:	f5 e0       	ldi	r31, 0x05	; 5
    2edc:	af 2e       	mov	r10, r31
    2ede:	f0 2d       	mov	r31, r0
    2ee0:	01 c0       	rjmp	.+2      	; 0x2ee4 <_ZL4procPv+0x172>
    2ee2:	a2 2c       	mov	r10, r2
				{
					FREAM_ERROR:
					#if CHECK_ERROR
						mem4[ERROR_CNT]++;
					#endif
					GetExceptionCode(&exception,0x01,0x01);  
    2ee4:	41 e0       	ldi	r20, 0x01	; 1
    2ee6:	61 e0       	ldi	r22, 0x01	; 1
    2ee8:	84 eb       	ldi	r24, 0xB4	; 180
    2eea:	93 e0       	ldi	r25, 0x03	; 3
    2eec:	0e 94 02 06 	call	0xc04	; 0xc04 <_Z16GetExceptionCodeP16RspExceptionCodecc>
					cbi(PORTB,7);
    2ef0:	c7 98       	cbi	0x18, 7	; 24
					cbi(UCSR0B,RXCIE0);
    2ef2:	57 98       	cbi	0x0a, 7	; 10
					dev->getInterfaceAddr(UART0)->Stop_Device();                                                                                                                                                                                                                
    2ef4:	60 e0       	ldi	r22, 0x00	; 0
    2ef6:	80 91 e1 03 	lds	r24, 0x03E1	; 0x8003e1 <dev>
    2efa:	90 91 e2 03 	lds	r25, 0x03E2	; 0x8003e2 <dev+0x1>
    2efe:	0e 94 22 0a 	call	0x1444	; 0x1444 <_ZNK11Dev_Manager16getInterfaceAddrE8Dev_type>
    2f02:	dc 01       	movw	r26, r24
    2f04:	ed 91       	ld	r30, X+
    2f06:	fc 91       	ld	r31, X
    2f08:	00 84       	ldd	r0, Z+8	; 0x08
    2f0a:	f1 85       	ldd	r31, Z+9	; 0x09
    2f0c:	e0 2d       	mov	r30, r0
    2f0e:	09 95       	icall
					sb->SerialFlush();
    2f10:	c7 01       	movw	r24, r14
    2f12:	0e 94 d2 06 	call	0xda4	; 0xda4 <_ZN12SerialBuffer11SerialFlushEv>
					dev->getInterfaceAddr(UART0)->Start_Device(0);
    2f16:	60 e0       	ldi	r22, 0x00	; 0
    2f18:	80 91 e1 03 	lds	r24, 0x03E1	; 0x8003e1 <dev>
    2f1c:	90 91 e2 03 	lds	r25, 0x03E2	; 0x8003e2 <dev+0x1>
    2f20:	0e 94 22 0a 	call	0x1444	; 0x1444 <_ZNK11Dev_Manager16getInterfaceAddrE8Dev_type>
    2f24:	dc 01       	movw	r26, r24
    2f26:	ed 91       	ld	r30, X+
    2f28:	fc 91       	ld	r31, X
    2f2a:	02 84       	ldd	r0, Z+10	; 0x0a
    2f2c:	f3 85       	ldd	r31, Z+11	; 0x0b
    2f2e:	e0 2d       	mov	r30, r0
    2f30:	60 e0       	ldi	r22, 0x00	; 0
    2f32:	09 95       	icall
					sbi(UCSR0B,RXCIE0);
    2f34:	57 9a       	sbi	0x0a, 7	; 10
					sb->SerialWrite((char*)&exception,sizeof(exception));
    2f36:	45 e0       	ldi	r20, 0x05	; 5
    2f38:	50 e0       	ldi	r21, 0x00	; 0
    2f3a:	64 eb       	ldi	r22, 0xB4	; 180
    2f3c:	73 e0       	ldi	r23, 0x03	; 3
    2f3e:	c7 01       	movw	r24, r14
    2f40:	0e 94 5f 06 	call	0xcbe	; 0xcbe <_ZN12SerialBuffer11SerialWriteEPKci>
					sbi(PORTB,7);
    2f44:	c7 9a       	sbi	0x18, 7	; 24
    2f46:	ee c0       	rjmp	.+476    	; 0x3124 <_ZL4procPv+0x3b2>
					read_Flag = 0;	
				}
			}
			
		}
		if(read_Flag == 1)
    2f48:	b1 e0       	ldi	r27, 0x01	; 1
    2f4a:	bb 12       	cpse	r11, r27
    2f4c:	55 cf       	rjmp	.-342    	; 0x2df8 <_ZL4procPv+0x86>
		{
			if(function_code == 0x01)  
    2f4e:	ab 12       	cpse	r10, r27
    2f50:	14 c0       	rjmp	.+40     	; 0x2f7a <_ZL4procPv+0x208>
			{
				if(sb->SerialAvailable() >= 6)
    2f52:	c7 01       	movw	r24, r14
    2f54:	0e 94 c7 06 	call	0xd8e	; 0xd8e <_ZN12SerialBuffer15SerialAvailableEv>
    2f58:	86 30       	cpi	r24, 0x06	; 6
    2f5a:	08 f4       	brcc	.+2      	; 0x2f5e <_ZL4procPv+0x1ec>
    2f5c:	33 cf       	rjmp	.-410    	; 0x2dc4 <_ZL4procPv+0x52>
    2f5e:	5e 01       	movw	r10, r28
    2f60:	e3 e0       	ldi	r30, 0x03	; 3
    2f62:	ae 0e       	add	r10, r30
    2f64:	b1 1c       	adc	r11, r1
				{
					for(i=2;i<8;i++)
					{
						buf1[i] = sb->SerialRead();
    2f66:	c7 01       	movw	r24, r14
    2f68:	0e 94 9b 06 	call	0xd36	; 0xd36 <_ZN12SerialBuffer10SerialReadEv>
    2f6c:	d5 01       	movw	r26, r10
    2f6e:	8d 93       	st	X+, r24
    2f70:	5d 01       	movw	r10, r26
		{
			if(function_code == 0x01)  
			{
				if(sb->SerialAvailable() >= 6)
				{
					for(i=2;i<8;i++)
    2f72:	8a 16       	cp	r8, r26
    2f74:	9b 06       	cpc	r9, r27
    2f76:	b9 f7       	brne	.-18     	; 0x2f66 <_ZL4procPv+0x1f4>
    2f78:	2a cf       	rjmp	.-428    	; 0x2dce <_ZL4procPv+0x5c>
						#endif
					}

				}
			}
			else if(function_code == 0x04) //Max1W 값 읽기
    2f7a:	b4 e0       	ldi	r27, 0x04	; 4
    2f7c:	ab 12       	cpse	r10, r27
    2f7e:	2b c0       	rjmp	.+86     	; 0x2fd6 <_ZL4procPv+0x264>
			{
				if(sb->SerialAvailable() >= 6)
    2f80:	c7 01       	movw	r24, r14
    2f82:	0e 94 c7 06 	call	0xd8e	; 0xd8e <_ZN12SerialBuffer15SerialAvailableEv>
    2f86:	86 30       	cpi	r24, 0x06	; 6
    2f88:	08 f4       	brcc	.+2      	; 0x2f8c <_ZL4procPv+0x21a>
    2f8a:	26 cf       	rjmp	.-436    	; 0x2dd8 <_ZL4procPv+0x66>
    2f8c:	5e 01       	movw	r10, r28
    2f8e:	e3 e0       	ldi	r30, 0x03	; 3
    2f90:	ae 0e       	add	r10, r30
    2f92:	b1 1c       	adc	r11, r1
				{
					for(i=2;i<8;i++)
					{
						buf1[i] = sb->SerialRead();
    2f94:	c7 01       	movw	r24, r14
    2f96:	0e 94 9b 06 	call	0xd36	; 0xd36 <_ZN12SerialBuffer10SerialReadEv>
    2f9a:	d5 01       	movw	r26, r10
    2f9c:	8d 93       	st	X+, r24
    2f9e:	5d 01       	movw	r10, r26
			}
			else if(function_code == 0x04) //Max1W 값 읽기
			{
				if(sb->SerialAvailable() >= 6)
				{
					for(i=2;i<8;i++)
    2fa0:	a8 15       	cp	r26, r8
    2fa2:	b9 05       	cpc	r27, r9
    2fa4:	b9 f7       	brne	.-18     	; 0x2f94 <_ZL4procPv+0x222>
						#if PACKET_DEBUG
							sb1->SerialWrite(buf1[i]);
						#endif
					}
					int tempadr =((0xff & buf1[2] << 8) | 0xff & buf1[3]);
					if(tempadr >= MAX_ENUM)  //주소 사이즈 체크 
    2fa6:	8c 81       	ldd	r24, Y+4	; 0x04
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	cc 97       	sbiw	r24, 0x3c	; 60
    2fac:	0c f0       	brlt	.+2      	; 0x2fb0 <_ZL4procPv+0x23e>
    2fae:	90 cf       	rjmp	.-224    	; 0x2ed0 <_ZL4procPv+0x15e>
							//sb->SerialWrite((char*)&exception,sizeof(exception));
							goto FREAM_ERROR;
					}
					else
					{
							GetFunc04Data(buf1,&func04,mem4);
    2fb0:	a8 01       	movw	r20, r16
    2fb2:	64 ec       	ldi	r22, 0xC4	; 196
    2fb4:	73 e0       	ldi	r23, 0x03	; 3
    2fb6:	ce 01       	movw	r24, r28
    2fb8:	01 96       	adiw	r24, 0x01	; 1
    2fba:	0e 94 85 05 	call	0xb0a	; 0xb0a <_Z13GetFunc04DataPcP17GetFunctionCode04Pi>
							sb->SerialWrite((char*)&func04,sizeof(func04));
    2fbe:	47 e0       	ldi	r20, 0x07	; 7
    2fc0:	50 e0       	ldi	r21, 0x00	; 0
    2fc2:	64 ec       	ldi	r22, 0xC4	; 196
    2fc4:	73 e0       	ldi	r23, 0x03	; 3
    2fc6:	c7 01       	movw	r24, r14
    2fc8:	0e 94 5f 06 	call	0xcbe	; 0xcbe <_ZN12SerialBuffer11SerialWriteEPKci>
    2fcc:	68 94       	set
    2fce:	aa 24       	eor	r10, r10
    2fd0:	a2 f8       	bld	r10, 2
							read_Flag = 0;
    2fd2:	b1 2c       	mov	r11, r1
    2fd4:	11 cf       	rjmp	.-478    	; 0x2df8 <_ZL4procPv+0x86>
					}

				}
			}
			else if(function_code == 0x05) //터치 버튼 
    2fd6:	b5 e0       	ldi	r27, 0x05	; 5
    2fd8:	ab 12       	cpse	r10, r27
    2fda:	2b c0       	rjmp	.+86     	; 0x3032 <_ZL4procPv+0x2c0>
			{
				if(sb->SerialAvailable() >= 6)
    2fdc:	c7 01       	movw	r24, r14
    2fde:	0e 94 c7 06 	call	0xd8e	; 0xd8e <_ZN12SerialBuffer15SerialAvailableEv>
    2fe2:	86 30       	cpi	r24, 0x06	; 6
    2fe4:	08 f4       	brcc	.+2      	; 0x2fe8 <_ZL4procPv+0x276>
    2fe6:	fe ce       	rjmp	.-516    	; 0x2de4 <_ZL4procPv+0x72>
    2fe8:	5e 01       	movw	r10, r28
    2fea:	e3 e0       	ldi	r30, 0x03	; 3
    2fec:	ae 0e       	add	r10, r30
    2fee:	b1 1c       	adc	r11, r1
				{
					for(i=2;i<8;i++)
					{
						buf1[i] = sb->SerialRead();
    2ff0:	c7 01       	movw	r24, r14
    2ff2:	0e 94 9b 06 	call	0xd36	; 0xd36 <_ZN12SerialBuffer10SerialReadEv>
    2ff6:	d5 01       	movw	r26, r10
    2ff8:	8d 93       	st	X+, r24
    2ffa:	5d 01       	movw	r10, r26
			}
			else if(function_code == 0x05) //터치 버튼 
			{
				if(sb->SerialAvailable() >= 6)
				{
					for(i=2;i<8;i++)
    2ffc:	a8 15       	cp	r26, r8
    2ffe:	b9 05       	cpc	r27, r9
    3000:	b9 f7       	brne	.-18     	; 0x2ff0 <_ZL4procPv+0x27e>
						#if PACKET_DEBUG
						sb1->SerialWrite(buf1[i]);
						#endif
					}
					int tempadr =((0xff & buf1[2] << 8) | 0xff & buf1[3]);
					if(tempadr >= MAX_ENUM)  //주소 사이즈 체크
    3002:	8c 81       	ldd	r24, Y+4	; 0x04
    3004:	90 e0       	ldi	r25, 0x00	; 0
    3006:	cc 97       	sbiw	r24, 0x3c	; 60
    3008:	0c f0       	brlt	.+2      	; 0x300c <_ZL4procPv+0x29a>
    300a:	66 cf       	rjmp	.-308    	; 0x2ed8 <_ZL4procPv+0x166>
					{
						goto FREAM_ERROR;
					}
					else
					{
						GetFunc05Data(buf1,&func05);
    300c:	6b ec       	ldi	r22, 0xCB	; 203
    300e:	73 e0       	ldi	r23, 0x03	; 3
    3010:	ce 01       	movw	r24, r28
    3012:	01 96       	adiw	r24, 0x01	; 1
    3014:	0e 94 a6 05 	call	0xb4c	; 0xb4c <_Z13GetFunc05DataPcP17GetFunctionCode05>
						sb->SerialWrite((char*)&func05,sizeof(func05));
    3018:	48 e0       	ldi	r20, 0x08	; 8
    301a:	50 e0       	ldi	r21, 0x00	; 0
    301c:	6b ec       	ldi	r22, 0xCB	; 203
    301e:	73 e0       	ldi	r23, 0x03	; 3
    3020:	c7 01       	movw	r24, r14
    3022:	0e 94 5f 06 	call	0xcbe	; 0xcbe <_ZN12SerialBuffer11SerialWriteEPKci>
    3026:	0f 2e       	mov	r0, r31
    3028:	f5 e0       	ldi	r31, 0x05	; 5
    302a:	af 2e       	mov	r10, r31
    302c:	f0 2d       	mov	r31, r0
						read_Flag = 0;
    302e:	b1 2c       	mov	r11, r1
    3030:	e3 ce       	rjmp	.-570    	; 0x2df8 <_ZL4procPv+0x86>
					}
	
				}
			}
			else if(function_code == 0x10)  //3_MAX1W 입력 
    3032:	b0 e1       	ldi	r27, 0x10	; 16
    3034:	ab 12       	cpse	r10, r27
    3036:	e0 ce       	rjmp	.-576    	; 0x2df8 <_ZL4procPv+0x86>
			{
				if(sb->SerialAvailable() >= 9)
    3038:	c7 01       	movw	r24, r14
    303a:	0e 94 c7 06 	call	0xd8e	; 0xd8e <_ZN12SerialBuffer15SerialAvailableEv>
    303e:	89 30       	cpi	r24, 0x09	; 9
    3040:	08 f4       	brcc	.+2      	; 0x3044 <_ZL4procPv+0x2d2>
    3042:	d7 ce       	rjmp	.-594    	; 0x2df2 <_ZL4procPv+0x80>
    3044:	5e 01       	movw	r10, r28
    3046:	e3 e0       	ldi	r30, 0x03	; 3
    3048:	ae 0e       	add	r10, r30
    304a:	b1 1c       	adc	r11, r1
				{
					for(i=2;i<11;i++)
					{
						buf1[i] = sb->SerialRead();
    304c:	c7 01       	movw	r24, r14
    304e:	0e 94 9b 06 	call	0xd36	; 0xd36 <_ZN12SerialBuffer10SerialReadEv>
    3052:	d5 01       	movw	r26, r10
    3054:	8d 93       	st	X+, r24
    3056:	5d 01       	movw	r10, r26
			}
			else if(function_code == 0x10)  //3_MAX1W 입력 
			{
				if(sb->SerialAvailable() >= 9)
				{
					for(i=2;i<11;i++)
    3058:	a4 15       	cp	r26, r4
    305a:	b5 05       	cpc	r27, r5
    305c:	b9 f7       	brne	.-18     	; 0x304c <_ZL4procPv+0x2da>
						buf1[i] = sb->SerialRead();
						#if PACKET_DEBUG
						sb1->SerialWrite(buf1[i]);
						#endif
					}
					GetFucc10Data(buf1,&func10,mem4); //데이터 파싱
    305e:	a8 01       	movw	r20, r16
    3060:	69 eb       	ldi	r22, 0xB9	; 185
    3062:	73 e0       	ldi	r23, 0x03	; 3
    3064:	ce 01       	movw	r24, r28
    3066:	01 96       	adiw	r24, 0x01	; 1
    3068:	0e 94 bf 05 	call	0xb7e	; 0xb7e <_Z13GetFucc10DataPcP17GetFunctionCode10Pi>
					int tempadr =((0xff & buf1[2] << 8) | 0xff & buf1[3]);
					if(tempadr >= MAX_ENUM)  //주소 사이즈 체크
    306c:	8c 81       	ldd	r24, Y+4	; 0x04
    306e:	90 e0       	ldi	r25, 0x00	; 0
    3070:	cc 97       	sbiw	r24, 0x3c	; 60
    3072:	0c f0       	brlt	.+2      	; 0x3076 <_ZL4procPv+0x304>
    3074:	36 cf       	rjmp	.-404    	; 0x2ee2 <_ZL4procPv+0x170>
					{
						goto FREAM_ERROR;
					}
					else
					{
						if(func10.startingAddressLo == 38)
    3076:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <func10+0x3>
    307a:	86 32       	cpi	r24, 0x26	; 38
    307c:	e9 f4       	brne	.+58     	; 0x30b8 <_ZL4procPv+0x346>
						{
							if(current_states_lookup_table[mem4[CURRENT_PAGE]] == 0) //룩업 테이블은 처음 시작시 0값이어야 함,
    307e:	f6 01       	movw	r30, r12
    3080:	20 81       	ld	r18, Z
    3082:	31 81       	ldd	r19, Z+1	; 0x01
    3084:	f9 01       	movw	r30, r18
    3086:	e4 56       	subi	r30, 0x64	; 100
    3088:	fc 4f       	sbci	r31, 0xFC	; 252
    308a:	80 81       	ld	r24, Z
    308c:	81 11       	cpse	r24, r1
    308e:	2c c0       	rjmp	.+88     	; 0x30e8 <_ZL4procPv+0x376>
							{
								uint8_t flag = 0;
								mem4[START_BUTTON] = ON;
    3090:	e1 e0       	ldi	r30, 0x01	; 1
    3092:	f0 e0       	ldi	r31, 0x00	; 0
    3094:	d3 01       	movw	r26, r6
    3096:	ed 93       	st	X+, r30
    3098:	fc 93       	st	X, r31
								mem4[CURRENT_STATE_ON] = ON; // 시작 등 ON
    309a:	a2 e7       	ldi	r26, 0x72	; 114
    309c:	b3 e0       	ldi	r27, 0x03	; 3
    309e:	ed 93       	st	X+, r30
    30a0:	fc 93       	st	X, r31
    30a2:	ec e9       	ldi	r30, 0x9C	; 156
    30a4:	f3 e0       	ldi	r31, 0x03	; 3
								//룩업 테이블을 먼저 확인 함. 한개라도 가동중이면 리턴함, 가동이 반드시 끝나고 시작해야함(페이지 이동 후 시작 시)
								for(uint8_t i = 0; i< PAGE_MAX;i++)
								{
									if(current_states_lookup_table[i] == ON)
    30a6:	81 91       	ld	r24, Z+
    30a8:	81 30       	cpi	r24, 0x01	; 1
    30aa:	f1 f0       	breq	.+60     	; 0x30e8 <_ZL4procPv+0x376>
							{
								uint8_t flag = 0;
								mem4[START_BUTTON] = ON;
								mem4[CURRENT_STATE_ON] = ON; // 시작 등 ON
								//룩업 테이블을 먼저 확인 함. 한개라도 가동중이면 리턴함, 가동이 반드시 끝나고 시작해야함(페이지 이동 후 시작 시)
								for(uint8_t i = 0; i< PAGE_MAX;i++)
    30ac:	86 ea       	ldi	r24, 0xA6	; 166
    30ae:	93 e0       	ldi	r25, 0x03	; 3
    30b0:	8e 17       	cp	r24, r30
    30b2:	9f 07       	cpc	r25, r31
    30b4:	c1 f7       	brne	.-16     	; 0x30a6 <_ZL4procPv+0x334>
    30b6:	38 c0       	rjmp	.+112    	; 0x3128 <_ZL4procPv+0x3b6>
									current_states_lookup_table[mem4[CURRENT_PAGE]] = ON;
									mem4[CURRENT_RUN_NUMBER] = mem4[CURRENT_PAGE];
								}
							}
						}
						if(func10.startingAddressLo == 39)
    30b8:	87 32       	cpi	r24, 0x27	; 39
    30ba:	b1 f4       	brne	.+44     	; 0x30e8 <_ZL4procPv+0x376>
						{
						
							if(current_states_lookup_table[mem4[CURRENT_PAGE]] == ON)
    30bc:	d6 01       	movw	r26, r12
    30be:	8d 91       	ld	r24, X+
    30c0:	9c 91       	ld	r25, X
    30c2:	fc 01       	movw	r30, r24
    30c4:	e4 56       	subi	r30, 0x64	; 100
    30c6:	fc 4f       	sbci	r31, 0xFC	; 252
    30c8:	20 81       	ld	r18, Z
    30ca:	21 30       	cpi	r18, 0x01	; 1
    30cc:	69 f4       	brne	.+26     	; 0x30e8 <_ZL4procPv+0x376>
							{
								current_states_lookup_table[mem4[CURRENT_PAGE]] = 0;
    30ce:	fc 01       	movw	r30, r24
    30d0:	e4 56       	subi	r30, 0x64	; 100
    30d2:	fc 4f       	sbci	r31, 0xFC	; 252
    30d4:	10 82       	st	Z, r1
								mem4[START_BUTTON] = OFF;
    30d6:	82 e0       	ldi	r24, 0x02	; 2
    30d8:	90 e0       	ldi	r25, 0x00	; 0
    30da:	f3 01       	movw	r30, r6
    30dc:	91 83       	std	Z+1, r25	; 0x01
    30de:	80 83       	st	Z, r24
								mem4[CURRENT_STATE_ON] = 0;//시작 등  OFF
    30e0:	a2 e7       	ldi	r26, 0x72	; 114
    30e2:	b3 e0       	ldi	r27, 0x03	; 3
    30e4:	1d 92       	st	X+, r1
    30e6:	1c 92       	st	X, r1
							}
						}
						ResponseFucc10Data(buf1,&rsp10); //리스폰스 데이터를 만듬.
    30e8:	6c ea       	ldi	r22, 0xAC	; 172
    30ea:	73 e0       	ldi	r23, 0x03	; 3
    30ec:	ce 01       	movw	r24, r28
    30ee:	01 96       	adiw	r24, 0x01	; 1
    30f0:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <_Z18ResponseFucc10DataPcP22ResponseFunctionCode10>
						sb->SerialWrite((char*)&rsp10,sizeof(rsp10)); //리스폰스 데이터 쓰기.
    30f4:	48 e0       	ldi	r20, 0x08	; 8
    30f6:	50 e0       	ldi	r21, 0x00	; 0
    30f8:	6c ea       	ldi	r22, 0xAC	; 172
    30fa:	73 e0       	ldi	r23, 0x03	; 3
    30fc:	c7 01       	movw	r24, r14
    30fe:	0e 94 5f 06 	call	0xcbe	; 0xcbe <_ZN12SerialBuffer11SerialWriteEPKci>
    3102:	a2 2c       	mov	r10, r2
						read_Flag = 0;
    3104:	b1 2c       	mov	r11, r1
    3106:	78 ce       	rjmp	.-784    	; 0x2df8 <_ZL4procPv+0x86>
	while(1)
	{
		//mem4[COUNT] = PIND;
		if(PIND == 0xfe && chatter_flag == 1)//
		{
			if(mem4[START_BUTTON] == ON)
    3108:	f3 01       	movw	r30, r6
    310a:	80 81       	ld	r24, Z
    310c:	91 81       	ldd	r25, Z+1	; 0x01
    310e:	01 97       	sbiw	r24, 0x01	; 1
    3110:	09 f0       	breq	.+2      	; 0x3114 <_ZL4procPv+0x3a2>
    3112:	8e ce       	rjmp	.-740    	; 0x2e30 <_ZL4procPv+0xbe>
    3114:	79 ce       	rjmp	.-782    	; 0x2e08 <_ZL4procPv+0x96>
			}
			chatter_flag = 2;
		}
		if(PIND == 0xff && chatter_flag == 2)//
		{
			vTaskDelay(10);
    3116:	8a e0       	ldi	r24, 0x0A	; 10
    3118:	90 e0       	ldi	r25, 0x00	; 0
    311a:	0e 94 40 23 	call	0x4680	; 0x4680 <vTaskDelay>
			chatter_flag = 0;
    311e:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <chatter_flag>
    3122:	94 ce       	rjmp	.-728    	; 0x2e4c <_ZL4procPv+0xda>
					}
					else
					{
						GetFunc05Data(buf1,&func05);
						sb->SerialWrite((char*)&func05,sizeof(func05));
						read_Flag = 0;
    3124:	b1 2c       	mov	r11, r1
    3126:	68 ce       	rjmp	.-816    	; 0x2df8 <_ZL4procPv+0x86>
										break;
									}
								}
								if(flag == 0)
								{
									current_states_lookup_table[mem4[CURRENT_PAGE]] = ON;
    3128:	f9 01       	movw	r30, r18
    312a:	e4 56       	subi	r30, 0x64	; 100
    312c:	fc 4f       	sbci	r31, 0xFC	; 252
    312e:	81 e0       	ldi	r24, 0x01	; 1
    3130:	80 83       	st	Z, r24
									mem4[CURRENT_RUN_NUMBER] = mem4[CURRENT_PAGE];
    3132:	a4 e7       	ldi	r26, 0x74	; 116
    3134:	b3 e0       	ldi	r27, 0x03	; 3
    3136:	2d 93       	st	X+, r18
    3138:	3c 93       	st	X, r19
    313a:	d6 cf       	rjmp	.-84     	; 0x30e8 <_ZL4procPv+0x376>

0000313c <_Z8Uart_ISR8Dev_typej>:

void Uart_ISR(Dev_type Device,uint16_t Arg)
{ 
	uint8_t data = Arg;
	SerialBuffer *sb = (SerialBuffer*)DataStruct[UART0];
	sb->Serialstore(data);
    313c:	80 91 d3 03 	lds	r24, 0x03D3	; 0x8003d3 <DataStruct>
    3140:	90 91 d4 03 	lds	r25, 0x03D4	; 0x8003d4 <DataStruct+0x1>
    3144:	0e 94 3a 06 	call	0xc74	; 0xc74 <_ZN12SerialBuffer11SerialstoreEc>
	sbi(PORTB,5);
    3148:	c5 9a       	sbi	0x18, 5	; 24
    314a:	08 95       	ret

0000314c <_Z9RS485_ISR8Dev_typej>:
}
void RS485_ISR(Dev_type Device,uint16_t Arg)
{
	uint8_t data = Arg;
	SerialBuffer *sb = (SerialBuffer*)DataStruct[RS485];
	sb->Serialstore(data);
    314c:	80 91 d5 03 	lds	r24, 0x03D5	; 0x8003d5 <DataStruct+0x2>
    3150:	90 91 d6 03 	lds	r25, 0x03D6	; 0x8003d6 <DataStruct+0x3>
    3154:	0e 94 3a 06 	call	0xc74	; 0xc74 <_ZN12SerialBuffer11SerialstoreEc>
	sbi(PORTB,6);
    3158:	c6 9a       	sbi	0x18, 6	; 24
    315a:	08 95       	ret

0000315c <_Z16Count_Sensor_ISR8Dev_typej>:
{

}
void Count_Sensor_ISR(Dev_type Device,uint16_t Arg)
{
	Alarm_Open(ALARM0,80,Set_Alarm);
    315c:	4e e2       	ldi	r20, 0x2E	; 46
    315e:	50 e1       	ldi	r21, 0x10	; 16
    3160:	60 e5       	ldi	r22, 0x50	; 80
    3162:	70 e0       	ldi	r23, 0x00	; 0
    3164:	80 e0       	ldi	r24, 0x00	; 0
    3166:	0c 94 29 08 	jmp	0x1052	; 0x1052 <Alarm_Open>
    316a:	08 95       	ret

0000316c <_Z8Init_Devv>:
	cmp_mem[2] = mem4[IPV4_2];
	cmp_mem[3] = mem4[IPV4_3];
	
}
void Init_Dev()
{
    316c:	cf 93       	push	r28
    316e:	df 93       	push	r29
	dev = new Dev_Manager();
    3170:	84 e1       	ldi	r24, 0x14	; 20
    3172:	90 e0       	ldi	r25, 0x00	; 0
    3174:	0e 94 cb 09 	call	0x1396	; 0x1396 <_ZN11Dev_ManagernwEj>
    3178:	ec 01       	movw	r28, r24
    317a:	0e 94 98 09 	call	0x1330	; 0x1330 <_ZN11Dev_ManagerC1Ev>
    317e:	d0 93 e2 03 	sts	0x03E2, r29	; 0x8003e2 <dev+0x1>
    3182:	c0 93 e1 03 	sts	0x03E1, r28	; 0x8003e1 <dev>
	lcd = new Char_LCD2004A();
    3186:	82 e0       	ldi	r24, 0x02	; 2
    3188:	90 e0       	ldi	r25, 0x00	; 0
    318a:	0e 94 83 09 	call	0x1306	; 0x1306 <_ZN13Char_LCD2004AnwEj>
    318e:	ec 01       	movw	r28, r24
    3190:	0e 94 0a 09 	call	0x1214	; 0x1214 <_ZN13Char_LCD2004AC1Ev>
    3194:	d0 93 e0 03 	sts	0x03E0, r29	; 0x8003e0 <lcd+0x1>
    3198:	c0 93 df 03 	sts	0x03DF, r28	; 0x8003df <lcd>
	#if USE_ADC
		adc = new Adc();
    319c:	84 e0       	ldi	r24, 0x04	; 4
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	0e 94 16 08 	call	0x102c	; 0x102c <_ZN3AdcnwEj>
    31a4:	fc 01       	movw	r30, r24
    31a6:	12 82       	std	Z+2, r1	; 0x02
    31a8:	13 82       	std	Z+3, r1	; 0x03
#include "FreeRTOS.h"
#include "semphr.h"
#define malloc(size) pvPortMalloc(size)
#define free(ptr) vPortFree(ptr)

class Adc : public DeviceDriveInterFace
    31aa:	8b e4       	ldi	r24, 0x4B	; 75
    31ac:	91 e0       	ldi	r25, 0x01	; 1
    31ae:	91 83       	std	Z+1, r25	; 0x01
    31b0:	80 83       	st	Z, r24
    31b2:	f0 93 de 03 	sts	0x03DE, r31	; 0x8003de <adc+0x1>
    31b6:	e0 93 dd 03 	sts	0x03DD, r30	; 0x8003dd <adc>
		dev->Register_Dev(adc,_ADC);
    31ba:	44 e0       	ldi	r20, 0x04	; 4
    31bc:	bf 01       	movw	r22, r30
    31be:	80 91 e1 03 	lds	r24, 0x03E1	; 0x8003e1 <dev>
    31c2:	90 91 e2 03 	lds	r25, 0x03E2	; 0x8003e2 <dev+0x1>
    31c6:	0e 94 c2 09 	call	0x1384	; 0x1384 <_ZN11Dev_Manager12Register_DevEP20DeviceDriveInterFace8Dev_type>
	#endif
	dev->Register_Dev(new UartDriver,UART0);
    31ca:	88 e0       	ldi	r24, 0x08	; 8
    31cc:	90 e0       	ldi	r25, 0x00	; 0
    31ce:	0e 94 12 0c 	call	0x1824	; 0x1824 <_ZN10UartDrivernwEj>
    31d2:	ec 01       	movw	r28, r24
    31d4:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <_ZN10UartDriverC1Ev>
    31d8:	40 e0       	ldi	r20, 0x00	; 0
    31da:	be 01       	movw	r22, r28
    31dc:	80 91 e1 03 	lds	r24, 0x03E1	; 0x8003e1 <dev>
    31e0:	90 91 e2 03 	lds	r25, 0x03E2	; 0x8003e2 <dev+0x1>
    31e4:	0e 94 c2 09 	call	0x1384	; 0x1384 <_ZN11Dev_Manager12Register_DevEP20DeviceDriveInterFace8Dev_type>
	dev->Register_Dev(new RS485Driver,RS485);
    31e8:	88 e0       	ldi	r24, 0x08	; 8
    31ea:	90 e0       	ldi	r25, 0x00	; 0
    31ec:	0e 94 6f 0b 	call	0x16de	; 0x16de <_ZN11RS485DrivernwEj>
    31f0:	ec 01       	movw	r28, r24
    31f2:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <_ZN11RS485DriverC1Ev>
    31f6:	41 e0       	ldi	r20, 0x01	; 1
    31f8:	be 01       	movw	r22, r28
    31fa:	80 91 e1 03 	lds	r24, 0x03E1	; 0x8003e1 <dev>
    31fe:	90 91 e2 03 	lds	r25, 0x03E2	; 0x8003e2 <dev+0x1>
    3202:	0e 94 c2 09 	call	0x1384	; 0x1384 <_ZN11Dev_Manager12Register_DevEP20DeviceDriveInterFace8Dev_type>
	dev->Register_Dev(new Timer,SEC_TIMER);
    3206:	82 e0       	ldi	r24, 0x02	; 2
    3208:	90 e0       	ldi	r25, 0x00	; 0
    320a:	0e 94 37 0b 	call	0x166e	; 0x166e <_ZN5TimernwEj>
    320e:	ec 01       	movw	r28, r24
    3210:	0e 94 31 0b 	call	0x1662	; 0x1662 <_ZN5TimerC1Ev>
    3214:	42 e0       	ldi	r20, 0x02	; 2
    3216:	be 01       	movw	r22, r28
    3218:	80 91 e1 03 	lds	r24, 0x03E1	; 0x8003e1 <dev>
    321c:	90 91 e2 03 	lds	r25, 0x03E2	; 0x8003e2 <dev+0x1>
    3220:	0e 94 c2 09 	call	0x1384	; 0x1384 <_ZN11Dev_Manager12Register_DevEP20DeviceDriveInterFace8Dev_type>
	dev->Register_Dev(new Count_Sensor,COUNT_SENSOR);
    3224:	82 e0       	ldi	r24, 0x02	; 2
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	0e 94 95 09 	call	0x132a	; 0x132a <_ZN12Count_SensornwEj>
#include "FreeRTOS.h"
#include "semphr.h"
#define malloc(size) pvPortMalloc(size)
#define free(ptr) vPortFree(ptr)

class Count_Sensor : public DeviceDriveInterFace
    322c:	2b e6       	ldi	r18, 0x6B	; 107
    322e:	31 e0       	ldi	r19, 0x01	; 1
    3230:	fc 01       	movw	r30, r24
    3232:	31 83       	std	Z+1, r19	; 0x01
    3234:	20 83       	st	Z, r18
    3236:	43 e0       	ldi	r20, 0x03	; 3
    3238:	bc 01       	movw	r22, r24
    323a:	80 91 e1 03 	lds	r24, 0x03E1	; 0x8003e1 <dev>
    323e:	90 91 e2 03 	lds	r25, 0x03E2	; 0x8003e2 <dev+0x1>
    3242:	0e 94 c2 09 	call	0x1384	; 0x1384 <_ZN11Dev_Manager12Register_DevEP20DeviceDriveInterFace8Dev_type>
	
	dev->Device_Init(UART0);
    3246:	60 e0       	ldi	r22, 0x00	; 0
    3248:	80 91 e1 03 	lds	r24, 0x03E1	; 0x8003e1 <dev>
    324c:	90 91 e2 03 	lds	r25, 0x03E2	; 0x8003e2 <dev+0x1>
    3250:	0e 94 f6 09 	call	0x13ec	; 0x13ec <_ZN11Dev_Manager11Device_InitE8Dev_type>
	dev->Device_Init(RS485);
    3254:	61 e0       	ldi	r22, 0x01	; 1
    3256:	80 91 e1 03 	lds	r24, 0x03E1	; 0x8003e1 <dev>
    325a:	90 91 e2 03 	lds	r25, 0x03E2	; 0x8003e2 <dev+0x1>
    325e:	0e 94 f6 09 	call	0x13ec	; 0x13ec <_ZN11Dev_Manager11Device_InitE8Dev_type>
	dev->Device_Init(SEC_TIMER);
    3262:	62 e0       	ldi	r22, 0x02	; 2
    3264:	80 91 e1 03 	lds	r24, 0x03E1	; 0x8003e1 <dev>
    3268:	90 91 e2 03 	lds	r25, 0x03E2	; 0x8003e2 <dev+0x1>
    326c:	0e 94 f6 09 	call	0x13ec	; 0x13ec <_ZN11Dev_Manager11Device_InitE8Dev_type>
	dev->Device_Init(COUNT_SENSOR);
    3270:	63 e0       	ldi	r22, 0x03	; 3
    3272:	80 91 e1 03 	lds	r24, 0x03E1	; 0x8003e1 <dev>
    3276:	90 91 e2 03 	lds	r25, 0x03E2	; 0x8003e2 <dev+0x1>
    327a:	0e 94 f6 09 	call	0x13ec	; 0x13ec <_ZN11Dev_Manager11Device_InitE8Dev_type>
	#if USE_ADC
		dev->Device_Init(_ADC);
    327e:	64 e0       	ldi	r22, 0x04	; 4
    3280:	80 91 e1 03 	lds	r24, 0x03E1	; 0x8003e1 <dev>
    3284:	90 91 e2 03 	lds	r25, 0x03E2	; 0x8003e2 <dev+0x1>
    3288:	0e 94 f6 09 	call	0x13ec	; 0x13ec <_ZN11Dev_Manager11Device_InitE8Dev_type>
	#endif
	dev->Writes(UART0,"Uart Init SUCCESS boadrate 9600bps \r\n");
    328c:	48 ed       	ldi	r20, 0xD8	; 216
    328e:	51 e0       	ldi	r21, 0x01	; 1
    3290:	60 e0       	ldi	r22, 0x00	; 0
    3292:	80 91 e1 03 	lds	r24, 0x03E1	; 0x8003e1 <dev>
    3296:	90 91 e2 03 	lds	r25, 0x03E2	; 0x8003e2 <dev+0x1>
    329a:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <_ZN11Dev_Manager6WritesE8Dev_typePKc>
	dev->Writes(RS485,"RS485 Init SUCCESS boadrate 9600bps \r\n");
    329e:	4e ef       	ldi	r20, 0xFE	; 254
    32a0:	51 e0       	ldi	r21, 0x01	; 1
    32a2:	61 e0       	ldi	r22, 0x01	; 1
    32a4:	80 91 e1 03 	lds	r24, 0x03E1	; 0x8003e1 <dev>
    32a8:	90 91 e2 03 	lds	r25, 0x03E2	; 0x8003e2 <dev+0x1>
    32ac:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <_ZN11Dev_Manager6WritesE8Dev_typePKc>
}
    32b0:	df 91       	pop	r29
    32b2:	cf 91       	pop	r28
    32b4:	08 95       	ret

000032b6 <main>:
#if USE_ADC
	uint16_t Adc_channels[8] = {0};
	uint8_t Adc_check_flag[8] = {0};
#endif
int main( void )
{
    32b6:	cf 92       	push	r12
    32b8:	df 92       	push	r13
    32ba:	ef 92       	push	r14
    32bc:	ff 92       	push	r15
    32be:	0f 93       	push	r16
    32c0:	cf 93       	push	r28
    32c2:	df 93       	push	r29
	mem4[CURRENT_PAGE] = 0;//초기 페이지는 1 
    32c4:	10 92 71 03 	sts	0x0371, r1	; 0x800371 <mem4+0x51>
    32c8:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <mem4+0x50>
	vTaskStartScheduler();//스케줄러 실행 
	return 0;
}
static void System_Init()
{
	mem4[IPV4_0] = eeprom_read_byte((const uint8_t*)0);  //read ip address
    32cc:	80 e0       	ldi	r24, 0x00	; 0
    32ce:	90 e0       	ldi	r25, 0x00	; 0
    32d0:	0e 94 88 2a 	call	0x5510	; 0x5510 <eeprom_read_byte>
    32d4:	d8 2e       	mov	r13, r24
    32d6:	90 e0       	ldi	r25, 0x00	; 0
    32d8:	90 93 61 03 	sts	0x0361, r25	; 0x800361 <mem4+0x41>
    32dc:	80 93 60 03 	sts	0x0360, r24	; 0x800360 <mem4+0x40>
	mem4[IPV4_1] = eeprom_read_byte((const uint8_t*)1);
    32e0:	81 e0       	ldi	r24, 0x01	; 1
    32e2:	90 e0       	ldi	r25, 0x00	; 0
    32e4:	0e 94 88 2a 	call	0x5510	; 0x5510 <eeprom_read_byte>
    32e8:	d8 2f       	mov	r29, r24
    32ea:	90 e0       	ldi	r25, 0x00	; 0
    32ec:	90 93 63 03 	sts	0x0363, r25	; 0x800363 <mem4+0x43>
    32f0:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <mem4+0x42>
	mem4[IPV4_2] = eeprom_read_byte((const uint8_t*)2);
    32f4:	82 e0       	ldi	r24, 0x02	; 2
    32f6:	90 e0       	ldi	r25, 0x00	; 0
    32f8:	0e 94 88 2a 	call	0x5510	; 0x5510 <eeprom_read_byte>
    32fc:	c8 2f       	mov	r28, r24
    32fe:	90 e0       	ldi	r25, 0x00	; 0
    3300:	90 93 65 03 	sts	0x0365, r25	; 0x800365 <mem4+0x45>
    3304:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <mem4+0x44>
	mem4[IPV4_3] = eeprom_read_byte((const uint8_t*)3);
    3308:	83 e0       	ldi	r24, 0x03	; 3
    330a:	90 e0       	ldi	r25, 0x00	; 0
    330c:	0e 94 88 2a 	call	0x5510	; 0x5510 <eeprom_read_byte>
    3310:	28 2f       	mov	r18, r24
    3312:	30 e0       	ldi	r19, 0x00	; 0
    3314:	30 93 67 03 	sts	0x0367, r19	; 0x800367 <mem4+0x47>
    3318:	20 93 66 03 	sts	0x0366, r18	; 0x800366 <mem4+0x46>
	cmp_mem[0] = mem4[IPV4_0];
    331c:	e8 e0       	ldi	r30, 0x08	; 8
    331e:	f3 e0       	ldi	r31, 0x03	; 3
    3320:	d0 82       	st	Z, r13
	cmp_mem[1] = mem4[IPV4_1];
    3322:	d1 83       	std	Z+1, r29	; 0x01
	cmp_mem[2] = mem4[IPV4_2];
    3324:	c2 83       	std	Z+2, r28	; 0x02
	cmp_mem[3] = mem4[IPV4_3];
    3326:	83 83       	std	Z+3, r24	; 0x03
int main( void )
{
	mem4[CURRENT_PAGE] = 0;//초기 페이지는 1 
	System_Init();
	cli();  //인터럽트 금지 
	Init_Dev(); //dev 매니저 초기화
    3328:	f8 94       	cli
	
	
	dev->Open_Handle(UART0,Uart_ISR);  //드라이버 매니져에 인터럽트 루틴 등록
    332a:	20 df       	rcall	.-448    	; 0x316c <_Z8Init_Devv>
    332c:	4e e9       	ldi	r20, 0x9E	; 158
    332e:	58 e1       	ldi	r21, 0x18	; 24
    3330:	60 e0       	ldi	r22, 0x00	; 0
    3332:	80 91 e1 03 	lds	r24, 0x03E1	; 0x8003e1 <dev>
    3336:	90 91 e2 03 	lds	r25, 0x03E2	; 0x8003e2 <dev+0x1>
    333a:	0e 94 08 0a 	call	0x1410	; 0x1410 <_ZN11Dev_Manager11Open_HandleE8Dev_typePFvS0_jE>
	dev->Open_Handle(RS485,RS485_ISR); //드라이버 매니져에 인터럽트 루틴 등록
    333e:	46 ea       	ldi	r20, 0xA6	; 166
    3340:	58 e1       	ldi	r21, 0x18	; 24
    3342:	61 e0       	ldi	r22, 0x01	; 1
    3344:	80 91 e1 03 	lds	r24, 0x03E1	; 0x8003e1 <dev>
    3348:	90 91 e2 03 	lds	r25, 0x03E2	; 0x8003e2 <dev+0x1>
    334c:	0e 94 08 0a 	call	0x1410	; 0x1410 <_ZN11Dev_Manager11Open_HandleE8Dev_typePFvS0_jE>
	dev->Open_Handle(SEC_TIMER,Timer_ISR);
    3350:	4b e0       	ldi	r20, 0x0B	; 11
    3352:	50 e1       	ldi	r21, 0x10	; 16
    3354:	62 e0       	ldi	r22, 0x02	; 2
    3356:	80 91 e1 03 	lds	r24, 0x03E1	; 0x8003e1 <dev>
    335a:	90 91 e2 03 	lds	r25, 0x03E2	; 0x8003e2 <dev+0x1>
    335e:	0e 94 08 0a 	call	0x1410	; 0x1410 <_ZN11Dev_Manager11Open_HandleE8Dev_typePFvS0_jE>
	dev->Open_Handle(COUNT_SENSOR,Count_Sensor_ISR);
    3362:	4e ea       	ldi	r20, 0xAE	; 174
    3364:	58 e1       	ldi	r21, 0x18	; 24
    3366:	63 e0       	ldi	r22, 0x03	; 3
    3368:	80 91 e1 03 	lds	r24, 0x03E1	; 0x8003e1 <dev>
    336c:	90 91 e2 03 	lds	r25, 0x03E2	; 0x8003e2 <dev+0x1>
    3370:	0e 94 08 0a 	call	0x1410	; 0x1410 <_ZN11Dev_Manager11Open_HandleE8Dev_typePFvS0_jE>
	#if USE_ADC
		dev->Open_Handle(_ADC,ADC_ISR);
    3374:	4d e2       	ldi	r20, 0x2D	; 45
    3376:	50 e1       	ldi	r21, 0x10	; 16
    3378:	64 e0       	ldi	r22, 0x04	; 4
    337a:	80 91 e1 03 	lds	r24, 0x03E1	; 0x8003e1 <dev>
    337e:	90 91 e2 03 	lds	r25, 0x03E2	; 0x8003e2 <dev+0x1>
    3382:	0e 94 08 0a 	call	0x1410	; 0x1410 <_ZN11Dev_Manager11Open_HandleE8Dev_typePFvS0_jE>
	#endif
	SerialBuffer *sb = new SerialBuffer(dev,UART0); //링 버퍼 
    3386:	88 e8       	ldi	r24, 0x88	; 136
    3388:	90 e0       	ldi	r25, 0x00	; 0
    338a:	0e 94 37 06 	call	0xc6e	; 0xc6e <_ZN12SerialBuffernwEj>
    338e:	6c 01       	movw	r12, r24
    3390:	60 91 e1 03 	lds	r22, 0x03E1	; 0x8003e1 <dev>
    3394:	70 91 e2 03 	lds	r23, 0x03E2	; 0x8003e2 <dev+0x1>
    3398:	40 e0       	ldi	r20, 0x00	; 0
    339a:	0e 94 12 06 	call	0xc24	; 0xc24 <_ZN12SerialBufferC1EP11Dev_Manager8Dev_type>
	if(sb == nullptr)
    339e:	c1 14       	cp	r12, r1
    33a0:	d1 04       	cpc	r13, r1
	{
		if(debug)
		{ 
			dev->Writes(UART0,"RingBuffer Error\r\n");
		}
		exit(1);
    33a2:	21 f4       	brne	.+8      	; 0x33ac <main+0xf6>
    33a4:	81 e0       	ldi	r24, 0x01	; 1
    33a6:	90 e0       	ldi	r25, 0x00	; 0
    33a8:	0e 94 a1 2a 	call	0x5542	; 0x5542 <_exit>
		if(debug)
		{
			dev->Writes(UART0,"RingBuffer UART0 SUCCESS\r\n");
		}
	}
	SerialBuffer *sb1 = new SerialBuffer(dev,RS485); //링 버퍼 
    33ac:	88 e8       	ldi	r24, 0x88	; 136
    33ae:	90 e0       	ldi	r25, 0x00	; 0
    33b0:	0e 94 37 06 	call	0xc6e	; 0xc6e <_ZN12SerialBuffernwEj>
    33b4:	ec 01       	movw	r28, r24
    33b6:	60 91 e1 03 	lds	r22, 0x03E1	; 0x8003e1 <dev>
    33ba:	70 91 e2 03 	lds	r23, 0x03E2	; 0x8003e2 <dev+0x1>
    33be:	41 e0       	ldi	r20, 0x01	; 1
    33c0:	0e 94 12 06 	call	0xc24	; 0xc24 <_ZN12SerialBufferC1EP11Dev_Manager8Dev_type>
	if(sb1 == nullptr)
    33c4:	20 97       	sbiw	r28, 0x00	; 0
	{
		if(debug)
		{
			dev->Writes(UART0,"RingBuffer Error\r\n");
		}
		exit(1);
    33c6:	21 f4       	brne	.+8      	; 0x33d0 <main+0x11a>
    33c8:	81 e0       	ldi	r24, 0x01	; 1
    33ca:	90 e0       	ldi	r25, 0x00	; 0
    33cc:	0e 94 a1 2a 	call	0x5542	; 0x5542 <_exit>
		if(debug)
		{
			dev->Writes(UART0,"RingBuffer UART1 SUCCESS\r\n");
		}
	}
	DataStruct[UART0] = sb;
    33d0:	e3 ed       	ldi	r30, 0xD3	; 211
    33d2:	f3 e0       	ldi	r31, 0x03	; 3
    33d4:	d1 82       	std	Z+1, r13	; 0x01
	DataStruct[RS485] = sb1;
    33d6:	c0 82       	st	Z, r12
    33d8:	d3 83       	std	Z+3, r29	; 0x03
		}
	}
	

		
	Alarm_Init(); //알람 초기화
    33da:	c2 83       	std	Z+2, r28	; 0x02
    33dc:	0e 94 19 08 	call	0x1032	; 0x1032 <Alarm_Init>
	"Task1",      //테스크 이름
	200,                   //스택의 크기
	sb,       // 테스크 매개 변수
	2,                     //테스크 우선 순위
	NULL                   //태스크 핸들
	);
    33e0:	78 94       	sei
    33e2:	e1 2c       	mov	r14, r1
    33e4:	f1 2c       	mov	r15, r1
    33e6:	02 e0       	ldi	r16, 0x02	; 2
    33e8:	96 01       	movw	r18, r12
    33ea:	48 ec       	ldi	r20, 0xC8	; 200
    33ec:	50 e0       	ldi	r21, 0x00	; 0
    33ee:	65 e2       	ldi	r22, 0x25	; 37
    33f0:	72 e0       	ldi	r23, 0x02	; 2
    33f2:	89 eb       	ldi	r24, 0xB9	; 185
    33f4:	96 e1       	ldi	r25, 0x16	; 22
		"Task2",      //테스크 이름
		150,                   //스택의 크기
		sb1,       // 테스크 매개 변수
		2,                     //테스크 우선 순위
		NULL                   //태스크 핸들
		);
    33f6:	e8 d6       	rcall	.+3536   	; 0x41c8 <xTaskCreate>
    33f8:	9e 01       	movw	r18, r28
    33fa:	46 e9       	ldi	r20, 0x96	; 150
    33fc:	50 e0       	ldi	r21, 0x00	; 0
    33fe:	6b e2       	ldi	r22, 0x2B	; 43
    3400:	72 e0       	ldi	r23, 0x02	; 2
    3402:	87 ed       	ldi	r24, 0xD7	; 215
    3404:	95 e1       	ldi	r25, 0x15	; 21
				"Task3",      //테스크 이름
				600,                   //스택의 크기
				NULL,       // 테스크 매개 변수
				2,                     //테스크 우선 순위0.
				NULL                   //태스크 핸들
				);
    3406:	e0 d6       	rcall	.+3520   	; 0x41c8 <xTaskCreate>
    3408:	20 e0       	ldi	r18, 0x00	; 0
    340a:	30 e0       	ldi	r19, 0x00	; 0
    340c:	48 e5       	ldi	r20, 0x58	; 88
    340e:	52 e0       	ldi	r21, 0x02	; 2
    3410:	61 e3       	ldi	r22, 0x31	; 49
    3412:	72 e0       	ldi	r23, 0x02	; 2
    3414:	85 e9       	ldi	r24, 0x95	; 149
    3416:	93 e1       	ldi	r25, 0x13	; 19
				"Task4",      //테스크 이름
				300,                   //스택의 크기
				NULL,       // 테스크 매개 변수
				2,                     //테스크 우선 순위0.
				NULL                   //태스크 핸들
		);
    3418:	d7 d6       	rcall	.+3502   	; 0x41c8 <xTaskCreate>
    341a:	20 e0       	ldi	r18, 0x00	; 0
    341c:	30 e0       	ldi	r19, 0x00	; 0
    341e:	4c e2       	ldi	r20, 0x2C	; 44
    3420:	51 e0       	ldi	r21, 0x01	; 1
    3422:	67 e3       	ldi	r22, 0x37	; 55
    3424:	72 e0       	ldi	r23, 0x02	; 2
    3426:	86 e3       	ldi	r24, 0x36	; 54
    3428:	90 e1       	ldi	r25, 0x10	; 16
		"Task3",      //테스크 이름
		80,                   //스택의 크기
		NULL,       // 테스크 매개 변수
		2,                     //테스크 우선 순위0.
		NULL                   //태스크 핸들
		);
    342a:	ce d6       	rcall	.+3484   	; 0x41c8 <xTaskCreate>
    342c:	20 e0       	ldi	r18, 0x00	; 0
    342e:	30 e0       	ldi	r19, 0x00	; 0
    3430:	40 e5       	ldi	r20, 0x50	; 80
    3432:	50 e0       	ldi	r21, 0x00	; 0
    3434:	61 e3       	ldi	r22, 0x31	; 49
    3436:	72 e0       	ldi	r23, 0x02	; 2
    3438:	8a ed       	ldi	r24, 0xDA	; 218
		#endif	

		
	
	vTaskStartScheduler();//스케줄러 실행 
    343a:	9a e1       	ldi	r25, 0x1A	; 26
    343c:	c5 d6       	rcall	.+3466   	; 0x41c8 <xTaskCreate>
	return 0;
}
    343e:	c2 d7       	rcall	.+3972   	; 0x43c4 <vTaskStartScheduler>
    3440:	80 e0       	ldi	r24, 0x00	; 0
    3442:	90 e0       	ldi	r25, 0x00	; 0
    3444:	df 91       	pop	r29
    3446:	cf 91       	pop	r28
    3448:	0f 91       	pop	r16
    344a:	ff 90       	pop	r15
    344c:	ef 90       	pop	r14
    344e:	df 90       	pop	r13
    3450:	cf 90       	pop	r12
    3452:	08 95       	ret

00003454 <_Z9fnCalTempf>:
	100, 101, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
120};

float fnCalTemp(float lfOneVolt)
{
    3454:	4f 92       	push	r4
    3456:	5f 92       	push	r5
    3458:	6f 92       	push	r6
    345a:	7f 92       	push	r7
    345c:	8f 92       	push	r8
    345e:	9f 92       	push	r9
    3460:	af 92       	push	r10
    3462:	bf 92       	push	r11
    3464:	cf 92       	push	r12
    3466:	df 92       	push	r13
    3468:	ef 92       	push	r14
    346a:	ff 92       	push	r15
    346c:	0f 93       	push	r16
    346e:	1f 93       	push	r17
    3470:	cf 93       	push	r28
    3472:	df 93       	push	r29
    3474:	cd b7       	in	r28, 0x3d	; 61
    3476:	de b7       	in	r29, 0x3e	; 62
    3478:	28 97       	sbiw	r28, 0x08	; 8
    347a:	0f b6       	in	r0, 0x3f	; 63
    347c:	f8 94       	cli
    347e:	de bf       	out	0x3e, r29	; 62
    3480:	0f be       	out	0x3f, r0	; 63
    3482:	cd bf       	out	0x3d, r28	; 61
    3484:	6b 01       	movw	r12, r22
    3486:	7c 01       	movw	r14, r24
	uint8_t dClass = 0;
	float lfCalTemp = 0;
	
	for( i=0; i<161; i++ )
	{
		if( lfOneVolt<pgm_read_float(&g_alfVolt[i]) )
    3488:	ee e0       	ldi	r30, 0x0E	; 14
    348a:	f8 e0       	ldi	r31, 0x08	; 8
    348c:	25 91       	lpm	r18, Z+
    348e:	35 91       	lpm	r19, Z+
    3490:	45 91       	lpm	r20, Z+
    3492:	54 91       	lpm	r21, Z
    3494:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <__cmpsf2>
    3498:	88 23       	and	r24, r24
    349a:	c4 f0       	brlt	.+48     	; 0x34cc <_Z9fnCalTempf+0x78>
    349c:	02 e1       	ldi	r16, 0x12	; 18
    349e:	18 e0       	ldi	r17, 0x08	; 8
{
	uint8_t i = 0;
	uint8_t dClass = 0;
	float lfCalTemp = 0;
	
	for( i=0; i<161; i++ )
    34a0:	21 e0       	ldi	r18, 0x01	; 1
    34a2:	29 83       	std	Y+1, r18	; 0x01
	{
		if( lfOneVolt<pgm_read_float(&g_alfVolt[i]) )
    34a4:	f8 01       	movw	r30, r16
    34a6:	65 91       	lpm	r22, Z+
    34a8:	75 91       	lpm	r23, Z+
    34aa:	85 91       	lpm	r24, Z+
    34ac:	94 91       	lpm	r25, Z
    34ae:	a7 01       	movw	r20, r14
    34b0:	96 01       	movw	r18, r12
    34b2:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <__gesf2>
    34b6:	18 16       	cp	r1, r24
    34b8:	54 f0       	brlt	.+20     	; 0x34ce <_Z9fnCalTempf+0x7a>
{
	uint8_t i = 0;
	uint8_t dClass = 0;
	float lfCalTemp = 0;
	
	for( i=0; i<161; i++ )
    34ba:	39 81       	ldd	r19, Y+1	; 0x01
    34bc:	3f 5f       	subi	r19, 0xFF	; 255
    34be:	39 83       	std	Y+1, r19	; 0x01
    34c0:	0c 5f       	subi	r16, 0xFC	; 252
    34c2:	1f 4f       	sbci	r17, 0xFF	; 255
    34c4:	31 3a       	cpi	r19, 0xA1	; 161
    34c6:	71 f7       	brne	.-36     	; 0x34a4 <_Z9fnCalTempf+0x50>
120};

float fnCalTemp(float lfOneVolt)
{
	uint8_t i = 0;
	uint8_t dClass = 0;
    34c8:	19 82       	std	Y+1, r1	; 0x01
    34ca:	01 c0       	rjmp	.+2      	; 0x34ce <_Z9fnCalTempf+0x7a>
	float lfCalTemp = 0;
	
	for( i=0; i<161; i++ )
    34cc:	19 82       	std	Y+1, r1	; 0x01
		{
			dClass = i;
			break;
		}
	}
	if (pgm_read_dword(&g_adTemp[dClass-1])<0 )
    34ce:	49 81       	ldd	r20, Y+1	; 0x01
    34d0:	a4 2f       	mov	r26, r20
    34d2:	b0 e0       	ldi	r27, 0x00	; 0
    34d4:	9d 01       	movw	r18, r26
    34d6:	21 50       	subi	r18, 0x01	; 1
    34d8:	31 09       	sbc	r19, r1
    34da:	f9 01       	movw	r30, r18
    34dc:	ee 0f       	add	r30, r30
    34de:	ff 1f       	adc	r31, r31
    34e0:	e4 53       	subi	r30, 0x34	; 52
    34e2:	f9 4f       	sbci	r31, 0xF9	; 249
    34e4:	45 91       	lpm	r20, Z+
    34e6:	55 91       	lpm	r21, Z+
    34e8:	65 91       	lpm	r22, Z+
    34ea:	74 91       	lpm	r23, Z
		//정답지: 32~40 간략화           //1도   상위 고정값 - 측정된 값    /1도 구간에서 저항 변환량
		lfCalTemp = pgm_read_dword(&g_adTemp[dClass-1]) + (1 * ( (pgm_read_float(&g_alfVolt[dClass])-lfOneVolt)/(pgm_read_float(&g_alfVolt[dClass])-pgm_read_float(&g_alfVolt[dClass-1])) ));
	}
	else
	{
		lfCalTemp = pgm_read_dword(&g_adTemp[dClass]) - (1 * ( (pgm_read_float(&g_alfVolt[dClass])-lfOneVolt)/(pgm_read_float(&g_alfVolt[dClass])-pgm_read_float(&g_alfVolt[dClass-1])) ));
    34ec:	fd 01       	movw	r30, r26
    34ee:	ee 0f       	add	r30, r30
    34f0:	ff 1f       	adc	r31, r31
    34f2:	e4 53       	subi	r30, 0x34	; 52
    34f4:	f9 4f       	sbci	r31, 0xF9	; 249
    34f6:	65 91       	lpm	r22, Z+
    34f8:	75 91       	lpm	r23, Z+
    34fa:	85 91       	lpm	r24, Z+
    34fc:	94 91       	lpm	r25, Z
    34fe:	ad 01       	movw	r20, r26
    3500:	44 0f       	add	r20, r20
    3502:	55 1f       	adc	r21, r21
    3504:	44 0f       	add	r20, r20
    3506:	55 1f       	adc	r21, r21
    3508:	42 5f       	subi	r20, 0xF2	; 242
    350a:	57 4f       	sbci	r21, 0xF7	; 247
    350c:	fa 01       	movw	r30, r20
    350e:	45 90       	lpm	r4, Z+
    3510:	55 90       	lpm	r5, Z+
    3512:	65 90       	lpm	r6, Z+
    3514:	74 90       	lpm	r7, Z
    3516:	fa 01       	movw	r30, r20
    3518:	85 90       	lpm	r8, Z+
    351a:	95 90       	lpm	r9, Z+
    351c:	a5 90       	lpm	r10, Z+
    351e:	b4 90       	lpm	r11, Z
    3520:	f9 01       	movw	r30, r18
    3522:	ee 0f       	add	r30, r30
    3524:	ff 1f       	adc	r31, r31
    3526:	ee 0f       	add	r30, r30
    3528:	ff 1f       	adc	r31, r31
    352a:	e2 5f       	subi	r30, 0xF2	; 242
    352c:	f7 4f       	sbci	r31, 0xF7	; 247
    352e:	25 91       	lpm	r18, Z+
    3530:	35 91       	lpm	r19, Z+
    3532:	45 91       	lpm	r20, Z+
    3534:	54 91       	lpm	r21, Z
    3536:	29 83       	std	Y+1, r18	; 0x01
    3538:	3a 83       	std	Y+2, r19	; 0x02
    353a:	4b 83       	std	Y+3, r20	; 0x03
    353c:	5c 83       	std	Y+4, r21	; 0x04
	}
	return lfCalTemp;
    353e:	0e 94 5a 26 	call	0x4cb4	; 0x4cb4 <__floatunsisf>
    3542:	6d 83       	std	Y+5, r22	; 0x05
    3544:	7e 83       	std	Y+6, r23	; 0x06
    3546:	8f 83       	std	Y+7, r24	; 0x07
    3548:	98 87       	std	Y+8, r25	; 0x08
    354a:	a7 01       	movw	r20, r14
    354c:	96 01       	movw	r18, r12
    354e:	c3 01       	movw	r24, r6
    3550:	b2 01       	movw	r22, r4
    3552:	0e 94 58 25 	call	0x4ab0	; 0x4ab0 <__subsf3>
    3556:	6b 01       	movw	r12, r22
    3558:	7c 01       	movw	r14, r24
    355a:	29 81       	ldd	r18, Y+1	; 0x01
    355c:	3a 81       	ldd	r19, Y+2	; 0x02
    355e:	4b 81       	ldd	r20, Y+3	; 0x03
    3560:	5c 81       	ldd	r21, Y+4	; 0x04
    3562:	c5 01       	movw	r24, r10
    3564:	b4 01       	movw	r22, r8
    3566:	0e 94 58 25 	call	0x4ab0	; 0x4ab0 <__subsf3>
    356a:	9b 01       	movw	r18, r22
    356c:	ac 01       	movw	r20, r24
    356e:	c7 01       	movw	r24, r14
    3570:	b6 01       	movw	r22, r12
    3572:	0e 94 c1 25 	call	0x4b82	; 0x4b82 <__divsf3>
    3576:	9b 01       	movw	r18, r22
    3578:	ac 01       	movw	r20, r24
    357a:	6d 81       	ldd	r22, Y+5	; 0x05
    357c:	7e 81       	ldd	r23, Y+6	; 0x06
    357e:	8f 81       	ldd	r24, Y+7	; 0x07
    3580:	98 85       	ldd	r25, Y+8	; 0x08
    3582:	0e 94 58 25 	call	0x4ab0	; 0x4ab0 <__subsf3>
}
    3586:	28 96       	adiw	r28, 0x08	; 8
    3588:	0f b6       	in	r0, 0x3f	; 63
    358a:	f8 94       	cli
    358c:	de bf       	out	0x3e, r29	; 62
    358e:	0f be       	out	0x3f, r0	; 63
    3590:	cd bf       	out	0x3d, r28	; 61
    3592:	df 91       	pop	r29
    3594:	cf 91       	pop	r28
    3596:	1f 91       	pop	r17
    3598:	0f 91       	pop	r16
    359a:	ff 90       	pop	r15
    359c:	ef 90       	pop	r14
    359e:	df 90       	pop	r13
    35a0:	cf 90       	pop	r12
    35a2:	bf 90       	pop	r11
    35a4:	af 90       	pop	r10
    35a6:	9f 90       	pop	r9
    35a8:	8f 90       	pop	r8
    35aa:	7f 90       	pop	r7
    35ac:	6f 90       	pop	r6
    35ae:	5f 90       	pop	r5
    35b0:	4f 90       	pop	r4
    35b2:	08 95       	ret

000035b4 <_ZL5proc3Pv>:
static void proc3(void* pvParam)
{
    35b4:	cf 93       	push	r28
    35b6:	df 93       	push	r29
    35b8:	00 d0       	rcall	.+0      	; 0x35ba <_ZL5proc3Pv+0x6>
    35ba:	00 d0       	rcall	.+0      	; 0x35bc <_ZL5proc3Pv+0x8>
    35bc:	cd b7       	in	r28, 0x3d	; 61
    35be:	de b7       	in	r29, 0x3e	; 62
	DFRobotHighTemperature PT100(5.000);
    35c0:	40 e0       	ldi	r20, 0x00	; 0
    35c2:	50 e0       	ldi	r21, 0x00	; 0
    35c4:	60 ea       	ldi	r22, 0xA0	; 160
    35c6:	70 e4       	ldi	r23, 0x40	; 64
    35c8:	ce 01       	movw	r24, r28
    35ca:	01 96       	adiw	r24, 0x01	; 1
    35cc:	0e 94 dd 06 	call	0xdba	; 0xdba <_ZN22DFRobotHighTemperatureC1Ef>
	uint8_t cnt = 0;
	uint8_t seq = 0;
	uint8_t cnt1 = 0;
	uint8_t cnt2 = 0;
    35d0:	31 2c       	mov	r3, r1
static void proc3(void* pvParam)
{
	DFRobotHighTemperature PT100(5.000);
	uint8_t cnt = 0;
	uint8_t seq = 0;
	uint8_t cnt1 = 0;
    35d2:	c1 2c       	mov	r12, r1
}
static void proc3(void* pvParam)
{
	DFRobotHighTemperature PT100(5.000);
	uint8_t cnt = 0;
	uint8_t seq = 0;
    35d4:	10 e0       	ldi	r17, 0x00	; 0
	return lfCalTemp;
}
static void proc3(void* pvParam)
{
	DFRobotHighTemperature PT100(5.000);
	uint8_t cnt = 0;
    35d6:	00 e0       	ldi	r16, 0x00	; 0
	uint8_t seq = 0;
	uint8_t cnt1 = 0;
	uint8_t cnt2 = 0;
	while(1)
	{
		adc->Start_Device(seq % 3);
    35d8:	0f 2e       	mov	r0, r31
    35da:	fb ea       	ldi	r31, 0xAB	; 171
    35dc:	df 2e       	mov	r13, r31
    35de:	f0 2d       	mov	r31, r0
			cnt1++;
		}
		else if(channel == 2)
		{
			uint16_t read = ADCL+((uint16_t)ADCH << 8);
			Adc_channels[channel] += read;
    35e0:	0f 2e       	mov	r0, r31
    35e2:	f0 ef       	ldi	r31, 0xF0	; 240
    35e4:	ef 2e       	mov	r14, r31
    35e6:	f2 e0       	ldi	r31, 0x02	; 2
    35e8:	ff 2e       	mov	r15, r31
    35ea:	f0 2d       	mov	r31, r0
		}
		else if(cnt1 >= ADC_LOOP)
		{
			unsigned int temp = Adc_channels[1] / ADC_LOOP;
			//int temp1 = PT100.readTemperature(temp);
			mem4[LOCAL_PT100_SENSOR] = temp - 5;
    35ec:	0f 2e       	mov	r0, r31
    35ee:	f4 e9       	ldi	r31, 0x94	; 148
    35f0:	8f 2e       	mov	r8, r31
    35f2:	f3 e0       	ldi	r31, 0x03	; 3
    35f4:	9f 2e       	mov	r9, r31
    35f6:	f0 2d       	mov	r31, r0
			cnt2++;
		}
		
		if(cnt >= ADC_LOOP)
		{
			mem4[LOCAL_TEMP_SENSOR] = Adc_channels[0] / ADC_LOOP;
    35f8:	0f 2e       	mov	r0, r31
    35fa:	f2 e9       	ldi	r31, 0x92	; 146
    35fc:	af 2e       	mov	r10, r31
    35fe:	f3 e0       	ldi	r31, 0x03	; 3
    3600:	bf 2e       	mov	r11, r31
    3602:	f0 2d       	mov	r31, r0
	uint8_t seq = 0;
	uint8_t cnt1 = 0;
	uint8_t cnt2 = 0;
	while(1)
	{
		adc->Start_Device(seq % 3);
    3604:	a0 91 dd 03 	lds	r26, 0x03DD	; 0x8003dd <adc>
    3608:	b0 91 de 03 	lds	r27, 0x03DE	; 0x8003de <adc+0x1>
    360c:	1d 9d       	mul	r17, r13
    360e:	91 2d       	mov	r25, r1
    3610:	11 24       	eor	r1, r1
    3612:	96 95       	lsr	r25
    3614:	89 2f       	mov	r24, r25
    3616:	88 0f       	add	r24, r24
    3618:	98 0f       	add	r25, r24
    361a:	61 2f       	mov	r22, r17
    361c:	69 1b       	sub	r22, r25
    361e:	ed 91       	ld	r30, X+
    3620:	fc 91       	ld	r31, X
    3622:	11 97       	sbiw	r26, 0x01	; 1
    3624:	02 84       	ldd	r0, Z+10	; 0x0a
    3626:	f3 85       	ldd	r31, Z+11	; 0x0b
    3628:	e0 2d       	mov	r30, r0
    362a:	cd 01       	movw	r24, r26
    362c:	09 95       	icall
		uint8_t channel = ADMUX & 0x1f; 
    362e:	87 b1       	in	r24, 0x07	; 7
    3630:	8f 71       	andi	r24, 0x1F	; 31
    3632:	78 2e       	mov	r7, r24
		vTaskDelay(10);
    3634:	8a e0       	ldi	r24, 0x0A	; 10
    3636:	90 e0       	ldi	r25, 0x00	; 0
    3638:	0e 94 40 23 	call	0x4680	; 0x4680 <vTaskDelay>
		if(channel == 0)
    363c:	71 10       	cpse	r7, r1
    363e:	2d c0       	rjmp	.+90     	; 0x369a <_ZL5proc3Pv+0xe6>
		{
			uint16_t read = ADCL+((uint16_t)ADCH << 8);
    3640:	84 b1       	in	r24, 0x04	; 4
    3642:	65 b1       	in	r22, 0x05	; 5
			float temp = read * 4.8828125;
			Adc_channels[channel] = Adc_channels[channel] + (temp / 10);
    3644:	70 e0       	ldi	r23, 0x00	; 0
    3646:	76 2f       	mov	r23, r22
    3648:	66 27       	eor	r22, r22
    364a:	68 0f       	add	r22, r24
    364c:	71 1d       	adc	r23, r1
    364e:	80 e0       	ldi	r24, 0x00	; 0
    3650:	90 e0       	ldi	r25, 0x00	; 0
    3652:	0e 94 5a 26 	call	0x4cb4	; 0x4cb4 <__floatunsisf>
    3656:	20 e0       	ldi	r18, 0x00	; 0
    3658:	30 e4       	ldi	r19, 0x40	; 64
    365a:	4c e9       	ldi	r20, 0x9C	; 156
    365c:	50 e4       	ldi	r21, 0x40	; 64
    365e:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
    3662:	20 e0       	ldi	r18, 0x00	; 0
    3664:	30 e0       	ldi	r19, 0x00	; 0
    3666:	40 e2       	ldi	r20, 0x20	; 32
    3668:	51 e4       	ldi	r21, 0x41	; 65
    366a:	0e 94 c1 25 	call	0x4b82	; 0x4b82 <__divsf3>
    366e:	2b 01       	movw	r4, r22
    3670:	3c 01       	movw	r6, r24
    3672:	f7 01       	movw	r30, r14
    3674:	60 81       	ld	r22, Z
    3676:	71 81       	ldd	r23, Z+1	; 0x01
    3678:	80 e0       	ldi	r24, 0x00	; 0
    367a:	90 e0       	ldi	r25, 0x00	; 0
    367c:	0e 94 5a 26 	call	0x4cb4	; 0x4cb4 <__floatunsisf>
    3680:	9b 01       	movw	r18, r22
    3682:	ac 01       	movw	r20, r24
    3684:	c3 01       	movw	r24, r6
    3686:	b2 01       	movw	r22, r4
    3688:	0e 94 59 25 	call	0x4ab2	; 0x4ab2 <__addsf3>
    368c:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <__fixunssfsi>
    3690:	f7 01       	movw	r30, r14
    3692:	71 83       	std	Z+1, r23	; 0x01
    3694:	60 83       	st	Z, r22
			cnt++;
    3696:	0f 5f       	subi	r16, 0xFF	; 255
    3698:	2a c0       	rjmp	.+84     	; 0x36ee <_ZL5proc3Pv+0x13a>
		}
		else if(channel == 1)
    369a:	f1 e0       	ldi	r31, 0x01	; 1
    369c:	7f 12       	cpse	r7, r31
    369e:	14 c0       	rjmp	.+40     	; 0x36c8 <_ZL5proc3Pv+0x114>
		{
			uint16_t read = ADCL+((uint16_t)ADCH << 8);
    36a0:	84 b1       	in	r24, 0x04	; 4
    36a2:	65 b1       	in	r22, 0x05	; 5
			Adc_channels[channel] +=PT100.readTemperature(read);
    36a4:	70 e0       	ldi	r23, 0x00	; 0
    36a6:	76 2f       	mov	r23, r22
    36a8:	66 27       	eor	r22, r22
    36aa:	68 0f       	add	r22, r24
    36ac:	71 1d       	adc	r23, r1
    36ae:	ce 01       	movw	r24, r28
    36b0:	01 96       	adiw	r24, 0x01	; 1
    36b2:	0e 94 40 07 	call	0xe80	; 0xe80 <_ZN22DFRobotHighTemperature15readTemperatureEj>
    36b6:	f7 01       	movw	r30, r14
    36b8:	22 81       	ldd	r18, Z+2	; 0x02
    36ba:	33 81       	ldd	r19, Z+3	; 0x03
    36bc:	82 0f       	add	r24, r18
    36be:	93 1f       	adc	r25, r19
    36c0:	93 83       	std	Z+3, r25	; 0x03
    36c2:	82 83       	std	Z+2, r24	; 0x02
			//mem4[LOCAL_PT100_SENSOR] = read;
			cnt1++;
    36c4:	c3 94       	inc	r12
    36c6:	13 c0       	rjmp	.+38     	; 0x36ee <_ZL5proc3Pv+0x13a>
		}
		else if(channel == 2)
    36c8:	f2 e0       	ldi	r31, 0x02	; 2
    36ca:	7f 12       	cpse	r7, r31
    36cc:	10 c0       	rjmp	.+32     	; 0x36ee <_ZL5proc3Pv+0x13a>
		{
			uint16_t read = ADCL+((uint16_t)ADCH << 8);
    36ce:	84 b1       	in	r24, 0x04	; 4
    36d0:	95 b1       	in	r25, 0x05	; 5
			Adc_channels[channel] += read;
    36d2:	f7 01       	movw	r30, r14
    36d4:	24 81       	ldd	r18, Z+4	; 0x04
    36d6:	35 81       	ldd	r19, Z+5	; 0x05
    36d8:	28 0f       	add	r18, r24
    36da:	31 1d       	adc	r19, r1
    36dc:	89 2f       	mov	r24, r25
    36de:	90 e0       	ldi	r25, 0x00	; 0
    36e0:	98 2f       	mov	r25, r24
    36e2:	88 27       	eor	r24, r24
    36e4:	82 0f       	add	r24, r18
    36e6:	93 1f       	adc	r25, r19
    36e8:	95 83       	std	Z+5, r25	; 0x05
    36ea:	84 83       	std	Z+4, r24	; 0x04
			cnt2++;
    36ec:	33 94       	inc	r3
		}
		
		if(cnt >= ADC_LOOP)
    36ee:	0e 31       	cpi	r16, 0x1E	; 30
    36f0:	a8 f0       	brcs	.+42     	; 0x371c <_ZL5proc3Pv+0x168>
		{
			mem4[LOCAL_TEMP_SENSOR] = Adc_channels[0] / ADC_LOOP;
    36f2:	f7 01       	movw	r30, r14
    36f4:	20 81       	ld	r18, Z
    36f6:	31 81       	ldd	r19, Z+1	; 0x01
    36f8:	a9 e8       	ldi	r26, 0x89	; 137
    36fa:	b8 e8       	ldi	r27, 0x88	; 136
    36fc:	0e 94 95 27 	call	0x4f2a	; 0x4f2a <__umulhisi3>
    3700:	92 95       	swap	r25
    3702:	82 95       	swap	r24
    3704:	8f 70       	andi	r24, 0x0F	; 15
    3706:	89 27       	eor	r24, r25
    3708:	9f 70       	andi	r25, 0x0F	; 15
    370a:	89 27       	eor	r24, r25
    370c:	f5 01       	movw	r30, r10
    370e:	91 83       	std	Z+1, r25	; 0x01
    3710:	80 83       	st	Z, r24
			Adc_channels[0] = 0;
    3712:	f7 01       	movw	r30, r14
    3714:	11 82       	std	Z+1, r1	; 0x01
    3716:	10 82       	st	Z, r1
			cnt = 0;
    3718:	00 e0       	ldi	r16, 0x00	; 0
    371a:	45 c0       	rjmp	.+138    	; 0x37a6 <_ZL5proc3Pv+0x1f2>
		}
		else if(cnt1 >= ADC_LOOP)
    371c:	fd e1       	ldi	r31, 0x1D	; 29
    371e:	fc 15       	cp	r31, r12
    3720:	b0 f4       	brcc	.+44     	; 0x374e <_ZL5proc3Pv+0x19a>
		{
			unsigned int temp = Adc_channels[1] / ADC_LOOP;
			//int temp1 = PT100.readTemperature(temp);
			mem4[LOCAL_PT100_SENSOR] = temp - 5;
    3722:	f7 01       	movw	r30, r14
    3724:	22 81       	ldd	r18, Z+2	; 0x02
    3726:	33 81       	ldd	r19, Z+3	; 0x03
    3728:	a9 e8       	ldi	r26, 0x89	; 137
    372a:	b8 e8       	ldi	r27, 0x88	; 136
    372c:	0e 94 95 27 	call	0x4f2a	; 0x4f2a <__umulhisi3>
    3730:	92 95       	swap	r25
    3732:	82 95       	swap	r24
    3734:	8f 70       	andi	r24, 0x0F	; 15
    3736:	89 27       	eor	r24, r25
    3738:	9f 70       	andi	r25, 0x0F	; 15
    373a:	89 27       	eor	r24, r25
    373c:	05 97       	sbiw	r24, 0x05	; 5
    373e:	f4 01       	movw	r30, r8
    3740:	91 83       	std	Z+1, r25	; 0x01
    3742:	80 83       	st	Z, r24
			Adc_channels[1] = 0;
    3744:	f7 01       	movw	r30, r14
    3746:	13 82       	std	Z+3, r1	; 0x03
    3748:	12 82       	std	Z+2, r1	; 0x02
			cnt1 = 0;
    374a:	c1 2c       	mov	r12, r1
    374c:	2c c0       	rjmp	.+88     	; 0x37a6 <_ZL5proc3Pv+0x1f2>
		}
		else if(cnt2 >= ADC_LOOP)
    374e:	fd e1       	ldi	r31, 0x1D	; 29
    3750:	f3 15       	cp	r31, r3
    3752:	48 f5       	brcc	.+82     	; 0x37a6 <_ZL5proc3Pv+0x1f2>
		{
			float vin = (Adc_channels[2] / ADC_LOOP )* 0.004887;
			float temp = fnCalTemp(vin);
    3754:	f7 01       	movw	r30, r14
    3756:	24 81       	ldd	r18, Z+4	; 0x04
    3758:	35 81       	ldd	r19, Z+5	; 0x05
    375a:	a9 e8       	ldi	r26, 0x89	; 137
    375c:	b8 e8       	ldi	r27, 0x88	; 136
    375e:	0e 94 95 27 	call	0x4f2a	; 0x4f2a <__umulhisi3>
    3762:	92 95       	swap	r25
    3764:	82 95       	swap	r24
    3766:	8f 70       	andi	r24, 0x0F	; 15
    3768:	89 27       	eor	r24, r25
    376a:	9f 70       	andi	r25, 0x0F	; 15
    376c:	89 27       	eor	r24, r25
    376e:	bc 01       	movw	r22, r24
    3770:	80 e0       	ldi	r24, 0x00	; 0
    3772:	90 e0       	ldi	r25, 0x00	; 0
    3774:	0e 94 5a 26 	call	0x4cb4	; 0x4cb4 <__floatunsisf>
    3778:	21 e2       	ldi	r18, 0x21	; 33
    377a:	33 e2       	ldi	r19, 0x23	; 35
    377c:	40 ea       	ldi	r20, 0xA0	; 160
    377e:	5b e3       	ldi	r21, 0x3B	; 59
    3780:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
    3784:	67 de       	rcall	.-818    	; 0x3454 <_Z9fnCalTempf>
			mem4[LOCAL_NTC_SENSOR] = temp * 10;
    3786:	20 e0       	ldi	r18, 0x00	; 0
    3788:	30 e0       	ldi	r19, 0x00	; 0
    378a:	40 e2       	ldi	r20, 0x20	; 32
    378c:	51 e4       	ldi	r21, 0x41	; 65
    378e:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
    3792:	0e 94 29 26 	call	0x4c52	; 0x4c52 <__fixsfsi>
    3796:	e6 e9       	ldi	r30, 0x96	; 150
    3798:	f3 e0       	ldi	r31, 0x03	; 3
    379a:	71 83       	std	Z+1, r23	; 0x01
    379c:	60 83       	st	Z, r22
			Adc_channels[2] = 0;
    379e:	f7 01       	movw	r30, r14
    37a0:	15 82       	std	Z+5, r1	; 0x05
    37a2:	14 82       	std	Z+4, r1	; 0x04
			
			cnt2 = 0;
    37a4:	31 2c       	mov	r3, r1
		}
		seq++;
    37a6:	1f 5f       	subi	r17, 0xFF	; 255
	DFRobotHighTemperature PT100(5.000);
	uint8_t cnt = 0;
	uint8_t seq = 0;
	uint8_t cnt1 = 0;
	uint8_t cnt2 = 0;
	while(1)
    37a8:	2d cf       	rjmp	.-422    	; 0x3604 <_ZL5proc3Pv+0x50>

000037aa <vApplicationStackOverflowHook>:
		}
	}
	
}
void vApplicationStackOverflowHook( TaskHandle_t xTask, signed char *pcTaskName )
{
    37aa:	08 95       	ret

000037ac <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    37ac:	cf 93       	push	r28
    37ae:	df 93       	push	r29
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
    37b0:	ec 01       	movw	r28, r24
	{
		if( pucAlignedHeap == NULL )
    37b2:	30 d6       	rcall	.+3168   	; 0x4414 <vTaskSuspendAll>
    37b4:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <pucAlignedHeap.2069>
    37b8:	90 91 e4 03 	lds	r25, 0x03E4	; 0x8003e4 <pucAlignedHeap.2069+0x1>
    37bc:	89 2b       	or	r24, r25
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    37be:	31 f4       	brne	.+12     	; 0x37cc <pvPortMalloc+0x20>
    37c0:	88 ee       	ldi	r24, 0xE8	; 232
    37c2:	93 e0       	ldi	r25, 0x03	; 3
    37c4:	90 93 e4 03 	sts	0x03E4, r25	; 0x8003e4 <pucAlignedHeap.2069+0x1>
    37c8:	80 93 e3 03 	sts	0x03E3, r24	; 0x8003e3 <pucAlignedHeap.2069>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    37cc:	20 91 e5 03 	lds	r18, 0x03E5	; 0x8003e5 <xNextFreeByte>
    37d0:	30 91 e6 03 	lds	r19, 0x03E6	; 0x8003e6 <xNextFreeByte+0x1>
    37d4:	c9 01       	movw	r24, r18
    37d6:	8c 0f       	add	r24, r28
    37d8:	9d 1f       	adc	r25, r29
    37da:	83 3c       	cpi	r24, 0xC3	; 195
    37dc:	49 e0       	ldi	r20, 0x09	; 9
    37de:	94 07       	cpc	r25, r20
    37e0:	70 f4       	brcc	.+28     	; 0x37fe <pvPortMalloc+0x52>
    37e2:	28 17       	cp	r18, r24
    37e4:	39 07       	cpc	r19, r25
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    37e6:	70 f4       	brcc	.+28     	; 0x3804 <pvPortMalloc+0x58>
    37e8:	c0 91 e3 03 	lds	r28, 0x03E3	; 0x8003e3 <pucAlignedHeap.2069>
    37ec:	d0 91 e4 03 	lds	r29, 0x03E4	; 0x8003e4 <pucAlignedHeap.2069+0x1>
    37f0:	c2 0f       	add	r28, r18
			xNextFreeByte += xWantedSize;
    37f2:	d3 1f       	adc	r29, r19
    37f4:	90 93 e6 03 	sts	0x03E6, r25	; 0x8003e6 <xNextFreeByte+0x1>
    37f8:	80 93 e5 03 	sts	0x03E5, r24	; 0x8003e5 <xNextFreeByte>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
    37fc:	05 c0       	rjmp	.+10     	; 0x3808 <pvPortMalloc+0x5c>
    37fe:	c0 e0       	ldi	r28, 0x00	; 0
    3800:	d0 e0       	ldi	r29, 0x00	; 0
    3802:	02 c0       	rjmp	.+4      	; 0x3808 <pvPortMalloc+0x5c>
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    3804:	c0 e0       	ldi	r28, 0x00	; 0
    3806:	d0 e0       	ldi	r29, 0x00	; 0
		}
	}
	#endif

	return pvReturn;
}
    3808:	c2 d6       	rcall	.+3460   	; 0x458e <xTaskResumeAll>
    380a:	ce 01       	movw	r24, r28
    380c:	df 91       	pop	r29
    380e:	cf 91       	pop	r28
    3810:	08 95       	ret

00003812 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    3812:	08 95       	ret

00003814 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    3814:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    3816:	03 96       	adiw	r24, 0x03	; 3
    3818:	92 83       	std	Z+2, r25	; 0x02
    381a:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    381c:	2f ef       	ldi	r18, 0xFF	; 255
    381e:	3f ef       	ldi	r19, 0xFF	; 255
    3820:	34 83       	std	Z+4, r19	; 0x04
    3822:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    3824:	96 83       	std	Z+6, r25	; 0x06
    3826:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    3828:	90 87       	std	Z+8, r25	; 0x08
    382a:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    382c:	10 82       	st	Z, r1
    382e:	08 95       	ret

00003830 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    3830:	fc 01       	movw	r30, r24
    3832:	11 86       	std	Z+9, r1	; 0x09
    3834:	10 86       	std	Z+8, r1	; 0x08
    3836:	08 95       	ret

00003838 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    3838:	cf 93       	push	r28
    383a:	df 93       	push	r29
    383c:	9c 01       	movw	r18, r24
    383e:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    3840:	dc 01       	movw	r26, r24
    3842:	11 96       	adiw	r26, 0x01	; 1
    3844:	cd 91       	ld	r28, X+
    3846:	dc 91       	ld	r29, X
    3848:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    384a:	d3 83       	std	Z+3, r29	; 0x03
    384c:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    384e:	8c 81       	ldd	r24, Y+4	; 0x04
    3850:	9d 81       	ldd	r25, Y+5	; 0x05
    3852:	95 83       	std	Z+5, r25	; 0x05
    3854:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    3856:	8c 81       	ldd	r24, Y+4	; 0x04
    3858:	9d 81       	ldd	r25, Y+5	; 0x05
    385a:	dc 01       	movw	r26, r24
    385c:	13 96       	adiw	r26, 0x03	; 3
    385e:	7c 93       	st	X, r23
    3860:	6e 93       	st	-X, r22
    3862:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
    3864:	7d 83       	std	Y+5, r23	; 0x05
    3866:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    3868:	31 87       	std	Z+9, r19	; 0x09
    386a:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    386c:	f9 01       	movw	r30, r18
    386e:	80 81       	ld	r24, Z
    3870:	8f 5f       	subi	r24, 0xFF	; 255
    3872:	80 83       	st	Z, r24
}
    3874:	df 91       	pop	r29
    3876:	cf 91       	pop	r28
    3878:	08 95       	ret

0000387a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    387a:	cf 93       	push	r28
    387c:	df 93       	push	r29
    387e:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    3880:	48 81       	ld	r20, Y
    3882:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    3884:	4f 3f       	cpi	r20, 0xFF	; 255
    3886:	2f ef       	ldi	r18, 0xFF	; 255
    3888:	52 07       	cpc	r21, r18
    388a:	21 f4       	brne	.+8      	; 0x3894 <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    388c:	fc 01       	movw	r30, r24
    388e:	a7 81       	ldd	r26, Z+7	; 0x07
    3890:	b0 85       	ldd	r27, Z+8	; 0x08
    3892:	0d c0       	rjmp	.+26     	; 0x38ae <vListInsert+0x34>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    3894:	dc 01       	movw	r26, r24
    3896:	13 96       	adiw	r26, 0x03	; 3
    3898:	01 c0       	rjmp	.+2      	; 0x389c <vListInsert+0x22>
    389a:	df 01       	movw	r26, r30
    389c:	12 96       	adiw	r26, 0x02	; 2
    389e:	ed 91       	ld	r30, X+
    38a0:	fc 91       	ld	r31, X
    38a2:	13 97       	sbiw	r26, 0x03	; 3
    38a4:	20 81       	ld	r18, Z
    38a6:	31 81       	ldd	r19, Z+1	; 0x01
    38a8:	42 17       	cp	r20, r18
    38aa:	53 07       	cpc	r21, r19
    38ac:	b0 f7       	brcc	.-20     	; 0x389a <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    38ae:	12 96       	adiw	r26, 0x02	; 2
    38b0:	ed 91       	ld	r30, X+
    38b2:	fc 91       	ld	r31, X
    38b4:	13 97       	sbiw	r26, 0x03	; 3
    38b6:	fb 83       	std	Y+3, r31	; 0x03
    38b8:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    38ba:	d5 83       	std	Z+5, r29	; 0x05
    38bc:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    38be:	bd 83       	std	Y+5, r27	; 0x05
    38c0:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
    38c2:	13 96       	adiw	r26, 0x03	; 3
    38c4:	dc 93       	st	X, r29
    38c6:	ce 93       	st	-X, r28
    38c8:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    38ca:	99 87       	std	Y+9, r25	; 0x09
    38cc:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    38ce:	fc 01       	movw	r30, r24
    38d0:	20 81       	ld	r18, Z
    38d2:	2f 5f       	subi	r18, 0xFF	; 255
    38d4:	20 83       	st	Z, r18
}
    38d6:	df 91       	pop	r29
    38d8:	cf 91       	pop	r28
    38da:	08 95       	ret

000038dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    38dc:	cf 93       	push	r28
    38de:	df 93       	push	r29
    38e0:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    38e2:	a0 85       	ldd	r26, Z+8	; 0x08
    38e4:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    38e6:	c2 81       	ldd	r28, Z+2	; 0x02
    38e8:	d3 81       	ldd	r29, Z+3	; 0x03
    38ea:	84 81       	ldd	r24, Z+4	; 0x04
    38ec:	95 81       	ldd	r25, Z+5	; 0x05
    38ee:	9d 83       	std	Y+5, r25	; 0x05
    38f0:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    38f2:	c4 81       	ldd	r28, Z+4	; 0x04
    38f4:	d5 81       	ldd	r29, Z+5	; 0x05
    38f6:	82 81       	ldd	r24, Z+2	; 0x02
    38f8:	93 81       	ldd	r25, Z+3	; 0x03
    38fa:	9b 83       	std	Y+3, r25	; 0x03
    38fc:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    38fe:	11 96       	adiw	r26, 0x01	; 1
    3900:	8d 91       	ld	r24, X+
    3902:	9c 91       	ld	r25, X
    3904:	12 97       	sbiw	r26, 0x02	; 2
    3906:	e8 17       	cp	r30, r24
    3908:	f9 07       	cpc	r31, r25
    390a:	31 f4       	brne	.+12     	; 0x3918 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    390c:	84 81       	ldd	r24, Z+4	; 0x04
    390e:	95 81       	ldd	r25, Z+5	; 0x05
    3910:	12 96       	adiw	r26, 0x02	; 2
    3912:	9c 93       	st	X, r25
    3914:	8e 93       	st	-X, r24
    3916:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    3918:	11 86       	std	Z+9, r1	; 0x09
    391a:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    391c:	8c 91       	ld	r24, X
    391e:	81 50       	subi	r24, 0x01	; 1
    3920:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
    3922:	df 91       	pop	r29
    3924:	cf 91       	pop	r28
    3926:	08 95       	ret

00003928 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    3928:	31 e1       	ldi	r19, 0x11	; 17
    392a:	fc 01       	movw	r30, r24
    392c:	30 83       	st	Z, r19
    392e:	31 97       	sbiw	r30, 0x01	; 1
    3930:	22 e2       	ldi	r18, 0x22	; 34
    3932:	20 83       	st	Z, r18
    3934:	31 97       	sbiw	r30, 0x01	; 1
    3936:	a3 e3       	ldi	r26, 0x33	; 51
    3938:	a0 83       	st	Z, r26
    393a:	31 97       	sbiw	r30, 0x01	; 1
    393c:	60 83       	st	Z, r22
    393e:	31 97       	sbiw	r30, 0x01	; 1
    3940:	70 83       	st	Z, r23
    3942:	31 97       	sbiw	r30, 0x01	; 1
    3944:	10 82       	st	Z, r1
    3946:	31 97       	sbiw	r30, 0x01	; 1
    3948:	60 e8       	ldi	r22, 0x80	; 128
    394a:	60 83       	st	Z, r22
    394c:	31 97       	sbiw	r30, 0x01	; 1
    394e:	10 82       	st	Z, r1
    3950:	31 97       	sbiw	r30, 0x01	; 1
    3952:	62 e0       	ldi	r22, 0x02	; 2
    3954:	60 83       	st	Z, r22
    3956:	31 97       	sbiw	r30, 0x01	; 1
    3958:	63 e0       	ldi	r22, 0x03	; 3
    395a:	60 83       	st	Z, r22
    395c:	31 97       	sbiw	r30, 0x01	; 1
    395e:	64 e0       	ldi	r22, 0x04	; 4
    3960:	60 83       	st	Z, r22
    3962:	31 97       	sbiw	r30, 0x01	; 1
    3964:	65 e0       	ldi	r22, 0x05	; 5
    3966:	60 83       	st	Z, r22
    3968:	31 97       	sbiw	r30, 0x01	; 1
    396a:	66 e0       	ldi	r22, 0x06	; 6
    396c:	60 83       	st	Z, r22
    396e:	31 97       	sbiw	r30, 0x01	; 1
    3970:	67 e0       	ldi	r22, 0x07	; 7
    3972:	60 83       	st	Z, r22
    3974:	31 97       	sbiw	r30, 0x01	; 1
    3976:	68 e0       	ldi	r22, 0x08	; 8
    3978:	60 83       	st	Z, r22
    397a:	31 97       	sbiw	r30, 0x01	; 1
    397c:	69 e0       	ldi	r22, 0x09	; 9
    397e:	60 83       	st	Z, r22
    3980:	31 97       	sbiw	r30, 0x01	; 1
    3982:	60 e1       	ldi	r22, 0x10	; 16
    3984:	60 83       	st	Z, r22
    3986:	31 97       	sbiw	r30, 0x01	; 1
    3988:	30 83       	st	Z, r19
    398a:	31 97       	sbiw	r30, 0x01	; 1
    398c:	32 e1       	ldi	r19, 0x12	; 18
    398e:	30 83       	st	Z, r19
    3990:	31 97       	sbiw	r30, 0x01	; 1
    3992:	33 e1       	ldi	r19, 0x13	; 19
    3994:	30 83       	st	Z, r19
    3996:	31 97       	sbiw	r30, 0x01	; 1
    3998:	34 e1       	ldi	r19, 0x14	; 20
    399a:	30 83       	st	Z, r19
    399c:	31 97       	sbiw	r30, 0x01	; 1
    399e:	35 e1       	ldi	r19, 0x15	; 21
    39a0:	30 83       	st	Z, r19
    39a2:	31 97       	sbiw	r30, 0x01	; 1
    39a4:	36 e1       	ldi	r19, 0x16	; 22
    39a6:	30 83       	st	Z, r19
    39a8:	31 97       	sbiw	r30, 0x01	; 1
    39aa:	37 e1       	ldi	r19, 0x17	; 23
    39ac:	30 83       	st	Z, r19
    39ae:	31 97       	sbiw	r30, 0x01	; 1
    39b0:	38 e1       	ldi	r19, 0x18	; 24
    39b2:	30 83       	st	Z, r19
    39b4:	31 97       	sbiw	r30, 0x01	; 1
    39b6:	39 e1       	ldi	r19, 0x19	; 25
    39b8:	30 83       	st	Z, r19
    39ba:	31 97       	sbiw	r30, 0x01	; 1
    39bc:	30 e2       	ldi	r19, 0x20	; 32
    39be:	30 83       	st	Z, r19
    39c0:	31 97       	sbiw	r30, 0x01	; 1
    39c2:	31 e2       	ldi	r19, 0x21	; 33
    39c4:	30 83       	st	Z, r19
    39c6:	31 97       	sbiw	r30, 0x01	; 1
    39c8:	20 83       	st	Z, r18
    39ca:	31 97       	sbiw	r30, 0x01	; 1
    39cc:	23 e2       	ldi	r18, 0x23	; 35
    39ce:	20 83       	st	Z, r18
    39d0:	31 97       	sbiw	r30, 0x01	; 1
    39d2:	40 83       	st	Z, r20
    39d4:	31 97       	sbiw	r30, 0x01	; 1
    39d6:	50 83       	st	Z, r21
    39d8:	31 97       	sbiw	r30, 0x01	; 1
    39da:	26 e2       	ldi	r18, 0x26	; 38
    39dc:	20 83       	st	Z, r18
    39de:	31 97       	sbiw	r30, 0x01	; 1
    39e0:	27 e2       	ldi	r18, 0x27	; 39
    39e2:	20 83       	st	Z, r18
    39e4:	31 97       	sbiw	r30, 0x01	; 1
    39e6:	28 e2       	ldi	r18, 0x28	; 40
    39e8:	20 83       	st	Z, r18
    39ea:	31 97       	sbiw	r30, 0x01	; 1
    39ec:	29 e2       	ldi	r18, 0x29	; 41
    39ee:	20 83       	st	Z, r18
    39f0:	31 97       	sbiw	r30, 0x01	; 1
    39f2:	20 e3       	ldi	r18, 0x30	; 48
    39f4:	20 83       	st	Z, r18
    39f6:	31 97       	sbiw	r30, 0x01	; 1
    39f8:	21 e3       	ldi	r18, 0x31	; 49
    39fa:	20 83       	st	Z, r18
    39fc:	86 97       	sbiw	r24, 0x26	; 38
    39fe:	08 95       	ret

00003a00 <xPortStartScheduler>:
    3a00:	1b bc       	out	0x2b, r1	; 43
    3a02:	89 ef       	ldi	r24, 0xF9	; 249
    3a04:	8a bd       	out	0x2a, r24	; 42
    3a06:	8b e0       	ldi	r24, 0x0B	; 11
    3a08:	8e bd       	out	0x2e, r24	; 46
    3a0a:	87 b7       	in	r24, 0x37	; 55
    3a0c:	80 61       	ori	r24, 0x10	; 16
    3a0e:	87 bf       	out	0x37, r24	; 55
    3a10:	a0 91 0f 0e 	lds	r26, 0x0E0F	; 0x800e0f <pxCurrentTCB>
    3a14:	b0 91 10 0e 	lds	r27, 0x0E10	; 0x800e10 <pxCurrentTCB+0x1>
    3a18:	cd 91       	ld	r28, X+
    3a1a:	cd bf       	out	0x3d, r28	; 61
    3a1c:	dd 91       	ld	r29, X+
    3a1e:	de bf       	out	0x3e, r29	; 62
    3a20:	ff 91       	pop	r31
    3a22:	ef 91       	pop	r30
    3a24:	df 91       	pop	r29
    3a26:	cf 91       	pop	r28
    3a28:	bf 91       	pop	r27
    3a2a:	af 91       	pop	r26
    3a2c:	9f 91       	pop	r25
    3a2e:	8f 91       	pop	r24
    3a30:	7f 91       	pop	r23
    3a32:	6f 91       	pop	r22
    3a34:	5f 91       	pop	r21
    3a36:	4f 91       	pop	r20
    3a38:	3f 91       	pop	r19
    3a3a:	2f 91       	pop	r18
    3a3c:	1f 91       	pop	r17
    3a3e:	0f 91       	pop	r16
    3a40:	ff 90       	pop	r15
    3a42:	ef 90       	pop	r14
    3a44:	df 90       	pop	r13
    3a46:	cf 90       	pop	r12
    3a48:	bf 90       	pop	r11
    3a4a:	af 90       	pop	r10
    3a4c:	9f 90       	pop	r9
    3a4e:	8f 90       	pop	r8
    3a50:	7f 90       	pop	r7
    3a52:	6f 90       	pop	r6
    3a54:	5f 90       	pop	r5
    3a56:	4f 90       	pop	r4
    3a58:	3f 90       	pop	r3
    3a5a:	2f 90       	pop	r2
    3a5c:	1f 90       	pop	r1
    3a5e:	0f 90       	pop	r0
    3a60:	0f be       	out	0x3f, r0	; 63
    3a62:	0f 90       	pop	r0
    3a64:	08 95       	ret
    3a66:	81 e0       	ldi	r24, 0x01	; 1
    3a68:	08 95       	ret

00003a6a <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    3a6a:	0f 92       	push	r0
    3a6c:	0f b6       	in	r0, 0x3f	; 63
    3a6e:	f8 94       	cli
    3a70:	0f 92       	push	r0
    3a72:	1f 92       	push	r1
    3a74:	11 24       	eor	r1, r1
    3a76:	2f 92       	push	r2
    3a78:	3f 92       	push	r3
    3a7a:	4f 92       	push	r4
    3a7c:	5f 92       	push	r5
    3a7e:	6f 92       	push	r6
    3a80:	7f 92       	push	r7
    3a82:	8f 92       	push	r8
    3a84:	9f 92       	push	r9
    3a86:	af 92       	push	r10
    3a88:	bf 92       	push	r11
    3a8a:	cf 92       	push	r12
    3a8c:	df 92       	push	r13
    3a8e:	ef 92       	push	r14
    3a90:	ff 92       	push	r15
    3a92:	0f 93       	push	r16
    3a94:	1f 93       	push	r17
    3a96:	2f 93       	push	r18
    3a98:	3f 93       	push	r19
    3a9a:	4f 93       	push	r20
    3a9c:	5f 93       	push	r21
    3a9e:	6f 93       	push	r22
    3aa0:	7f 93       	push	r23
    3aa2:	8f 93       	push	r24
    3aa4:	9f 93       	push	r25
    3aa6:	af 93       	push	r26
    3aa8:	bf 93       	push	r27
    3aaa:	cf 93       	push	r28
    3aac:	df 93       	push	r29
    3aae:	ef 93       	push	r30
    3ab0:	ff 93       	push	r31
    3ab2:	a0 91 0f 0e 	lds	r26, 0x0E0F	; 0x800e0f <pxCurrentTCB>
    3ab6:	b0 91 10 0e 	lds	r27, 0x0E10	; 0x800e10 <pxCurrentTCB+0x1>
    3aba:	0d b6       	in	r0, 0x3d	; 61
    3abc:	0d 92       	st	X+, r0
    3abe:	0e b6       	in	r0, 0x3e	; 62
	vTaskSwitchContext();
    3ac0:	0d 92       	st	X+, r0
	portRESTORE_CONTEXT();
    3ac2:	25 d6       	rcall	.+3146   	; 0x470e <vTaskSwitchContext>
    3ac4:	a0 91 0f 0e 	lds	r26, 0x0E0F	; 0x800e0f <pxCurrentTCB>
    3ac8:	b0 91 10 0e 	lds	r27, 0x0E10	; 0x800e10 <pxCurrentTCB+0x1>
    3acc:	cd 91       	ld	r28, X+
    3ace:	cd bf       	out	0x3d, r28	; 61
    3ad0:	dd 91       	ld	r29, X+
    3ad2:	de bf       	out	0x3e, r29	; 62
    3ad4:	ff 91       	pop	r31
    3ad6:	ef 91       	pop	r30
    3ad8:	df 91       	pop	r29
    3ada:	cf 91       	pop	r28
    3adc:	bf 91       	pop	r27
    3ade:	af 91       	pop	r26
    3ae0:	9f 91       	pop	r25
    3ae2:	8f 91       	pop	r24
    3ae4:	7f 91       	pop	r23
    3ae6:	6f 91       	pop	r22
    3ae8:	5f 91       	pop	r21
    3aea:	4f 91       	pop	r20
    3aec:	3f 91       	pop	r19
    3aee:	2f 91       	pop	r18
    3af0:	1f 91       	pop	r17
    3af2:	0f 91       	pop	r16
    3af4:	ff 90       	pop	r15
    3af6:	ef 90       	pop	r14
    3af8:	df 90       	pop	r13
    3afa:	cf 90       	pop	r12
    3afc:	bf 90       	pop	r11
    3afe:	af 90       	pop	r10
    3b00:	9f 90       	pop	r9
    3b02:	8f 90       	pop	r8
    3b04:	7f 90       	pop	r7
    3b06:	6f 90       	pop	r6
    3b08:	5f 90       	pop	r5
    3b0a:	4f 90       	pop	r4
    3b0c:	3f 90       	pop	r3
    3b0e:	2f 90       	pop	r2
    3b10:	1f 90       	pop	r1
    3b12:	0f 90       	pop	r0
    3b14:	0f be       	out	0x3f, r0	; 63

	asm volatile ( "ret" );
    3b16:	0f 90       	pop	r0
    3b18:	08 95       	ret

00003b1a <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    3b1a:	0f 92       	push	r0
    3b1c:	0f b6       	in	r0, 0x3f	; 63
    3b1e:	f8 94       	cli
    3b20:	0f 92       	push	r0
    3b22:	1f 92       	push	r1
    3b24:	11 24       	eor	r1, r1
    3b26:	2f 92       	push	r2
    3b28:	3f 92       	push	r3
    3b2a:	4f 92       	push	r4
    3b2c:	5f 92       	push	r5
    3b2e:	6f 92       	push	r6
    3b30:	7f 92       	push	r7
    3b32:	8f 92       	push	r8
    3b34:	9f 92       	push	r9
    3b36:	af 92       	push	r10
    3b38:	bf 92       	push	r11
    3b3a:	cf 92       	push	r12
    3b3c:	df 92       	push	r13
    3b3e:	ef 92       	push	r14
    3b40:	ff 92       	push	r15
    3b42:	0f 93       	push	r16
    3b44:	1f 93       	push	r17
    3b46:	2f 93       	push	r18
    3b48:	3f 93       	push	r19
    3b4a:	4f 93       	push	r20
    3b4c:	5f 93       	push	r21
    3b4e:	6f 93       	push	r22
    3b50:	7f 93       	push	r23
    3b52:	8f 93       	push	r24
    3b54:	9f 93       	push	r25
    3b56:	af 93       	push	r26
    3b58:	bf 93       	push	r27
    3b5a:	cf 93       	push	r28
    3b5c:	df 93       	push	r29
    3b5e:	ef 93       	push	r30
    3b60:	ff 93       	push	r31
    3b62:	a0 91 0f 0e 	lds	r26, 0x0E0F	; 0x800e0f <pxCurrentTCB>
    3b66:	b0 91 10 0e 	lds	r27, 0x0E10	; 0x800e10 <pxCurrentTCB+0x1>
    3b6a:	0d b6       	in	r0, 0x3d	; 61
    3b6c:	0d 92       	st	X+, r0
    3b6e:	0e b6       	in	r0, 0x3e	; 62
	if( xTaskIncrementTick() != pdFALSE )
    3b70:	0d 92       	st	X+, r0
	{
		vTaskSwitchContext();
    3b72:	56 d4       	rcall	.+2220   	; 0x4420 <xTaskIncrementTick>
    3b74:	81 11       	cpse	r24, r1
	}
	portRESTORE_CONTEXT();
    3b76:	cb d5       	rcall	.+2966   	; 0x470e <vTaskSwitchContext>
    3b78:	a0 91 0f 0e 	lds	r26, 0x0E0F	; 0x800e0f <pxCurrentTCB>
    3b7c:	b0 91 10 0e 	lds	r27, 0x0E10	; 0x800e10 <pxCurrentTCB+0x1>
    3b80:	cd 91       	ld	r28, X+
    3b82:	cd bf       	out	0x3d, r28	; 61
    3b84:	dd 91       	ld	r29, X+
    3b86:	de bf       	out	0x3e, r29	; 62
    3b88:	ff 91       	pop	r31
    3b8a:	ef 91       	pop	r30
    3b8c:	df 91       	pop	r29
    3b8e:	cf 91       	pop	r28
    3b90:	bf 91       	pop	r27
    3b92:	af 91       	pop	r26
    3b94:	9f 91       	pop	r25
    3b96:	8f 91       	pop	r24
    3b98:	7f 91       	pop	r23
    3b9a:	6f 91       	pop	r22
    3b9c:	5f 91       	pop	r21
    3b9e:	4f 91       	pop	r20
    3ba0:	3f 91       	pop	r19
    3ba2:	2f 91       	pop	r18
    3ba4:	1f 91       	pop	r17
    3ba6:	0f 91       	pop	r16
    3ba8:	ff 90       	pop	r15
    3baa:	ef 90       	pop	r14
    3bac:	df 90       	pop	r13
    3bae:	cf 90       	pop	r12
    3bb0:	bf 90       	pop	r11
    3bb2:	af 90       	pop	r10
    3bb4:	9f 90       	pop	r9
    3bb6:	8f 90       	pop	r8
    3bb8:	7f 90       	pop	r7
    3bba:	6f 90       	pop	r6
    3bbc:	5f 90       	pop	r5
    3bbe:	4f 90       	pop	r4
    3bc0:	3f 90       	pop	r3
    3bc2:	2f 90       	pop	r2
    3bc4:	1f 90       	pop	r1
    3bc6:	0f 90       	pop	r0
    3bc8:	0f be       	out	0x3f, r0	; 63

	asm volatile ( "ret" );
    3bca:	0f 90       	pop	r0
    3bcc:	08 95       	ret

00003bce <__vector_12>:
    3bce:	a5 df       	rcall	.-182    	; 0x3b1a <vPortYieldFromTick>
    3bd0:	18 95       	reti

00003bd2 <prvCopyDataToQueue>:
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    3bd2:	0f 93       	push	r16
    3bd4:	1f 93       	push	r17
    3bd6:	cf 93       	push	r28
    3bd8:	df 93       	push	r29
    3bda:	ec 01       	movw	r28, r24
    3bdc:	04 2f       	mov	r16, r20
    3bde:	1a 8d       	ldd	r17, Y+26	; 0x1a
    3be0:	4c 8d       	ldd	r20, Y+28	; 0x1c
    3be2:	41 11       	cpse	r20, r1
    3be4:	0b c0       	rjmp	.+22     	; 0x3bfc <prvCopyDataToQueue+0x2a>
    3be6:	88 81       	ld	r24, Y
    3be8:	99 81       	ldd	r25, Y+1	; 0x01
    3bea:	89 2b       	or	r24, r25
    3bec:	09 f0       	breq	.+2      	; 0x3bf0 <prvCopyDataToQueue+0x1e>
    3bee:	41 c0       	rjmp	.+130    	; 0x3c72 <prvCopyDataToQueue+0xa0>
    3bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    3bf2:	9b 81       	ldd	r25, Y+3	; 0x03
    3bf4:	0b d7       	rcall	.+3606   	; 0x4a0c <xTaskPriorityDisinherit>
    3bf6:	1b 82       	std	Y+3, r1	; 0x03
    3bf8:	1a 82       	std	Y+2, r1	; 0x02
    3bfa:	42 c0       	rjmp	.+132    	; 0x3c80 <prvCopyDataToQueue+0xae>
    3bfc:	01 11       	cpse	r16, r1
    3bfe:	17 c0       	rjmp	.+46     	; 0x3c2e <prvCopyDataToQueue+0x5c>
    3c00:	50 e0       	ldi	r21, 0x00	; 0
    3c02:	8c 81       	ldd	r24, Y+4	; 0x04
    3c04:	9d 81       	ldd	r25, Y+5	; 0x05
    3c06:	0e 94 a4 27 	call	0x4f48	; 0x4f48 <memcpy>
    3c0a:	2c 8d       	ldd	r18, Y+28	; 0x1c
    3c0c:	8c 81       	ldd	r24, Y+4	; 0x04
    3c0e:	9d 81       	ldd	r25, Y+5	; 0x05
    3c10:	82 0f       	add	r24, r18
    3c12:	91 1d       	adc	r25, r1
    3c14:	9d 83       	std	Y+5, r25	; 0x05
    3c16:	8c 83       	std	Y+4, r24	; 0x04
    3c18:	2a 81       	ldd	r18, Y+2	; 0x02
    3c1a:	3b 81       	ldd	r19, Y+3	; 0x03
    3c1c:	82 17       	cp	r24, r18
    3c1e:	93 07       	cpc	r25, r19
    3c20:	50 f1       	brcs	.+84     	; 0x3c76 <prvCopyDataToQueue+0xa4>
    3c22:	88 81       	ld	r24, Y
    3c24:	99 81       	ldd	r25, Y+1	; 0x01
    3c26:	9d 83       	std	Y+5, r25	; 0x05
    3c28:	8c 83       	std	Y+4, r24	; 0x04
    3c2a:	80 e0       	ldi	r24, 0x00	; 0
    3c2c:	29 c0       	rjmp	.+82     	; 0x3c80 <prvCopyDataToQueue+0xae>
    3c2e:	50 e0       	ldi	r21, 0x00	; 0
    3c30:	8e 81       	ldd	r24, Y+6	; 0x06
    3c32:	9f 81       	ldd	r25, Y+7	; 0x07
    3c34:	0e 94 a4 27 	call	0x4f48	; 0x4f48 <memcpy>
    3c38:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3c3a:	90 e0       	ldi	r25, 0x00	; 0
    3c3c:	91 95       	neg	r25
    3c3e:	81 95       	neg	r24
    3c40:	91 09       	sbc	r25, r1
    3c42:	2e 81       	ldd	r18, Y+6	; 0x06
    3c44:	3f 81       	ldd	r19, Y+7	; 0x07
    3c46:	28 0f       	add	r18, r24
    3c48:	39 1f       	adc	r19, r25
    3c4a:	3f 83       	std	Y+7, r19	; 0x07
    3c4c:	2e 83       	std	Y+6, r18	; 0x06
    3c4e:	48 81       	ld	r20, Y
    3c50:	59 81       	ldd	r21, Y+1	; 0x01
    3c52:	24 17       	cp	r18, r20
    3c54:	35 07       	cpc	r19, r21
    3c56:	30 f4       	brcc	.+12     	; 0x3c64 <prvCopyDataToQueue+0x92>
    3c58:	2a 81       	ldd	r18, Y+2	; 0x02
    3c5a:	3b 81       	ldd	r19, Y+3	; 0x03
    3c5c:	82 0f       	add	r24, r18
    3c5e:	93 1f       	adc	r25, r19
    3c60:	9f 83       	std	Y+7, r25	; 0x07
    3c62:	8e 83       	std	Y+6, r24	; 0x06
    3c64:	02 30       	cpi	r16, 0x02	; 2
    3c66:	49 f4       	brne	.+18     	; 0x3c7a <prvCopyDataToQueue+0xa8>
    3c68:	11 23       	and	r17, r17
    3c6a:	49 f0       	breq	.+18     	; 0x3c7e <prvCopyDataToQueue+0xac>
    3c6c:	11 50       	subi	r17, 0x01	; 1
    3c6e:	80 e0       	ldi	r24, 0x00	; 0
    3c70:	07 c0       	rjmp	.+14     	; 0x3c80 <prvCopyDataToQueue+0xae>
    3c72:	80 e0       	ldi	r24, 0x00	; 0
    3c74:	05 c0       	rjmp	.+10     	; 0x3c80 <prvCopyDataToQueue+0xae>
    3c76:	80 e0       	ldi	r24, 0x00	; 0
    3c78:	03 c0       	rjmp	.+6      	; 0x3c80 <prvCopyDataToQueue+0xae>
    3c7a:	80 e0       	ldi	r24, 0x00	; 0
    3c7c:	01 c0       	rjmp	.+2      	; 0x3c80 <prvCopyDataToQueue+0xae>
    3c7e:	80 e0       	ldi	r24, 0x00	; 0
    3c80:	1f 5f       	subi	r17, 0xFF	; 255
    3c82:	1a 8f       	std	Y+26, r17	; 0x1a
    3c84:	df 91       	pop	r29
    3c86:	cf 91       	pop	r28
    3c88:	1f 91       	pop	r17
    3c8a:	0f 91       	pop	r16
    3c8c:	08 95       	ret

00003c8e <prvCopyDataFromQueue>:
    3c8e:	fc 01       	movw	r30, r24
    3c90:	44 8d       	ldd	r20, Z+28	; 0x1c
    3c92:	44 23       	and	r20, r20
    3c94:	a9 f0       	breq	.+42     	; 0x3cc0 <prvCopyDataFromQueue+0x32>
    3c96:	50 e0       	ldi	r21, 0x00	; 0
    3c98:	26 81       	ldd	r18, Z+6	; 0x06
    3c9a:	37 81       	ldd	r19, Z+7	; 0x07
    3c9c:	24 0f       	add	r18, r20
    3c9e:	35 1f       	adc	r19, r21
    3ca0:	37 83       	std	Z+7, r19	; 0x07
    3ca2:	26 83       	std	Z+6, r18	; 0x06
    3ca4:	82 81       	ldd	r24, Z+2	; 0x02
    3ca6:	93 81       	ldd	r25, Z+3	; 0x03
    3ca8:	28 17       	cp	r18, r24
    3caa:	39 07       	cpc	r19, r25
    3cac:	20 f0       	brcs	.+8      	; 0x3cb6 <prvCopyDataFromQueue+0x28>
    3cae:	80 81       	ld	r24, Z
    3cb0:	91 81       	ldd	r25, Z+1	; 0x01
    3cb2:	97 83       	std	Z+7, r25	; 0x07
    3cb4:	86 83       	std	Z+6, r24	; 0x06
    3cb6:	cb 01       	movw	r24, r22
    3cb8:	66 81       	ldd	r22, Z+6	; 0x06
    3cba:	77 81       	ldd	r23, Z+7	; 0x07
    3cbc:	0c 94 a4 27 	jmp	0x4f48	; 0x4f48 <memcpy>
    3cc0:	08 95       	ret

00003cc2 <prvUnlockQueue>:
    3cc2:	ef 92       	push	r14
    3cc4:	ff 92       	push	r15
    3cc6:	0f 93       	push	r16
    3cc8:	1f 93       	push	r17
    3cca:	cf 93       	push	r28
    3ccc:	8c 01       	movw	r16, r24
    3cce:	0f b6       	in	r0, 0x3f	; 63
    3cd0:	f8 94       	cli
    3cd2:	0f 92       	push	r0
    3cd4:	fc 01       	movw	r30, r24
    3cd6:	c6 8d       	ldd	r28, Z+30	; 0x1e
    3cd8:	1c 16       	cp	r1, r28
    3cda:	9c f4       	brge	.+38     	; 0x3d02 <prvUnlockQueue+0x40>
    3cdc:	81 89       	ldd	r24, Z+17	; 0x11
    3cde:	81 11       	cpse	r24, r1
    3ce0:	06 c0       	rjmp	.+12     	; 0x3cee <prvUnlockQueue+0x2c>
    3ce2:	0f c0       	rjmp	.+30     	; 0x3d02 <prvUnlockQueue+0x40>
    3ce4:	f8 01       	movw	r30, r16
    3ce6:	81 89       	ldd	r24, Z+17	; 0x11
    3ce8:	81 11       	cpse	r24, r1
    3cea:	05 c0       	rjmp	.+10     	; 0x3cf6 <prvUnlockQueue+0x34>
    3cec:	0a c0       	rjmp	.+20     	; 0x3d02 <prvUnlockQueue+0x40>
    3cee:	78 01       	movw	r14, r16
    3cf0:	f1 e1       	ldi	r31, 0x11	; 17
    3cf2:	ef 0e       	add	r14, r31
    3cf4:	f1 1c       	adc	r15, r1
    3cf6:	c7 01       	movw	r24, r14
    3cf8:	9a d5       	rcall	.+2868   	; 0x482e <xTaskRemoveFromEventList>
    3cfa:	81 11       	cpse	r24, r1
    3cfc:	21 d6       	rcall	.+3138   	; 0x4940 <vTaskMissedYield>
    3cfe:	c1 50       	subi	r28, 0x01	; 1
    3d00:	89 f7       	brne	.-30     	; 0x3ce4 <prvUnlockQueue+0x22>
    3d02:	8f ef       	ldi	r24, 0xFF	; 255
    3d04:	f8 01       	movw	r30, r16
    3d06:	86 8f       	std	Z+30, r24	; 0x1e
    3d08:	0f 90       	pop	r0
    3d0a:	0f be       	out	0x3f, r0	; 63
    3d0c:	0f b6       	in	r0, 0x3f	; 63
    3d0e:	f8 94       	cli
    3d10:	0f 92       	push	r0
    3d12:	c5 8d       	ldd	r28, Z+29	; 0x1d
    3d14:	1c 16       	cp	r1, r28
    3d16:	9c f4       	brge	.+38     	; 0x3d3e <prvUnlockQueue+0x7c>
    3d18:	80 85       	ldd	r24, Z+8	; 0x08
    3d1a:	81 11       	cpse	r24, r1
    3d1c:	06 c0       	rjmp	.+12     	; 0x3d2a <prvUnlockQueue+0x68>
    3d1e:	0f c0       	rjmp	.+30     	; 0x3d3e <prvUnlockQueue+0x7c>
    3d20:	f8 01       	movw	r30, r16
    3d22:	80 85       	ldd	r24, Z+8	; 0x08
    3d24:	81 11       	cpse	r24, r1
    3d26:	05 c0       	rjmp	.+10     	; 0x3d32 <prvUnlockQueue+0x70>
    3d28:	0a c0       	rjmp	.+20     	; 0x3d3e <prvUnlockQueue+0x7c>
    3d2a:	78 01       	movw	r14, r16
    3d2c:	f8 e0       	ldi	r31, 0x08	; 8
    3d2e:	ef 0e       	add	r14, r31
    3d30:	f1 1c       	adc	r15, r1
    3d32:	c7 01       	movw	r24, r14
    3d34:	7c d5       	rcall	.+2808   	; 0x482e <xTaskRemoveFromEventList>
    3d36:	81 11       	cpse	r24, r1
    3d38:	03 d6       	rcall	.+3078   	; 0x4940 <vTaskMissedYield>
    3d3a:	c1 50       	subi	r28, 0x01	; 1
    3d3c:	89 f7       	brne	.-30     	; 0x3d20 <prvUnlockQueue+0x5e>
    3d3e:	8f ef       	ldi	r24, 0xFF	; 255
    3d40:	f8 01       	movw	r30, r16
    3d42:	85 8f       	std	Z+29, r24	; 0x1d
    3d44:	0f 90       	pop	r0
    3d46:	0f be       	out	0x3f, r0	; 63
    3d48:	cf 91       	pop	r28
    3d4a:	1f 91       	pop	r17
    3d4c:	0f 91       	pop	r16
    3d4e:	ff 90       	pop	r15
    3d50:	ef 90       	pop	r14
    3d52:	08 95       	ret

00003d54 <xQueueGenericReset>:
    3d54:	cf 93       	push	r28
    3d56:	df 93       	push	r29
    3d58:	ec 01       	movw	r28, r24
    3d5a:	0f b6       	in	r0, 0x3f	; 63
    3d5c:	f8 94       	cli
    3d5e:	0f 92       	push	r0
    3d60:	48 81       	ld	r20, Y
    3d62:	59 81       	ldd	r21, Y+1	; 0x01
    3d64:	2c 8d       	ldd	r18, Y+28	; 0x1c
    3d66:	30 e0       	ldi	r19, 0x00	; 0
    3d68:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3d6a:	72 9f       	mul	r23, r18
    3d6c:	c0 01       	movw	r24, r0
    3d6e:	73 9f       	mul	r23, r19
    3d70:	90 0d       	add	r25, r0
    3d72:	11 24       	eor	r1, r1
    3d74:	fa 01       	movw	r30, r20
    3d76:	e8 0f       	add	r30, r24
    3d78:	f9 1f       	adc	r31, r25
    3d7a:	fb 83       	std	Y+3, r31	; 0x03
    3d7c:	ea 83       	std	Y+2, r30	; 0x02
    3d7e:	1a 8e       	std	Y+26, r1	; 0x1a
    3d80:	5d 83       	std	Y+5, r21	; 0x05
    3d82:	4c 83       	std	Y+4, r20	; 0x04
    3d84:	82 1b       	sub	r24, r18
    3d86:	93 0b       	sbc	r25, r19
    3d88:	84 0f       	add	r24, r20
    3d8a:	95 1f       	adc	r25, r21
    3d8c:	9f 83       	std	Y+7, r25	; 0x07
    3d8e:	8e 83       	std	Y+6, r24	; 0x06
    3d90:	8f ef       	ldi	r24, 0xFF	; 255
    3d92:	8d 8f       	std	Y+29, r24	; 0x1d
    3d94:	8e 8f       	std	Y+30, r24	; 0x1e
    3d96:	61 11       	cpse	r22, r1
    3d98:	0a c0       	rjmp	.+20     	; 0x3dae <xQueueGenericReset+0x5a>
    3d9a:	88 85       	ldd	r24, Y+8	; 0x08
    3d9c:	88 23       	and	r24, r24
    3d9e:	69 f0       	breq	.+26     	; 0x3dba <xQueueGenericReset+0x66>
    3da0:	ce 01       	movw	r24, r28
    3da2:	08 96       	adiw	r24, 0x08	; 8
    3da4:	44 d5       	rcall	.+2696   	; 0x482e <xTaskRemoveFromEventList>
    3da6:	88 23       	and	r24, r24
    3da8:	41 f0       	breq	.+16     	; 0x3dba <xQueueGenericReset+0x66>
    3daa:	5f de       	rcall	.-834    	; 0x3a6a <vPortYield>
    3dac:	06 c0       	rjmp	.+12     	; 0x3dba <xQueueGenericReset+0x66>
    3dae:	ce 01       	movw	r24, r28
    3db0:	08 96       	adiw	r24, 0x08	; 8
    3db2:	30 dd       	rcall	.-1440   	; 0x3814 <vListInitialise>
    3db4:	ce 01       	movw	r24, r28
    3db6:	41 96       	adiw	r24, 0x11	; 17
    3db8:	2d dd       	rcall	.-1446   	; 0x3814 <vListInitialise>
    3dba:	0f 90       	pop	r0
    3dbc:	0f be       	out	0x3f, r0	; 63
    3dbe:	81 e0       	ldi	r24, 0x01	; 1
    3dc0:	df 91       	pop	r29
    3dc2:	cf 91       	pop	r28
    3dc4:	08 95       	ret

00003dc6 <xQueueGenericCreate>:
    3dc6:	0f 93       	push	r16
    3dc8:	1f 93       	push	r17
    3dca:	cf 93       	push	r28
    3dcc:	df 93       	push	r29
    3dce:	08 2f       	mov	r16, r24
    3dd0:	16 2f       	mov	r17, r22
    3dd2:	66 23       	and	r22, r22
    3dd4:	b1 f0       	breq	.+44     	; 0x3e02 <xQueueGenericCreate+0x3c>
    3dd6:	86 9f       	mul	r24, r22
    3dd8:	c0 01       	movw	r24, r0
    3dda:	11 24       	eor	r1, r1
    3ddc:	4f 96       	adiw	r24, 0x1f	; 31
    3dde:	e6 dc       	rcall	.-1588   	; 0x37ac <pvPortMalloc>
    3de0:	ec 01       	movw	r28, r24
    3de2:	00 97       	sbiw	r24, 0x00	; 0
    3de4:	39 f4       	brne	.+14     	; 0x3df4 <xQueueGenericCreate+0x2e>
    3de6:	13 c0       	rjmp	.+38     	; 0x3e0e <xQueueGenericCreate+0x48>
    3de8:	0b 8f       	std	Y+27, r16	; 0x1b
    3dea:	1c 8f       	std	Y+28, r17	; 0x1c
    3dec:	61 e0       	ldi	r22, 0x01	; 1
    3dee:	ce 01       	movw	r24, r28
    3df0:	b1 df       	rcall	.-158    	; 0x3d54 <xQueueGenericReset>
    3df2:	0d c0       	rjmp	.+26     	; 0x3e0e <xQueueGenericCreate+0x48>
    3df4:	4f 96       	adiw	r24, 0x1f	; 31
    3df6:	99 83       	std	Y+1, r25	; 0x01
    3df8:	88 83       	st	Y, r24
    3dfa:	f6 cf       	rjmp	.-20     	; 0x3de8 <xQueueGenericCreate+0x22>
    3dfc:	d9 83       	std	Y+1, r29	; 0x01
    3dfe:	c8 83       	st	Y, r28
    3e00:	f3 cf       	rjmp	.-26     	; 0x3de8 <xQueueGenericCreate+0x22>
    3e02:	8f e1       	ldi	r24, 0x1F	; 31
    3e04:	90 e0       	ldi	r25, 0x00	; 0
    3e06:	d2 dc       	rcall	.-1628   	; 0x37ac <pvPortMalloc>
    3e08:	ec 01       	movw	r28, r24
    3e0a:	89 2b       	or	r24, r25
    3e0c:	b9 f7       	brne	.-18     	; 0x3dfc <xQueueGenericCreate+0x36>
    3e0e:	ce 01       	movw	r24, r28
    3e10:	df 91       	pop	r29
    3e12:	cf 91       	pop	r28
    3e14:	1f 91       	pop	r17
    3e16:	0f 91       	pop	r16
    3e18:	08 95       	ret

00003e1a <xQueueGenericSend>:
    3e1a:	9f 92       	push	r9
    3e1c:	af 92       	push	r10
    3e1e:	bf 92       	push	r11
    3e20:	cf 92       	push	r12
    3e22:	df 92       	push	r13
    3e24:	ef 92       	push	r14
    3e26:	ff 92       	push	r15
    3e28:	0f 93       	push	r16
    3e2a:	1f 93       	push	r17
    3e2c:	cf 93       	push	r28
    3e2e:	df 93       	push	r29
    3e30:	00 d0       	rcall	.+0      	; 0x3e32 <xQueueGenericSend+0x18>
    3e32:	00 d0       	rcall	.+0      	; 0x3e34 <xQueueGenericSend+0x1a>
    3e34:	1f 92       	push	r1
    3e36:	cd b7       	in	r28, 0x3d	; 61
    3e38:	de b7       	in	r29, 0x3e	; 62
    3e3a:	8c 01       	movw	r16, r24
    3e3c:	6b 01       	movw	r12, r22
    3e3e:	5d 83       	std	Y+5, r21	; 0x05
    3e40:	4c 83       	std	Y+4, r20	; 0x04
    3e42:	a2 2e       	mov	r10, r18
    3e44:	b1 2c       	mov	r11, r1
    3e46:	99 24       	eor	r9, r9
    3e48:	93 94       	inc	r9
    3e4a:	7c 01       	movw	r14, r24
    3e4c:	88 e0       	ldi	r24, 0x08	; 8
    3e4e:	e8 0e       	add	r14, r24
    3e50:	f1 1c       	adc	r15, r1
    3e52:	0f b6       	in	r0, 0x3f	; 63
    3e54:	f8 94       	cli
    3e56:	0f 92       	push	r0
    3e58:	f8 01       	movw	r30, r16
    3e5a:	92 8d       	ldd	r25, Z+26	; 0x1a
    3e5c:	83 8d       	ldd	r24, Z+27	; 0x1b
    3e5e:	98 17       	cp	r25, r24
    3e60:	18 f0       	brcs	.+6      	; 0x3e68 <xQueueGenericSend+0x4e>
    3e62:	f2 e0       	ldi	r31, 0x02	; 2
    3e64:	af 12       	cpse	r10, r31
    3e66:	15 c0       	rjmp	.+42     	; 0x3e92 <xQueueGenericSend+0x78>
    3e68:	4a 2d       	mov	r20, r10
    3e6a:	b6 01       	movw	r22, r12
    3e6c:	c8 01       	movw	r24, r16
    3e6e:	b1 de       	rcall	.-670    	; 0x3bd2 <prvCopyDataToQueue>
    3e70:	f8 01       	movw	r30, r16
    3e72:	91 89       	ldd	r25, Z+17	; 0x11
    3e74:	99 23       	and	r25, r25
    3e76:	39 f0       	breq	.+14     	; 0x3e86 <xQueueGenericSend+0x6c>
    3e78:	c8 01       	movw	r24, r16
    3e7a:	41 96       	adiw	r24, 0x11	; 17
    3e7c:	d8 d4       	rcall	.+2480   	; 0x482e <xTaskRemoveFromEventList>
    3e7e:	88 23       	and	r24, r24
    3e80:	21 f0       	breq	.+8      	; 0x3e8a <xQueueGenericSend+0x70>
    3e82:	f3 dd       	rcall	.-1050   	; 0x3a6a <vPortYield>
    3e84:	02 c0       	rjmp	.+4      	; 0x3e8a <xQueueGenericSend+0x70>
    3e86:	81 11       	cpse	r24, r1
    3e88:	f0 dd       	rcall	.-1056   	; 0x3a6a <vPortYield>
    3e8a:	0f 90       	pop	r0
    3e8c:	0f be       	out	0x3f, r0	; 63
    3e8e:	81 e0       	ldi	r24, 0x01	; 1
    3e90:	45 c0       	rjmp	.+138    	; 0x3f1c <xQueueGenericSend+0x102>
    3e92:	8c 81       	ldd	r24, Y+4	; 0x04
    3e94:	9d 81       	ldd	r25, Y+5	; 0x05
    3e96:	89 2b       	or	r24, r25
    3e98:	21 f4       	brne	.+8      	; 0x3ea2 <xQueueGenericSend+0x88>
    3e9a:	0f 90       	pop	r0
    3e9c:	0f be       	out	0x3f, r0	; 63
    3e9e:	80 e0       	ldi	r24, 0x00	; 0
    3ea0:	3d c0       	rjmp	.+122    	; 0x3f1c <xQueueGenericSend+0x102>
    3ea2:	b1 10       	cpse	r11, r1
    3ea4:	04 c0       	rjmp	.+8      	; 0x3eae <xQueueGenericSend+0x94>
    3ea6:	ce 01       	movw	r24, r28
    3ea8:	01 96       	adiw	r24, 0x01	; 1
    3eaa:	07 d5       	rcall	.+2574   	; 0x48ba <vTaskSetTimeOutState>
    3eac:	b9 2c       	mov	r11, r9
    3eae:	0f 90       	pop	r0
    3eb0:	0f be       	out	0x3f, r0	; 63
    3eb2:	b0 d2       	rcall	.+1376   	; 0x4414 <vTaskSuspendAll>
    3eb4:	0f b6       	in	r0, 0x3f	; 63
    3eb6:	f8 94       	cli
    3eb8:	0f 92       	push	r0
    3eba:	f8 01       	movw	r30, r16
    3ebc:	85 8d       	ldd	r24, Z+29	; 0x1d
    3ebe:	8f 3f       	cpi	r24, 0xFF	; 255
    3ec0:	09 f4       	brne	.+2      	; 0x3ec4 <xQueueGenericSend+0xaa>
    3ec2:	15 8e       	std	Z+29, r1	; 0x1d
    3ec4:	f8 01       	movw	r30, r16
    3ec6:	86 8d       	ldd	r24, Z+30	; 0x1e
    3ec8:	8f 3f       	cpi	r24, 0xFF	; 255
    3eca:	09 f4       	brne	.+2      	; 0x3ece <xQueueGenericSend+0xb4>
    3ecc:	16 8e       	std	Z+30, r1	; 0x1e
    3ece:	0f 90       	pop	r0
    3ed0:	0f be       	out	0x3f, r0	; 63
    3ed2:	be 01       	movw	r22, r28
    3ed4:	6c 5f       	subi	r22, 0xFC	; 252
    3ed6:	7f 4f       	sbci	r23, 0xFF	; 255
    3ed8:	ce 01       	movw	r24, r28
    3eda:	01 96       	adiw	r24, 0x01	; 1
    3edc:	f9 d4       	rcall	.+2546   	; 0x48d0 <xTaskCheckForTimeOut>
    3ede:	81 11       	cpse	r24, r1
    3ee0:	19 c0       	rjmp	.+50     	; 0x3f14 <xQueueGenericSend+0xfa>
    3ee2:	0f b6       	in	r0, 0x3f	; 63
    3ee4:	f8 94       	cli
    3ee6:	0f 92       	push	r0
    3ee8:	f8 01       	movw	r30, r16
    3eea:	92 8d       	ldd	r25, Z+26	; 0x1a
    3eec:	0f 90       	pop	r0
    3eee:	0f be       	out	0x3f, r0	; 63
    3ef0:	83 8d       	ldd	r24, Z+27	; 0x1b
    3ef2:	98 13       	cpse	r25, r24
    3ef4:	0b c0       	rjmp	.+22     	; 0x3f0c <xQueueGenericSend+0xf2>
    3ef6:	6c 81       	ldd	r22, Y+4	; 0x04
    3ef8:	7d 81       	ldd	r23, Y+5	; 0x05
    3efa:	c7 01       	movw	r24, r14
    3efc:	88 d4       	rcall	.+2320   	; 0x480e <vTaskPlaceOnEventList>
    3efe:	c8 01       	movw	r24, r16
    3f00:	e0 de       	rcall	.-576    	; 0x3cc2 <prvUnlockQueue>
    3f02:	45 d3       	rcall	.+1674   	; 0x458e <xTaskResumeAll>
    3f04:	81 11       	cpse	r24, r1
    3f06:	a5 cf       	rjmp	.-182    	; 0x3e52 <xQueueGenericSend+0x38>
    3f08:	b0 dd       	rcall	.-1184   	; 0x3a6a <vPortYield>
    3f0a:	a3 cf       	rjmp	.-186    	; 0x3e52 <xQueueGenericSend+0x38>
    3f0c:	c8 01       	movw	r24, r16
    3f0e:	d9 de       	rcall	.-590    	; 0x3cc2 <prvUnlockQueue>
    3f10:	3e d3       	rcall	.+1660   	; 0x458e <xTaskResumeAll>
    3f12:	9f cf       	rjmp	.-194    	; 0x3e52 <xQueueGenericSend+0x38>
    3f14:	c8 01       	movw	r24, r16
    3f16:	d5 de       	rcall	.-598    	; 0x3cc2 <prvUnlockQueue>
    3f18:	3a d3       	rcall	.+1652   	; 0x458e <xTaskResumeAll>
    3f1a:	80 e0       	ldi	r24, 0x00	; 0
    3f1c:	0f 90       	pop	r0
    3f1e:	0f 90       	pop	r0
    3f20:	0f 90       	pop	r0
    3f22:	0f 90       	pop	r0
    3f24:	0f 90       	pop	r0
    3f26:	df 91       	pop	r29
    3f28:	cf 91       	pop	r28
    3f2a:	1f 91       	pop	r17
    3f2c:	0f 91       	pop	r16
    3f2e:	ff 90       	pop	r15
    3f30:	ef 90       	pop	r14
    3f32:	df 90       	pop	r13
    3f34:	cf 90       	pop	r12
    3f36:	bf 90       	pop	r11
    3f38:	af 90       	pop	r10
    3f3a:	9f 90       	pop	r9
    3f3c:	08 95       	ret

00003f3e <xQueueCreateMutex>:
    3f3e:	cf 93       	push	r28
    3f40:	df 93       	push	r29
    3f42:	48 2f       	mov	r20, r24
    3f44:	60 e0       	ldi	r22, 0x00	; 0
    3f46:	81 e0       	ldi	r24, 0x01	; 1
    3f48:	3e df       	rcall	.-388    	; 0x3dc6 <xQueueGenericCreate>
    3f4a:	ec 01       	movw	r28, r24
    3f4c:	00 97       	sbiw	r24, 0x00	; 0
    3f4e:	59 f0       	breq	.+22     	; 0x3f66 <xQueueCreateMutex+0x28>
    3f50:	1b 82       	std	Y+3, r1	; 0x03
    3f52:	1a 82       	std	Y+2, r1	; 0x02
    3f54:	19 82       	std	Y+1, r1	; 0x01
    3f56:	18 82       	st	Y, r1
    3f58:	1e 82       	std	Y+6, r1	; 0x06
    3f5a:	20 e0       	ldi	r18, 0x00	; 0
    3f5c:	40 e0       	ldi	r20, 0x00	; 0
    3f5e:	50 e0       	ldi	r21, 0x00	; 0
    3f60:	60 e0       	ldi	r22, 0x00	; 0
    3f62:	70 e0       	ldi	r23, 0x00	; 0
    3f64:	5a df       	rcall	.-332    	; 0x3e1a <xQueueGenericSend>
    3f66:	ce 01       	movw	r24, r28
    3f68:	df 91       	pop	r29
    3f6a:	cf 91       	pop	r28
    3f6c:	08 95       	ret

00003f6e <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    3f6e:	8f 92       	push	r8
    3f70:	9f 92       	push	r9
    3f72:	af 92       	push	r10
    3f74:	bf 92       	push	r11
    3f76:	cf 92       	push	r12
    3f78:	df 92       	push	r13
    3f7a:	ef 92       	push	r14
    3f7c:	ff 92       	push	r15
    3f7e:	0f 93       	push	r16
    3f80:	1f 93       	push	r17
    3f82:	cf 93       	push	r28
    3f84:	df 93       	push	r29
    3f86:	00 d0       	rcall	.+0      	; 0x3f88 <xQueueGenericReceive+0x1a>
    3f88:	00 d0       	rcall	.+0      	; 0x3f8a <xQueueGenericReceive+0x1c>
    3f8a:	1f 92       	push	r1
    3f8c:	cd b7       	in	r28, 0x3d	; 61
    3f8e:	de b7       	in	r29, 0x3e	; 62
    3f90:	8c 01       	movw	r16, r24
    3f92:	5b 01       	movw	r10, r22
    3f94:	5d 83       	std	Y+5, r21	; 0x05
    3f96:	4c 83       	std	Y+4, r20	; 0x04
    3f98:	82 2e       	mov	r8, r18
BaseType_t xEntryTimeSet = pdFALSE;
    3f9a:	e1 2c       	mov	r14, r1
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
    3f9c:	99 24       	eor	r9, r9
    3f9e:	93 94       	inc	r9
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    3fa0:	6c 01       	movw	r12, r24
    3fa2:	81 e1       	ldi	r24, 0x11	; 17
    3fa4:	c8 0e       	add	r12, r24
    3fa6:	d1 1c       	adc	r13, r1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    3fa8:	0f b6       	in	r0, 0x3f	; 63
    3faa:	f8 94       	cli
    3fac:	0f 92       	push	r0
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    3fae:	f8 01       	movw	r30, r16
    3fb0:	f2 8c       	ldd	r15, Z+26	; 0x1a

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    3fb2:	ff 20       	and	r15, r15
    3fb4:	61 f1       	breq	.+88     	; 0x400e <xQueueGenericReceive+0xa0>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    3fb6:	c6 80       	ldd	r12, Z+6	; 0x06
    3fb8:	d7 80       	ldd	r13, Z+7	; 0x07

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    3fba:	b5 01       	movw	r22, r10
    3fbc:	c8 01       	movw	r24, r16
    3fbe:	67 de       	rcall	.-818    	; 0x3c8e <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    3fc0:	81 10       	cpse	r8, r1
    3fc2:	16 c0       	rjmp	.+44     	; 0x3ff0 <xQueueGenericReceive+0x82>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
    3fc4:	fa 94       	dec	r15
    3fc6:	f8 01       	movw	r30, r16
    3fc8:	f2 8e       	std	Z+26, r15	; 0x1a

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    3fca:	80 81       	ld	r24, Z
    3fcc:	91 81       	ldd	r25, Z+1	; 0x01
    3fce:	89 2b       	or	r24, r25
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    3fd0:	21 f4       	brne	.+8      	; 0x3fda <xQueueGenericReceive+0x6c>
    3fd2:	5c d5       	rcall	.+2744   	; 0x4a8c <pvTaskIncrementMutexHeldCount>
    3fd4:	f8 01       	movw	r30, r16
    3fd6:	93 83       	std	Z+3, r25	; 0x03
    3fd8:	82 83       	std	Z+2, r24	; 0x02
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3fda:	f8 01       	movw	r30, r16
    3fdc:	80 85       	ldd	r24, Z+8	; 0x08
    3fde:	88 23       	and	r24, r24
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3fe0:	91 f0       	breq	.+36     	; 0x4006 <xQueueGenericReceive+0x98>
    3fe2:	c8 01       	movw	r24, r16
    3fe4:	08 96       	adiw	r24, 0x08	; 8
    3fe6:	23 d4       	rcall	.+2118   	; 0x482e <xTaskRemoveFromEventList>
						{
							queueYIELD_IF_USING_PREEMPTION();
    3fe8:	88 23       	and	r24, r24
    3fea:	69 f0       	breq	.+26     	; 0x4006 <xQueueGenericReceive+0x98>
    3fec:	3e dd       	rcall	.-1412   	; 0x3a6a <vPortYield>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    3fee:	0b c0       	rjmp	.+22     	; 0x4006 <xQueueGenericReceive+0x98>
    3ff0:	f8 01       	movw	r30, r16
    3ff2:	d7 82       	std	Z+7, r13	; 0x07

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3ff4:	c6 82       	std	Z+6, r12	; 0x06
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3ff6:	81 89       	ldd	r24, Z+17	; 0x11
    3ff8:	88 23       	and	r24, r24
    3ffa:	29 f0       	breq	.+10     	; 0x4006 <xQueueGenericReceive+0x98>
    3ffc:	c8 01       	movw	r24, r16
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    3ffe:	41 96       	adiw	r24, 0x11	; 17
    4000:	16 d4       	rcall	.+2092   	; 0x482e <xTaskRemoveFromEventList>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    4002:	81 11       	cpse	r24, r1
    4004:	32 dd       	rcall	.-1436   	; 0x3a6a <vPortYield>
				return pdPASS;
    4006:	0f 90       	pop	r0
    4008:	0f be       	out	0x3f, r0	; 63
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    400a:	81 e0       	ldi	r24, 0x01	; 1
    400c:	58 c0       	rjmp	.+176    	; 0x40be <xQueueGenericReceive+0x150>
    400e:	8c 81       	ldd	r24, Y+4	; 0x04
    4010:	9d 81       	ldd	r25, Y+5	; 0x05
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    4012:	89 2b       	or	r24, r25
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    4014:	21 f4       	brne	.+8      	; 0x401e <xQueueGenericReceive+0xb0>
				}
				else if( xEntryTimeSet == pdFALSE )
    4016:	0f 90       	pop	r0
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    4018:	0f be       	out	0x3f, r0	; 63
    401a:	80 e0       	ldi	r24, 0x00	; 0
    401c:	50 c0       	rjmp	.+160    	; 0x40be <xQueueGenericReceive+0x150>
					xEntryTimeSet = pdTRUE;
    401e:	e1 10       	cpse	r14, r1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    4020:	04 c0       	rjmp	.+8      	; 0x402a <xQueueGenericReceive+0xbc>
    4022:	ce 01       	movw	r24, r28

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    4024:	01 96       	adiw	r24, 0x01	; 1
    4026:	49 d4       	rcall	.+2194   	; 0x48ba <vTaskSetTimeOutState>
		prvLockQueue( pxQueue );
    4028:	e9 2c       	mov	r14, r9
    402a:	0f 90       	pop	r0
    402c:	0f be       	out	0x3f, r0	; 63
    402e:	f2 d1       	rcall	.+996    	; 0x4414 <vTaskSuspendAll>
    4030:	0f b6       	in	r0, 0x3f	; 63
    4032:	f8 94       	cli
    4034:	0f 92       	push	r0
    4036:	f8 01       	movw	r30, r16
    4038:	85 8d       	ldd	r24, Z+29	; 0x1d
    403a:	8f 3f       	cpi	r24, 0xFF	; 255
    403c:	09 f4       	brne	.+2      	; 0x4040 <xQueueGenericReceive+0xd2>
    403e:	15 8e       	std	Z+29, r1	; 0x1d
    4040:	f8 01       	movw	r30, r16

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    4042:	86 8d       	ldd	r24, Z+30	; 0x1e
    4044:	8f 3f       	cpi	r24, 0xFF	; 255
    4046:	09 f4       	brne	.+2      	; 0x404a <xQueueGenericReceive+0xdc>
    4048:	16 8e       	std	Z+30, r1	; 0x1e
    404a:	0f 90       	pop	r0
    404c:	0f be       	out	0x3f, r0	; 63
    404e:	be 01       	movw	r22, r28
    4050:	6c 5f       	subi	r22, 0xFC	; 252
    4052:	7f 4f       	sbci	r23, 0xFF	; 255

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    4054:	ce 01       	movw	r24, r28
    4056:	01 96       	adiw	r24, 0x01	; 1
    4058:	3b d4       	rcall	.+2166   	; 0x48d0 <xTaskCheckForTimeOut>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    405a:	81 11       	cpse	r24, r1
    405c:	24 c0       	rjmp	.+72     	; 0x40a6 <xQueueGenericReceive+0x138>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    405e:	0f b6       	in	r0, 0x3f	; 63
    4060:	f8 94       	cli
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    4062:	0f 92       	push	r0
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    4064:	f8 01       	movw	r30, r16
    4066:	82 8d       	ldd	r24, Z+26	; 0x1a
    4068:	0f 90       	pop	r0
					{
						taskENTER_CRITICAL();
    406a:	0f be       	out	0x3f, r0	; 63
    406c:	81 11       	cpse	r24, r1
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    406e:	17 c0       	rjmp	.+46     	; 0x409e <xQueueGenericReceive+0x130>
    4070:	80 81       	ld	r24, Z
						}
						taskEXIT_CRITICAL();
    4072:	91 81       	ldd	r25, Z+1	; 0x01
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    4074:	89 2b       	or	r24, r25
    4076:	41 f4       	brne	.+16     	; 0x4088 <xQueueGenericReceive+0x11a>
    4078:	0f b6       	in	r0, 0x3f	; 63
				prvUnlockQueue( pxQueue );
    407a:	f8 94       	cli
				if( xTaskResumeAll() == pdFALSE )
    407c:	0f 92       	push	r0
    407e:	82 81       	ldd	r24, Z+2	; 0x02
    4080:	93 81       	ldd	r25, Z+3	; 0x03
    4082:	62 d4       	rcall	.+2244   	; 0x4948 <vTaskPriorityInherit>
				{
					portYIELD_WITHIN_API();
    4084:	0f 90       	pop	r0
    4086:	0f be       	out	0x3f, r0	; 63
    4088:	6c 81       	ldd	r22, Y+4	; 0x04
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    408a:	7d 81       	ldd	r23, Y+5	; 0x05
    408c:	c6 01       	movw	r24, r12
    408e:	bf d3       	rcall	.+1918   	; 0x480e <vTaskPlaceOnEventList>
				( void ) xTaskResumeAll();
    4090:	c8 01       	movw	r24, r16
    4092:	17 de       	rcall	.-978    	; 0x3cc2 <prvUnlockQueue>
    4094:	7c d2       	rcall	.+1272   	; 0x458e <xTaskResumeAll>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    4096:	81 11       	cpse	r24, r1
    4098:	87 cf       	rjmp	.-242    	; 0x3fa8 <xQueueGenericReceive+0x3a>
    409a:	e7 dc       	rcall	.-1586   	; 0x3a6a <vPortYield>
			( void ) xTaskResumeAll();
    409c:	85 cf       	rjmp	.-246    	; 0x3fa8 <xQueueGenericReceive+0x3a>
    409e:	c8 01       	movw	r24, r16

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    40a0:	10 de       	rcall	.-992    	; 0x3cc2 <prvUnlockQueue>
    40a2:	75 d2       	rcall	.+1258   	; 0x458e <xTaskResumeAll>
    40a4:	81 cf       	rjmp	.-254    	; 0x3fa8 <xQueueGenericReceive+0x3a>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    40a6:	c8 01       	movw	r24, r16
    40a8:	0c de       	rcall	.-1000   	; 0x3cc2 <prvUnlockQueue>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    40aa:	71 d2       	rcall	.+1250   	; 0x458e <xTaskResumeAll>
    40ac:	0f b6       	in	r0, 0x3f	; 63
		else
		{
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    40ae:	f8 94       	cli
    40b0:	0f 92       	push	r0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    40b2:	f8 01       	movw	r30, r16
    40b4:	82 8d       	ldd	r24, Z+26	; 0x1a
    40b6:	0f 90       	pop	r0
    40b8:	0f be       	out	0x3f, r0	; 63
    40ba:	81 11       	cpse	r24, r1
    40bc:	75 cf       	rjmp	.-278    	; 0x3fa8 <xQueueGenericReceive+0x3a>
    40be:	0f 90       	pop	r0
    40c0:	0f 90       	pop	r0
    40c2:	0f 90       	pop	r0
    40c4:	0f 90       	pop	r0
    40c6:	0f 90       	pop	r0
    40c8:	df 91       	pop	r29
    40ca:	cf 91       	pop	r28
    40cc:	1f 91       	pop	r17
    40ce:	0f 91       	pop	r16
    40d0:	ff 90       	pop	r15
    40d2:	ef 90       	pop	r14
    40d4:	df 90       	pop	r13
    40d6:	cf 90       	pop	r12
    40d8:	bf 90       	pop	r11
    40da:	af 90       	pop	r10
    40dc:	9f 90       	pop	r9
    40de:	8f 90       	pop	r8
    40e0:	08 95       	ret

000040e2 <prvResetNextTaskUnblockTime>:
	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

	return uxReturn;
}
    40e2:	e0 91 d7 0d 	lds	r30, 0x0DD7	; 0x800dd7 <pxDelayedTaskList>
    40e6:	f0 91 d8 0d 	lds	r31, 0x0DD8	; 0x800dd8 <pxDelayedTaskList+0x1>
    40ea:	80 81       	ld	r24, Z
    40ec:	81 11       	cpse	r24, r1
    40ee:	07 c0       	rjmp	.+14     	; 0x40fe <prvResetNextTaskUnblockTime+0x1c>
    40f0:	8f ef       	ldi	r24, 0xFF	; 255
    40f2:	9f ef       	ldi	r25, 0xFF	; 255
    40f4:	90 93 af 0d 	sts	0x0DAF, r25	; 0x800daf <xNextTaskUnblockTime+0x1>
    40f8:	80 93 ae 0d 	sts	0x0DAE, r24	; 0x800dae <xNextTaskUnblockTime>
    40fc:	08 95       	ret
    40fe:	e0 91 d7 0d 	lds	r30, 0x0DD7	; 0x800dd7 <pxDelayedTaskList>
    4102:	f0 91 d8 0d 	lds	r31, 0x0DD8	; 0x800dd8 <pxDelayedTaskList+0x1>
    4106:	05 80       	ldd	r0, Z+5	; 0x05
    4108:	f6 81       	ldd	r31, Z+6	; 0x06
    410a:	e0 2d       	mov	r30, r0
    410c:	06 80       	ldd	r0, Z+6	; 0x06
    410e:	f7 81       	ldd	r31, Z+7	; 0x07
    4110:	e0 2d       	mov	r30, r0
    4112:	82 81       	ldd	r24, Z+2	; 0x02
    4114:	93 81       	ldd	r25, Z+3	; 0x03
    4116:	90 93 af 0d 	sts	0x0DAF, r25	; 0x800daf <xNextTaskUnblockTime+0x1>
    411a:	80 93 ae 0d 	sts	0x0DAE, r24	; 0x800dae <xNextTaskUnblockTime>
    411e:	08 95       	ret

00004120 <prvAddCurrentTaskToDelayedList>:
    4120:	ff 92       	push	r15
    4122:	0f 93       	push	r16
    4124:	1f 93       	push	r17
    4126:	cf 93       	push	r28
    4128:	df 93       	push	r29
    412a:	ec 01       	movw	r28, r24
    412c:	f6 2e       	mov	r15, r22
    412e:	00 91 b6 0d 	lds	r16, 0x0DB6	; 0x800db6 <xTickCount>
    4132:	10 91 b7 0d 	lds	r17, 0x0DB7	; 0x800db7 <xTickCount+0x1>
    4136:	80 91 0f 0e 	lds	r24, 0x0E0F	; 0x800e0f <pxCurrentTCB>
    413a:	90 91 10 0e 	lds	r25, 0x0E10	; 0x800e10 <pxCurrentTCB+0x1>
    413e:	02 96       	adiw	r24, 0x02	; 2
    4140:	cd db       	rcall	.-2150   	; 0x38dc <uxListRemove>
    4142:	cf 3f       	cpi	r28, 0xFF	; 255
    4144:	8f ef       	ldi	r24, 0xFF	; 255
    4146:	d8 07       	cpc	r29, r24
    4148:	61 f4       	brne	.+24     	; 0x4162 <prvAddCurrentTaskToDelayedList+0x42>
    414a:	ff 20       	and	r15, r15
    414c:	51 f0       	breq	.+20     	; 0x4162 <prvAddCurrentTaskToDelayedList+0x42>
    414e:	60 91 0f 0e 	lds	r22, 0x0E0F	; 0x800e0f <pxCurrentTCB>
    4152:	70 91 10 0e 	lds	r23, 0x0E10	; 0x800e10 <pxCurrentTCB+0x1>
    4156:	6e 5f       	subi	r22, 0xFE	; 254
    4158:	7f 4f       	sbci	r23, 0xFF	; 255
    415a:	89 eb       	ldi	r24, 0xB9	; 185
    415c:	9d e0       	ldi	r25, 0x0D	; 13
    415e:	6c db       	rcall	.-2344   	; 0x3838 <vListInsertEnd>
    4160:	2d c0       	rjmp	.+90     	; 0x41bc <prvAddCurrentTaskToDelayedList+0x9c>
    4162:	c0 0f       	add	r28, r16
    4164:	d1 1f       	adc	r29, r17
    4166:	e0 91 0f 0e 	lds	r30, 0x0E0F	; 0x800e0f <pxCurrentTCB>
    416a:	f0 91 10 0e 	lds	r31, 0x0E10	; 0x800e10 <pxCurrentTCB+0x1>
    416e:	d3 83       	std	Z+3, r29	; 0x03
    4170:	c2 83       	std	Z+2, r28	; 0x02
    4172:	c0 17       	cp	r28, r16
    4174:	d1 07       	cpc	r29, r17
    4176:	60 f4       	brcc	.+24     	; 0x4190 <prvAddCurrentTaskToDelayedList+0x70>
    4178:	60 91 0f 0e 	lds	r22, 0x0E0F	; 0x800e0f <pxCurrentTCB>
    417c:	70 91 10 0e 	lds	r23, 0x0E10	; 0x800e10 <pxCurrentTCB+0x1>
    4180:	80 91 d5 0d 	lds	r24, 0x0DD5	; 0x800dd5 <pxOverflowDelayedTaskList>
    4184:	90 91 d6 0d 	lds	r25, 0x0DD6	; 0x800dd6 <pxOverflowDelayedTaskList+0x1>
    4188:	6e 5f       	subi	r22, 0xFE	; 254
    418a:	7f 4f       	sbci	r23, 0xFF	; 255
    418c:	76 db       	rcall	.-2324   	; 0x387a <vListInsert>
    418e:	16 c0       	rjmp	.+44     	; 0x41bc <prvAddCurrentTaskToDelayedList+0x9c>
    4190:	60 91 0f 0e 	lds	r22, 0x0E0F	; 0x800e0f <pxCurrentTCB>
    4194:	70 91 10 0e 	lds	r23, 0x0E10	; 0x800e10 <pxCurrentTCB+0x1>
    4198:	80 91 d7 0d 	lds	r24, 0x0DD7	; 0x800dd7 <pxDelayedTaskList>
    419c:	90 91 d8 0d 	lds	r25, 0x0DD8	; 0x800dd8 <pxDelayedTaskList+0x1>
    41a0:	6e 5f       	subi	r22, 0xFE	; 254
    41a2:	7f 4f       	sbci	r23, 0xFF	; 255
    41a4:	6a db       	rcall	.-2348   	; 0x387a <vListInsert>
    41a6:	80 91 ae 0d 	lds	r24, 0x0DAE	; 0x800dae <xNextTaskUnblockTime>
    41aa:	90 91 af 0d 	lds	r25, 0x0DAF	; 0x800daf <xNextTaskUnblockTime+0x1>
    41ae:	c8 17       	cp	r28, r24
    41b0:	d9 07       	cpc	r29, r25
    41b2:	20 f4       	brcc	.+8      	; 0x41bc <prvAddCurrentTaskToDelayedList+0x9c>
    41b4:	d0 93 af 0d 	sts	0x0DAF, r29	; 0x800daf <xNextTaskUnblockTime+0x1>
    41b8:	c0 93 ae 0d 	sts	0x0DAE, r28	; 0x800dae <xNextTaskUnblockTime>
    41bc:	df 91       	pop	r29
    41be:	cf 91       	pop	r28
    41c0:	1f 91       	pop	r17
    41c2:	0f 91       	pop	r16
    41c4:	ff 90       	pop	r15
    41c6:	08 95       	ret

000041c8 <xTaskCreate>:
    41c8:	4f 92       	push	r4
    41ca:	5f 92       	push	r5
    41cc:	6f 92       	push	r6
    41ce:	7f 92       	push	r7
    41d0:	8f 92       	push	r8
    41d2:	9f 92       	push	r9
    41d4:	af 92       	push	r10
    41d6:	bf 92       	push	r11
    41d8:	cf 92       	push	r12
    41da:	df 92       	push	r13
    41dc:	ef 92       	push	r14
    41de:	ff 92       	push	r15
    41e0:	0f 93       	push	r16
    41e2:	cf 93       	push	r28
    41e4:	df 93       	push	r29
    41e6:	4c 01       	movw	r8, r24
    41e8:	6b 01       	movw	r12, r22
    41ea:	5a 01       	movw	r10, r20
    41ec:	29 01       	movw	r4, r18
    41ee:	ca 01       	movw	r24, r20
    41f0:	dd da       	rcall	.-2630   	; 0x37ac <pvPortMalloc>
    41f2:	3c 01       	movw	r6, r24
    41f4:	89 2b       	or	r24, r25
    41f6:	09 f4       	brne	.+2      	; 0x41fa <xTaskCreate+0x32>
    41f8:	d4 c0       	rjmp	.+424    	; 0x43a2 <xTaskCreate+0x1da>
    41fa:	88 e2       	ldi	r24, 0x28	; 40
    41fc:	90 e0       	ldi	r25, 0x00	; 0
    41fe:	d6 da       	rcall	.-2644   	; 0x37ac <pvPortMalloc>
    4200:	ec 01       	movw	r28, r24
    4202:	89 2b       	or	r24, r25
    4204:	71 f0       	breq	.+28     	; 0x4222 <xTaskCreate+0x5a>
    4206:	78 8e       	std	Y+24, r7	; 0x18
    4208:	6f 8a       	std	Y+23, r6	; 0x17
    420a:	81 e0       	ldi	r24, 0x01	; 1
    420c:	a8 1a       	sub	r10, r24
    420e:	b1 08       	sbc	r11, r1
    4210:	6a 0c       	add	r6, r10
    4212:	7b 1c       	adc	r7, r11
    4214:	d6 01       	movw	r26, r12
    4216:	8c 91       	ld	r24, X
    4218:	89 8f       	std	Y+25, r24	; 0x19
    421a:	8c 91       	ld	r24, X
    421c:	81 11       	cpse	r24, r1
    421e:	04 c0       	rjmp	.+8      	; 0x4228 <xTaskCreate+0x60>
    4220:	17 c0       	rjmp	.+46     	; 0x4250 <xTaskCreate+0x88>
    4222:	c3 01       	movw	r24, r6
    4224:	f6 da       	rcall	.-2580   	; 0x3812 <vPortFree>
    4226:	bd c0       	rjmp	.+378    	; 0x43a2 <xTaskCreate+0x1da>
    4228:	ae 01       	movw	r20, r28
    422a:	46 5e       	subi	r20, 0xE6	; 230
    422c:	5f 4f       	sbci	r21, 0xFF	; 255
    422e:	f6 01       	movw	r30, r12
    4230:	31 96       	adiw	r30, 0x01	; 1
    4232:	b8 e0       	ldi	r27, 0x08	; 8
    4234:	cb 0e       	add	r12, r27
    4236:	d1 1c       	adc	r13, r1
    4238:	cf 01       	movw	r24, r30
    423a:	21 91       	ld	r18, Z+
    423c:	da 01       	movw	r26, r20
    423e:	2d 93       	st	X+, r18
    4240:	ad 01       	movw	r20, r26
    4242:	dc 01       	movw	r26, r24
    4244:	8c 91       	ld	r24, X
    4246:	88 23       	and	r24, r24
    4248:	19 f0       	breq	.+6      	; 0x4250 <xTaskCreate+0x88>
    424a:	ec 15       	cp	r30, r12
    424c:	fd 05       	cpc	r31, r13
    424e:	a1 f7       	brne	.-24     	; 0x4238 <xTaskCreate+0x70>
    4250:	18 a2       	std	Y+32, r1	; 0x20
    4252:	04 30       	cpi	r16, 0x04	; 4
    4254:	08 f0       	brcs	.+2      	; 0x4258 <xTaskCreate+0x90>
    4256:	03 e0       	ldi	r16, 0x03	; 3
    4258:	0e 8b       	std	Y+22, r16	; 0x16
    425a:	09 a3       	std	Y+33, r16	; 0x21
    425c:	1a a2       	std	Y+34, r1	; 0x22
    425e:	6e 01       	movw	r12, r28
    4260:	b2 e0       	ldi	r27, 0x02	; 2
    4262:	cb 0e       	add	r12, r27
    4264:	d1 1c       	adc	r13, r1
    4266:	c6 01       	movw	r24, r12
    4268:	e3 da       	rcall	.-2618   	; 0x3830 <vListInitialiseItem>
    426a:	ce 01       	movw	r24, r28
    426c:	0c 96       	adiw	r24, 0x0c	; 12
    426e:	e0 da       	rcall	.-2624   	; 0x3830 <vListInitialiseItem>
    4270:	d9 87       	std	Y+9, r29	; 0x09
    4272:	c8 87       	std	Y+8, r28	; 0x08
    4274:	84 e0       	ldi	r24, 0x04	; 4
    4276:	90 e0       	ldi	r25, 0x00	; 0
    4278:	80 1b       	sub	r24, r16
    427a:	91 09       	sbc	r25, r1
    427c:	9d 87       	std	Y+13, r25	; 0x0d
    427e:	8c 87       	std	Y+12, r24	; 0x0c
    4280:	db 8b       	std	Y+19, r29	; 0x13
    4282:	ca 8b       	std	Y+18, r28	; 0x12
    4284:	1b a2       	std	Y+35, r1	; 0x23
    4286:	1c a2       	std	Y+36, r1	; 0x24
    4288:	1d a2       	std	Y+37, r1	; 0x25
    428a:	1e a2       	std	Y+38, r1	; 0x26
    428c:	1f a2       	std	Y+39, r1	; 0x27
    428e:	a2 01       	movw	r20, r4
    4290:	b4 01       	movw	r22, r8
    4292:	c3 01       	movw	r24, r6
    4294:	49 db       	rcall	.-2414   	; 0x3928 <pxPortInitialiseStack>
    4296:	99 83       	std	Y+1, r25	; 0x01
    4298:	88 83       	st	Y, r24
    429a:	e1 14       	cp	r14, r1
    429c:	f1 04       	cpc	r15, r1
    429e:	19 f0       	breq	.+6      	; 0x42a6 <xTaskCreate+0xde>
    42a0:	f7 01       	movw	r30, r14
    42a2:	d1 83       	std	Z+1, r29	; 0x01
    42a4:	c0 83       	st	Z, r28
    42a6:	0f b6       	in	r0, 0x3f	; 63
    42a8:	f8 94       	cli
    42aa:	0f 92       	push	r0
    42ac:	80 91 b8 0d 	lds	r24, 0x0DB8	; 0x800db8 <uxCurrentNumberOfTasks>
    42b0:	8f 5f       	subi	r24, 0xFF	; 255
    42b2:	80 93 b8 0d 	sts	0x0DB8, r24	; 0x800db8 <uxCurrentNumberOfTasks>
    42b6:	80 91 0f 0e 	lds	r24, 0x0E0F	; 0x800e0f <pxCurrentTCB>
    42ba:	90 91 10 0e 	lds	r25, 0x0E10	; 0x800e10 <pxCurrentTCB+0x1>
    42be:	89 2b       	or	r24, r25
    42c0:	89 f5       	brne	.+98     	; 0x4324 <xTaskCreate+0x15c>
    42c2:	d0 93 10 0e 	sts	0x0E10, r29	; 0x800e10 <pxCurrentTCB+0x1>
    42c6:	c0 93 0f 0e 	sts	0x0E0F, r28	; 0x800e0f <pxCurrentTCB>
    42ca:	80 91 b8 0d 	lds	r24, 0x0DB8	; 0x800db8 <uxCurrentNumberOfTasks>
    42ce:	81 30       	cpi	r24, 0x01	; 1
    42d0:	09 f0       	breq	.+2      	; 0x42d4 <xTaskCreate+0x10c>
    42d2:	38 c0       	rjmp	.+112    	; 0x4344 <xTaskCreate+0x17c>
    42d4:	8b ee       	ldi	r24, 0xEB	; 235
    42d6:	9d e0       	ldi	r25, 0x0D	; 13
    42d8:	9d da       	rcall	.-2758   	; 0x3814 <vListInitialise>
    42da:	84 ef       	ldi	r24, 0xF4	; 244
    42dc:	9d e0       	ldi	r25, 0x0D	; 13
    42de:	9a da       	rcall	.-2764   	; 0x3814 <vListInitialise>
    42e0:	8d ef       	ldi	r24, 0xFD	; 253
    42e2:	9d e0       	ldi	r25, 0x0D	; 13
    42e4:	97 da       	rcall	.-2770   	; 0x3814 <vListInitialise>
    42e6:	86 e0       	ldi	r24, 0x06	; 6
    42e8:	9e e0       	ldi	r25, 0x0E	; 14
    42ea:	94 da       	rcall	.-2776   	; 0x3814 <vListInitialise>
    42ec:	82 ee       	ldi	r24, 0xE2	; 226
    42ee:	9d e0       	ldi	r25, 0x0D	; 13
    42f0:	91 da       	rcall	.-2782   	; 0x3814 <vListInitialise>
    42f2:	89 ed       	ldi	r24, 0xD9	; 217
    42f4:	9d e0       	ldi	r25, 0x0D	; 13
    42f6:	8e da       	rcall	.-2788   	; 0x3814 <vListInitialise>
    42f8:	8c ec       	ldi	r24, 0xCC	; 204
    42fa:	9d e0       	ldi	r25, 0x0D	; 13
    42fc:	8b da       	rcall	.-2794   	; 0x3814 <vListInitialise>
    42fe:	83 ec       	ldi	r24, 0xC3	; 195
    4300:	9d e0       	ldi	r25, 0x0D	; 13
    4302:	88 da       	rcall	.-2800   	; 0x3814 <vListInitialise>
    4304:	89 eb       	ldi	r24, 0xB9	; 185
    4306:	9d e0       	ldi	r25, 0x0D	; 13
    4308:	85 da       	rcall	.-2806   	; 0x3814 <vListInitialise>
    430a:	82 ee       	ldi	r24, 0xE2	; 226
    430c:	9d e0       	ldi	r25, 0x0D	; 13
    430e:	90 93 d8 0d 	sts	0x0DD8, r25	; 0x800dd8 <pxDelayedTaskList+0x1>
    4312:	80 93 d7 0d 	sts	0x0DD7, r24	; 0x800dd7 <pxDelayedTaskList>
    4316:	89 ed       	ldi	r24, 0xD9	; 217
    4318:	9d e0       	ldi	r25, 0x0D	; 13
    431a:	90 93 d6 0d 	sts	0x0DD6, r25	; 0x800dd6 <pxOverflowDelayedTaskList+0x1>
    431e:	80 93 d5 0d 	sts	0x0DD5, r24	; 0x800dd5 <pxOverflowDelayedTaskList>
    4322:	10 c0       	rjmp	.+32     	; 0x4344 <xTaskCreate+0x17c>
    4324:	80 91 b4 0d 	lds	r24, 0x0DB4	; 0x800db4 <xSchedulerRunning>
    4328:	81 11       	cpse	r24, r1
    432a:	0c c0       	rjmp	.+24     	; 0x4344 <xTaskCreate+0x17c>
    432c:	e0 91 0f 0e 	lds	r30, 0x0E0F	; 0x800e0f <pxCurrentTCB>
    4330:	f0 91 10 0e 	lds	r31, 0x0E10	; 0x800e10 <pxCurrentTCB+0x1>
    4334:	96 89       	ldd	r25, Z+22	; 0x16
    4336:	8e 89       	ldd	r24, Y+22	; 0x16
    4338:	89 17       	cp	r24, r25
    433a:	20 f0       	brcs	.+8      	; 0x4344 <xTaskCreate+0x17c>
    433c:	d0 93 10 0e 	sts	0x0E10, r29	; 0x800e10 <pxCurrentTCB+0x1>
    4340:	c0 93 0f 0e 	sts	0x0E0F, r28	; 0x800e0f <pxCurrentTCB>
    4344:	80 91 b0 0d 	lds	r24, 0x0DB0	; 0x800db0 <uxTaskNumber>
    4348:	8f 5f       	subi	r24, 0xFF	; 255
    434a:	80 93 b0 0d 	sts	0x0DB0, r24	; 0x800db0 <uxTaskNumber>
    434e:	8e 89       	ldd	r24, Y+22	; 0x16
    4350:	90 91 b5 0d 	lds	r25, 0x0DB5	; 0x800db5 <uxTopReadyPriority>
    4354:	98 17       	cp	r25, r24
    4356:	10 f4       	brcc	.+4      	; 0x435c <xTaskCreate+0x194>
    4358:	80 93 b5 0d 	sts	0x0DB5, r24	; 0x800db5 <uxTopReadyPriority>
    435c:	90 e0       	ldi	r25, 0x00	; 0
    435e:	9c 01       	movw	r18, r24
    4360:	22 0f       	add	r18, r18
    4362:	33 1f       	adc	r19, r19
    4364:	22 0f       	add	r18, r18
    4366:	33 1f       	adc	r19, r19
    4368:	22 0f       	add	r18, r18
    436a:	33 1f       	adc	r19, r19
    436c:	82 0f       	add	r24, r18
    436e:	93 1f       	adc	r25, r19
    4370:	b6 01       	movw	r22, r12
    4372:	85 51       	subi	r24, 0x15	; 21
    4374:	92 4f       	sbci	r25, 0xF2	; 242
    4376:	60 da       	rcall	.-2880   	; 0x3838 <vListInsertEnd>
    4378:	0f 90       	pop	r0
    437a:	0f be       	out	0x3f, r0	; 63
    437c:	80 91 b4 0d 	lds	r24, 0x0DB4	; 0x800db4 <xSchedulerRunning>
    4380:	88 23       	and	r24, r24
    4382:	59 f0       	breq	.+22     	; 0x439a <xTaskCreate+0x1d2>
    4384:	e0 91 0f 0e 	lds	r30, 0x0E0F	; 0x800e0f <pxCurrentTCB>
    4388:	f0 91 10 0e 	lds	r31, 0x0E10	; 0x800e10 <pxCurrentTCB+0x1>
    438c:	96 89       	ldd	r25, Z+22	; 0x16
    438e:	8e 89       	ldd	r24, Y+22	; 0x16
    4390:	98 17       	cp	r25, r24
    4392:	28 f4       	brcc	.+10     	; 0x439e <xTaskCreate+0x1d6>
    4394:	6a db       	rcall	.-2348   	; 0x3a6a <vPortYield>
    4396:	81 e0       	ldi	r24, 0x01	; 1
    4398:	05 c0       	rjmp	.+10     	; 0x43a4 <xTaskCreate+0x1dc>
    439a:	81 e0       	ldi	r24, 0x01	; 1
    439c:	03 c0       	rjmp	.+6      	; 0x43a4 <xTaskCreate+0x1dc>
    439e:	81 e0       	ldi	r24, 0x01	; 1
    43a0:	01 c0       	rjmp	.+2      	; 0x43a4 <xTaskCreate+0x1dc>
    43a2:	8f ef       	ldi	r24, 0xFF	; 255
    43a4:	df 91       	pop	r29
    43a6:	cf 91       	pop	r28
    43a8:	0f 91       	pop	r16
    43aa:	ff 90       	pop	r15
    43ac:	ef 90       	pop	r14
    43ae:	df 90       	pop	r13
    43b0:	cf 90       	pop	r12
    43b2:	bf 90       	pop	r11
    43b4:	af 90       	pop	r10
    43b6:	9f 90       	pop	r9
    43b8:	8f 90       	pop	r8
    43ba:	7f 90       	pop	r7
    43bc:	6f 90       	pop	r6
    43be:	5f 90       	pop	r5
    43c0:	4f 90       	pop	r4
    43c2:	08 95       	ret

000043c4 <vTaskStartScheduler>:
    43c4:	ef 92       	push	r14
    43c6:	ff 92       	push	r15
    43c8:	0f 93       	push	r16
    43ca:	0f 2e       	mov	r0, r31
    43cc:	fc ea       	ldi	r31, 0xAC	; 172
    43ce:	ef 2e       	mov	r14, r31
    43d0:	fd e0       	ldi	r31, 0x0D	; 13
    43d2:	ff 2e       	mov	r15, r31
    43d4:	f0 2d       	mov	r31, r0
    43d6:	00 e0       	ldi	r16, 0x00	; 0
    43d8:	20 e0       	ldi	r18, 0x00	; 0
    43da:	30 e0       	ldi	r19, 0x00	; 0
    43dc:	45 e5       	ldi	r20, 0x55	; 85
    43de:	50 e0       	ldi	r21, 0x00	; 0
    43e0:	6d e3       	ldi	r22, 0x3D	; 61
    43e2:	72 e0       	ldi	r23, 0x02	; 2
    43e4:	80 e5       	ldi	r24, 0x50	; 80
    43e6:	93 e2       	ldi	r25, 0x23	; 35
    43e8:	ef de       	rcall	.-546    	; 0x41c8 <xTaskCreate>
    43ea:	81 30       	cpi	r24, 0x01	; 1
    43ec:	79 f4       	brne	.+30     	; 0x440c <vTaskStartScheduler+0x48>
    43ee:	f8 94       	cli
    43f0:	8f ef       	ldi	r24, 0xFF	; 255
    43f2:	9f ef       	ldi	r25, 0xFF	; 255
    43f4:	90 93 af 0d 	sts	0x0DAF, r25	; 0x800daf <xNextTaskUnblockTime+0x1>
    43f8:	80 93 ae 0d 	sts	0x0DAE, r24	; 0x800dae <xNextTaskUnblockTime>
    43fc:	81 e0       	ldi	r24, 0x01	; 1
    43fe:	80 93 b4 0d 	sts	0x0DB4, r24	; 0x800db4 <xSchedulerRunning>
    4402:	10 92 b7 0d 	sts	0x0DB7, r1	; 0x800db7 <xTickCount+0x1>
    4406:	10 92 b6 0d 	sts	0x0DB6, r1	; 0x800db6 <xTickCount>
    440a:	fa da       	rcall	.-2572   	; 0x3a00 <xPortStartScheduler>
    440c:	0f 91       	pop	r16
    440e:	ff 90       	pop	r15
    4410:	ef 90       	pop	r14
    4412:	08 95       	ret

00004414 <vTaskSuspendAll>:
    4414:	80 91 ab 0d 	lds	r24, 0x0DAB	; 0x800dab <uxSchedulerSuspended>
    4418:	8f 5f       	subi	r24, 0xFF	; 255
    441a:	80 93 ab 0d 	sts	0x0DAB, r24	; 0x800dab <uxSchedulerSuspended>
    441e:	08 95       	ret

00004420 <xTaskIncrementTick>:
    4420:	cf 92       	push	r12
    4422:	df 92       	push	r13
    4424:	ef 92       	push	r14
    4426:	ff 92       	push	r15
    4428:	0f 93       	push	r16
    442a:	1f 93       	push	r17
    442c:	cf 93       	push	r28
    442e:	df 93       	push	r29
    4430:	80 91 ab 0d 	lds	r24, 0x0DAB	; 0x800dab <uxSchedulerSuspended>
    4434:	81 11       	cpse	r24, r1
    4436:	95 c0       	rjmp	.+298    	; 0x4562 <xTaskIncrementTick+0x142>
    4438:	e0 90 b6 0d 	lds	r14, 0x0DB6	; 0x800db6 <xTickCount>
    443c:	f0 90 b7 0d 	lds	r15, 0x0DB7	; 0x800db7 <xTickCount+0x1>
    4440:	8f ef       	ldi	r24, 0xFF	; 255
    4442:	e8 1a       	sub	r14, r24
    4444:	f8 0a       	sbc	r15, r24
    4446:	f0 92 b7 0d 	sts	0x0DB7, r15	; 0x800db7 <xTickCount+0x1>
    444a:	e0 92 b6 0d 	sts	0x0DB6, r14	; 0x800db6 <xTickCount>
    444e:	e1 14       	cp	r14, r1
    4450:	f1 04       	cpc	r15, r1
    4452:	b1 f4       	brne	.+44     	; 0x4480 <xTaskIncrementTick+0x60>
    4454:	80 91 d7 0d 	lds	r24, 0x0DD7	; 0x800dd7 <pxDelayedTaskList>
    4458:	90 91 d8 0d 	lds	r25, 0x0DD8	; 0x800dd8 <pxDelayedTaskList+0x1>
    445c:	20 91 d5 0d 	lds	r18, 0x0DD5	; 0x800dd5 <pxOverflowDelayedTaskList>
    4460:	30 91 d6 0d 	lds	r19, 0x0DD6	; 0x800dd6 <pxOverflowDelayedTaskList+0x1>
    4464:	30 93 d8 0d 	sts	0x0DD8, r19	; 0x800dd8 <pxDelayedTaskList+0x1>
    4468:	20 93 d7 0d 	sts	0x0DD7, r18	; 0x800dd7 <pxDelayedTaskList>
    446c:	90 93 d6 0d 	sts	0x0DD6, r25	; 0x800dd6 <pxOverflowDelayedTaskList+0x1>
    4470:	80 93 d5 0d 	sts	0x0DD5, r24	; 0x800dd5 <pxOverflowDelayedTaskList>
    4474:	80 91 b1 0d 	lds	r24, 0x0DB1	; 0x800db1 <xNumOfOverflows>
    4478:	8f 5f       	subi	r24, 0xFF	; 255
    447a:	80 93 b1 0d 	sts	0x0DB1, r24	; 0x800db1 <xNumOfOverflows>
    447e:	31 de       	rcall	.-926    	; 0x40e2 <prvResetNextTaskUnblockTime>
    4480:	80 91 ae 0d 	lds	r24, 0x0DAE	; 0x800dae <xNextTaskUnblockTime>
    4484:	90 91 af 0d 	lds	r25, 0x0DAF	; 0x800daf <xNextTaskUnblockTime+0x1>
    4488:	e8 16       	cp	r14, r24
    448a:	f9 06       	cpc	r15, r25
    448c:	10 f4       	brcc	.+4      	; 0x4492 <xTaskIncrementTick+0x72>
    448e:	d1 2c       	mov	r13, r1
    4490:	50 c0       	rjmp	.+160    	; 0x4532 <xTaskIncrementTick+0x112>
    4492:	d1 2c       	mov	r13, r1
    4494:	cc 24       	eor	r12, r12
    4496:	c3 94       	inc	r12
    4498:	e0 91 d7 0d 	lds	r30, 0x0DD7	; 0x800dd7 <pxDelayedTaskList>
    449c:	f0 91 d8 0d 	lds	r31, 0x0DD8	; 0x800dd8 <pxDelayedTaskList+0x1>
    44a0:	80 81       	ld	r24, Z
    44a2:	81 11       	cpse	r24, r1
    44a4:	07 c0       	rjmp	.+14     	; 0x44b4 <xTaskIncrementTick+0x94>
    44a6:	8f ef       	ldi	r24, 0xFF	; 255
    44a8:	9f ef       	ldi	r25, 0xFF	; 255
    44aa:	90 93 af 0d 	sts	0x0DAF, r25	; 0x800daf <xNextTaskUnblockTime+0x1>
    44ae:	80 93 ae 0d 	sts	0x0DAE, r24	; 0x800dae <xNextTaskUnblockTime>
    44b2:	3f c0       	rjmp	.+126    	; 0x4532 <xTaskIncrementTick+0x112>
    44b4:	e0 91 d7 0d 	lds	r30, 0x0DD7	; 0x800dd7 <pxDelayedTaskList>
    44b8:	f0 91 d8 0d 	lds	r31, 0x0DD8	; 0x800dd8 <pxDelayedTaskList+0x1>
    44bc:	05 80       	ldd	r0, Z+5	; 0x05
    44be:	f6 81       	ldd	r31, Z+6	; 0x06
    44c0:	e0 2d       	mov	r30, r0
    44c2:	c6 81       	ldd	r28, Z+6	; 0x06
    44c4:	d7 81       	ldd	r29, Z+7	; 0x07
    44c6:	8a 81       	ldd	r24, Y+2	; 0x02
    44c8:	9b 81       	ldd	r25, Y+3	; 0x03
    44ca:	e8 16       	cp	r14, r24
    44cc:	f9 06       	cpc	r15, r25
    44ce:	28 f4       	brcc	.+10     	; 0x44da <xTaskIncrementTick+0xba>
    44d0:	90 93 af 0d 	sts	0x0DAF, r25	; 0x800daf <xNextTaskUnblockTime+0x1>
    44d4:	80 93 ae 0d 	sts	0x0DAE, r24	; 0x800dae <xNextTaskUnblockTime>
    44d8:	2c c0       	rjmp	.+88     	; 0x4532 <xTaskIncrementTick+0x112>
    44da:	8e 01       	movw	r16, r28
    44dc:	0e 5f       	subi	r16, 0xFE	; 254
    44de:	1f 4f       	sbci	r17, 0xFF	; 255
    44e0:	c8 01       	movw	r24, r16
    44e2:	fc d9       	rcall	.-3080   	; 0x38dc <uxListRemove>
    44e4:	8c 89       	ldd	r24, Y+20	; 0x14
    44e6:	9d 89       	ldd	r25, Y+21	; 0x15
    44e8:	89 2b       	or	r24, r25
    44ea:	19 f0       	breq	.+6      	; 0x44f2 <xTaskIncrementTick+0xd2>
    44ec:	ce 01       	movw	r24, r28
    44ee:	0c 96       	adiw	r24, 0x0c	; 12
    44f0:	f5 d9       	rcall	.-3094   	; 0x38dc <uxListRemove>
    44f2:	8e 89       	ldd	r24, Y+22	; 0x16
    44f4:	90 91 b5 0d 	lds	r25, 0x0DB5	; 0x800db5 <uxTopReadyPriority>
    44f8:	98 17       	cp	r25, r24
    44fa:	10 f4       	brcc	.+4      	; 0x4500 <xTaskIncrementTick+0xe0>
    44fc:	80 93 b5 0d 	sts	0x0DB5, r24	; 0x800db5 <uxTopReadyPriority>
    4500:	90 e0       	ldi	r25, 0x00	; 0
    4502:	9c 01       	movw	r18, r24
    4504:	22 0f       	add	r18, r18
    4506:	33 1f       	adc	r19, r19
    4508:	22 0f       	add	r18, r18
    450a:	33 1f       	adc	r19, r19
    450c:	22 0f       	add	r18, r18
    450e:	33 1f       	adc	r19, r19
    4510:	82 0f       	add	r24, r18
    4512:	93 1f       	adc	r25, r19
    4514:	b8 01       	movw	r22, r16
    4516:	85 51       	subi	r24, 0x15	; 21
    4518:	92 4f       	sbci	r25, 0xF2	; 242
    451a:	8e d9       	rcall	.-3300   	; 0x3838 <vListInsertEnd>
    451c:	e0 91 0f 0e 	lds	r30, 0x0E0F	; 0x800e0f <pxCurrentTCB>
    4520:	f0 91 10 0e 	lds	r31, 0x0E10	; 0x800e10 <pxCurrentTCB+0x1>
    4524:	9e 89       	ldd	r25, Y+22	; 0x16
    4526:	86 89       	ldd	r24, Z+22	; 0x16
    4528:	98 17       	cp	r25, r24
    452a:	08 f4       	brcc	.+2      	; 0x452e <xTaskIncrementTick+0x10e>
    452c:	b5 cf       	rjmp	.-150    	; 0x4498 <xTaskIncrementTick+0x78>
    452e:	dc 2c       	mov	r13, r12
    4530:	b3 cf       	rjmp	.-154    	; 0x4498 <xTaskIncrementTick+0x78>
    4532:	e0 91 0f 0e 	lds	r30, 0x0E0F	; 0x800e0f <pxCurrentTCB>
    4536:	f0 91 10 0e 	lds	r31, 0x0E10	; 0x800e10 <pxCurrentTCB+0x1>
    453a:	86 89       	ldd	r24, Z+22	; 0x16
    453c:	90 e0       	ldi	r25, 0x00	; 0
    453e:	fc 01       	movw	r30, r24
    4540:	ee 0f       	add	r30, r30
    4542:	ff 1f       	adc	r31, r31
    4544:	ee 0f       	add	r30, r30
    4546:	ff 1f       	adc	r31, r31
    4548:	ee 0f       	add	r30, r30
    454a:	ff 1f       	adc	r31, r31
    454c:	8e 0f       	add	r24, r30
    454e:	9f 1f       	adc	r25, r31
    4550:	fc 01       	movw	r30, r24
    4552:	e5 51       	subi	r30, 0x15	; 21
    4554:	f2 4f       	sbci	r31, 0xF2	; 242
    4556:	80 81       	ld	r24, Z
    4558:	82 30       	cpi	r24, 0x02	; 2
    455a:	48 f0       	brcs	.+18     	; 0x456e <xTaskIncrementTick+0x14e>
    455c:	dd 24       	eor	r13, r13
    455e:	d3 94       	inc	r13
    4560:	06 c0       	rjmp	.+12     	; 0x456e <xTaskIncrementTick+0x14e>
    4562:	80 91 b3 0d 	lds	r24, 0x0DB3	; 0x800db3 <uxPendedTicks>
    4566:	8f 5f       	subi	r24, 0xFF	; 255
    4568:	80 93 b3 0d 	sts	0x0DB3, r24	; 0x800db3 <uxPendedTicks>
    456c:	d1 2c       	mov	r13, r1
    456e:	80 91 b2 0d 	lds	r24, 0x0DB2	; 0x800db2 <xYieldPending>
    4572:	88 23       	and	r24, r24
    4574:	11 f0       	breq	.+4      	; 0x457a <xTaskIncrementTick+0x15a>
    4576:	dd 24       	eor	r13, r13
    4578:	d3 94       	inc	r13
    457a:	8d 2d       	mov	r24, r13
    457c:	df 91       	pop	r29
    457e:	cf 91       	pop	r28
    4580:	1f 91       	pop	r17
    4582:	0f 91       	pop	r16
    4584:	ff 90       	pop	r15
    4586:	ef 90       	pop	r14
    4588:	df 90       	pop	r13
    458a:	cf 90       	pop	r12
    458c:	08 95       	ret

0000458e <xTaskResumeAll>:
    458e:	df 92       	push	r13
    4590:	ef 92       	push	r14
    4592:	ff 92       	push	r15
    4594:	0f 93       	push	r16
    4596:	1f 93       	push	r17
    4598:	cf 93       	push	r28
    459a:	df 93       	push	r29
    459c:	0f b6       	in	r0, 0x3f	; 63
    459e:	f8 94       	cli
    45a0:	0f 92       	push	r0
    45a2:	80 91 ab 0d 	lds	r24, 0x0DAB	; 0x800dab <uxSchedulerSuspended>
    45a6:	81 50       	subi	r24, 0x01	; 1
    45a8:	80 93 ab 0d 	sts	0x0DAB, r24	; 0x800dab <uxSchedulerSuspended>
    45ac:	80 91 ab 0d 	lds	r24, 0x0DAB	; 0x800dab <uxSchedulerSuspended>
    45b0:	81 11       	cpse	r24, r1
    45b2:	59 c0       	rjmp	.+178    	; 0x4666 <xTaskResumeAll+0xd8>
    45b4:	80 91 b8 0d 	lds	r24, 0x0DB8	; 0x800db8 <uxCurrentNumberOfTasks>
    45b8:	81 11       	cpse	r24, r1
    45ba:	30 c0       	rjmp	.+96     	; 0x461c <xTaskResumeAll+0x8e>
    45bc:	57 c0       	rjmp	.+174    	; 0x466c <xTaskResumeAll+0xde>
    45be:	d7 01       	movw	r26, r14
    45c0:	15 96       	adiw	r26, 0x05	; 5
    45c2:	ed 91       	ld	r30, X+
    45c4:	fc 91       	ld	r31, X
    45c6:	16 97       	sbiw	r26, 0x06	; 6
    45c8:	c6 81       	ldd	r28, Z+6	; 0x06
    45ca:	d7 81       	ldd	r29, Z+7	; 0x07
    45cc:	ce 01       	movw	r24, r28
    45ce:	0c 96       	adiw	r24, 0x0c	; 12
    45d0:	85 d9       	rcall	.-3318   	; 0x38dc <uxListRemove>
    45d2:	8e 01       	movw	r16, r28
    45d4:	0e 5f       	subi	r16, 0xFE	; 254
    45d6:	1f 4f       	sbci	r17, 0xFF	; 255
    45d8:	c8 01       	movw	r24, r16
    45da:	80 d9       	rcall	.-3328   	; 0x38dc <uxListRemove>
    45dc:	8e 89       	ldd	r24, Y+22	; 0x16
    45de:	90 91 b5 0d 	lds	r25, 0x0DB5	; 0x800db5 <uxTopReadyPriority>
    45e2:	98 17       	cp	r25, r24
    45e4:	10 f4       	brcc	.+4      	; 0x45ea <xTaskResumeAll+0x5c>
    45e6:	80 93 b5 0d 	sts	0x0DB5, r24	; 0x800db5 <uxTopReadyPriority>
    45ea:	90 e0       	ldi	r25, 0x00	; 0
    45ec:	9c 01       	movw	r18, r24
    45ee:	22 0f       	add	r18, r18
    45f0:	33 1f       	adc	r19, r19
    45f2:	22 0f       	add	r18, r18
    45f4:	33 1f       	adc	r19, r19
    45f6:	22 0f       	add	r18, r18
    45f8:	33 1f       	adc	r19, r19
    45fa:	82 0f       	add	r24, r18
    45fc:	93 1f       	adc	r25, r19
    45fe:	b8 01       	movw	r22, r16
    4600:	85 51       	subi	r24, 0x15	; 21
    4602:	92 4f       	sbci	r25, 0xF2	; 242
    4604:	19 d9       	rcall	.-3534   	; 0x3838 <vListInsertEnd>
    4606:	e0 91 0f 0e 	lds	r30, 0x0E0F	; 0x800e0f <pxCurrentTCB>
    460a:	f0 91 10 0e 	lds	r31, 0x0E10	; 0x800e10 <pxCurrentTCB+0x1>
    460e:	9e 89       	ldd	r25, Y+22	; 0x16
    4610:	86 89       	ldd	r24, Z+22	; 0x16
    4612:	98 17       	cp	r25, r24
    4614:	68 f0       	brcs	.+26     	; 0x4630 <xTaskResumeAll+0xa2>
    4616:	d0 92 b2 0d 	sts	0x0DB2, r13	; 0x800db2 <xYieldPending>
    461a:	0a c0       	rjmp	.+20     	; 0x4630 <xTaskResumeAll+0xa2>
    461c:	c0 e0       	ldi	r28, 0x00	; 0
    461e:	d0 e0       	ldi	r29, 0x00	; 0
    4620:	0f 2e       	mov	r0, r31
    4622:	fc ec       	ldi	r31, 0xCC	; 204
    4624:	ef 2e       	mov	r14, r31
    4626:	fd e0       	ldi	r31, 0x0D	; 13
    4628:	ff 2e       	mov	r15, r31
    462a:	f0 2d       	mov	r31, r0
    462c:	dd 24       	eor	r13, r13
    462e:	d3 94       	inc	r13
    4630:	f7 01       	movw	r30, r14
    4632:	80 81       	ld	r24, Z
    4634:	81 11       	cpse	r24, r1
    4636:	c3 cf       	rjmp	.-122    	; 0x45be <xTaskResumeAll+0x30>
    4638:	cd 2b       	or	r28, r29
    463a:	09 f0       	breq	.+2      	; 0x463e <xTaskResumeAll+0xb0>
    463c:	52 dd       	rcall	.-1372   	; 0x40e2 <prvResetNextTaskUnblockTime>
    463e:	c0 91 b3 0d 	lds	r28, 0x0DB3	; 0x800db3 <uxPendedTicks>
    4642:	cc 23       	and	r28, r28
    4644:	49 f0       	breq	.+18     	; 0x4658 <xTaskResumeAll+0xca>
    4646:	d1 e0       	ldi	r29, 0x01	; 1
    4648:	eb de       	rcall	.-554    	; 0x4420 <xTaskIncrementTick>
    464a:	81 11       	cpse	r24, r1
    464c:	d0 93 b2 0d 	sts	0x0DB2, r29	; 0x800db2 <xYieldPending>
    4650:	c1 50       	subi	r28, 0x01	; 1
    4652:	d1 f7       	brne	.-12     	; 0x4648 <xTaskResumeAll+0xba>
    4654:	10 92 b3 0d 	sts	0x0DB3, r1	; 0x800db3 <uxPendedTicks>
    4658:	80 91 b2 0d 	lds	r24, 0x0DB2	; 0x800db2 <xYieldPending>
    465c:	88 23       	and	r24, r24
    465e:	29 f0       	breq	.+10     	; 0x466a <xTaskResumeAll+0xdc>
    4660:	04 da       	rcall	.-3064   	; 0x3a6a <vPortYield>
    4662:	81 e0       	ldi	r24, 0x01	; 1
    4664:	03 c0       	rjmp	.+6      	; 0x466c <xTaskResumeAll+0xde>
    4666:	80 e0       	ldi	r24, 0x00	; 0
    4668:	01 c0       	rjmp	.+2      	; 0x466c <xTaskResumeAll+0xde>
    466a:	80 e0       	ldi	r24, 0x00	; 0
    466c:	0f 90       	pop	r0
    466e:	0f be       	out	0x3f, r0	; 63
    4670:	df 91       	pop	r29
    4672:	cf 91       	pop	r28
    4674:	1f 91       	pop	r17
    4676:	0f 91       	pop	r16
    4678:	ff 90       	pop	r15
    467a:	ef 90       	pop	r14
    467c:	df 90       	pop	r13
    467e:	08 95       	ret

00004680 <vTaskDelay>:
    4680:	cf 93       	push	r28
    4682:	df 93       	push	r29
    4684:	ec 01       	movw	r28, r24
    4686:	89 2b       	or	r24, r25
    4688:	39 f0       	breq	.+14     	; 0x4698 <vTaskDelay+0x18>
    468a:	c4 de       	rcall	.-632    	; 0x4414 <vTaskSuspendAll>
    468c:	60 e0       	ldi	r22, 0x00	; 0
    468e:	ce 01       	movw	r24, r28
    4690:	47 dd       	rcall	.-1394   	; 0x4120 <prvAddCurrentTaskToDelayedList>
    4692:	7d df       	rcall	.-262    	; 0x458e <xTaskResumeAll>
    4694:	81 11       	cpse	r24, r1
    4696:	01 c0       	rjmp	.+2      	; 0x469a <vTaskDelay+0x1a>
    4698:	e8 d9       	rcall	.-3120   	; 0x3a6a <vPortYield>
    469a:	df 91       	pop	r29
    469c:	cf 91       	pop	r28
    469e:	08 95       	ret

000046a0 <prvIdleTask>:
    46a0:	03 ec       	ldi	r16, 0xC3	; 195
    46a2:	1d e0       	ldi	r17, 0x0D	; 13
    46a4:	0f 2e       	mov	r0, r31
    46a6:	fb ee       	ldi	r31, 0xEB	; 235
    46a8:	ef 2e       	mov	r14, r31
    46aa:	fd e0       	ldi	r31, 0x0D	; 13
    46ac:	ff 2e       	mov	r15, r31
    46ae:	f0 2d       	mov	r31, r0
    46b0:	24 c0       	rjmp	.+72     	; 0x46fa <prvIdleTask+0x5a>
    46b2:	b0 de       	rcall	.-672    	; 0x4414 <vTaskSuspendAll>
    46b4:	d8 01       	movw	r26, r16
    46b6:	cc 91       	ld	r28, X
    46b8:	6a df       	rcall	.-300    	; 0x458e <xTaskResumeAll>
    46ba:	cc 23       	and	r28, r28
    46bc:	f1 f0       	breq	.+60     	; 0x46fa <prvIdleTask+0x5a>
    46be:	0f b6       	in	r0, 0x3f	; 63
    46c0:	f8 94       	cli
    46c2:	0f 92       	push	r0
    46c4:	d8 01       	movw	r26, r16
    46c6:	15 96       	adiw	r26, 0x05	; 5
    46c8:	ed 91       	ld	r30, X+
    46ca:	fc 91       	ld	r31, X
    46cc:	16 97       	sbiw	r26, 0x06	; 6
    46ce:	c6 81       	ldd	r28, Z+6	; 0x06
    46d0:	d7 81       	ldd	r29, Z+7	; 0x07
    46d2:	ce 01       	movw	r24, r28
    46d4:	02 96       	adiw	r24, 0x02	; 2
    46d6:	02 d9       	rcall	.-3580   	; 0x38dc <uxListRemove>
    46d8:	80 91 b8 0d 	lds	r24, 0x0DB8	; 0x800db8 <uxCurrentNumberOfTasks>
    46dc:	81 50       	subi	r24, 0x01	; 1
    46de:	80 93 b8 0d 	sts	0x0DB8, r24	; 0x800db8 <uxCurrentNumberOfTasks>
    46e2:	80 91 c2 0d 	lds	r24, 0x0DC2	; 0x800dc2 <uxDeletedTasksWaitingCleanUp>
    46e6:	81 50       	subi	r24, 0x01	; 1
    46e8:	80 93 c2 0d 	sts	0x0DC2, r24	; 0x800dc2 <uxDeletedTasksWaitingCleanUp>
    46ec:	0f 90       	pop	r0
    46ee:	0f be       	out	0x3f, r0	; 63
    46f0:	8f 89       	ldd	r24, Y+23	; 0x17
    46f2:	98 8d       	ldd	r25, Y+24	; 0x18
    46f4:	8e d8       	rcall	.-3812   	; 0x3812 <vPortFree>
    46f6:	ce 01       	movw	r24, r28
    46f8:	8c d8       	rcall	.-3816   	; 0x3812 <vPortFree>
    46fa:	80 91 c2 0d 	lds	r24, 0x0DC2	; 0x800dc2 <uxDeletedTasksWaitingCleanUp>
    46fe:	81 11       	cpse	r24, r1
    4700:	d8 cf       	rjmp	.-80     	; 0x46b2 <prvIdleTask+0x12>
    4702:	f7 01       	movw	r30, r14
    4704:	80 81       	ld	r24, Z
    4706:	82 30       	cpi	r24, 0x02	; 2
    4708:	c0 f3       	brcs	.-16     	; 0x46fa <prvIdleTask+0x5a>
    470a:	af d9       	rcall	.-3234   	; 0x3a6a <vPortYield>
    470c:	f6 cf       	rjmp	.-20     	; 0x46fa <prvIdleTask+0x5a>

0000470e <vTaskSwitchContext>:
    470e:	80 91 ab 0d 	lds	r24, 0x0DAB	; 0x800dab <uxSchedulerSuspended>
    4712:	88 23       	and	r24, r24
    4714:	21 f0       	breq	.+8      	; 0x471e <vTaskSwitchContext+0x10>
    4716:	81 e0       	ldi	r24, 0x01	; 1
    4718:	80 93 b2 0d 	sts	0x0DB2, r24	; 0x800db2 <xYieldPending>
    471c:	08 95       	ret
    471e:	10 92 b2 0d 	sts	0x0DB2, r1	; 0x800db2 <xYieldPending>
    4722:	a0 91 0f 0e 	lds	r26, 0x0E0F	; 0x800e0f <pxCurrentTCB>
    4726:	b0 91 10 0e 	lds	r27, 0x0E10	; 0x800e10 <pxCurrentTCB+0x1>
    472a:	e0 91 0f 0e 	lds	r30, 0x0E0F	; 0x800e0f <pxCurrentTCB>
    472e:	f0 91 10 0e 	lds	r31, 0x0E10	; 0x800e10 <pxCurrentTCB+0x1>
    4732:	2d 91       	ld	r18, X+
    4734:	3c 91       	ld	r19, X
    4736:	87 89       	ldd	r24, Z+23	; 0x17
    4738:	90 8d       	ldd	r25, Z+24	; 0x18
    473a:	82 17       	cp	r24, r18
    473c:	93 07       	cpc	r25, r19
    473e:	58 f0       	brcs	.+22     	; 0x4756 <vTaskSwitchContext+0x48>
    4740:	60 91 0f 0e 	lds	r22, 0x0E0F	; 0x800e0f <pxCurrentTCB>
    4744:	70 91 10 0e 	lds	r23, 0x0E10	; 0x800e10 <pxCurrentTCB+0x1>
    4748:	80 91 0f 0e 	lds	r24, 0x0E0F	; 0x800e0f <pxCurrentTCB>
    474c:	90 91 10 0e 	lds	r25, 0x0E10	; 0x800e10 <pxCurrentTCB+0x1>
    4750:	67 5e       	subi	r22, 0xE7	; 231
    4752:	7f 4f       	sbci	r23, 0xFF	; 255
    4754:	2a d8       	rcall	.-4012   	; 0x37aa <vApplicationStackOverflowHook>
    4756:	20 91 b5 0d 	lds	r18, 0x0DB5	; 0x800db5 <uxTopReadyPriority>
    475a:	82 2f       	mov	r24, r18
    475c:	90 e0       	ldi	r25, 0x00	; 0
    475e:	fc 01       	movw	r30, r24
    4760:	ee 0f       	add	r30, r30
    4762:	ff 1f       	adc	r31, r31
    4764:	ee 0f       	add	r30, r30
    4766:	ff 1f       	adc	r31, r31
    4768:	ee 0f       	add	r30, r30
    476a:	ff 1f       	adc	r31, r31
    476c:	e8 0f       	add	r30, r24
    476e:	f9 1f       	adc	r31, r25
    4770:	e5 51       	subi	r30, 0x15	; 21
    4772:	f2 4f       	sbci	r31, 0xF2	; 242
    4774:	30 81       	ld	r19, Z
    4776:	31 11       	cpse	r19, r1
    4778:	11 c0       	rjmp	.+34     	; 0x479c <vTaskSwitchContext+0x8e>
    477a:	21 50       	subi	r18, 0x01	; 1
    477c:	82 2f       	mov	r24, r18
    477e:	90 e0       	ldi	r25, 0x00	; 0
    4780:	fc 01       	movw	r30, r24
    4782:	ee 0f       	add	r30, r30
    4784:	ff 1f       	adc	r31, r31
    4786:	ee 0f       	add	r30, r30
    4788:	ff 1f       	adc	r31, r31
    478a:	ee 0f       	add	r30, r30
    478c:	ff 1f       	adc	r31, r31
    478e:	e8 0f       	add	r30, r24
    4790:	f9 1f       	adc	r31, r25
    4792:	e5 51       	subi	r30, 0x15	; 21
    4794:	f2 4f       	sbci	r31, 0xF2	; 242
    4796:	30 81       	ld	r19, Z
    4798:	33 23       	and	r19, r19
    479a:	79 f3       	breq	.-34     	; 0x477a <vTaskSwitchContext+0x6c>
    479c:	ac 01       	movw	r20, r24
    479e:	44 0f       	add	r20, r20
    47a0:	55 1f       	adc	r21, r21
    47a2:	44 0f       	add	r20, r20
    47a4:	55 1f       	adc	r21, r21
    47a6:	44 0f       	add	r20, r20
    47a8:	55 1f       	adc	r21, r21
    47aa:	48 0f       	add	r20, r24
    47ac:	59 1f       	adc	r21, r25
    47ae:	da 01       	movw	r26, r20
    47b0:	a5 51       	subi	r26, 0x15	; 21
    47b2:	b2 4f       	sbci	r27, 0xF2	; 242
    47b4:	11 96       	adiw	r26, 0x01	; 1
    47b6:	ed 91       	ld	r30, X+
    47b8:	fc 91       	ld	r31, X
    47ba:	12 97       	sbiw	r26, 0x02	; 2
    47bc:	02 80       	ldd	r0, Z+2	; 0x02
    47be:	f3 81       	ldd	r31, Z+3	; 0x03
    47c0:	e0 2d       	mov	r30, r0
    47c2:	12 96       	adiw	r26, 0x02	; 2
    47c4:	fc 93       	st	X, r31
    47c6:	ee 93       	st	-X, r30
    47c8:	11 97       	sbiw	r26, 0x01	; 1
    47ca:	42 51       	subi	r20, 0x12	; 18
    47cc:	52 4f       	sbci	r21, 0xF2	; 242
    47ce:	e4 17       	cp	r30, r20
    47d0:	f5 07       	cpc	r31, r21
    47d2:	29 f4       	brne	.+10     	; 0x47de <vTaskSwitchContext+0xd0>
    47d4:	42 81       	ldd	r20, Z+2	; 0x02
    47d6:	53 81       	ldd	r21, Z+3	; 0x03
    47d8:	fd 01       	movw	r30, r26
    47da:	52 83       	std	Z+2, r21	; 0x02
    47dc:	41 83       	std	Z+1, r20	; 0x01
    47de:	fc 01       	movw	r30, r24
    47e0:	ee 0f       	add	r30, r30
    47e2:	ff 1f       	adc	r31, r31
    47e4:	ee 0f       	add	r30, r30
    47e6:	ff 1f       	adc	r31, r31
    47e8:	ee 0f       	add	r30, r30
    47ea:	ff 1f       	adc	r31, r31
    47ec:	8e 0f       	add	r24, r30
    47ee:	9f 1f       	adc	r25, r31
    47f0:	fc 01       	movw	r30, r24
    47f2:	e5 51       	subi	r30, 0x15	; 21
    47f4:	f2 4f       	sbci	r31, 0xF2	; 242
    47f6:	01 80       	ldd	r0, Z+1	; 0x01
    47f8:	f2 81       	ldd	r31, Z+2	; 0x02
    47fa:	e0 2d       	mov	r30, r0
    47fc:	86 81       	ldd	r24, Z+6	; 0x06
    47fe:	97 81       	ldd	r25, Z+7	; 0x07
    4800:	90 93 10 0e 	sts	0x0E10, r25	; 0x800e10 <pxCurrentTCB+0x1>
    4804:	80 93 0f 0e 	sts	0x0E0F, r24	; 0x800e0f <pxCurrentTCB>
    4808:	20 93 b5 0d 	sts	0x0DB5, r18	; 0x800db5 <uxTopReadyPriority>
    480c:	08 95       	ret

0000480e <vTaskPlaceOnEventList>:
    480e:	cf 93       	push	r28
    4810:	df 93       	push	r29
    4812:	eb 01       	movw	r28, r22
    4814:	60 91 0f 0e 	lds	r22, 0x0E0F	; 0x800e0f <pxCurrentTCB>
    4818:	70 91 10 0e 	lds	r23, 0x0E10	; 0x800e10 <pxCurrentTCB+0x1>
    481c:	64 5f       	subi	r22, 0xF4	; 244
    481e:	7f 4f       	sbci	r23, 0xFF	; 255
    4820:	2c d8       	rcall	.-4008   	; 0x387a <vListInsert>
    4822:	61 e0       	ldi	r22, 0x01	; 1
    4824:	ce 01       	movw	r24, r28
    4826:	7c dc       	rcall	.-1800   	; 0x4120 <prvAddCurrentTaskToDelayedList>
    4828:	df 91       	pop	r29
    482a:	cf 91       	pop	r28
    482c:	08 95       	ret

0000482e <xTaskRemoveFromEventList>:
    482e:	0f 93       	push	r16
    4830:	1f 93       	push	r17
    4832:	cf 93       	push	r28
    4834:	df 93       	push	r29
    4836:	dc 01       	movw	r26, r24
    4838:	15 96       	adiw	r26, 0x05	; 5
    483a:	ed 91       	ld	r30, X+
    483c:	fc 91       	ld	r31, X
    483e:	16 97       	sbiw	r26, 0x06	; 6
    4840:	c6 81       	ldd	r28, Z+6	; 0x06
    4842:	d7 81       	ldd	r29, Z+7	; 0x07
    4844:	8e 01       	movw	r16, r28
    4846:	04 5f       	subi	r16, 0xF4	; 244
    4848:	1f 4f       	sbci	r17, 0xFF	; 255
    484a:	c8 01       	movw	r24, r16
    484c:	47 d8       	rcall	.-3954   	; 0x38dc <uxListRemove>
    484e:	80 91 ab 0d 	lds	r24, 0x0DAB	; 0x800dab <uxSchedulerSuspended>
    4852:	81 11       	cpse	r24, r1
    4854:	1b c0       	rjmp	.+54     	; 0x488c <xTaskRemoveFromEventList+0x5e>
    4856:	0a 50       	subi	r16, 0x0A	; 10
    4858:	11 09       	sbc	r17, r1
    485a:	c8 01       	movw	r24, r16
    485c:	3f d8       	rcall	.-3970   	; 0x38dc <uxListRemove>
    485e:	8e 89       	ldd	r24, Y+22	; 0x16
    4860:	90 91 b5 0d 	lds	r25, 0x0DB5	; 0x800db5 <uxTopReadyPriority>
    4864:	98 17       	cp	r25, r24
    4866:	10 f4       	brcc	.+4      	; 0x486c <xTaskRemoveFromEventList+0x3e>
    4868:	80 93 b5 0d 	sts	0x0DB5, r24	; 0x800db5 <uxTopReadyPriority>
    486c:	90 e0       	ldi	r25, 0x00	; 0
    486e:	9c 01       	movw	r18, r24
    4870:	22 0f       	add	r18, r18
    4872:	33 1f       	adc	r19, r19
    4874:	22 0f       	add	r18, r18
    4876:	33 1f       	adc	r19, r19
    4878:	22 0f       	add	r18, r18
    487a:	33 1f       	adc	r19, r19
    487c:	82 0f       	add	r24, r18
    487e:	93 1f       	adc	r25, r19
    4880:	b8 01       	movw	r22, r16
    4882:	85 51       	subi	r24, 0x15	; 21
    4884:	92 4f       	sbci	r25, 0xF2	; 242
    4886:	0e 94 1c 1c 	call	0x3838	; 0x3838 <vListInsertEnd>
    488a:	05 c0       	rjmp	.+10     	; 0x4896 <xTaskRemoveFromEventList+0x68>
    488c:	b8 01       	movw	r22, r16
    488e:	8c ec       	ldi	r24, 0xCC	; 204
    4890:	9d e0       	ldi	r25, 0x0D	; 13
    4892:	0e 94 1c 1c 	call	0x3838	; 0x3838 <vListInsertEnd>
    4896:	e0 91 0f 0e 	lds	r30, 0x0E0F	; 0x800e0f <pxCurrentTCB>
    489a:	f0 91 10 0e 	lds	r31, 0x0E10	; 0x800e10 <pxCurrentTCB+0x1>
    489e:	9e 89       	ldd	r25, Y+22	; 0x16
    48a0:	86 89       	ldd	r24, Z+22	; 0x16
    48a2:	89 17       	cp	r24, r25
    48a4:	20 f4       	brcc	.+8      	; 0x48ae <xTaskRemoveFromEventList+0x80>
    48a6:	81 e0       	ldi	r24, 0x01	; 1
    48a8:	80 93 b2 0d 	sts	0x0DB2, r24	; 0x800db2 <xYieldPending>
    48ac:	01 c0       	rjmp	.+2      	; 0x48b0 <xTaskRemoveFromEventList+0x82>
    48ae:	80 e0       	ldi	r24, 0x00	; 0
    48b0:	df 91       	pop	r29
    48b2:	cf 91       	pop	r28
    48b4:	1f 91       	pop	r17
    48b6:	0f 91       	pop	r16
    48b8:	08 95       	ret

000048ba <vTaskSetTimeOutState>:
    48ba:	20 91 b1 0d 	lds	r18, 0x0DB1	; 0x800db1 <xNumOfOverflows>
    48be:	fc 01       	movw	r30, r24
    48c0:	20 83       	st	Z, r18
    48c2:	20 91 b6 0d 	lds	r18, 0x0DB6	; 0x800db6 <xTickCount>
    48c6:	30 91 b7 0d 	lds	r19, 0x0DB7	; 0x800db7 <xTickCount+0x1>
    48ca:	32 83       	std	Z+2, r19	; 0x02
    48cc:	21 83       	std	Z+1, r18	; 0x01
    48ce:	08 95       	ret

000048d0 <xTaskCheckForTimeOut>:
    48d0:	0f b6       	in	r0, 0x3f	; 63
    48d2:	f8 94       	cli
    48d4:	0f 92       	push	r0
    48d6:	40 91 b6 0d 	lds	r20, 0x0DB6	; 0x800db6 <xTickCount>
    48da:	50 91 b7 0d 	lds	r21, 0x0DB7	; 0x800db7 <xTickCount+0x1>
    48de:	db 01       	movw	r26, r22
    48e0:	2d 91       	ld	r18, X+
    48e2:	3c 91       	ld	r19, X
    48e4:	2f 3f       	cpi	r18, 0xFF	; 255
    48e6:	bf ef       	ldi	r27, 0xFF	; 255
    48e8:	3b 07       	cpc	r19, r27
    48ea:	11 f1       	breq	.+68     	; 0x4930 <xTaskCheckForTimeOut+0x60>
    48ec:	e0 91 b1 0d 	lds	r30, 0x0DB1	; 0x800db1 <xNumOfOverflows>
    48f0:	dc 01       	movw	r26, r24
    48f2:	fc 91       	ld	r31, X
    48f4:	fe 17       	cp	r31, r30
    48f6:	39 f0       	breq	.+14     	; 0x4906 <xTaskCheckForTimeOut+0x36>
    48f8:	11 96       	adiw	r26, 0x01	; 1
    48fa:	ed 91       	ld	r30, X+
    48fc:	fc 91       	ld	r31, X
    48fe:	12 97       	sbiw	r26, 0x02	; 2
    4900:	4e 17       	cp	r20, r30
    4902:	5f 07       	cpc	r21, r31
    4904:	b8 f4       	brcc	.+46     	; 0x4934 <xTaskCheckForTimeOut+0x64>
    4906:	dc 01       	movw	r26, r24
    4908:	11 96       	adiw	r26, 0x01	; 1
    490a:	ed 91       	ld	r30, X+
    490c:	fc 91       	ld	r31, X
    490e:	12 97       	sbiw	r26, 0x02	; 2
    4910:	da 01       	movw	r26, r20
    4912:	ae 1b       	sub	r26, r30
    4914:	bf 0b       	sbc	r27, r31
    4916:	a2 17       	cp	r26, r18
    4918:	b3 07       	cpc	r27, r19
    491a:	70 f4       	brcc	.+28     	; 0x4938 <xTaskCheckForTimeOut+0x68>
    491c:	db 01       	movw	r26, r22
    491e:	e4 1b       	sub	r30, r20
    4920:	f5 0b       	sbc	r31, r21
    4922:	2e 0f       	add	r18, r30
    4924:	3f 1f       	adc	r19, r31
    4926:	2d 93       	st	X+, r18
    4928:	3c 93       	st	X, r19
    492a:	c7 df       	rcall	.-114    	; 0x48ba <vTaskSetTimeOutState>
    492c:	80 e0       	ldi	r24, 0x00	; 0
    492e:	05 c0       	rjmp	.+10     	; 0x493a <xTaskCheckForTimeOut+0x6a>
    4930:	80 e0       	ldi	r24, 0x00	; 0
    4932:	03 c0       	rjmp	.+6      	; 0x493a <xTaskCheckForTimeOut+0x6a>
    4934:	81 e0       	ldi	r24, 0x01	; 1
    4936:	01 c0       	rjmp	.+2      	; 0x493a <xTaskCheckForTimeOut+0x6a>
    4938:	81 e0       	ldi	r24, 0x01	; 1
    493a:	0f 90       	pop	r0
    493c:	0f be       	out	0x3f, r0	; 63
    493e:	08 95       	ret

00004940 <vTaskMissedYield>:
    4940:	81 e0       	ldi	r24, 0x01	; 1
    4942:	80 93 b2 0d 	sts	0x0DB2, r24	; 0x800db2 <xYieldPending>
    4946:	08 95       	ret

00004948 <vTaskPriorityInherit>:
    4948:	0f 93       	push	r16
    494a:	1f 93       	push	r17
    494c:	cf 93       	push	r28
    494e:	df 93       	push	r29
    4950:	fc 01       	movw	r30, r24
    4952:	89 2b       	or	r24, r25
    4954:	09 f4       	brne	.+2      	; 0x4958 <vTaskPriorityInherit+0x10>
    4956:	55 c0       	rjmp	.+170    	; 0x4a02 <vTaskPriorityInherit+0xba>
    4958:	26 89       	ldd	r18, Z+22	; 0x16
    495a:	a0 91 0f 0e 	lds	r26, 0x0E0F	; 0x800e0f <pxCurrentTCB>
    495e:	b0 91 10 0e 	lds	r27, 0x0E10	; 0x800e10 <pxCurrentTCB+0x1>
    4962:	56 96       	adiw	r26, 0x16	; 22
    4964:	8c 91       	ld	r24, X
    4966:	28 17       	cp	r18, r24
    4968:	08 f0       	brcs	.+2      	; 0x496c <vTaskPriorityInherit+0x24>
    496a:	4b c0       	rjmp	.+150    	; 0x4a02 <vTaskPriorityInherit+0xba>
    496c:	84 85       	ldd	r24, Z+12	; 0x0c
    496e:	95 85       	ldd	r25, Z+13	; 0x0d
    4970:	99 23       	and	r25, r25
    4972:	64 f0       	brlt	.+24     	; 0x498c <vTaskPriorityInherit+0x44>
    4974:	a0 91 0f 0e 	lds	r26, 0x0E0F	; 0x800e0f <pxCurrentTCB>
    4978:	b0 91 10 0e 	lds	r27, 0x0E10	; 0x800e10 <pxCurrentTCB+0x1>
    497c:	56 96       	adiw	r26, 0x16	; 22
    497e:	3c 91       	ld	r19, X
    4980:	84 e0       	ldi	r24, 0x04	; 4
    4982:	90 e0       	ldi	r25, 0x00	; 0
    4984:	83 1b       	sub	r24, r19
    4986:	91 09       	sbc	r25, r1
    4988:	95 87       	std	Z+13, r25	; 0x0d
    498a:	84 87       	std	Z+12, r24	; 0x0c
    498c:	30 e0       	ldi	r19, 0x00	; 0
    498e:	c9 01       	movw	r24, r18
    4990:	88 0f       	add	r24, r24
    4992:	99 1f       	adc	r25, r25
    4994:	88 0f       	add	r24, r24
    4996:	99 1f       	adc	r25, r25
    4998:	88 0f       	add	r24, r24
    499a:	99 1f       	adc	r25, r25
    499c:	28 0f       	add	r18, r24
    499e:	39 1f       	adc	r19, r25
    49a0:	25 51       	subi	r18, 0x15	; 21
    49a2:	32 4f       	sbci	r19, 0xF2	; 242
    49a4:	82 85       	ldd	r24, Z+10	; 0x0a
    49a6:	93 85       	ldd	r25, Z+11	; 0x0b
    49a8:	82 17       	cp	r24, r18
    49aa:	93 07       	cpc	r25, r19
    49ac:	19 f5       	brne	.+70     	; 0x49f4 <vTaskPriorityInherit+0xac>
    49ae:	8f 01       	movw	r16, r30
    49b0:	ef 01       	movw	r28, r30
    49b2:	22 96       	adiw	r28, 0x02	; 2
    49b4:	ce 01       	movw	r24, r28
    49b6:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <uxListRemove>
    49ba:	e0 91 0f 0e 	lds	r30, 0x0E0F	; 0x800e0f <pxCurrentTCB>
    49be:	f0 91 10 0e 	lds	r31, 0x0E10	; 0x800e10 <pxCurrentTCB+0x1>
    49c2:	86 89       	ldd	r24, Z+22	; 0x16
    49c4:	f8 01       	movw	r30, r16
    49c6:	86 8b       	std	Z+22, r24	; 0x16
    49c8:	90 91 b5 0d 	lds	r25, 0x0DB5	; 0x800db5 <uxTopReadyPriority>
    49cc:	98 17       	cp	r25, r24
    49ce:	10 f4       	brcc	.+4      	; 0x49d4 <vTaskPriorityInherit+0x8c>
    49d0:	80 93 b5 0d 	sts	0x0DB5, r24	; 0x800db5 <uxTopReadyPriority>
    49d4:	90 e0       	ldi	r25, 0x00	; 0
    49d6:	9c 01       	movw	r18, r24
    49d8:	22 0f       	add	r18, r18
    49da:	33 1f       	adc	r19, r19
    49dc:	22 0f       	add	r18, r18
    49de:	33 1f       	adc	r19, r19
    49e0:	22 0f       	add	r18, r18
    49e2:	33 1f       	adc	r19, r19
    49e4:	82 0f       	add	r24, r18
    49e6:	93 1f       	adc	r25, r19
    49e8:	be 01       	movw	r22, r28
    49ea:	85 51       	subi	r24, 0x15	; 21
    49ec:	92 4f       	sbci	r25, 0xF2	; 242
    49ee:	0e 94 1c 1c 	call	0x3838	; 0x3838 <vListInsertEnd>
    49f2:	07 c0       	rjmp	.+14     	; 0x4a02 <vTaskPriorityInherit+0xba>
    49f4:	a0 91 0f 0e 	lds	r26, 0x0E0F	; 0x800e0f <pxCurrentTCB>
    49f8:	b0 91 10 0e 	lds	r27, 0x0E10	; 0x800e10 <pxCurrentTCB+0x1>
    49fc:	56 96       	adiw	r26, 0x16	; 22
    49fe:	8c 91       	ld	r24, X
    4a00:	86 8b       	std	Z+22, r24	; 0x16
    4a02:	df 91       	pop	r29
    4a04:	cf 91       	pop	r28
    4a06:	1f 91       	pop	r17
    4a08:	0f 91       	pop	r16
    4a0a:	08 95       	ret

00004a0c <xTaskPriorityDisinherit>:
    4a0c:	0f 93       	push	r16
    4a0e:	1f 93       	push	r17
    4a10:	cf 93       	push	r28
    4a12:	df 93       	push	r29
    4a14:	fc 01       	movw	r30, r24
    4a16:	89 2b       	or	r24, r25
    4a18:	79 f1       	breq	.+94     	; 0x4a78 <xTaskPriorityDisinherit+0x6c>
    4a1a:	82 a1       	ldd	r24, Z+34	; 0x22
    4a1c:	81 50       	subi	r24, 0x01	; 1
    4a1e:	82 a3       	std	Z+34, r24	; 0x22
    4a20:	26 89       	ldd	r18, Z+22	; 0x16
    4a22:	91 a1       	ldd	r25, Z+33	; 0x21
    4a24:	29 17       	cp	r18, r25
    4a26:	51 f1       	breq	.+84     	; 0x4a7c <xTaskPriorityDisinherit+0x70>
    4a28:	81 11       	cpse	r24, r1
    4a2a:	2a c0       	rjmp	.+84     	; 0x4a80 <xTaskPriorityDisinherit+0x74>
    4a2c:	ef 01       	movw	r28, r30
    4a2e:	8f 01       	movw	r16, r30
    4a30:	0e 5f       	subi	r16, 0xFE	; 254
    4a32:	1f 4f       	sbci	r17, 0xFF	; 255
    4a34:	c8 01       	movw	r24, r16
    4a36:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <uxListRemove>
    4a3a:	89 a1       	ldd	r24, Y+33	; 0x21
    4a3c:	8e 8b       	std	Y+22, r24	; 0x16
    4a3e:	24 e0       	ldi	r18, 0x04	; 4
    4a40:	30 e0       	ldi	r19, 0x00	; 0
    4a42:	28 1b       	sub	r18, r24
    4a44:	31 09       	sbc	r19, r1
    4a46:	3d 87       	std	Y+13, r19	; 0x0d
    4a48:	2c 87       	std	Y+12, r18	; 0x0c
    4a4a:	90 91 b5 0d 	lds	r25, 0x0DB5	; 0x800db5 <uxTopReadyPriority>
    4a4e:	98 17       	cp	r25, r24
    4a50:	10 f4       	brcc	.+4      	; 0x4a56 <xTaskPriorityDisinherit+0x4a>
    4a52:	80 93 b5 0d 	sts	0x0DB5, r24	; 0x800db5 <uxTopReadyPriority>
    4a56:	90 e0       	ldi	r25, 0x00	; 0
    4a58:	9c 01       	movw	r18, r24
    4a5a:	22 0f       	add	r18, r18
    4a5c:	33 1f       	adc	r19, r19
    4a5e:	22 0f       	add	r18, r18
    4a60:	33 1f       	adc	r19, r19
    4a62:	22 0f       	add	r18, r18
    4a64:	33 1f       	adc	r19, r19
    4a66:	82 0f       	add	r24, r18
    4a68:	93 1f       	adc	r25, r19
    4a6a:	b8 01       	movw	r22, r16
    4a6c:	85 51       	subi	r24, 0x15	; 21
    4a6e:	92 4f       	sbci	r25, 0xF2	; 242
    4a70:	0e 94 1c 1c 	call	0x3838	; 0x3838 <vListInsertEnd>
    4a74:	81 e0       	ldi	r24, 0x01	; 1
    4a76:	05 c0       	rjmp	.+10     	; 0x4a82 <xTaskPriorityDisinherit+0x76>
    4a78:	80 e0       	ldi	r24, 0x00	; 0
    4a7a:	03 c0       	rjmp	.+6      	; 0x4a82 <xTaskPriorityDisinherit+0x76>
    4a7c:	80 e0       	ldi	r24, 0x00	; 0
    4a7e:	01 c0       	rjmp	.+2      	; 0x4a82 <xTaskPriorityDisinherit+0x76>
    4a80:	80 e0       	ldi	r24, 0x00	; 0
    4a82:	df 91       	pop	r29
    4a84:	cf 91       	pop	r28
    4a86:	1f 91       	pop	r17
    4a88:	0f 91       	pop	r16
    4a8a:	08 95       	ret

00004a8c <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    4a8c:	80 91 0f 0e 	lds	r24, 0x0E0F	; 0x800e0f <pxCurrentTCB>
    4a90:	90 91 10 0e 	lds	r25, 0x0E10	; 0x800e10 <pxCurrentTCB+0x1>
    4a94:	89 2b       	or	r24, r25
    4a96:	39 f0       	breq	.+14     	; 0x4aa6 <pvTaskIncrementMutexHeldCount+0x1a>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    4a98:	e0 91 0f 0e 	lds	r30, 0x0E0F	; 0x800e0f <pxCurrentTCB>
    4a9c:	f0 91 10 0e 	lds	r31, 0x0E10	; 0x800e10 <pxCurrentTCB+0x1>
    4aa0:	82 a1       	ldd	r24, Z+34	; 0x22
    4aa2:	8f 5f       	subi	r24, 0xFF	; 255
    4aa4:	82 a3       	std	Z+34, r24	; 0x22
		}

		return pxCurrentTCB;
    4aa6:	80 91 0f 0e 	lds	r24, 0x0E0F	; 0x800e0f <pxCurrentTCB>
    4aaa:	90 91 10 0e 	lds	r25, 0x0E10	; 0x800e10 <pxCurrentTCB+0x1>
	}
    4aae:	08 95       	ret

00004ab0 <__subsf3>:
    4ab0:	50 58       	subi	r21, 0x80	; 128

00004ab2 <__addsf3>:
    4ab2:	bb 27       	eor	r27, r27
    4ab4:	aa 27       	eor	r26, r26
    4ab6:	0e d0       	rcall	.+28     	; 0x4ad4 <__addsf3x>
    4ab8:	75 c1       	rjmp	.+746    	; 0x4da4 <__fp_round>
    4aba:	66 d1       	rcall	.+716    	; 0x4d88 <__fp_pscA>
    4abc:	30 f0       	brcs	.+12     	; 0x4aca <__addsf3+0x18>
    4abe:	6b d1       	rcall	.+726    	; 0x4d96 <__fp_pscB>
    4ac0:	20 f0       	brcs	.+8      	; 0x4aca <__addsf3+0x18>
    4ac2:	31 f4       	brne	.+12     	; 0x4ad0 <__addsf3+0x1e>
    4ac4:	9f 3f       	cpi	r25, 0xFF	; 255
    4ac6:	11 f4       	brne	.+4      	; 0x4acc <__addsf3+0x1a>
    4ac8:	1e f4       	brtc	.+6      	; 0x4ad0 <__addsf3+0x1e>
    4aca:	5b c1       	rjmp	.+694    	; 0x4d82 <__fp_nan>
    4acc:	0e f4       	brtc	.+2      	; 0x4ad0 <__addsf3+0x1e>
    4ace:	e0 95       	com	r30
    4ad0:	e7 fb       	bst	r30, 7
    4ad2:	51 c1       	rjmp	.+674    	; 0x4d76 <__fp_inf>

00004ad4 <__addsf3x>:
    4ad4:	e9 2f       	mov	r30, r25
    4ad6:	77 d1       	rcall	.+750    	; 0x4dc6 <__fp_split3>
    4ad8:	80 f3       	brcs	.-32     	; 0x4aba <__addsf3+0x8>
    4ada:	ba 17       	cp	r27, r26
    4adc:	62 07       	cpc	r22, r18
    4ade:	73 07       	cpc	r23, r19
    4ae0:	84 07       	cpc	r24, r20
    4ae2:	95 07       	cpc	r25, r21
    4ae4:	18 f0       	brcs	.+6      	; 0x4aec <__addsf3x+0x18>
    4ae6:	71 f4       	brne	.+28     	; 0x4b04 <__addsf3x+0x30>
    4ae8:	9e f5       	brtc	.+102    	; 0x4b50 <__addsf3x+0x7c>
    4aea:	8f c1       	rjmp	.+798    	; 0x4e0a <__fp_zero>
    4aec:	0e f4       	brtc	.+2      	; 0x4af0 <__addsf3x+0x1c>
    4aee:	e0 95       	com	r30
    4af0:	0b 2e       	mov	r0, r27
    4af2:	ba 2f       	mov	r27, r26
    4af4:	a0 2d       	mov	r26, r0
    4af6:	0b 01       	movw	r0, r22
    4af8:	b9 01       	movw	r22, r18
    4afa:	90 01       	movw	r18, r0
    4afc:	0c 01       	movw	r0, r24
    4afe:	ca 01       	movw	r24, r20
    4b00:	a0 01       	movw	r20, r0
    4b02:	11 24       	eor	r1, r1
    4b04:	ff 27       	eor	r31, r31
    4b06:	59 1b       	sub	r21, r25
    4b08:	99 f0       	breq	.+38     	; 0x4b30 <__addsf3x+0x5c>
    4b0a:	59 3f       	cpi	r21, 0xF9	; 249
    4b0c:	50 f4       	brcc	.+20     	; 0x4b22 <__addsf3x+0x4e>
    4b0e:	50 3e       	cpi	r21, 0xE0	; 224
    4b10:	68 f1       	brcs	.+90     	; 0x4b6c <__addsf3x+0x98>
    4b12:	1a 16       	cp	r1, r26
    4b14:	f0 40       	sbci	r31, 0x00	; 0
    4b16:	a2 2f       	mov	r26, r18
    4b18:	23 2f       	mov	r18, r19
    4b1a:	34 2f       	mov	r19, r20
    4b1c:	44 27       	eor	r20, r20
    4b1e:	58 5f       	subi	r21, 0xF8	; 248
    4b20:	f3 cf       	rjmp	.-26     	; 0x4b08 <__addsf3x+0x34>
    4b22:	46 95       	lsr	r20
    4b24:	37 95       	ror	r19
    4b26:	27 95       	ror	r18
    4b28:	a7 95       	ror	r26
    4b2a:	f0 40       	sbci	r31, 0x00	; 0
    4b2c:	53 95       	inc	r21
    4b2e:	c9 f7       	brne	.-14     	; 0x4b22 <__addsf3x+0x4e>
    4b30:	7e f4       	brtc	.+30     	; 0x4b50 <__addsf3x+0x7c>
    4b32:	1f 16       	cp	r1, r31
    4b34:	ba 0b       	sbc	r27, r26
    4b36:	62 0b       	sbc	r22, r18
    4b38:	73 0b       	sbc	r23, r19
    4b3a:	84 0b       	sbc	r24, r20
    4b3c:	ba f0       	brmi	.+46     	; 0x4b6c <__addsf3x+0x98>
    4b3e:	91 50       	subi	r25, 0x01	; 1
    4b40:	a1 f0       	breq	.+40     	; 0x4b6a <__addsf3x+0x96>
    4b42:	ff 0f       	add	r31, r31
    4b44:	bb 1f       	adc	r27, r27
    4b46:	66 1f       	adc	r22, r22
    4b48:	77 1f       	adc	r23, r23
    4b4a:	88 1f       	adc	r24, r24
    4b4c:	c2 f7       	brpl	.-16     	; 0x4b3e <__addsf3x+0x6a>
    4b4e:	0e c0       	rjmp	.+28     	; 0x4b6c <__addsf3x+0x98>
    4b50:	ba 0f       	add	r27, r26
    4b52:	62 1f       	adc	r22, r18
    4b54:	73 1f       	adc	r23, r19
    4b56:	84 1f       	adc	r24, r20
    4b58:	48 f4       	brcc	.+18     	; 0x4b6c <__addsf3x+0x98>
    4b5a:	87 95       	ror	r24
    4b5c:	77 95       	ror	r23
    4b5e:	67 95       	ror	r22
    4b60:	b7 95       	ror	r27
    4b62:	f7 95       	ror	r31
    4b64:	9e 3f       	cpi	r25, 0xFE	; 254
    4b66:	08 f0       	brcs	.+2      	; 0x4b6a <__addsf3x+0x96>
    4b68:	b3 cf       	rjmp	.-154    	; 0x4ad0 <__addsf3+0x1e>
    4b6a:	93 95       	inc	r25
    4b6c:	88 0f       	add	r24, r24
    4b6e:	08 f0       	brcs	.+2      	; 0x4b72 <__addsf3x+0x9e>
    4b70:	99 27       	eor	r25, r25
    4b72:	ee 0f       	add	r30, r30
    4b74:	97 95       	ror	r25
    4b76:	87 95       	ror	r24
    4b78:	08 95       	ret

00004b7a <__cmpsf2>:
    4b7a:	d9 d0       	rcall	.+434    	; 0x4d2e <__fp_cmp>
    4b7c:	08 f4       	brcc	.+2      	; 0x4b80 <__cmpsf2+0x6>
    4b7e:	81 e0       	ldi	r24, 0x01	; 1
    4b80:	08 95       	ret

00004b82 <__divsf3>:
    4b82:	0c d0       	rcall	.+24     	; 0x4b9c <__divsf3x>
    4b84:	0f c1       	rjmp	.+542    	; 0x4da4 <__fp_round>
    4b86:	07 d1       	rcall	.+526    	; 0x4d96 <__fp_pscB>
    4b88:	40 f0       	brcs	.+16     	; 0x4b9a <__divsf3+0x18>
    4b8a:	fe d0       	rcall	.+508    	; 0x4d88 <__fp_pscA>
    4b8c:	30 f0       	brcs	.+12     	; 0x4b9a <__divsf3+0x18>
    4b8e:	21 f4       	brne	.+8      	; 0x4b98 <__divsf3+0x16>
    4b90:	5f 3f       	cpi	r21, 0xFF	; 255
    4b92:	19 f0       	breq	.+6      	; 0x4b9a <__divsf3+0x18>
    4b94:	f0 c0       	rjmp	.+480    	; 0x4d76 <__fp_inf>
    4b96:	51 11       	cpse	r21, r1
    4b98:	39 c1       	rjmp	.+626    	; 0x4e0c <__fp_szero>
    4b9a:	f3 c0       	rjmp	.+486    	; 0x4d82 <__fp_nan>

00004b9c <__divsf3x>:
    4b9c:	14 d1       	rcall	.+552    	; 0x4dc6 <__fp_split3>
    4b9e:	98 f3       	brcs	.-26     	; 0x4b86 <__divsf3+0x4>

00004ba0 <__divsf3_pse>:
    4ba0:	99 23       	and	r25, r25
    4ba2:	c9 f3       	breq	.-14     	; 0x4b96 <__divsf3+0x14>
    4ba4:	55 23       	and	r21, r21
    4ba6:	b1 f3       	breq	.-20     	; 0x4b94 <__divsf3+0x12>
    4ba8:	95 1b       	sub	r25, r21
    4baa:	55 0b       	sbc	r21, r21
    4bac:	bb 27       	eor	r27, r27
    4bae:	aa 27       	eor	r26, r26
    4bb0:	62 17       	cp	r22, r18
    4bb2:	73 07       	cpc	r23, r19
    4bb4:	84 07       	cpc	r24, r20
    4bb6:	38 f0       	brcs	.+14     	; 0x4bc6 <__divsf3_pse+0x26>
    4bb8:	9f 5f       	subi	r25, 0xFF	; 255
    4bba:	5f 4f       	sbci	r21, 0xFF	; 255
    4bbc:	22 0f       	add	r18, r18
    4bbe:	33 1f       	adc	r19, r19
    4bc0:	44 1f       	adc	r20, r20
    4bc2:	aa 1f       	adc	r26, r26
    4bc4:	a9 f3       	breq	.-22     	; 0x4bb0 <__divsf3_pse+0x10>
    4bc6:	33 d0       	rcall	.+102    	; 0x4c2e <__divsf3_pse+0x8e>
    4bc8:	0e 2e       	mov	r0, r30
    4bca:	3a f0       	brmi	.+14     	; 0x4bda <__divsf3_pse+0x3a>
    4bcc:	e0 e8       	ldi	r30, 0x80	; 128
    4bce:	30 d0       	rcall	.+96     	; 0x4c30 <__divsf3_pse+0x90>
    4bd0:	91 50       	subi	r25, 0x01	; 1
    4bd2:	50 40       	sbci	r21, 0x00	; 0
    4bd4:	e6 95       	lsr	r30
    4bd6:	00 1c       	adc	r0, r0
    4bd8:	ca f7       	brpl	.-14     	; 0x4bcc <__divsf3_pse+0x2c>
    4bda:	29 d0       	rcall	.+82     	; 0x4c2e <__divsf3_pse+0x8e>
    4bdc:	fe 2f       	mov	r31, r30
    4bde:	27 d0       	rcall	.+78     	; 0x4c2e <__divsf3_pse+0x8e>
    4be0:	66 0f       	add	r22, r22
    4be2:	77 1f       	adc	r23, r23
    4be4:	88 1f       	adc	r24, r24
    4be6:	bb 1f       	adc	r27, r27
    4be8:	26 17       	cp	r18, r22
    4bea:	37 07       	cpc	r19, r23
    4bec:	48 07       	cpc	r20, r24
    4bee:	ab 07       	cpc	r26, r27
    4bf0:	b0 e8       	ldi	r27, 0x80	; 128
    4bf2:	09 f0       	breq	.+2      	; 0x4bf6 <__divsf3_pse+0x56>
    4bf4:	bb 0b       	sbc	r27, r27
    4bf6:	80 2d       	mov	r24, r0
    4bf8:	bf 01       	movw	r22, r30
    4bfa:	ff 27       	eor	r31, r31
    4bfc:	93 58       	subi	r25, 0x83	; 131
    4bfe:	5f 4f       	sbci	r21, 0xFF	; 255
    4c00:	2a f0       	brmi	.+10     	; 0x4c0c <__divsf3_pse+0x6c>
    4c02:	9e 3f       	cpi	r25, 0xFE	; 254
    4c04:	51 05       	cpc	r21, r1
    4c06:	68 f0       	brcs	.+26     	; 0x4c22 <__divsf3_pse+0x82>
    4c08:	b6 c0       	rjmp	.+364    	; 0x4d76 <__fp_inf>
    4c0a:	00 c1       	rjmp	.+512    	; 0x4e0c <__fp_szero>
    4c0c:	5f 3f       	cpi	r21, 0xFF	; 255
    4c0e:	ec f3       	brlt	.-6      	; 0x4c0a <__divsf3_pse+0x6a>
    4c10:	98 3e       	cpi	r25, 0xE8	; 232
    4c12:	dc f3       	brlt	.-10     	; 0x4c0a <__divsf3_pse+0x6a>
    4c14:	86 95       	lsr	r24
    4c16:	77 95       	ror	r23
    4c18:	67 95       	ror	r22
    4c1a:	b7 95       	ror	r27
    4c1c:	f7 95       	ror	r31
    4c1e:	9f 5f       	subi	r25, 0xFF	; 255
    4c20:	c9 f7       	brne	.-14     	; 0x4c14 <__divsf3_pse+0x74>
    4c22:	88 0f       	add	r24, r24
    4c24:	91 1d       	adc	r25, r1
    4c26:	96 95       	lsr	r25
    4c28:	87 95       	ror	r24
    4c2a:	97 f9       	bld	r25, 7
    4c2c:	08 95       	ret
    4c2e:	e1 e0       	ldi	r30, 0x01	; 1
    4c30:	66 0f       	add	r22, r22
    4c32:	77 1f       	adc	r23, r23
    4c34:	88 1f       	adc	r24, r24
    4c36:	bb 1f       	adc	r27, r27
    4c38:	62 17       	cp	r22, r18
    4c3a:	73 07       	cpc	r23, r19
    4c3c:	84 07       	cpc	r24, r20
    4c3e:	ba 07       	cpc	r27, r26
    4c40:	20 f0       	brcs	.+8      	; 0x4c4a <__divsf3_pse+0xaa>
    4c42:	62 1b       	sub	r22, r18
    4c44:	73 0b       	sbc	r23, r19
    4c46:	84 0b       	sbc	r24, r20
    4c48:	ba 0b       	sbc	r27, r26
    4c4a:	ee 1f       	adc	r30, r30
    4c4c:	88 f7       	brcc	.-30     	; 0x4c30 <__divsf3_pse+0x90>
    4c4e:	e0 95       	com	r30
    4c50:	08 95       	ret

00004c52 <__fixsfsi>:
    4c52:	04 d0       	rcall	.+8      	; 0x4c5c <__fixunssfsi>
    4c54:	68 94       	set
    4c56:	b1 11       	cpse	r27, r1
    4c58:	d9 c0       	rjmp	.+434    	; 0x4e0c <__fp_szero>
    4c5a:	08 95       	ret

00004c5c <__fixunssfsi>:
    4c5c:	bc d0       	rcall	.+376    	; 0x4dd6 <__fp_splitA>
    4c5e:	88 f0       	brcs	.+34     	; 0x4c82 <__fixunssfsi+0x26>
    4c60:	9f 57       	subi	r25, 0x7F	; 127
    4c62:	90 f0       	brcs	.+36     	; 0x4c88 <__fixunssfsi+0x2c>
    4c64:	b9 2f       	mov	r27, r25
    4c66:	99 27       	eor	r25, r25
    4c68:	b7 51       	subi	r27, 0x17	; 23
    4c6a:	a0 f0       	brcs	.+40     	; 0x4c94 <__fixunssfsi+0x38>
    4c6c:	d1 f0       	breq	.+52     	; 0x4ca2 <__fixunssfsi+0x46>
    4c6e:	66 0f       	add	r22, r22
    4c70:	77 1f       	adc	r23, r23
    4c72:	88 1f       	adc	r24, r24
    4c74:	99 1f       	adc	r25, r25
    4c76:	1a f0       	brmi	.+6      	; 0x4c7e <__fixunssfsi+0x22>
    4c78:	ba 95       	dec	r27
    4c7a:	c9 f7       	brne	.-14     	; 0x4c6e <__fixunssfsi+0x12>
    4c7c:	12 c0       	rjmp	.+36     	; 0x4ca2 <__fixunssfsi+0x46>
    4c7e:	b1 30       	cpi	r27, 0x01	; 1
    4c80:	81 f0       	breq	.+32     	; 0x4ca2 <__fixunssfsi+0x46>
    4c82:	c3 d0       	rcall	.+390    	; 0x4e0a <__fp_zero>
    4c84:	b1 e0       	ldi	r27, 0x01	; 1
    4c86:	08 95       	ret
    4c88:	c0 c0       	rjmp	.+384    	; 0x4e0a <__fp_zero>
    4c8a:	67 2f       	mov	r22, r23
    4c8c:	78 2f       	mov	r23, r24
    4c8e:	88 27       	eor	r24, r24
    4c90:	b8 5f       	subi	r27, 0xF8	; 248
    4c92:	39 f0       	breq	.+14     	; 0x4ca2 <__fixunssfsi+0x46>
    4c94:	b9 3f       	cpi	r27, 0xF9	; 249
    4c96:	cc f3       	brlt	.-14     	; 0x4c8a <__fixunssfsi+0x2e>
    4c98:	86 95       	lsr	r24
    4c9a:	77 95       	ror	r23
    4c9c:	67 95       	ror	r22
    4c9e:	b3 95       	inc	r27
    4ca0:	d9 f7       	brne	.-10     	; 0x4c98 <__fixunssfsi+0x3c>
    4ca2:	3e f4       	brtc	.+14     	; 0x4cb2 <__fixunssfsi+0x56>
    4ca4:	90 95       	com	r25
    4ca6:	80 95       	com	r24
    4ca8:	70 95       	com	r23
    4caa:	61 95       	neg	r22
    4cac:	7f 4f       	sbci	r23, 0xFF	; 255
    4cae:	8f 4f       	sbci	r24, 0xFF	; 255
    4cb0:	9f 4f       	sbci	r25, 0xFF	; 255
    4cb2:	08 95       	ret

00004cb4 <__floatunsisf>:
    4cb4:	e8 94       	clt
    4cb6:	09 c0       	rjmp	.+18     	; 0x4cca <__floatsisf+0x12>

00004cb8 <__floatsisf>:
    4cb8:	97 fb       	bst	r25, 7
    4cba:	3e f4       	brtc	.+14     	; 0x4cca <__floatsisf+0x12>
    4cbc:	90 95       	com	r25
    4cbe:	80 95       	com	r24
    4cc0:	70 95       	com	r23
    4cc2:	61 95       	neg	r22
    4cc4:	7f 4f       	sbci	r23, 0xFF	; 255
    4cc6:	8f 4f       	sbci	r24, 0xFF	; 255
    4cc8:	9f 4f       	sbci	r25, 0xFF	; 255
    4cca:	99 23       	and	r25, r25
    4ccc:	a9 f0       	breq	.+42     	; 0x4cf8 <__floatsisf+0x40>
    4cce:	f9 2f       	mov	r31, r25
    4cd0:	96 e9       	ldi	r25, 0x96	; 150
    4cd2:	bb 27       	eor	r27, r27
    4cd4:	93 95       	inc	r25
    4cd6:	f6 95       	lsr	r31
    4cd8:	87 95       	ror	r24
    4cda:	77 95       	ror	r23
    4cdc:	67 95       	ror	r22
    4cde:	b7 95       	ror	r27
    4ce0:	f1 11       	cpse	r31, r1
    4ce2:	f8 cf       	rjmp	.-16     	; 0x4cd4 <__floatsisf+0x1c>
    4ce4:	fa f4       	brpl	.+62     	; 0x4d24 <__floatsisf+0x6c>
    4ce6:	bb 0f       	add	r27, r27
    4ce8:	11 f4       	brne	.+4      	; 0x4cee <__floatsisf+0x36>
    4cea:	60 ff       	sbrs	r22, 0
    4cec:	1b c0       	rjmp	.+54     	; 0x4d24 <__floatsisf+0x6c>
    4cee:	6f 5f       	subi	r22, 0xFF	; 255
    4cf0:	7f 4f       	sbci	r23, 0xFF	; 255
    4cf2:	8f 4f       	sbci	r24, 0xFF	; 255
    4cf4:	9f 4f       	sbci	r25, 0xFF	; 255
    4cf6:	16 c0       	rjmp	.+44     	; 0x4d24 <__floatsisf+0x6c>
    4cf8:	88 23       	and	r24, r24
    4cfa:	11 f0       	breq	.+4      	; 0x4d00 <__floatsisf+0x48>
    4cfc:	96 e9       	ldi	r25, 0x96	; 150
    4cfe:	11 c0       	rjmp	.+34     	; 0x4d22 <__floatsisf+0x6a>
    4d00:	77 23       	and	r23, r23
    4d02:	21 f0       	breq	.+8      	; 0x4d0c <__floatsisf+0x54>
    4d04:	9e e8       	ldi	r25, 0x8E	; 142
    4d06:	87 2f       	mov	r24, r23
    4d08:	76 2f       	mov	r23, r22
    4d0a:	05 c0       	rjmp	.+10     	; 0x4d16 <__floatsisf+0x5e>
    4d0c:	66 23       	and	r22, r22
    4d0e:	71 f0       	breq	.+28     	; 0x4d2c <__floatsisf+0x74>
    4d10:	96 e8       	ldi	r25, 0x86	; 134
    4d12:	86 2f       	mov	r24, r22
    4d14:	70 e0       	ldi	r23, 0x00	; 0
    4d16:	60 e0       	ldi	r22, 0x00	; 0
    4d18:	2a f0       	brmi	.+10     	; 0x4d24 <__floatsisf+0x6c>
    4d1a:	9a 95       	dec	r25
    4d1c:	66 0f       	add	r22, r22
    4d1e:	77 1f       	adc	r23, r23
    4d20:	88 1f       	adc	r24, r24
    4d22:	da f7       	brpl	.-10     	; 0x4d1a <__floatsisf+0x62>
    4d24:	88 0f       	add	r24, r24
    4d26:	96 95       	lsr	r25
    4d28:	87 95       	ror	r24
    4d2a:	97 f9       	bld	r25, 7
    4d2c:	08 95       	ret

00004d2e <__fp_cmp>:
    4d2e:	99 0f       	add	r25, r25
    4d30:	00 08       	sbc	r0, r0
    4d32:	55 0f       	add	r21, r21
    4d34:	aa 0b       	sbc	r26, r26
    4d36:	e0 e8       	ldi	r30, 0x80	; 128
    4d38:	fe ef       	ldi	r31, 0xFE	; 254
    4d3a:	16 16       	cp	r1, r22
    4d3c:	17 06       	cpc	r1, r23
    4d3e:	e8 07       	cpc	r30, r24
    4d40:	f9 07       	cpc	r31, r25
    4d42:	c0 f0       	brcs	.+48     	; 0x4d74 <__fp_cmp+0x46>
    4d44:	12 16       	cp	r1, r18
    4d46:	13 06       	cpc	r1, r19
    4d48:	e4 07       	cpc	r30, r20
    4d4a:	f5 07       	cpc	r31, r21
    4d4c:	98 f0       	brcs	.+38     	; 0x4d74 <__fp_cmp+0x46>
    4d4e:	62 1b       	sub	r22, r18
    4d50:	73 0b       	sbc	r23, r19
    4d52:	84 0b       	sbc	r24, r20
    4d54:	95 0b       	sbc	r25, r21
    4d56:	39 f4       	brne	.+14     	; 0x4d66 <__fp_cmp+0x38>
    4d58:	0a 26       	eor	r0, r26
    4d5a:	61 f0       	breq	.+24     	; 0x4d74 <__fp_cmp+0x46>
    4d5c:	23 2b       	or	r18, r19
    4d5e:	24 2b       	or	r18, r20
    4d60:	25 2b       	or	r18, r21
    4d62:	21 f4       	brne	.+8      	; 0x4d6c <__fp_cmp+0x3e>
    4d64:	08 95       	ret
    4d66:	0a 26       	eor	r0, r26
    4d68:	09 f4       	brne	.+2      	; 0x4d6c <__fp_cmp+0x3e>
    4d6a:	a1 40       	sbci	r26, 0x01	; 1
    4d6c:	a6 95       	lsr	r26
    4d6e:	8f ef       	ldi	r24, 0xFF	; 255
    4d70:	81 1d       	adc	r24, r1
    4d72:	81 1d       	adc	r24, r1
    4d74:	08 95       	ret

00004d76 <__fp_inf>:
    4d76:	97 f9       	bld	r25, 7
    4d78:	9f 67       	ori	r25, 0x7F	; 127
    4d7a:	80 e8       	ldi	r24, 0x80	; 128
    4d7c:	70 e0       	ldi	r23, 0x00	; 0
    4d7e:	60 e0       	ldi	r22, 0x00	; 0
    4d80:	08 95       	ret

00004d82 <__fp_nan>:
    4d82:	9f ef       	ldi	r25, 0xFF	; 255
    4d84:	80 ec       	ldi	r24, 0xC0	; 192
    4d86:	08 95       	ret

00004d88 <__fp_pscA>:
    4d88:	00 24       	eor	r0, r0
    4d8a:	0a 94       	dec	r0
    4d8c:	16 16       	cp	r1, r22
    4d8e:	17 06       	cpc	r1, r23
    4d90:	18 06       	cpc	r1, r24
    4d92:	09 06       	cpc	r0, r25
    4d94:	08 95       	ret

00004d96 <__fp_pscB>:
    4d96:	00 24       	eor	r0, r0
    4d98:	0a 94       	dec	r0
    4d9a:	12 16       	cp	r1, r18
    4d9c:	13 06       	cpc	r1, r19
    4d9e:	14 06       	cpc	r1, r20
    4da0:	05 06       	cpc	r0, r21
    4da2:	08 95       	ret

00004da4 <__fp_round>:
    4da4:	09 2e       	mov	r0, r25
    4da6:	03 94       	inc	r0
    4da8:	00 0c       	add	r0, r0
    4daa:	11 f4       	brne	.+4      	; 0x4db0 <__fp_round+0xc>
    4dac:	88 23       	and	r24, r24
    4dae:	52 f0       	brmi	.+20     	; 0x4dc4 <__fp_round+0x20>
    4db0:	bb 0f       	add	r27, r27
    4db2:	40 f4       	brcc	.+16     	; 0x4dc4 <__fp_round+0x20>
    4db4:	bf 2b       	or	r27, r31
    4db6:	11 f4       	brne	.+4      	; 0x4dbc <__fp_round+0x18>
    4db8:	60 ff       	sbrs	r22, 0
    4dba:	04 c0       	rjmp	.+8      	; 0x4dc4 <__fp_round+0x20>
    4dbc:	6f 5f       	subi	r22, 0xFF	; 255
    4dbe:	7f 4f       	sbci	r23, 0xFF	; 255
    4dc0:	8f 4f       	sbci	r24, 0xFF	; 255
    4dc2:	9f 4f       	sbci	r25, 0xFF	; 255
    4dc4:	08 95       	ret

00004dc6 <__fp_split3>:
    4dc6:	57 fd       	sbrc	r21, 7
    4dc8:	90 58       	subi	r25, 0x80	; 128
    4dca:	44 0f       	add	r20, r20
    4dcc:	55 1f       	adc	r21, r21
    4dce:	59 f0       	breq	.+22     	; 0x4de6 <__fp_splitA+0x10>
    4dd0:	5f 3f       	cpi	r21, 0xFF	; 255
    4dd2:	71 f0       	breq	.+28     	; 0x4df0 <__fp_splitA+0x1a>
    4dd4:	47 95       	ror	r20

00004dd6 <__fp_splitA>:
    4dd6:	88 0f       	add	r24, r24
    4dd8:	97 fb       	bst	r25, 7
    4dda:	99 1f       	adc	r25, r25
    4ddc:	61 f0       	breq	.+24     	; 0x4df6 <__fp_splitA+0x20>
    4dde:	9f 3f       	cpi	r25, 0xFF	; 255
    4de0:	79 f0       	breq	.+30     	; 0x4e00 <__fp_splitA+0x2a>
    4de2:	87 95       	ror	r24
    4de4:	08 95       	ret
    4de6:	12 16       	cp	r1, r18
    4de8:	13 06       	cpc	r1, r19
    4dea:	14 06       	cpc	r1, r20
    4dec:	55 1f       	adc	r21, r21
    4dee:	f2 cf       	rjmp	.-28     	; 0x4dd4 <__fp_split3+0xe>
    4df0:	46 95       	lsr	r20
    4df2:	f1 df       	rcall	.-30     	; 0x4dd6 <__fp_splitA>
    4df4:	08 c0       	rjmp	.+16     	; 0x4e06 <__fp_splitA+0x30>
    4df6:	16 16       	cp	r1, r22
    4df8:	17 06       	cpc	r1, r23
    4dfa:	18 06       	cpc	r1, r24
    4dfc:	99 1f       	adc	r25, r25
    4dfe:	f1 cf       	rjmp	.-30     	; 0x4de2 <__fp_splitA+0xc>
    4e00:	86 95       	lsr	r24
    4e02:	71 05       	cpc	r23, r1
    4e04:	61 05       	cpc	r22, r1
    4e06:	08 94       	sec
    4e08:	08 95       	ret

00004e0a <__fp_zero>:
    4e0a:	e8 94       	clt

00004e0c <__fp_szero>:
    4e0c:	bb 27       	eor	r27, r27
    4e0e:	66 27       	eor	r22, r22
    4e10:	77 27       	eor	r23, r23
    4e12:	cb 01       	movw	r24, r22
    4e14:	97 f9       	bld	r25, 7
    4e16:	08 95       	ret

00004e18 <__gesf2>:
    4e18:	8a df       	rcall	.-236    	; 0x4d2e <__fp_cmp>
    4e1a:	08 f4       	brcc	.+2      	; 0x4e1e <__gesf2+0x6>
    4e1c:	8f ef       	ldi	r24, 0xFF	; 255
    4e1e:	08 95       	ret

00004e20 <__mulsf3>:
    4e20:	0b d0       	rcall	.+22     	; 0x4e38 <__mulsf3x>
    4e22:	c0 cf       	rjmp	.-128    	; 0x4da4 <__fp_round>
    4e24:	b1 df       	rcall	.-158    	; 0x4d88 <__fp_pscA>
    4e26:	28 f0       	brcs	.+10     	; 0x4e32 <__mulsf3+0x12>
    4e28:	b6 df       	rcall	.-148    	; 0x4d96 <__fp_pscB>
    4e2a:	18 f0       	brcs	.+6      	; 0x4e32 <__mulsf3+0x12>
    4e2c:	95 23       	and	r25, r21
    4e2e:	09 f0       	breq	.+2      	; 0x4e32 <__mulsf3+0x12>
    4e30:	a2 cf       	rjmp	.-188    	; 0x4d76 <__fp_inf>
    4e32:	a7 cf       	rjmp	.-178    	; 0x4d82 <__fp_nan>
    4e34:	11 24       	eor	r1, r1
    4e36:	ea cf       	rjmp	.-44     	; 0x4e0c <__fp_szero>

00004e38 <__mulsf3x>:
    4e38:	c6 df       	rcall	.-116    	; 0x4dc6 <__fp_split3>
    4e3a:	a0 f3       	brcs	.-24     	; 0x4e24 <__mulsf3+0x4>

00004e3c <__mulsf3_pse>:
    4e3c:	95 9f       	mul	r25, r21
    4e3e:	d1 f3       	breq	.-12     	; 0x4e34 <__mulsf3+0x14>
    4e40:	95 0f       	add	r25, r21
    4e42:	50 e0       	ldi	r21, 0x00	; 0
    4e44:	55 1f       	adc	r21, r21
    4e46:	62 9f       	mul	r22, r18
    4e48:	f0 01       	movw	r30, r0
    4e4a:	72 9f       	mul	r23, r18
    4e4c:	bb 27       	eor	r27, r27
    4e4e:	f0 0d       	add	r31, r0
    4e50:	b1 1d       	adc	r27, r1
    4e52:	63 9f       	mul	r22, r19
    4e54:	aa 27       	eor	r26, r26
    4e56:	f0 0d       	add	r31, r0
    4e58:	b1 1d       	adc	r27, r1
    4e5a:	aa 1f       	adc	r26, r26
    4e5c:	64 9f       	mul	r22, r20
    4e5e:	66 27       	eor	r22, r22
    4e60:	b0 0d       	add	r27, r0
    4e62:	a1 1d       	adc	r26, r1
    4e64:	66 1f       	adc	r22, r22
    4e66:	82 9f       	mul	r24, r18
    4e68:	22 27       	eor	r18, r18
    4e6a:	b0 0d       	add	r27, r0
    4e6c:	a1 1d       	adc	r26, r1
    4e6e:	62 1f       	adc	r22, r18
    4e70:	73 9f       	mul	r23, r19
    4e72:	b0 0d       	add	r27, r0
    4e74:	a1 1d       	adc	r26, r1
    4e76:	62 1f       	adc	r22, r18
    4e78:	83 9f       	mul	r24, r19
    4e7a:	a0 0d       	add	r26, r0
    4e7c:	61 1d       	adc	r22, r1
    4e7e:	22 1f       	adc	r18, r18
    4e80:	74 9f       	mul	r23, r20
    4e82:	33 27       	eor	r19, r19
    4e84:	a0 0d       	add	r26, r0
    4e86:	61 1d       	adc	r22, r1
    4e88:	23 1f       	adc	r18, r19
    4e8a:	84 9f       	mul	r24, r20
    4e8c:	60 0d       	add	r22, r0
    4e8e:	21 1d       	adc	r18, r1
    4e90:	82 2f       	mov	r24, r18
    4e92:	76 2f       	mov	r23, r22
    4e94:	6a 2f       	mov	r22, r26
    4e96:	11 24       	eor	r1, r1
    4e98:	9f 57       	subi	r25, 0x7F	; 127
    4e9a:	50 40       	sbci	r21, 0x00	; 0
    4e9c:	8a f0       	brmi	.+34     	; 0x4ec0 <__mulsf3_pse+0x84>
    4e9e:	e1 f0       	breq	.+56     	; 0x4ed8 <__mulsf3_pse+0x9c>
    4ea0:	88 23       	and	r24, r24
    4ea2:	4a f0       	brmi	.+18     	; 0x4eb6 <__mulsf3_pse+0x7a>
    4ea4:	ee 0f       	add	r30, r30
    4ea6:	ff 1f       	adc	r31, r31
    4ea8:	bb 1f       	adc	r27, r27
    4eaa:	66 1f       	adc	r22, r22
    4eac:	77 1f       	adc	r23, r23
    4eae:	88 1f       	adc	r24, r24
    4eb0:	91 50       	subi	r25, 0x01	; 1
    4eb2:	50 40       	sbci	r21, 0x00	; 0
    4eb4:	a9 f7       	brne	.-22     	; 0x4ea0 <__mulsf3_pse+0x64>
    4eb6:	9e 3f       	cpi	r25, 0xFE	; 254
    4eb8:	51 05       	cpc	r21, r1
    4eba:	70 f0       	brcs	.+28     	; 0x4ed8 <__mulsf3_pse+0x9c>
    4ebc:	5c cf       	rjmp	.-328    	; 0x4d76 <__fp_inf>
    4ebe:	a6 cf       	rjmp	.-180    	; 0x4e0c <__fp_szero>
    4ec0:	5f 3f       	cpi	r21, 0xFF	; 255
    4ec2:	ec f3       	brlt	.-6      	; 0x4ebe <__mulsf3_pse+0x82>
    4ec4:	98 3e       	cpi	r25, 0xE8	; 232
    4ec6:	dc f3       	brlt	.-10     	; 0x4ebe <__mulsf3_pse+0x82>
    4ec8:	86 95       	lsr	r24
    4eca:	77 95       	ror	r23
    4ecc:	67 95       	ror	r22
    4ece:	b7 95       	ror	r27
    4ed0:	f7 95       	ror	r31
    4ed2:	e7 95       	ror	r30
    4ed4:	9f 5f       	subi	r25, 0xFF	; 255
    4ed6:	c1 f7       	brne	.-16     	; 0x4ec8 <__mulsf3_pse+0x8c>
    4ed8:	fe 2b       	or	r31, r30
    4eda:	88 0f       	add	r24, r24
    4edc:	91 1d       	adc	r25, r1
    4ede:	96 95       	lsr	r25
    4ee0:	87 95       	ror	r24
    4ee2:	97 f9       	bld	r25, 7
    4ee4:	08 95       	ret

00004ee6 <__udivmodsi4>:
    4ee6:	a1 e2       	ldi	r26, 0x21	; 33
    4ee8:	1a 2e       	mov	r1, r26
    4eea:	aa 1b       	sub	r26, r26
    4eec:	bb 1b       	sub	r27, r27
    4eee:	fd 01       	movw	r30, r26
    4ef0:	0d c0       	rjmp	.+26     	; 0x4f0c <__udivmodsi4_ep>

00004ef2 <__udivmodsi4_loop>:
    4ef2:	aa 1f       	adc	r26, r26
    4ef4:	bb 1f       	adc	r27, r27
    4ef6:	ee 1f       	adc	r30, r30
    4ef8:	ff 1f       	adc	r31, r31
    4efa:	a2 17       	cp	r26, r18
    4efc:	b3 07       	cpc	r27, r19
    4efe:	e4 07       	cpc	r30, r20
    4f00:	f5 07       	cpc	r31, r21
    4f02:	20 f0       	brcs	.+8      	; 0x4f0c <__udivmodsi4_ep>
    4f04:	a2 1b       	sub	r26, r18
    4f06:	b3 0b       	sbc	r27, r19
    4f08:	e4 0b       	sbc	r30, r20
    4f0a:	f5 0b       	sbc	r31, r21

00004f0c <__udivmodsi4_ep>:
    4f0c:	66 1f       	adc	r22, r22
    4f0e:	77 1f       	adc	r23, r23
    4f10:	88 1f       	adc	r24, r24
    4f12:	99 1f       	adc	r25, r25
    4f14:	1a 94       	dec	r1
    4f16:	69 f7       	brne	.-38     	; 0x4ef2 <__udivmodsi4_loop>
    4f18:	60 95       	com	r22
    4f1a:	70 95       	com	r23
    4f1c:	80 95       	com	r24
    4f1e:	90 95       	com	r25
    4f20:	9b 01       	movw	r18, r22
    4f22:	ac 01       	movw	r20, r24
    4f24:	bd 01       	movw	r22, r26
    4f26:	cf 01       	movw	r24, r30
    4f28:	08 95       	ret

00004f2a <__umulhisi3>:
    4f2a:	a2 9f       	mul	r26, r18
    4f2c:	b0 01       	movw	r22, r0
    4f2e:	b3 9f       	mul	r27, r19
    4f30:	c0 01       	movw	r24, r0
    4f32:	a3 9f       	mul	r26, r19
    4f34:	70 0d       	add	r23, r0
    4f36:	81 1d       	adc	r24, r1
    4f38:	11 24       	eor	r1, r1
    4f3a:	91 1d       	adc	r25, r1
    4f3c:	b2 9f       	mul	r27, r18
    4f3e:	70 0d       	add	r23, r0
    4f40:	81 1d       	adc	r24, r1
    4f42:	11 24       	eor	r1, r1
    4f44:	91 1d       	adc	r25, r1
    4f46:	08 95       	ret

00004f48 <memcpy>:
    4f48:	fb 01       	movw	r30, r22
    4f4a:	dc 01       	movw	r26, r24
    4f4c:	02 c0       	rjmp	.+4      	; 0x4f52 <memcpy+0xa>
    4f4e:	01 90       	ld	r0, Z+
    4f50:	0d 92       	st	X+, r0
    4f52:	41 50       	subi	r20, 0x01	; 1
    4f54:	50 40       	sbci	r21, 0x00	; 0
    4f56:	d8 f7       	brcc	.-10     	; 0x4f4e <memcpy+0x6>
    4f58:	08 95       	ret

00004f5a <sprintf>:
    4f5a:	0f 93       	push	r16
    4f5c:	1f 93       	push	r17
    4f5e:	cf 93       	push	r28
    4f60:	df 93       	push	r29
    4f62:	cd b7       	in	r28, 0x3d	; 61
    4f64:	de b7       	in	r29, 0x3e	; 62
    4f66:	2e 97       	sbiw	r28, 0x0e	; 14
    4f68:	0f b6       	in	r0, 0x3f	; 63
    4f6a:	f8 94       	cli
    4f6c:	de bf       	out	0x3e, r29	; 62
    4f6e:	0f be       	out	0x3f, r0	; 63
    4f70:	cd bf       	out	0x3d, r28	; 61
    4f72:	0d 89       	ldd	r16, Y+21	; 0x15
    4f74:	1e 89       	ldd	r17, Y+22	; 0x16
    4f76:	86 e0       	ldi	r24, 0x06	; 6
    4f78:	8c 83       	std	Y+4, r24	; 0x04
    4f7a:	1a 83       	std	Y+2, r17	; 0x02
    4f7c:	09 83       	std	Y+1, r16	; 0x01
    4f7e:	8f ef       	ldi	r24, 0xFF	; 255
    4f80:	9f e7       	ldi	r25, 0x7F	; 127
    4f82:	9e 83       	std	Y+6, r25	; 0x06
    4f84:	8d 83       	std	Y+5, r24	; 0x05
    4f86:	ae 01       	movw	r20, r28
    4f88:	47 5e       	subi	r20, 0xE7	; 231
    4f8a:	5f 4f       	sbci	r21, 0xFF	; 255
    4f8c:	6f 89       	ldd	r22, Y+23	; 0x17
    4f8e:	78 8d       	ldd	r23, Y+24	; 0x18
    4f90:	ce 01       	movw	r24, r28
    4f92:	01 96       	adiw	r24, 0x01	; 1
    4f94:	10 d0       	rcall	.+32     	; 0x4fb6 <vfprintf>
    4f96:	ef 81       	ldd	r30, Y+7	; 0x07
    4f98:	f8 85       	ldd	r31, Y+8	; 0x08
    4f9a:	e0 0f       	add	r30, r16
    4f9c:	f1 1f       	adc	r31, r17
    4f9e:	10 82       	st	Z, r1
    4fa0:	2e 96       	adiw	r28, 0x0e	; 14
    4fa2:	0f b6       	in	r0, 0x3f	; 63
    4fa4:	f8 94       	cli
    4fa6:	de bf       	out	0x3e, r29	; 62
    4fa8:	0f be       	out	0x3f, r0	; 63
    4faa:	cd bf       	out	0x3d, r28	; 61
    4fac:	df 91       	pop	r29
    4fae:	cf 91       	pop	r28
    4fb0:	1f 91       	pop	r17
    4fb2:	0f 91       	pop	r16
    4fb4:	08 95       	ret

00004fb6 <vfprintf>:
    4fb6:	2f 92       	push	r2
    4fb8:	3f 92       	push	r3
    4fba:	4f 92       	push	r4
    4fbc:	5f 92       	push	r5
    4fbe:	6f 92       	push	r6
    4fc0:	7f 92       	push	r7
    4fc2:	8f 92       	push	r8
    4fc4:	9f 92       	push	r9
    4fc6:	af 92       	push	r10
    4fc8:	bf 92       	push	r11
    4fca:	cf 92       	push	r12
    4fcc:	df 92       	push	r13
    4fce:	ef 92       	push	r14
    4fd0:	ff 92       	push	r15
    4fd2:	0f 93       	push	r16
    4fd4:	1f 93       	push	r17
    4fd6:	cf 93       	push	r28
    4fd8:	df 93       	push	r29
    4fda:	cd b7       	in	r28, 0x3d	; 61
    4fdc:	de b7       	in	r29, 0x3e	; 62
    4fde:	2b 97       	sbiw	r28, 0x0b	; 11
    4fe0:	0f b6       	in	r0, 0x3f	; 63
    4fe2:	f8 94       	cli
    4fe4:	de bf       	out	0x3e, r29	; 62
    4fe6:	0f be       	out	0x3f, r0	; 63
    4fe8:	cd bf       	out	0x3d, r28	; 61
    4fea:	6c 01       	movw	r12, r24
    4fec:	7b 01       	movw	r14, r22
    4fee:	8a 01       	movw	r16, r20
    4ff0:	fc 01       	movw	r30, r24
    4ff2:	17 82       	std	Z+7, r1	; 0x07
    4ff4:	16 82       	std	Z+6, r1	; 0x06
    4ff6:	83 81       	ldd	r24, Z+3	; 0x03
    4ff8:	81 ff       	sbrs	r24, 1
    4ffa:	bf c1       	rjmp	.+894    	; 0x537a <vfprintf+0x3c4>
    4ffc:	ce 01       	movw	r24, r28
    4ffe:	01 96       	adiw	r24, 0x01	; 1
    5000:	3c 01       	movw	r6, r24
    5002:	f6 01       	movw	r30, r12
    5004:	93 81       	ldd	r25, Z+3	; 0x03
    5006:	f7 01       	movw	r30, r14
    5008:	93 fd       	sbrc	r25, 3
    500a:	85 91       	lpm	r24, Z+
    500c:	93 ff       	sbrs	r25, 3
    500e:	81 91       	ld	r24, Z+
    5010:	7f 01       	movw	r14, r30
    5012:	88 23       	and	r24, r24
    5014:	09 f4       	brne	.+2      	; 0x5018 <vfprintf+0x62>
    5016:	ad c1       	rjmp	.+858    	; 0x5372 <vfprintf+0x3bc>
    5018:	85 32       	cpi	r24, 0x25	; 37
    501a:	39 f4       	brne	.+14     	; 0x502a <vfprintf+0x74>
    501c:	93 fd       	sbrc	r25, 3
    501e:	85 91       	lpm	r24, Z+
    5020:	93 ff       	sbrs	r25, 3
    5022:	81 91       	ld	r24, Z+
    5024:	7f 01       	movw	r14, r30
    5026:	85 32       	cpi	r24, 0x25	; 37
    5028:	21 f4       	brne	.+8      	; 0x5032 <vfprintf+0x7c>
    502a:	b6 01       	movw	r22, r12
    502c:	90 e0       	ldi	r25, 0x00	; 0
    502e:	d6 d1       	rcall	.+940    	; 0x53dc <fputc>
    5030:	e8 cf       	rjmp	.-48     	; 0x5002 <vfprintf+0x4c>
    5032:	91 2c       	mov	r9, r1
    5034:	21 2c       	mov	r2, r1
    5036:	31 2c       	mov	r3, r1
    5038:	ff e1       	ldi	r31, 0x1F	; 31
    503a:	f3 15       	cp	r31, r3
    503c:	d8 f0       	brcs	.+54     	; 0x5074 <vfprintf+0xbe>
    503e:	8b 32       	cpi	r24, 0x2B	; 43
    5040:	79 f0       	breq	.+30     	; 0x5060 <vfprintf+0xaa>
    5042:	38 f4       	brcc	.+14     	; 0x5052 <vfprintf+0x9c>
    5044:	80 32       	cpi	r24, 0x20	; 32
    5046:	79 f0       	breq	.+30     	; 0x5066 <vfprintf+0xb0>
    5048:	83 32       	cpi	r24, 0x23	; 35
    504a:	a1 f4       	brne	.+40     	; 0x5074 <vfprintf+0xbe>
    504c:	23 2d       	mov	r18, r3
    504e:	20 61       	ori	r18, 0x10	; 16
    5050:	1d c0       	rjmp	.+58     	; 0x508c <vfprintf+0xd6>
    5052:	8d 32       	cpi	r24, 0x2D	; 45
    5054:	61 f0       	breq	.+24     	; 0x506e <vfprintf+0xb8>
    5056:	80 33       	cpi	r24, 0x30	; 48
    5058:	69 f4       	brne	.+26     	; 0x5074 <vfprintf+0xbe>
    505a:	23 2d       	mov	r18, r3
    505c:	21 60       	ori	r18, 0x01	; 1
    505e:	16 c0       	rjmp	.+44     	; 0x508c <vfprintf+0xd6>
    5060:	83 2d       	mov	r24, r3
    5062:	82 60       	ori	r24, 0x02	; 2
    5064:	38 2e       	mov	r3, r24
    5066:	e3 2d       	mov	r30, r3
    5068:	e4 60       	ori	r30, 0x04	; 4
    506a:	3e 2e       	mov	r3, r30
    506c:	2a c0       	rjmp	.+84     	; 0x50c2 <vfprintf+0x10c>
    506e:	f3 2d       	mov	r31, r3
    5070:	f8 60       	ori	r31, 0x08	; 8
    5072:	1d c0       	rjmp	.+58     	; 0x50ae <vfprintf+0xf8>
    5074:	37 fc       	sbrc	r3, 7
    5076:	2d c0       	rjmp	.+90     	; 0x50d2 <vfprintf+0x11c>
    5078:	20 ed       	ldi	r18, 0xD0	; 208
    507a:	28 0f       	add	r18, r24
    507c:	2a 30       	cpi	r18, 0x0A	; 10
    507e:	40 f0       	brcs	.+16     	; 0x5090 <vfprintf+0xda>
    5080:	8e 32       	cpi	r24, 0x2E	; 46
    5082:	b9 f4       	brne	.+46     	; 0x50b2 <vfprintf+0xfc>
    5084:	36 fc       	sbrc	r3, 6
    5086:	75 c1       	rjmp	.+746    	; 0x5372 <vfprintf+0x3bc>
    5088:	23 2d       	mov	r18, r3
    508a:	20 64       	ori	r18, 0x40	; 64
    508c:	32 2e       	mov	r3, r18
    508e:	19 c0       	rjmp	.+50     	; 0x50c2 <vfprintf+0x10c>
    5090:	36 fe       	sbrs	r3, 6
    5092:	06 c0       	rjmp	.+12     	; 0x50a0 <vfprintf+0xea>
    5094:	8a e0       	ldi	r24, 0x0A	; 10
    5096:	98 9e       	mul	r9, r24
    5098:	20 0d       	add	r18, r0
    509a:	11 24       	eor	r1, r1
    509c:	92 2e       	mov	r9, r18
    509e:	11 c0       	rjmp	.+34     	; 0x50c2 <vfprintf+0x10c>
    50a0:	ea e0       	ldi	r30, 0x0A	; 10
    50a2:	2e 9e       	mul	r2, r30
    50a4:	20 0d       	add	r18, r0
    50a6:	11 24       	eor	r1, r1
    50a8:	22 2e       	mov	r2, r18
    50aa:	f3 2d       	mov	r31, r3
    50ac:	f0 62       	ori	r31, 0x20	; 32
    50ae:	3f 2e       	mov	r3, r31
    50b0:	08 c0       	rjmp	.+16     	; 0x50c2 <vfprintf+0x10c>
    50b2:	8c 36       	cpi	r24, 0x6C	; 108
    50b4:	21 f4       	brne	.+8      	; 0x50be <vfprintf+0x108>
    50b6:	83 2d       	mov	r24, r3
    50b8:	80 68       	ori	r24, 0x80	; 128
    50ba:	38 2e       	mov	r3, r24
    50bc:	02 c0       	rjmp	.+4      	; 0x50c2 <vfprintf+0x10c>
    50be:	88 36       	cpi	r24, 0x68	; 104
    50c0:	41 f4       	brne	.+16     	; 0x50d2 <vfprintf+0x11c>
    50c2:	f7 01       	movw	r30, r14
    50c4:	93 fd       	sbrc	r25, 3
    50c6:	85 91       	lpm	r24, Z+
    50c8:	93 ff       	sbrs	r25, 3
    50ca:	81 91       	ld	r24, Z+
    50cc:	7f 01       	movw	r14, r30
    50ce:	81 11       	cpse	r24, r1
    50d0:	b3 cf       	rjmp	.-154    	; 0x5038 <vfprintf+0x82>
    50d2:	98 2f       	mov	r25, r24
    50d4:	9f 7d       	andi	r25, 0xDF	; 223
    50d6:	95 54       	subi	r25, 0x45	; 69
    50d8:	93 30       	cpi	r25, 0x03	; 3
    50da:	28 f4       	brcc	.+10     	; 0x50e6 <vfprintf+0x130>
    50dc:	0c 5f       	subi	r16, 0xFC	; 252
    50de:	1f 4f       	sbci	r17, 0xFF	; 255
    50e0:	9f e3       	ldi	r25, 0x3F	; 63
    50e2:	99 83       	std	Y+1, r25	; 0x01
    50e4:	0d c0       	rjmp	.+26     	; 0x5100 <vfprintf+0x14a>
    50e6:	83 36       	cpi	r24, 0x63	; 99
    50e8:	31 f0       	breq	.+12     	; 0x50f6 <vfprintf+0x140>
    50ea:	83 37       	cpi	r24, 0x73	; 115
    50ec:	71 f0       	breq	.+28     	; 0x510a <vfprintf+0x154>
    50ee:	83 35       	cpi	r24, 0x53	; 83
    50f0:	09 f0       	breq	.+2      	; 0x50f4 <vfprintf+0x13e>
    50f2:	55 c0       	rjmp	.+170    	; 0x519e <vfprintf+0x1e8>
    50f4:	20 c0       	rjmp	.+64     	; 0x5136 <vfprintf+0x180>
    50f6:	f8 01       	movw	r30, r16
    50f8:	80 81       	ld	r24, Z
    50fa:	89 83       	std	Y+1, r24	; 0x01
    50fc:	0e 5f       	subi	r16, 0xFE	; 254
    50fe:	1f 4f       	sbci	r17, 0xFF	; 255
    5100:	88 24       	eor	r8, r8
    5102:	83 94       	inc	r8
    5104:	91 2c       	mov	r9, r1
    5106:	53 01       	movw	r10, r6
    5108:	12 c0       	rjmp	.+36     	; 0x512e <vfprintf+0x178>
    510a:	28 01       	movw	r4, r16
    510c:	f2 e0       	ldi	r31, 0x02	; 2
    510e:	4f 0e       	add	r4, r31
    5110:	51 1c       	adc	r5, r1
    5112:	f8 01       	movw	r30, r16
    5114:	a0 80       	ld	r10, Z
    5116:	b1 80       	ldd	r11, Z+1	; 0x01
    5118:	36 fe       	sbrs	r3, 6
    511a:	03 c0       	rjmp	.+6      	; 0x5122 <vfprintf+0x16c>
    511c:	69 2d       	mov	r22, r9
    511e:	70 e0       	ldi	r23, 0x00	; 0
    5120:	02 c0       	rjmp	.+4      	; 0x5126 <vfprintf+0x170>
    5122:	6f ef       	ldi	r22, 0xFF	; 255
    5124:	7f ef       	ldi	r23, 0xFF	; 255
    5126:	c5 01       	movw	r24, r10
    5128:	4e d1       	rcall	.+668    	; 0x53c6 <strnlen>
    512a:	4c 01       	movw	r8, r24
    512c:	82 01       	movw	r16, r4
    512e:	f3 2d       	mov	r31, r3
    5130:	ff 77       	andi	r31, 0x7F	; 127
    5132:	3f 2e       	mov	r3, r31
    5134:	15 c0       	rjmp	.+42     	; 0x5160 <vfprintf+0x1aa>
    5136:	28 01       	movw	r4, r16
    5138:	22 e0       	ldi	r18, 0x02	; 2
    513a:	42 0e       	add	r4, r18
    513c:	51 1c       	adc	r5, r1
    513e:	f8 01       	movw	r30, r16
    5140:	a0 80       	ld	r10, Z
    5142:	b1 80       	ldd	r11, Z+1	; 0x01
    5144:	36 fe       	sbrs	r3, 6
    5146:	03 c0       	rjmp	.+6      	; 0x514e <vfprintf+0x198>
    5148:	69 2d       	mov	r22, r9
    514a:	70 e0       	ldi	r23, 0x00	; 0
    514c:	02 c0       	rjmp	.+4      	; 0x5152 <vfprintf+0x19c>
    514e:	6f ef       	ldi	r22, 0xFF	; 255
    5150:	7f ef       	ldi	r23, 0xFF	; 255
    5152:	c5 01       	movw	r24, r10
    5154:	2d d1       	rcall	.+602    	; 0x53b0 <strnlen_P>
    5156:	4c 01       	movw	r8, r24
    5158:	f3 2d       	mov	r31, r3
    515a:	f0 68       	ori	r31, 0x80	; 128
    515c:	3f 2e       	mov	r3, r31
    515e:	82 01       	movw	r16, r4
    5160:	33 fc       	sbrc	r3, 3
    5162:	19 c0       	rjmp	.+50     	; 0x5196 <vfprintf+0x1e0>
    5164:	82 2d       	mov	r24, r2
    5166:	90 e0       	ldi	r25, 0x00	; 0
    5168:	88 16       	cp	r8, r24
    516a:	99 06       	cpc	r9, r25
    516c:	a0 f4       	brcc	.+40     	; 0x5196 <vfprintf+0x1e0>
    516e:	b6 01       	movw	r22, r12
    5170:	80 e2       	ldi	r24, 0x20	; 32
    5172:	90 e0       	ldi	r25, 0x00	; 0
    5174:	33 d1       	rcall	.+614    	; 0x53dc <fputc>
    5176:	2a 94       	dec	r2
    5178:	f5 cf       	rjmp	.-22     	; 0x5164 <vfprintf+0x1ae>
    517a:	f5 01       	movw	r30, r10
    517c:	37 fc       	sbrc	r3, 7
    517e:	85 91       	lpm	r24, Z+
    5180:	37 fe       	sbrs	r3, 7
    5182:	81 91       	ld	r24, Z+
    5184:	5f 01       	movw	r10, r30
    5186:	b6 01       	movw	r22, r12
    5188:	90 e0       	ldi	r25, 0x00	; 0
    518a:	28 d1       	rcall	.+592    	; 0x53dc <fputc>
    518c:	21 10       	cpse	r2, r1
    518e:	2a 94       	dec	r2
    5190:	21 e0       	ldi	r18, 0x01	; 1
    5192:	82 1a       	sub	r8, r18
    5194:	91 08       	sbc	r9, r1
    5196:	81 14       	cp	r8, r1
    5198:	91 04       	cpc	r9, r1
    519a:	79 f7       	brne	.-34     	; 0x517a <vfprintf+0x1c4>
    519c:	e1 c0       	rjmp	.+450    	; 0x5360 <vfprintf+0x3aa>
    519e:	84 36       	cpi	r24, 0x64	; 100
    51a0:	11 f0       	breq	.+4      	; 0x51a6 <vfprintf+0x1f0>
    51a2:	89 36       	cpi	r24, 0x69	; 105
    51a4:	39 f5       	brne	.+78     	; 0x51f4 <vfprintf+0x23e>
    51a6:	f8 01       	movw	r30, r16
    51a8:	37 fe       	sbrs	r3, 7
    51aa:	07 c0       	rjmp	.+14     	; 0x51ba <vfprintf+0x204>
    51ac:	60 81       	ld	r22, Z
    51ae:	71 81       	ldd	r23, Z+1	; 0x01
    51b0:	82 81       	ldd	r24, Z+2	; 0x02
    51b2:	93 81       	ldd	r25, Z+3	; 0x03
    51b4:	0c 5f       	subi	r16, 0xFC	; 252
    51b6:	1f 4f       	sbci	r17, 0xFF	; 255
    51b8:	08 c0       	rjmp	.+16     	; 0x51ca <vfprintf+0x214>
    51ba:	60 81       	ld	r22, Z
    51bc:	71 81       	ldd	r23, Z+1	; 0x01
    51be:	07 2e       	mov	r0, r23
    51c0:	00 0c       	add	r0, r0
    51c2:	88 0b       	sbc	r24, r24
    51c4:	99 0b       	sbc	r25, r25
    51c6:	0e 5f       	subi	r16, 0xFE	; 254
    51c8:	1f 4f       	sbci	r17, 0xFF	; 255
    51ca:	f3 2d       	mov	r31, r3
    51cc:	ff 76       	andi	r31, 0x6F	; 111
    51ce:	3f 2e       	mov	r3, r31
    51d0:	97 ff       	sbrs	r25, 7
    51d2:	09 c0       	rjmp	.+18     	; 0x51e6 <vfprintf+0x230>
    51d4:	90 95       	com	r25
    51d6:	80 95       	com	r24
    51d8:	70 95       	com	r23
    51da:	61 95       	neg	r22
    51dc:	7f 4f       	sbci	r23, 0xFF	; 255
    51de:	8f 4f       	sbci	r24, 0xFF	; 255
    51e0:	9f 4f       	sbci	r25, 0xFF	; 255
    51e2:	f0 68       	ori	r31, 0x80	; 128
    51e4:	3f 2e       	mov	r3, r31
    51e6:	2a e0       	ldi	r18, 0x0A	; 10
    51e8:	30 e0       	ldi	r19, 0x00	; 0
    51ea:	a3 01       	movw	r20, r6
    51ec:	33 d1       	rcall	.+614    	; 0x5454 <__ultoa_invert>
    51ee:	88 2e       	mov	r8, r24
    51f0:	86 18       	sub	r8, r6
    51f2:	44 c0       	rjmp	.+136    	; 0x527c <vfprintf+0x2c6>
    51f4:	85 37       	cpi	r24, 0x75	; 117
    51f6:	31 f4       	brne	.+12     	; 0x5204 <vfprintf+0x24e>
    51f8:	23 2d       	mov	r18, r3
    51fa:	2f 7e       	andi	r18, 0xEF	; 239
    51fc:	b2 2e       	mov	r11, r18
    51fe:	2a e0       	ldi	r18, 0x0A	; 10
    5200:	30 e0       	ldi	r19, 0x00	; 0
    5202:	25 c0       	rjmp	.+74     	; 0x524e <vfprintf+0x298>
    5204:	93 2d       	mov	r25, r3
    5206:	99 7f       	andi	r25, 0xF9	; 249
    5208:	b9 2e       	mov	r11, r25
    520a:	8f 36       	cpi	r24, 0x6F	; 111
    520c:	c1 f0       	breq	.+48     	; 0x523e <vfprintf+0x288>
    520e:	18 f4       	brcc	.+6      	; 0x5216 <vfprintf+0x260>
    5210:	88 35       	cpi	r24, 0x58	; 88
    5212:	79 f0       	breq	.+30     	; 0x5232 <vfprintf+0x27c>
    5214:	ae c0       	rjmp	.+348    	; 0x5372 <vfprintf+0x3bc>
    5216:	80 37       	cpi	r24, 0x70	; 112
    5218:	19 f0       	breq	.+6      	; 0x5220 <vfprintf+0x26a>
    521a:	88 37       	cpi	r24, 0x78	; 120
    521c:	21 f0       	breq	.+8      	; 0x5226 <vfprintf+0x270>
    521e:	a9 c0       	rjmp	.+338    	; 0x5372 <vfprintf+0x3bc>
    5220:	e9 2f       	mov	r30, r25
    5222:	e0 61       	ori	r30, 0x10	; 16
    5224:	be 2e       	mov	r11, r30
    5226:	b4 fe       	sbrs	r11, 4
    5228:	0d c0       	rjmp	.+26     	; 0x5244 <vfprintf+0x28e>
    522a:	fb 2d       	mov	r31, r11
    522c:	f4 60       	ori	r31, 0x04	; 4
    522e:	bf 2e       	mov	r11, r31
    5230:	09 c0       	rjmp	.+18     	; 0x5244 <vfprintf+0x28e>
    5232:	34 fe       	sbrs	r3, 4
    5234:	0a c0       	rjmp	.+20     	; 0x524a <vfprintf+0x294>
    5236:	29 2f       	mov	r18, r25
    5238:	26 60       	ori	r18, 0x06	; 6
    523a:	b2 2e       	mov	r11, r18
    523c:	06 c0       	rjmp	.+12     	; 0x524a <vfprintf+0x294>
    523e:	28 e0       	ldi	r18, 0x08	; 8
    5240:	30 e0       	ldi	r19, 0x00	; 0
    5242:	05 c0       	rjmp	.+10     	; 0x524e <vfprintf+0x298>
    5244:	20 e1       	ldi	r18, 0x10	; 16
    5246:	30 e0       	ldi	r19, 0x00	; 0
    5248:	02 c0       	rjmp	.+4      	; 0x524e <vfprintf+0x298>
    524a:	20 e1       	ldi	r18, 0x10	; 16
    524c:	32 e0       	ldi	r19, 0x02	; 2
    524e:	f8 01       	movw	r30, r16
    5250:	b7 fe       	sbrs	r11, 7
    5252:	07 c0       	rjmp	.+14     	; 0x5262 <vfprintf+0x2ac>
    5254:	60 81       	ld	r22, Z
    5256:	71 81       	ldd	r23, Z+1	; 0x01
    5258:	82 81       	ldd	r24, Z+2	; 0x02
    525a:	93 81       	ldd	r25, Z+3	; 0x03
    525c:	0c 5f       	subi	r16, 0xFC	; 252
    525e:	1f 4f       	sbci	r17, 0xFF	; 255
    5260:	06 c0       	rjmp	.+12     	; 0x526e <vfprintf+0x2b8>
    5262:	60 81       	ld	r22, Z
    5264:	71 81       	ldd	r23, Z+1	; 0x01
    5266:	80 e0       	ldi	r24, 0x00	; 0
    5268:	90 e0       	ldi	r25, 0x00	; 0
    526a:	0e 5f       	subi	r16, 0xFE	; 254
    526c:	1f 4f       	sbci	r17, 0xFF	; 255
    526e:	a3 01       	movw	r20, r6
    5270:	f1 d0       	rcall	.+482    	; 0x5454 <__ultoa_invert>
    5272:	88 2e       	mov	r8, r24
    5274:	86 18       	sub	r8, r6
    5276:	fb 2d       	mov	r31, r11
    5278:	ff 77       	andi	r31, 0x7F	; 127
    527a:	3f 2e       	mov	r3, r31
    527c:	36 fe       	sbrs	r3, 6
    527e:	0d c0       	rjmp	.+26     	; 0x529a <vfprintf+0x2e4>
    5280:	23 2d       	mov	r18, r3
    5282:	2e 7f       	andi	r18, 0xFE	; 254
    5284:	a2 2e       	mov	r10, r18
    5286:	89 14       	cp	r8, r9
    5288:	58 f4       	brcc	.+22     	; 0x52a0 <vfprintf+0x2ea>
    528a:	34 fe       	sbrs	r3, 4
    528c:	0b c0       	rjmp	.+22     	; 0x52a4 <vfprintf+0x2ee>
    528e:	32 fc       	sbrc	r3, 2
    5290:	09 c0       	rjmp	.+18     	; 0x52a4 <vfprintf+0x2ee>
    5292:	83 2d       	mov	r24, r3
    5294:	8e 7e       	andi	r24, 0xEE	; 238
    5296:	a8 2e       	mov	r10, r24
    5298:	05 c0       	rjmp	.+10     	; 0x52a4 <vfprintf+0x2ee>
    529a:	b8 2c       	mov	r11, r8
    529c:	a3 2c       	mov	r10, r3
    529e:	03 c0       	rjmp	.+6      	; 0x52a6 <vfprintf+0x2f0>
    52a0:	b8 2c       	mov	r11, r8
    52a2:	01 c0       	rjmp	.+2      	; 0x52a6 <vfprintf+0x2f0>
    52a4:	b9 2c       	mov	r11, r9
    52a6:	a4 fe       	sbrs	r10, 4
    52a8:	0f c0       	rjmp	.+30     	; 0x52c8 <vfprintf+0x312>
    52aa:	fe 01       	movw	r30, r28
    52ac:	e8 0d       	add	r30, r8
    52ae:	f1 1d       	adc	r31, r1
    52b0:	80 81       	ld	r24, Z
    52b2:	80 33       	cpi	r24, 0x30	; 48
    52b4:	21 f4       	brne	.+8      	; 0x52be <vfprintf+0x308>
    52b6:	9a 2d       	mov	r25, r10
    52b8:	99 7e       	andi	r25, 0xE9	; 233
    52ba:	a9 2e       	mov	r10, r25
    52bc:	09 c0       	rjmp	.+18     	; 0x52d0 <vfprintf+0x31a>
    52be:	a2 fe       	sbrs	r10, 2
    52c0:	06 c0       	rjmp	.+12     	; 0x52ce <vfprintf+0x318>
    52c2:	b3 94       	inc	r11
    52c4:	b3 94       	inc	r11
    52c6:	04 c0       	rjmp	.+8      	; 0x52d0 <vfprintf+0x31a>
    52c8:	8a 2d       	mov	r24, r10
    52ca:	86 78       	andi	r24, 0x86	; 134
    52cc:	09 f0       	breq	.+2      	; 0x52d0 <vfprintf+0x31a>
    52ce:	b3 94       	inc	r11
    52d0:	a3 fc       	sbrc	r10, 3
    52d2:	10 c0       	rjmp	.+32     	; 0x52f4 <vfprintf+0x33e>
    52d4:	a0 fe       	sbrs	r10, 0
    52d6:	06 c0       	rjmp	.+12     	; 0x52e4 <vfprintf+0x32e>
    52d8:	b2 14       	cp	r11, r2
    52da:	80 f4       	brcc	.+32     	; 0x52fc <vfprintf+0x346>
    52dc:	28 0c       	add	r2, r8
    52de:	92 2c       	mov	r9, r2
    52e0:	9b 18       	sub	r9, r11
    52e2:	0d c0       	rjmp	.+26     	; 0x52fe <vfprintf+0x348>
    52e4:	b2 14       	cp	r11, r2
    52e6:	58 f4       	brcc	.+22     	; 0x52fe <vfprintf+0x348>
    52e8:	b6 01       	movw	r22, r12
    52ea:	80 e2       	ldi	r24, 0x20	; 32
    52ec:	90 e0       	ldi	r25, 0x00	; 0
    52ee:	76 d0       	rcall	.+236    	; 0x53dc <fputc>
    52f0:	b3 94       	inc	r11
    52f2:	f8 cf       	rjmp	.-16     	; 0x52e4 <vfprintf+0x32e>
    52f4:	b2 14       	cp	r11, r2
    52f6:	18 f4       	brcc	.+6      	; 0x52fe <vfprintf+0x348>
    52f8:	2b 18       	sub	r2, r11
    52fa:	02 c0       	rjmp	.+4      	; 0x5300 <vfprintf+0x34a>
    52fc:	98 2c       	mov	r9, r8
    52fe:	21 2c       	mov	r2, r1
    5300:	a4 fe       	sbrs	r10, 4
    5302:	0f c0       	rjmp	.+30     	; 0x5322 <vfprintf+0x36c>
    5304:	b6 01       	movw	r22, r12
    5306:	80 e3       	ldi	r24, 0x30	; 48
    5308:	90 e0       	ldi	r25, 0x00	; 0
    530a:	68 d0       	rcall	.+208    	; 0x53dc <fputc>
    530c:	a2 fe       	sbrs	r10, 2
    530e:	16 c0       	rjmp	.+44     	; 0x533c <vfprintf+0x386>
    5310:	a1 fc       	sbrc	r10, 1
    5312:	03 c0       	rjmp	.+6      	; 0x531a <vfprintf+0x364>
    5314:	88 e7       	ldi	r24, 0x78	; 120
    5316:	90 e0       	ldi	r25, 0x00	; 0
    5318:	02 c0       	rjmp	.+4      	; 0x531e <vfprintf+0x368>
    531a:	88 e5       	ldi	r24, 0x58	; 88
    531c:	90 e0       	ldi	r25, 0x00	; 0
    531e:	b6 01       	movw	r22, r12
    5320:	0c c0       	rjmp	.+24     	; 0x533a <vfprintf+0x384>
    5322:	8a 2d       	mov	r24, r10
    5324:	86 78       	andi	r24, 0x86	; 134
    5326:	51 f0       	breq	.+20     	; 0x533c <vfprintf+0x386>
    5328:	a1 fe       	sbrs	r10, 1
    532a:	02 c0       	rjmp	.+4      	; 0x5330 <vfprintf+0x37a>
    532c:	8b e2       	ldi	r24, 0x2B	; 43
    532e:	01 c0       	rjmp	.+2      	; 0x5332 <vfprintf+0x37c>
    5330:	80 e2       	ldi	r24, 0x20	; 32
    5332:	a7 fc       	sbrc	r10, 7
    5334:	8d e2       	ldi	r24, 0x2D	; 45
    5336:	b6 01       	movw	r22, r12
    5338:	90 e0       	ldi	r25, 0x00	; 0
    533a:	50 d0       	rcall	.+160    	; 0x53dc <fputc>
    533c:	89 14       	cp	r8, r9
    533e:	30 f4       	brcc	.+12     	; 0x534c <vfprintf+0x396>
    5340:	b6 01       	movw	r22, r12
    5342:	80 e3       	ldi	r24, 0x30	; 48
    5344:	90 e0       	ldi	r25, 0x00	; 0
    5346:	4a d0       	rcall	.+148    	; 0x53dc <fputc>
    5348:	9a 94       	dec	r9
    534a:	f8 cf       	rjmp	.-16     	; 0x533c <vfprintf+0x386>
    534c:	8a 94       	dec	r8
    534e:	f3 01       	movw	r30, r6
    5350:	e8 0d       	add	r30, r8
    5352:	f1 1d       	adc	r31, r1
    5354:	80 81       	ld	r24, Z
    5356:	b6 01       	movw	r22, r12
    5358:	90 e0       	ldi	r25, 0x00	; 0
    535a:	40 d0       	rcall	.+128    	; 0x53dc <fputc>
    535c:	81 10       	cpse	r8, r1
    535e:	f6 cf       	rjmp	.-20     	; 0x534c <vfprintf+0x396>
    5360:	22 20       	and	r2, r2
    5362:	09 f4       	brne	.+2      	; 0x5366 <vfprintf+0x3b0>
    5364:	4e ce       	rjmp	.-868    	; 0x5002 <vfprintf+0x4c>
    5366:	b6 01       	movw	r22, r12
    5368:	80 e2       	ldi	r24, 0x20	; 32
    536a:	90 e0       	ldi	r25, 0x00	; 0
    536c:	37 d0       	rcall	.+110    	; 0x53dc <fputc>
    536e:	2a 94       	dec	r2
    5370:	f7 cf       	rjmp	.-18     	; 0x5360 <vfprintf+0x3aa>
    5372:	f6 01       	movw	r30, r12
    5374:	86 81       	ldd	r24, Z+6	; 0x06
    5376:	97 81       	ldd	r25, Z+7	; 0x07
    5378:	02 c0       	rjmp	.+4      	; 0x537e <vfprintf+0x3c8>
    537a:	8f ef       	ldi	r24, 0xFF	; 255
    537c:	9f ef       	ldi	r25, 0xFF	; 255
    537e:	2b 96       	adiw	r28, 0x0b	; 11
    5380:	0f b6       	in	r0, 0x3f	; 63
    5382:	f8 94       	cli
    5384:	de bf       	out	0x3e, r29	; 62
    5386:	0f be       	out	0x3f, r0	; 63
    5388:	cd bf       	out	0x3d, r28	; 61
    538a:	df 91       	pop	r29
    538c:	cf 91       	pop	r28
    538e:	1f 91       	pop	r17
    5390:	0f 91       	pop	r16
    5392:	ff 90       	pop	r15
    5394:	ef 90       	pop	r14
    5396:	df 90       	pop	r13
    5398:	cf 90       	pop	r12
    539a:	bf 90       	pop	r11
    539c:	af 90       	pop	r10
    539e:	9f 90       	pop	r9
    53a0:	8f 90       	pop	r8
    53a2:	7f 90       	pop	r7
    53a4:	6f 90       	pop	r6
    53a6:	5f 90       	pop	r5
    53a8:	4f 90       	pop	r4
    53aa:	3f 90       	pop	r3
    53ac:	2f 90       	pop	r2
    53ae:	08 95       	ret

000053b0 <strnlen_P>:
    53b0:	fc 01       	movw	r30, r24
    53b2:	05 90       	lpm	r0, Z+
    53b4:	61 50       	subi	r22, 0x01	; 1
    53b6:	70 40       	sbci	r23, 0x00	; 0
    53b8:	01 10       	cpse	r0, r1
    53ba:	d8 f7       	brcc	.-10     	; 0x53b2 <strnlen_P+0x2>
    53bc:	80 95       	com	r24
    53be:	90 95       	com	r25
    53c0:	8e 0f       	add	r24, r30
    53c2:	9f 1f       	adc	r25, r31
    53c4:	08 95       	ret

000053c6 <strnlen>:
    53c6:	fc 01       	movw	r30, r24
    53c8:	61 50       	subi	r22, 0x01	; 1
    53ca:	70 40       	sbci	r23, 0x00	; 0
    53cc:	01 90       	ld	r0, Z+
    53ce:	01 10       	cpse	r0, r1
    53d0:	d8 f7       	brcc	.-10     	; 0x53c8 <strnlen+0x2>
    53d2:	80 95       	com	r24
    53d4:	90 95       	com	r25
    53d6:	8e 0f       	add	r24, r30
    53d8:	9f 1f       	adc	r25, r31
    53da:	08 95       	ret

000053dc <fputc>:
    53dc:	0f 93       	push	r16
    53de:	1f 93       	push	r17
    53e0:	cf 93       	push	r28
    53e2:	df 93       	push	r29
    53e4:	fb 01       	movw	r30, r22
    53e6:	23 81       	ldd	r18, Z+3	; 0x03
    53e8:	21 fd       	sbrc	r18, 1
    53ea:	03 c0       	rjmp	.+6      	; 0x53f2 <fputc+0x16>
    53ec:	8f ef       	ldi	r24, 0xFF	; 255
    53ee:	9f ef       	ldi	r25, 0xFF	; 255
    53f0:	2c c0       	rjmp	.+88     	; 0x544a <fputc+0x6e>
    53f2:	22 ff       	sbrs	r18, 2
    53f4:	16 c0       	rjmp	.+44     	; 0x5422 <fputc+0x46>
    53f6:	46 81       	ldd	r20, Z+6	; 0x06
    53f8:	57 81       	ldd	r21, Z+7	; 0x07
    53fa:	24 81       	ldd	r18, Z+4	; 0x04
    53fc:	35 81       	ldd	r19, Z+5	; 0x05
    53fe:	42 17       	cp	r20, r18
    5400:	53 07       	cpc	r21, r19
    5402:	44 f4       	brge	.+16     	; 0x5414 <fputc+0x38>
    5404:	a0 81       	ld	r26, Z
    5406:	b1 81       	ldd	r27, Z+1	; 0x01
    5408:	9d 01       	movw	r18, r26
    540a:	2f 5f       	subi	r18, 0xFF	; 255
    540c:	3f 4f       	sbci	r19, 0xFF	; 255
    540e:	31 83       	std	Z+1, r19	; 0x01
    5410:	20 83       	st	Z, r18
    5412:	8c 93       	st	X, r24
    5414:	26 81       	ldd	r18, Z+6	; 0x06
    5416:	37 81       	ldd	r19, Z+7	; 0x07
    5418:	2f 5f       	subi	r18, 0xFF	; 255
    541a:	3f 4f       	sbci	r19, 0xFF	; 255
    541c:	37 83       	std	Z+7, r19	; 0x07
    541e:	26 83       	std	Z+6, r18	; 0x06
    5420:	14 c0       	rjmp	.+40     	; 0x544a <fputc+0x6e>
    5422:	8b 01       	movw	r16, r22
    5424:	ec 01       	movw	r28, r24
    5426:	fb 01       	movw	r30, r22
    5428:	00 84       	ldd	r0, Z+8	; 0x08
    542a:	f1 85       	ldd	r31, Z+9	; 0x09
    542c:	e0 2d       	mov	r30, r0
    542e:	09 95       	icall
    5430:	89 2b       	or	r24, r25
    5432:	e1 f6       	brne	.-72     	; 0x53ec <fputc+0x10>
    5434:	d8 01       	movw	r26, r16
    5436:	16 96       	adiw	r26, 0x06	; 6
    5438:	8d 91       	ld	r24, X+
    543a:	9c 91       	ld	r25, X
    543c:	17 97       	sbiw	r26, 0x07	; 7
    543e:	01 96       	adiw	r24, 0x01	; 1
    5440:	17 96       	adiw	r26, 0x07	; 7
    5442:	9c 93       	st	X, r25
    5444:	8e 93       	st	-X, r24
    5446:	16 97       	sbiw	r26, 0x06	; 6
    5448:	ce 01       	movw	r24, r28
    544a:	df 91       	pop	r29
    544c:	cf 91       	pop	r28
    544e:	1f 91       	pop	r17
    5450:	0f 91       	pop	r16
    5452:	08 95       	ret

00005454 <__ultoa_invert>:
    5454:	fa 01       	movw	r30, r20
    5456:	aa 27       	eor	r26, r26
    5458:	28 30       	cpi	r18, 0x08	; 8
    545a:	51 f1       	breq	.+84     	; 0x54b0 <__ultoa_invert+0x5c>
    545c:	20 31       	cpi	r18, 0x10	; 16
    545e:	81 f1       	breq	.+96     	; 0x54c0 <__ultoa_invert+0x6c>
    5460:	e8 94       	clt
    5462:	6f 93       	push	r22
    5464:	6e 7f       	andi	r22, 0xFE	; 254
    5466:	6e 5f       	subi	r22, 0xFE	; 254
    5468:	7f 4f       	sbci	r23, 0xFF	; 255
    546a:	8f 4f       	sbci	r24, 0xFF	; 255
    546c:	9f 4f       	sbci	r25, 0xFF	; 255
    546e:	af 4f       	sbci	r26, 0xFF	; 255
    5470:	b1 e0       	ldi	r27, 0x01	; 1
    5472:	3e d0       	rcall	.+124    	; 0x54f0 <__ultoa_invert+0x9c>
    5474:	b4 e0       	ldi	r27, 0x04	; 4
    5476:	3c d0       	rcall	.+120    	; 0x54f0 <__ultoa_invert+0x9c>
    5478:	67 0f       	add	r22, r23
    547a:	78 1f       	adc	r23, r24
    547c:	89 1f       	adc	r24, r25
    547e:	9a 1f       	adc	r25, r26
    5480:	a1 1d       	adc	r26, r1
    5482:	68 0f       	add	r22, r24
    5484:	79 1f       	adc	r23, r25
    5486:	8a 1f       	adc	r24, r26
    5488:	91 1d       	adc	r25, r1
    548a:	a1 1d       	adc	r26, r1
    548c:	6a 0f       	add	r22, r26
    548e:	71 1d       	adc	r23, r1
    5490:	81 1d       	adc	r24, r1
    5492:	91 1d       	adc	r25, r1
    5494:	a1 1d       	adc	r26, r1
    5496:	20 d0       	rcall	.+64     	; 0x54d8 <__ultoa_invert+0x84>
    5498:	09 f4       	brne	.+2      	; 0x549c <__ultoa_invert+0x48>
    549a:	68 94       	set
    549c:	3f 91       	pop	r19
    549e:	2a e0       	ldi	r18, 0x0A	; 10
    54a0:	26 9f       	mul	r18, r22
    54a2:	11 24       	eor	r1, r1
    54a4:	30 19       	sub	r19, r0
    54a6:	30 5d       	subi	r19, 0xD0	; 208
    54a8:	31 93       	st	Z+, r19
    54aa:	de f6       	brtc	.-74     	; 0x5462 <__ultoa_invert+0xe>
    54ac:	cf 01       	movw	r24, r30
    54ae:	08 95       	ret
    54b0:	46 2f       	mov	r20, r22
    54b2:	47 70       	andi	r20, 0x07	; 7
    54b4:	40 5d       	subi	r20, 0xD0	; 208
    54b6:	41 93       	st	Z+, r20
    54b8:	b3 e0       	ldi	r27, 0x03	; 3
    54ba:	0f d0       	rcall	.+30     	; 0x54da <__ultoa_invert+0x86>
    54bc:	c9 f7       	brne	.-14     	; 0x54b0 <__ultoa_invert+0x5c>
    54be:	f6 cf       	rjmp	.-20     	; 0x54ac <__ultoa_invert+0x58>
    54c0:	46 2f       	mov	r20, r22
    54c2:	4f 70       	andi	r20, 0x0F	; 15
    54c4:	40 5d       	subi	r20, 0xD0	; 208
    54c6:	4a 33       	cpi	r20, 0x3A	; 58
    54c8:	18 f0       	brcs	.+6      	; 0x54d0 <__ultoa_invert+0x7c>
    54ca:	49 5d       	subi	r20, 0xD9	; 217
    54cc:	31 fd       	sbrc	r19, 1
    54ce:	40 52       	subi	r20, 0x20	; 32
    54d0:	41 93       	st	Z+, r20
    54d2:	02 d0       	rcall	.+4      	; 0x54d8 <__ultoa_invert+0x84>
    54d4:	a9 f7       	brne	.-22     	; 0x54c0 <__ultoa_invert+0x6c>
    54d6:	ea cf       	rjmp	.-44     	; 0x54ac <__ultoa_invert+0x58>
    54d8:	b4 e0       	ldi	r27, 0x04	; 4
    54da:	a6 95       	lsr	r26
    54dc:	97 95       	ror	r25
    54de:	87 95       	ror	r24
    54e0:	77 95       	ror	r23
    54e2:	67 95       	ror	r22
    54e4:	ba 95       	dec	r27
    54e6:	c9 f7       	brne	.-14     	; 0x54da <__ultoa_invert+0x86>
    54e8:	00 97       	sbiw	r24, 0x00	; 0
    54ea:	61 05       	cpc	r22, r1
    54ec:	71 05       	cpc	r23, r1
    54ee:	08 95       	ret
    54f0:	9b 01       	movw	r18, r22
    54f2:	ac 01       	movw	r20, r24
    54f4:	0a 2e       	mov	r0, r26
    54f6:	06 94       	lsr	r0
    54f8:	57 95       	ror	r21
    54fa:	47 95       	ror	r20
    54fc:	37 95       	ror	r19
    54fe:	27 95       	ror	r18
    5500:	ba 95       	dec	r27
    5502:	c9 f7       	brne	.-14     	; 0x54f6 <__ultoa_invert+0xa2>
    5504:	62 0f       	add	r22, r18
    5506:	73 1f       	adc	r23, r19
    5508:	84 1f       	adc	r24, r20
    550a:	95 1f       	adc	r25, r21
    550c:	a0 1d       	adc	r26, r0
    550e:	08 95       	ret

00005510 <eeprom_read_byte>:
    5510:	e1 99       	sbic	0x1c, 1	; 28
    5512:	fe cf       	rjmp	.-4      	; 0x5510 <eeprom_read_byte>
    5514:	9f bb       	out	0x1f, r25	; 31
    5516:	8e bb       	out	0x1e, r24	; 30
    5518:	e0 9a       	sbi	0x1c, 0	; 28
    551a:	99 27       	eor	r25, r25
    551c:	8d b3       	in	r24, 0x1d	; 29
    551e:	08 95       	ret

00005520 <eeprom_update_byte>:
    5520:	26 2f       	mov	r18, r22

00005522 <eeprom_update_r18>:
    5522:	e1 99       	sbic	0x1c, 1	; 28
    5524:	fe cf       	rjmp	.-4      	; 0x5522 <eeprom_update_r18>
    5526:	9f bb       	out	0x1f, r25	; 31
    5528:	8e bb       	out	0x1e, r24	; 30
    552a:	e0 9a       	sbi	0x1c, 0	; 28
    552c:	01 97       	sbiw	r24, 0x01	; 1
    552e:	0d b2       	in	r0, 0x1d	; 29
    5530:	02 16       	cp	r0, r18
    5532:	31 f0       	breq	.+12     	; 0x5540 <eeprom_update_r18+0x1e>
    5534:	2d bb       	out	0x1d, r18	; 29
    5536:	0f b6       	in	r0, 0x3f	; 63
    5538:	f8 94       	cli
    553a:	e2 9a       	sbi	0x1c, 2	; 28
    553c:	e1 9a       	sbi	0x1c, 1	; 28
    553e:	0f be       	out	0x3f, r0	; 63
    5540:	08 95       	ret

00005542 <_exit>:
    5542:	f8 94       	cli

00005544 <__stop_program>:
    5544:	ff cf       	rjmp	.-2      	; 0x5544 <__stop_program>
